
Home-Security-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7c8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  0800d978  0800d978  0000e978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc68  0800dc68  0000f100  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc68  0800dc68  0000ec68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc70  0800dc70  0000f100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc70  0800dc70  0000ec70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dc74  0800dc74  0000ec74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800dc78  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f100  2**0
                  CONTENTS
 10 .bss          00006874  20000100  20000100  0000f100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006974  20006974  0000f100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002ca82  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000615d  00000000  00000000  0003bbb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002628  00000000  00000000  00041d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d8f  00000000  00000000  00044338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008d52  00000000  00000000  000460c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ee4e  00000000  00000000  0004ee19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5c23  00000000  00000000  0007dc67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017388a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2f4  00000000  00000000  001738d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0017dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d960 	.word	0x0800d960

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800d960 	.word	0x0800d960

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f4:	f001 f9e6 	bl	80018c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f8:	f000 f876 	bl	80005e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004fc:	f000 fb1a 	bl	8000b34 <MX_GPIO_Init>
	MX_CRC_Init();
 8000500:	f000 f8dc 	bl	80006bc <MX_CRC_Init>
	MX_DMA2D_Init();
 8000504:	f000 f8ee 	bl	80006e4 <MX_DMA2D_Init>
	MX_FMC_Init();
 8000508:	f000 fac4 	bl	8000a94 <MX_FMC_Init>
	MX_I2C3_Init();
 800050c:	f000 f91c 	bl	8000748 <MX_I2C3_Init>
	MX_LTDC_Init();
 8000510:	f000 f95a 	bl	80007c8 <MX_LTDC_Init>
	MX_SPI5_Init();
 8000514:	f000 fa0e 	bl	8000934 <MX_SPI5_Init>
	MX_TIM1_Init();
 8000518:	f000 fa42 	bl	80009a0 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800051c:	f000 fa90 	bl	8000a40 <MX_USART1_UART_Init>
	MX_SPI4_Init();
 8000520:	f000 f9d2 	bl	80008c8 <MX_SPI4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000524:	f009 f934 	bl	8009790 <osKernelInitialize>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of alertTimer */
	alertTimerHandle = osTimerNew(alertTimerCallback, osTimerOnce, NULL,
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <main+0xac>)
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	481c      	ldr	r0, [pc, #112]	@ (80005a0 <main+0xb0>)
 8000530:	f009 fa3a 	bl	80099a8 <osTimerNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a1b      	ldr	r2, [pc, #108]	@ (80005a4 <main+0xb4>)
 8000538:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800053a:	4a1b      	ldr	r2, [pc, #108]	@ (80005a8 <main+0xb8>)
 800053c:	2100      	movs	r1, #0
 800053e:	481b      	ldr	r0, [pc, #108]	@ (80005ac <main+0xbc>)
 8000540:	f009 f970 	bl	8009824 <osThreadNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a1a      	ldr	r2, [pc, #104]	@ (80005b0 <main+0xc0>)
 8000548:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motionTask */
	motionTaskHandle = osThreadNew(StartMotionTask, NULL,
 800054a:	4a1a      	ldr	r2, [pc, #104]	@ (80005b4 <main+0xc4>)
 800054c:	2100      	movs	r1, #0
 800054e:	481a      	ldr	r0, [pc, #104]	@ (80005b8 <main+0xc8>)
 8000550:	f009 f968 	bl	8009824 <osThreadNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a19      	ldr	r2, [pc, #100]	@ (80005bc <main+0xcc>)
 8000558:	6013      	str	r3, [r2, #0]
			&motionTask_attributes);

	/* creation of captureTask */
	captureTaskHandle = osThreadNew(StartCaptureTask, NULL,
 800055a:	4a19      	ldr	r2, [pc, #100]	@ (80005c0 <main+0xd0>)
 800055c:	2100      	movs	r1, #0
 800055e:	4819      	ldr	r0, [pc, #100]	@ (80005c4 <main+0xd4>)
 8000560:	f009 f960 	bl	8009824 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <main+0xd8>)
 8000568:	6013      	str	r3, [r2, #0]
			&captureTask_attributes);

	/* creation of alertTask */
	alertTaskHandle = osThreadNew(StartAlertTask, NULL, &alertTask_attributes);
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <main+0xdc>)
 800056c:	2100      	movs	r1, #0
 800056e:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <main+0xe0>)
 8000570:	f009 f958 	bl	8009824 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a17      	ldr	r2, [pc, #92]	@ (80005d4 <main+0xe4>)
 8000578:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Create the event(s) */
	/* creation of motionEvent */
	motionEventHandle = osEventFlagsNew(&motionEvent_attributes);
 800057a:	4817      	ldr	r0, [pc, #92]	@ (80005d8 <main+0xe8>)
 800057c:	f009 fabe 	bl	8009afc <osEventFlagsNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a16      	ldr	r2, [pc, #88]	@ (80005dc <main+0xec>)
 8000584:	6013      	str	r3, [r2, #0]

	/* creation of alertEvent */
	alertEventHandle = osEventFlagsNew(&alertEvent_attributes);
 8000586:	4816      	ldr	r0, [pc, #88]	@ (80005e0 <main+0xf0>)
 8000588:	f009 fab8 	bl	8009afc <osEventFlagsNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a15      	ldr	r2, [pc, #84]	@ (80005e4 <main+0xf4>)
 8000590:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000592:	f009 f921 	bl	80097d8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0xa6>
 800059a:	bf00      	nop
 800059c:	0800dc20 	.word	0x0800dc20
 80005a0:	08000f39 	.word	0x08000f39
 80005a4:	200003e4 	.word	0x200003e4
 80005a8:	0800db90 	.word	0x0800db90
 80005ac:	08000e15 	.word	0x08000e15
 80005b0:	200003d4 	.word	0x200003d4
 80005b4:	0800dbb4 	.word	0x0800dbb4
 80005b8:	08000e35 	.word	0x08000e35
 80005bc:	200003d8 	.word	0x200003d8
 80005c0:	0800dbd8 	.word	0x0800dbd8
 80005c4:	08000e95 	.word	0x08000e95
 80005c8:	200003dc 	.word	0x200003dc
 80005cc:	0800dbfc 	.word	0x0800dbfc
 80005d0:	08000ed9 	.word	0x08000ed9
 80005d4:	200003e0 	.word	0x200003e0
 80005d8:	0800dc30 	.word	0x0800dc30
 80005dc:	200003e8 	.word	0x200003e8
 80005e0:	0800dc40 	.word	0x0800dc40
 80005e4:	200003ec 	.word	0x200003ec

080005e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	2230      	movs	r2, #48	@ 0x30
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f00d f978 	bl	800d8ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	4b28      	ldr	r3, [pc, #160]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a27      	ldr	r2, [pc, #156]	@ (80006b4 <SystemClock_Config+0xcc>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b25      	ldr	r3, [pc, #148]	@ (80006b4 <SystemClock_Config+0xcc>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	60bb      	str	r3, [r7, #8]
 8000626:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	2300      	movs	r3, #0
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	4b22      	ldr	r3, [pc, #136]	@ (80006b8 <SystemClock_Config+0xd0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a20      	ldr	r2, [pc, #128]	@ (80006b8 <SystemClock_Config+0xd0>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b1e      	ldr	r3, [pc, #120]	@ (80006b8 <SystemClock_Config+0xd0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000650:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000652:	2302      	movs	r3, #2
 8000654:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000656:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800065c:	2304      	movs	r3, #4
 800065e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000660:	2348      	movs	r3, #72	@ 0x48
 8000662:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000668:	2303      	movs	r3, #3
 800066a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f003 fde9 	bl	8004248 <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x98>
		Error_Handler();
 800067c:	f000 fc84 	bl	8000f88 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000684:	2302      	movs	r3, #2
 8000686:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000690:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2102      	movs	r1, #2
 800069c:	4618      	mov	r0, r3
 800069e:	f004 f84b 	bl	8004738 <HAL_RCC_ClockConfig>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0xc4>
		Error_Handler();
 80006a8:	f000 fc6e 	bl	8000f88 <Error_Handler>
	}
}
 80006ac:	bf00      	nop
 80006ae:	3750      	adds	r7, #80	@ 0x50
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_CRC_Init+0x20>)
 80006c2:	4a07      	ldr	r2, [pc, #28]	@ (80006e0 <MX_CRC_Init+0x24>)
 80006c4:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80006c6:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_CRC_Init+0x20>)
 80006c8:	f001 fa44 	bl	8001b54 <HAL_CRC_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_CRC_Init+0x1a>
		Error_Handler();
 80006d2:	f000 fc59 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	2000011c 	.word	0x2000011c
 80006e0:	40023000 	.word	0x40023000

080006e4 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 80006ea:	4a16      	ldr	r2, [pc, #88]	@ (8000744 <MX_DMA2D_Init+0x60>)
 80006ec:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80006ee:	4b14      	ldr	r3, [pc, #80]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006f4:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000700:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 8000702:	2200      	movs	r2, #0
 8000704:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000706:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 8000708:	2200      	movs	r2, #0
 800070a:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 800070e:	2200      	movs	r2, #0
 8000710:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 8000714:	2200      	movs	r2, #0
 8000716:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000718:	4809      	ldr	r0, [pc, #36]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 800071a:	f001 fa37 	bl	8001b8c <HAL_DMA2D_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_DMA2D_Init+0x44>
		Error_Handler();
 8000724:	f000 fc30 	bl	8000f88 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000728:	2101      	movs	r1, #1
 800072a:	4805      	ldr	r0, [pc, #20]	@ (8000740 <MX_DMA2D_Init+0x5c>)
 800072c:	f001 fb88 	bl	8001e40 <HAL_DMA2D_ConfigLayer>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_DMA2D_Init+0x56>
		Error_Handler();
 8000736:	f000 fc27 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000124 	.word	0x20000124
 8000744:	4002b000 	.word	0x4002b000

08000748 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 800074c:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <MX_I2C3_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <MX_I2C3_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8000752:	4b1a      	ldr	r3, [pc, #104]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	@ (80007c4 <MX_I2C3_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b18      	ldr	r3, [pc, #96]	@ (80007bc <MX_I2C3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800076a:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <MX_I2C3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8000772:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b10      	ldr	r3, [pc, #64]	@ (80007bc <MX_I2C3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b0f      	ldr	r3, [pc, #60]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 8000784:	480d      	ldr	r0, [pc, #52]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000786:	f001 fde5 	bl	8002354 <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000790:	f000 fbfa 	bl	8000f88 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 8000794:	2100      	movs	r1, #0
 8000796:	4809      	ldr	r0, [pc, #36]	@ (80007bc <MX_I2C3_Init+0x74>)
 8000798:	f001 ff20 	bl	80025dc <HAL_I2CEx_ConfigAnalogFilter>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80007a2:	f000 fbf1 	bl	8000f88 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80007a6:	2100      	movs	r1, #0
 80007a8:	4804      	ldr	r0, [pc, #16]	@ (80007bc <MX_I2C3_Init+0x74>)
 80007aa:	f001 ff53 	bl	8002654 <HAL_I2CEx_ConfigDigitalFilter>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_I2C3_Init+0x70>
		Error_Handler();
 80007b4:	f000 fbe8 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000164 	.word	0x20000164
 80007c0:	40005c00 	.word	0x40005c00
 80007c4:	000186a0 	.word	0x000186a0

080007c8 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2234      	movs	r2, #52	@ 0x34
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00d f889 	bl	800d8ec <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80007da:	4b39      	ldr	r3, [pc, #228]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80007dc:	4a39      	ldr	r2, [pc, #228]	@ (80008c4 <MX_LTDC_Init+0xfc>)
 80007de:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007e0:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007e6:	4b36      	ldr	r3, [pc, #216]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007ec:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007f2:	4b33      	ldr	r3, [pc, #204]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 80007f8:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80007fa:	2209      	movs	r2, #9
 80007fc:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 80007fe:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 8000800:	2201      	movs	r2, #1
 8000802:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 8000804:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 8000806:	221d      	movs	r2, #29
 8000808:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 800080c:	2203      	movs	r2, #3
 800080e:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000810:	4b2b      	ldr	r3, [pc, #172]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 8000812:	f240 120d 	movw	r2, #269	@ 0x10d
 8000816:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000818:	4b29      	ldr	r3, [pc, #164]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 800081a:	f240 1243 	movw	r2, #323	@ 0x143
 800081e:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 8000820:	4b27      	ldr	r3, [pc, #156]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 8000822:	f240 1217 	movw	r2, #279	@ 0x117
 8000826:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 8000828:	4b25      	ldr	r3, [pc, #148]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 800082a:	f240 1247 	movw	r2, #327	@ 0x147
 800082e:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000830:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 8000832:	2200      	movs	r2, #0
 8000834:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000838:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000840:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000848:	481d      	ldr	r0, [pc, #116]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 800084a:	f001 ff43 	bl	80026d4 <HAL_LTDC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_LTDC_Init+0x90>
		Error_Handler();
 8000854:	f000 fb98 	bl	8000f88 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 800085c:	23f0      	movs	r3, #240	@ 0xf0
 800085e:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 8000864:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000868:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800086a:	2302      	movs	r3, #2
 800086c:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 800086e:	23ff      	movs	r3, #255	@ 0xff
 8000870:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000876:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800087a:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800087c:	2307      	movs	r3, #7
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 8000880:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 8000886:	23f0      	movs	r3, #240	@ 0xf0
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 800088a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800088e:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_LTDC_Init+0xf8>)
 80008aa:	f002 f8a5 	bl	80029f8 <HAL_LTDC_ConfigLayer>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_LTDC_Init+0xf0>
		Error_Handler();
 80008b4:	f000 fb68 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	3738      	adds	r7, #56	@ 0x38
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	200001b8 	.word	0x200001b8
 80008c4:	40016800 	.word	0x40016800

080008c8 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 80008cc:	4b17      	ldr	r3, [pc, #92]	@ (800092c <MX_SPI4_Init+0x64>)
 80008ce:	4a18      	ldr	r2, [pc, #96]	@ (8000930 <MX_SPI4_Init+0x68>)
 80008d0:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80008d2:	4b16      	ldr	r3, [pc, #88]	@ (800092c <MX_SPI4_Init+0x64>)
 80008d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008d8:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008da:	4b14      	ldr	r3, [pc, #80]	@ (800092c <MX_SPI4_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_SPI4_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_SPI4_Init+0x64>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_SPI4_Init+0x64>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_SPI4_Init+0x64>)
 80008f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008f8:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_SPI4_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_SPI4_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_SPI4_Init+0x64>)
 8000908:	2200      	movs	r2, #0
 800090a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_SPI4_Init+0x64>)
 800090e:	2200      	movs	r2, #0
 8000910:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 10;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_SPI4_Init+0x64>)
 8000914:	220a      	movs	r2, #10
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_SPI4_Init+0x64>)
 800091a:	f004 fb53 	bl	8004fc4 <HAL_SPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_SPI4_Init+0x60>
		Error_Handler();
 8000924:	f000 fb30 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000260 	.word	0x20000260
 8000930:	40013400 	.word	0x40013400

08000934 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000938:	4b17      	ldr	r3, [pc, #92]	@ (8000998 <MX_SPI5_Init+0x64>)
 800093a:	4a18      	ldr	r2, [pc, #96]	@ (800099c <MX_SPI5_Init+0x68>)
 800093c:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 800093e:	4b16      	ldr	r3, [pc, #88]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000940:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000944:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000946:	4b14      	ldr	r3, [pc, #80]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800094c:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_SPI5_Init+0x64>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000952:	4b11      	ldr	r3, [pc, #68]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	@ (8000998 <MX_SPI5_Init+0x64>)
 800095a:	2200      	movs	r2, #0
 800095c:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 800095e:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000960:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000964:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000966:	4b0c      	ldr	r3, [pc, #48]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000968:	2218      	movs	r2, #24
 800096a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800096c:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <MX_SPI5_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <MX_SPI5_Init+0x64>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 800097e:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000980:	220a      	movs	r2, #10
 8000982:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000984:	4804      	ldr	r0, [pc, #16]	@ (8000998 <MX_SPI5_Init+0x64>)
 8000986:	f004 fb1d 	bl	8004fc4 <HAL_SPI_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_SPI5_Init+0x60>
		Error_Handler();
 8000990:	f000 fafa 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	200002b8 	.word	0x200002b8
 800099c:	40015000 	.word	0x40015000

080009a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b086      	sub	sp, #24
 80009a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009b4:	463b      	mov	r3, r7
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <MX_TIM1_Init+0x9c>)
 80009c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80009dc:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80009e8:	4813      	ldr	r0, [pc, #76]	@ (8000a38 <MX_TIM1_Init+0x98>)
 80009ea:	f004 fb74 	bl	80050d6 <HAL_TIM_Base_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0x58>
		Error_Handler();
 80009f4:	f000 fac8 	bl	8000f88 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009fc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80009fe:	f107 0308 	add.w	r3, r7, #8
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_TIM1_Init+0x98>)
 8000a06:	f004 fd15 	bl	8005434 <HAL_TIM_ConfigClockSource>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x74>
		Error_Handler();
 8000a10:	f000 faba 	bl	8000f88 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a1c:	463b      	mov	r3, r7
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4805      	ldr	r0, [pc, #20]	@ (8000a38 <MX_TIM1_Init+0x98>)
 8000a22:	f004 ff3d 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000a2c:	f000 faac 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000a30:	bf00      	nop
 8000a32:	3718      	adds	r7, #24
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000310 	.word	0x20000310
 8000a3c:	40010000 	.word	0x40010000

08000a40 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a44:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	@ (8000a90 <MX_USART1_UART_Init+0x50>)
 8000a48:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a50:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a76:	4805      	ldr	r0, [pc, #20]	@ (8000a8c <MX_USART1_UART_Init+0x4c>)
 8000a78:	f004 ffa2 	bl	80059c0 <HAL_UART_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a82:	f000 fa81 	bl	8000f88 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20000358 	.word	0x20000358
 8000a90:	40011000 	.word	0x40011000

08000a94 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b088      	sub	sp, #32
 8000a98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	601a      	str	r2, [r3, #0]
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	609a      	str	r2, [r3, #8]
 8000aa4:	60da      	str	r2, [r3, #12]
 8000aa6:	611a      	str	r2, [r3, #16]
 8000aa8:	615a      	str	r2, [r3, #20]
 8000aaa:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000aae:	4a20      	ldr	r2, [pc, #128]	@ (8000b30 <MX_FMC_Init+0x9c>)
 8000ab0:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ac6:	2210      	movs	r2, #16
 8000ac8:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aca:	4b18      	ldr	r3, [pc, #96]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000acc:	2240      	movs	r2, #64	@ 0x40
 8000ace:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ad2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000ad6:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ad8:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ade:	4b13      	ldr	r3, [pc, #76]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ae0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ae4:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000aee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000af4:	2302      	movs	r3, #2
 8000af6:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000af8:	2307      	movs	r3, #7
 8000afa:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000afc:	2304      	movs	r3, #4
 8000afe:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000b00:	2307      	movs	r3, #7
 8000b02:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000b04:	2303      	movs	r3, #3
 8000b06:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000b10:	1d3b      	adds	r3, r7, #4
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	@ (8000b2c <MX_FMC_Init+0x98>)
 8000b16:	f004 fa21 	bl	8004f5c <HAL_SDRAM_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_FMC_Init+0x90>
		Error_Handler();
 8000b20:	f000 fa32 	bl	8000f88 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000b24:	bf00      	nop
 8000b26:	3720      	adds	r7, #32
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200003a0 	.word	0x200003a0
 8000b30:	a0000140 	.word	0xa0000140

08000b34 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b08e      	sub	sp, #56	@ 0x38
 8000b38:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
 8000b48:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	623b      	str	r3, [r7, #32]
 8000b4e:	4b86      	ldr	r3, [pc, #536]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	4a85      	ldr	r2, [pc, #532]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b54:	f043 0310 	orr.w	r3, r3, #16
 8000b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5a:	4b83      	ldr	r3, [pc, #524]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5e:	f003 0310 	and.w	r3, r3, #16
 8000b62:	623b      	str	r3, [r7, #32]
 8000b64:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	4a7e      	ldr	r2, [pc, #504]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b70:	f043 0304 	orr.w	r3, r3, #4
 8000b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b76:	4b7c      	ldr	r3, [pc, #496]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7a:	f003 0304 	and.w	r3, r3, #4
 8000b7e:	61fb      	str	r3, [r7, #28]
 8000b80:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	4b78      	ldr	r3, [pc, #480]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a77      	ldr	r2, [pc, #476]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b8c:	f043 0320 	orr.w	r3, r3, #32
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b75      	ldr	r3, [pc, #468]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0320 	and.w	r3, r3, #32
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	4b71      	ldr	r3, [pc, #452]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a70      	ldr	r2, [pc, #448]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000ba8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b6e      	ldr	r3, [pc, #440]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a69      	ldr	r2, [pc, #420]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b67      	ldr	r3, [pc, #412]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b63      	ldr	r3, [pc, #396]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a62      	ldr	r2, [pc, #392]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b60      	ldr	r3, [pc, #384]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000bfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b59      	ldr	r3, [pc, #356]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b55      	ldr	r3, [pc, #340]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a54      	ldr	r2, [pc, #336]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b52      	ldr	r3, [pc, #328]	@ (8000d68 <MX_GPIO_Init+0x234>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2116      	movs	r1, #22
 8000c2e:	484f      	ldr	r0, [pc, #316]	@ (8000d6c <MX_GPIO_Init+0x238>)
 8000c30:	f001 fb44 	bl	80022bc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2180      	movs	r1, #128	@ 0x80
 8000c38:	484d      	ldr	r0, [pc, #308]	@ (8000d70 <MX_GPIO_Init+0x23c>)
 8000c3a:	f001 fb3f 	bl	80022bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c44:	484b      	ldr	r0, [pc, #300]	@ (8000d74 <MX_GPIO_Init+0x240>)
 8000c46:	f001 fb39 	bl	80022bc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c50:	4849      	ldr	r0, [pc, #292]	@ (8000d78 <MX_GPIO_Init+0x244>)
 8000c52:	f001 fb33 	bl	80022bc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000c56:	2316      	movs	r3, #22
 8000c58:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	483f      	ldr	r0, [pc, #252]	@ (8000d6c <MX_GPIO_Init+0x238>)
 8000c6e:	f001 f979 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000c72:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c78:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	4619      	mov	r1, r3
 8000c88:	4839      	ldr	r0, [pc, #228]	@ (8000d70 <MX_GPIO_Init+0x23c>)
 8000c8a:	f001 f96b 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c92:	2301      	movs	r3, #1
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4832      	ldr	r0, [pc, #200]	@ (8000d70 <MX_GPIO_Init+0x23c>)
 8000ca6:	f001 f95d 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000caa:	2320      	movs	r3, #32
 8000cac:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	482b      	ldr	r0, [pc, #172]	@ (8000d6c <MX_GPIO_Init+0x238>)
 8000cc0:	f001 f950 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cc4:	2304      	movs	r3, #4
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4829      	ldr	r0, [pc, #164]	@ (8000d7c <MX_GPIO_Init+0x248>)
 8000cd8:	f001 f944 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000cdc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ce0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <MX_GPIO_Init+0x240>)
 8000cf2:	f001 f937 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000cf6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4819      	ldr	r0, [pc, #100]	@ (8000d74 <MX_GPIO_Init+0x240>)
 8000d10:	f001 f928 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4810      	ldr	r0, [pc, #64]	@ (8000d6c <MX_GPIO_Init+0x238>)
 8000d2c:	f001 f91a 	bl	8001f64 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000d30:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d34:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	@ (8000d78 <MX_GPIO_Init+0x244>)
 8000d4a:	f001 f90b 	bl	8001f64 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2105      	movs	r1, #5
 8000d52:	2017      	movs	r0, #23
 8000d54:	f000 fed4 	bl	8001b00 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d58:	2017      	movs	r0, #23
 8000d5a:	f000 feed 	bl	8001b38 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d5e:	bf00      	nop
 8000d60:	3738      	adds	r7, #56	@ 0x38
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020800 	.word	0x40020800
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	40021800 	.word	0x40021800
 8000d7c:	40020400 	.word	0x40020400

08000d80 <CDC_Print>:

/* USER CODE BEGIN 4 */
void CDC_Print(const char *msg) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS((uint8_t*) msg, strlen(msg));
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff fa31 	bl	80001f0 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f00c f93d 	bl	800d014 <CDC_Transmit_HS>
	HAL_Delay(1000);
 8000d9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d9e:	f000 fdd3 	bl	8001948 <HAL_Delay>
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	80fb      	strh	r3, [r7, #6]
	CDC_Print("Interrupt triggered!\r\n");
 8000db6:	4811      	ldr	r0, [pc, #68]	@ (8000dfc <HAL_GPIO_EXTI_Callback+0x50>)
 8000db8:	f7ff ffe2 	bl	8000d80 <CDC_Print>

	if (GPIO_Pin == GPIO_PIN_8) {
 8000dbc:	88fb      	ldrh	r3, [r7, #6]
 8000dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dc2:	d113      	bne.n	8000dec <HAL_GPIO_EXTI_Callback+0x40>
		CDC_Print("Setting motion event flag...\r\n");
 8000dc4:	480e      	ldr	r0, [pc, #56]	@ (8000e00 <HAL_GPIO_EXTI_Callback+0x54>)
 8000dc6:	f7ff ffdb 	bl	8000d80 <CDC_Print>
		osEventFlagsSet(motionEventHandle, 0x01);
 8000dca:	4b0e      	ldr	r3, [pc, #56]	@ (8000e04 <HAL_GPIO_EXTI_Callback+0x58>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f008 fed3 	bl	8009b7c <osEventFlagsSet>

		CDC_Print("Starting 10 second timeout...\r\n");
 8000dd6:	480c      	ldr	r0, [pc, #48]	@ (8000e08 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000dd8:	f7ff ffd2 	bl	8000d80 <CDC_Print>
		osTimerStart(alertTimerHandle, 10000);
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8000e0c <HAL_GPIO_EXTI_Callback+0x60>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000de4:	4618      	mov	r0, r3
 8000de6:	f008 fe5b 	bl	8009aa0 <osTimerStart>
	} else {
		CDC_Print("Unexpected GPIO pin\r\n");
	}
}
 8000dea:	e002      	b.n	8000df2 <HAL_GPIO_EXTI_Callback+0x46>
		CDC_Print("Unexpected GPIO pin\r\n");
 8000dec:	4808      	ldr	r0, [pc, #32]	@ (8000e10 <HAL_GPIO_EXTI_Callback+0x64>)
 8000dee:	f7ff ffc7 	bl	8000d80 <CDC_Print>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	0800d9cc 	.word	0x0800d9cc
 8000e00:	0800d9e4 	.word	0x0800d9e4
 8000e04:	200003e8 	.word	0x200003e8
 8000e08:	0800da04 	.word	0x0800da04
 8000e0c:	200003e4 	.word	0x200003e4
 8000e10:	0800da24 	.word	0x0800da24

08000e14 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000e1c:	f00c f83c 	bl	800ce98 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	CDC_Print("Waiting in default task...\r\n");
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <StartDefaultTask+0x1c>)
 8000e22:	f7ff ffad 	bl	8000d80 <CDC_Print>
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8000e26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e2a:	f008 fd8d 	bl	8009948 <osDelay>
 8000e2e:	e7fa      	b.n	8000e26 <StartDefaultTask+0x12>
 8000e30:	0800da3c 	.word	0x0800da3c

08000e34 <StartMotionTask>:
 * @brief  Function implementing the motionTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotionTask */
void StartMotionTask(void *argument) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotionTask */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(motionEventHandle, 0x01, osFlagsWaitAny,
 8000e3c:	4b10      	ldr	r3, [pc, #64]	@ (8000e80 <StartMotionTask+0x4c>)
 8000e3e:	6818      	ldr	r0, [r3, #0]
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	2200      	movs	r2, #0
 8000e46:	2101      	movs	r1, #1
 8000e48:	f008 ff2c 	bl	8009ca4 <osEventFlagsWait>
		osWaitForever);

		CDC_Print("Motion task started\r\n");
 8000e4c:	480d      	ldr	r0, [pc, #52]	@ (8000e84 <StartMotionTask+0x50>)
 8000e4e:	f7ff ff97 	bl	8000d80 <CDC_Print>

		CDC_Print("Setting alert event flag...\r\n");
 8000e52:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <StartMotionTask+0x54>)
 8000e54:	f7ff ff94 	bl	8000d80 <CDC_Print>
		osEventFlagsSet(alertEventHandle, 0x01);
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <StartMotionTask+0x58>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 fe8c 	bl	8009b7c <osEventFlagsSet>

		CDC_Print("Clearing motion event flag...\r\n");
 8000e64:	480a      	ldr	r0, [pc, #40]	@ (8000e90 <StartMotionTask+0x5c>)
 8000e66:	f7ff ff8b 	bl	8000d80 <CDC_Print>
		osEventFlagsClear(motionEventHandle, 0x01);
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <StartMotionTask+0x4c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2101      	movs	r1, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f008 fec5 	bl	8009c00 <osEventFlagsClear>

		osDelay(10);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f008 fd66 	bl	8009948 <osDelay>
		osEventFlagsWait(motionEventHandle, 0x01, osFlagsWaitAny,
 8000e7c:	bf00      	nop
 8000e7e:	e7dd      	b.n	8000e3c <StartMotionTask+0x8>
 8000e80:	200003e8 	.word	0x200003e8
 8000e84:	0800da5c 	.word	0x0800da5c
 8000e88:	0800da74 	.word	0x0800da74
 8000e8c:	200003ec 	.word	0x200003ec
 8000e90:	0800da94 	.word	0x0800da94

08000e94 <StartCaptureTask>:
 * @brief Function implementing the captureTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCaptureTask */
void StartCaptureTask(void *argument) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCaptureTask */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(alertEventHandle, 0x01, osFlagsWaitAny,
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <StartCaptureTask+0x3c>)
 8000e9e:	6818      	ldr	r0, [r3, #0]
 8000ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	f008 fefc 	bl	8009ca4 <osEventFlagsWait>
		osWaitForever);

		CDC_Print("Capture task started\r\n");
 8000eac:	4809      	ldr	r0, [pc, #36]	@ (8000ed4 <StartCaptureTask+0x40>)
 8000eae:	f7ff ff67 	bl	8000d80 <CDC_Print>

		while (osEventFlagsGet(alertEventHandle) & 0x01) {
 8000eb2:	e002      	b.n	8000eba <StartCaptureTask+0x26>
			// capture image
			// display image
			osDelay(100);
 8000eb4:	2064      	movs	r0, #100	@ 0x64
 8000eb6:	f008 fd47 	bl	8009948 <osDelay>
		while (osEventFlagsGet(alertEventHandle) & 0x01) {
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <StartCaptureTask+0x3c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f008 fecf 	bl	8009c62 <osEventFlagsGet>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f2      	bne.n	8000eb4 <StartCaptureTask+0x20>
		osEventFlagsWait(alertEventHandle, 0x01, osFlagsWaitAny,
 8000ece:	e7e5      	b.n	8000e9c <StartCaptureTask+0x8>
 8000ed0:	200003ec 	.word	0x200003ec
 8000ed4:	0800dab4 	.word	0x0800dab4

08000ed8 <StartAlertTask>:
 * @brief Function implementing the alertTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAlertTask */
void StartAlertTask(void *argument) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAlertTask */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(alertEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <StartAlertTask+0x50>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2101      	movs	r1, #1
 8000eec:	f008 feda 	bl	8009ca4 <osEventFlagsWait>

		CDC_Print("Alert task started\r\n");
 8000ef0:	480e      	ldr	r0, [pc, #56]	@ (8000f2c <StartAlertTask+0x54>)
 8000ef2:	f7ff ff45 	bl	8000d80 <CDC_Print>

		while (osEventFlagsGet(alertEventHandle) & 0x01) {
 8000ef6:	e00b      	b.n	8000f10 <StartAlertTask+0x38>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000ef8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000efc:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <StartAlertTask+0x58>)
 8000efe:	f001 f9f6 	bl	80022ee <HAL_GPIO_TogglePin>
			CDC_Print("LED toggled\r\n");
 8000f02:	480c      	ldr	r0, [pc, #48]	@ (8000f34 <StartAlertTask+0x5c>)
 8000f04:	f7ff ff3c 	bl	8000d80 <CDC_Print>
			osDelay(500);
 8000f08:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f0c:	f008 fd1c 	bl	8009948 <osDelay>
		while (osEventFlagsGet(alertEventHandle) & 0x01) {
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <StartAlertTask+0x50>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f008 fea4 	bl	8009c62 <osEventFlagsGet>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1e9      	bne.n	8000ef8 <StartAlertTask+0x20>
		osEventFlagsWait(alertEventHandle, 0x01, osFlagsWaitAny, osWaitForever);
 8000f24:	e7dc      	b.n	8000ee0 <StartAlertTask+0x8>
 8000f26:	bf00      	nop
 8000f28:	200003ec 	.word	0x200003ec
 8000f2c:	0800dacc 	.word	0x0800dacc
 8000f30:	40021800 	.word	0x40021800
 8000f34:	0800dae4 	.word	0x0800dae4

08000f38 <alertTimerCallback>:
	}
	/* USER CODE END StartAlertTask */
}

/* alertTimerCallback function */
void alertTimerCallback(void *argument) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN alertTimerCallback */
	CDC_Print("No motion detected for 10 seconds, clearing alert flag...\r\n");
 8000f40:	4806      	ldr	r0, [pc, #24]	@ (8000f5c <alertTimerCallback+0x24>)
 8000f42:	f7ff ff1d 	bl	8000d80 <CDC_Print>
	osEventFlagsClear(alertEventHandle, 0x01);
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <alertTimerCallback+0x28>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f008 fe57 	bl	8009c00 <osEventFlagsClear>
	/* USER CODE END alertTimerCallback */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	0800daf4 	.word	0x0800daf4
 8000f60:	200003ec 	.word	0x200003ec

08000f64 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f76:	f000 fcc7 	bl	8001908 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40001000 	.word	0x40001000

08000f88 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000f90:	bf00      	nop
 8000f92:	e7fd      	b.n	8000f90 <Error_Handler+0x8>

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_MspInit+0x54>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fa2:	4a11      	ldr	r2, [pc, #68]	@ (8000fe8 <HAL_MspInit+0x54>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <HAL_MspInit+0x54>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe8 <HAL_MspInit+0x54>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe8 <HAL_MspInit+0x54>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fc6:	4b08      	ldr	r3, [pc, #32]	@ (8000fe8 <HAL_MspInit+0x54>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	f06f 0001 	mvn.w	r0, #1
 8000fda:	f000 fd91 	bl	8001b00 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0b      	ldr	r2, [pc, #44]	@ (8001028 <HAL_CRC_MspInit+0x3c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d10d      	bne.n	800101a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0a      	ldr	r3, [pc, #40]	@ (800102c <HAL_CRC_MspInit+0x40>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a09      	ldr	r2, [pc, #36]	@ (800102c <HAL_CRC_MspInit+0x40>)
 8001008:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_CRC_MspInit+0x40>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023000 	.word	0x40023000
 800102c:	40023800 	.word	0x40023800

08001030 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0e      	ldr	r2, [pc, #56]	@ (8001078 <HAL_DMA2D_MspInit+0x48>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d115      	bne.n	800106e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	4b0d      	ldr	r3, [pc, #52]	@ (800107c <HAL_DMA2D_MspInit+0x4c>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <HAL_DMA2D_MspInit+0x4c>)
 800104c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b0a      	ldr	r3, [pc, #40]	@ (800107c <HAL_DMA2D_MspInit+0x4c>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2105      	movs	r1, #5
 8001062:	205a      	movs	r0, #90	@ 0x5a
 8001064:	f000 fd4c 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001068:	205a      	movs	r0, #90	@ 0x5a
 800106a:	f000 fd65 	bl	8001b38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	4002b000 	.word	0x4002b000
 800107c:	40023800 	.word	0x40023800

08001080 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b08a      	sub	sp, #40	@ 0x28
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a29      	ldr	r2, [pc, #164]	@ (8001144 <HAL_I2C_MspInit+0xc4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d14b      	bne.n	800113a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b28      	ldr	r3, [pc, #160]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	4a27      	ldr	r2, [pc, #156]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b2:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b21      	ldr	r3, [pc, #132]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a20      	ldr	r2, [pc, #128]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80010da:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e0:	2312      	movs	r3, #18
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010ec:	2304      	movs	r3, #4
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4815      	ldr	r0, [pc, #84]	@ (800114c <HAL_I2C_MspInit+0xcc>)
 80010f8:	f000 ff34 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80010fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001100:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001102:	2312      	movs	r3, #18
 8001104:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001106:	2301      	movs	r3, #1
 8001108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800110e:	2304      	movs	r3, #4
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	480d      	ldr	r0, [pc, #52]	@ (8001150 <HAL_I2C_MspInit+0xd0>)
 800111a:	f000 ff23 	bl	8001f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 8001128:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800112c:	6413      	str	r3, [r2, #64]	@ 0x40
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_I2C_MspInit+0xc8>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001132:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	@ 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40005c00 	.word	0x40005c00
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09a      	sub	sp, #104	@ 0x68
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800116c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001170:	2230      	movs	r2, #48	@ 0x30
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f00c fbb9 	bl	800d8ec <memset>
  if(hltdc->Instance==LTDC)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a85      	ldr	r2, [pc, #532]	@ (8001394 <HAL_LTDC_MspInit+0x240>)
 8001180:	4293      	cmp	r3, r2
 8001182:	f040 8102 	bne.w	800138a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001186:	2308      	movs	r3, #8
 8001188:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800118a:	2332      	movs	r3, #50	@ 0x32
 800118c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800118e:	2302      	movs	r3, #2
 8001190:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001192:	2300      	movs	r3, #0
 8001194:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800119a:	4618      	mov	r0, r3
 800119c:	f003 fd1e 	bl	8004bdc <HAL_RCCEx_PeriphCLKConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80011a6:	f7ff feef 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	623b      	str	r3, [r7, #32]
 80011ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a79      	ldr	r2, [pc, #484]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b77      	ldr	r3, [pc, #476]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011c2:	623b      	str	r3, [r7, #32]
 80011c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]
 80011ca:	4b73      	ldr	r3, [pc, #460]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a72      	ldr	r2, [pc, #456]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011d0:	f043 0320 	orr.w	r3, r3, #32
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b70      	ldr	r3, [pc, #448]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	61bb      	str	r3, [r7, #24]
 80011e6:	4b6c      	ldr	r3, [pc, #432]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a6b      	ldr	r2, [pc, #428]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b69      	ldr	r3, [pc, #420]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	61bb      	str	r3, [r7, #24]
 80011fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	4b65      	ldr	r3, [pc, #404]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a64      	ldr	r2, [pc, #400]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b62      	ldr	r3, [pc, #392]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	617b      	str	r3, [r7, #20]
 8001218:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b5e      	ldr	r3, [pc, #376]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a5d      	ldr	r2, [pc, #372]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b5b      	ldr	r3, [pc, #364]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b57      	ldr	r3, [pc, #348]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a56      	ldr	r2, [pc, #344]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001240:	f043 0304 	orr.w	r3, r3, #4
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b54      	ldr	r3, [pc, #336]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0304 	and.w	r3, r3, #4
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b50      	ldr	r3, [pc, #320]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a4f      	ldr	r2, [pc, #316]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b4d      	ldr	r3, [pc, #308]	@ (8001398 <HAL_LTDC_MspInit+0x244>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800126e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001272:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001280:	230e      	movs	r3, #14
 8001282:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001288:	4619      	mov	r1, r3
 800128a:	4844      	ldr	r0, [pc, #272]	@ (800139c <HAL_LTDC_MspInit+0x248>)
 800128c:	f000 fe6a 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001290:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001294:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a2:	230e      	movs	r3, #14
 80012a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012aa:	4619      	mov	r1, r3
 80012ac:	483c      	ldr	r0, [pc, #240]	@ (80013a0 <HAL_LTDC_MspInit+0x24c>)
 80012ae:	f000 fe59 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80012b2:	2303      	movs	r3, #3
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012c2:	2309      	movs	r3, #9
 80012c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ca:	4619      	mov	r1, r3
 80012cc:	4835      	ldr	r0, [pc, #212]	@ (80013a4 <HAL_LTDC_MspInit+0x250>)
 80012ce:	f000 fe49 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012d2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012e4:	230e      	movs	r3, #14
 80012e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ec:	4619      	mov	r1, r3
 80012ee:	482d      	ldr	r0, [pc, #180]	@ (80013a4 <HAL_LTDC_MspInit+0x250>)
 80012f0:	f000 fe38 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80012f4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80012f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001302:	2300      	movs	r3, #0
 8001304:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001306:	230e      	movs	r3, #14
 8001308:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800130a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130e:	4619      	mov	r1, r3
 8001310:	4825      	ldr	r0, [pc, #148]	@ (80013a8 <HAL_LTDC_MspInit+0x254>)
 8001312:	f000 fe27 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001316:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800131a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001328:	230e      	movs	r3, #14
 800132a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800132c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001330:	4619      	mov	r1, r3
 8001332:	481e      	ldr	r0, [pc, #120]	@ (80013ac <HAL_LTDC_MspInit+0x258>)
 8001334:	f000 fe16 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001338:	2348      	movs	r3, #72	@ 0x48
 800133a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001348:	230e      	movs	r3, #14
 800134a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800134c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001350:	4619      	mov	r1, r3
 8001352:	4817      	ldr	r0, [pc, #92]	@ (80013b0 <HAL_LTDC_MspInit+0x25c>)
 8001354:	f000 fe06 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001358:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800135c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001366:	2300      	movs	r3, #0
 8001368:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800136a:	2309      	movs	r3, #9
 800136c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800136e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001372:	4619      	mov	r1, r3
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <HAL_LTDC_MspInit+0x254>)
 8001376:	f000 fdf5 	bl	8001f64 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2105      	movs	r1, #5
 800137e:	2058      	movs	r0, #88	@ 0x58
 8001380:	f000 fbbe 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001384:	2058      	movs	r0, #88	@ 0x58
 8001386:	f000 fbd7 	bl	8001b38 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800138a:	bf00      	nop
 800138c:	3768      	adds	r7, #104	@ 0x68
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40016800 	.word	0x40016800
 8001398:	40023800 	.word	0x40023800
 800139c:	40021400 	.word	0x40021400
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020c00 	.word	0x40020c00

080013b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	@ 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a32      	ldr	r2, [pc, #200]	@ (800149c <HAL_SPI_MspInit+0xe8>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12c      	bne.n	8001430 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 80013dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013de:	4a30      	ldr	r2, [pc, #192]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 80013e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	4b2a      	ldr	r3, [pc, #168]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a29      	ldr	r2, [pc, #164]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800140e:	2364      	movs	r3, #100	@ 0x64
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800141e:	2305      	movs	r3, #5
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	481e      	ldr	r0, [pc, #120]	@ (80014a4 <HAL_SPI_MspInit+0xf0>)
 800142a:	f000 fd9b 	bl	8001f64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800142e:	e031      	b.n	8001494 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a1c      	ldr	r2, [pc, #112]	@ (80014a8 <HAL_SPI_MspInit+0xf4>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d12c      	bne.n	8001494 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b18      	ldr	r3, [pc, #96]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001442:	4a17      	ldr	r2, [pc, #92]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 8001444:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001448:	6453      	str	r3, [r2, #68]	@ 0x44
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a10      	ldr	r2, [pc, #64]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 8001460:	f043 0320 	orr.w	r3, r3, #32
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <HAL_SPI_MspInit+0xec>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0320 	and.w	r3, r3, #32
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001472:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001484:	2305      	movs	r3, #5
 8001486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <HAL_SPI_MspInit+0xf8>)
 8001490:	f000 fd68 	bl	8001f64 <HAL_GPIO_Init>
}
 8001494:	bf00      	nop
 8001496:	3730      	adds	r7, #48	@ 0x30
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40013400 	.word	0x40013400
 80014a0:	40023800 	.word	0x40023800
 80014a4:	40021000 	.word	0x40021000
 80014a8:	40015000 	.word	0x40015000
 80014ac:	40021400 	.word	0x40021400

080014b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_TIM_Base_MspInit+0x3c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <HAL_UART_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_UART_MspInit+0x88>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_UART_MspInit+0x88>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800154e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001560:	2307      	movs	r3, #7
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <HAL_UART_MspInit+0x8c>)
 800156c:	f000 fcfa 	bl	8001f64 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40011000 	.word	0x40011000
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001598:	4b3b      	ldr	r3, [pc, #236]	@ (8001688 <HAL_FMC_MspInit+0x104>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d16f      	bne.n	8001680 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015a0:	4b39      	ldr	r3, [pc, #228]	@ (8001688 <HAL_FMC_MspInit+0x104>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b38      	ldr	r3, [pc, #224]	@ (800168c <HAL_FMC_MspInit+0x108>)
 80015ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ae:	4a37      	ldr	r2, [pc, #220]	@ (800168c <HAL_FMC_MspInit+0x108>)
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6393      	str	r3, [r2, #56]	@ 0x38
 80015b6:	4b35      	ldr	r3, [pc, #212]	@ (800168c <HAL_FMC_MspInit+0x108>)
 80015b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015c2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015c6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d4:	230c      	movs	r3, #12
 80015d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	4619      	mov	r1, r3
 80015dc:	482c      	ldr	r0, [pc, #176]	@ (8001690 <HAL_FMC_MspInit+0x10c>)
 80015de:	f000 fcc1 	bl	8001f64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80015e2:	2301      	movs	r3, #1
 80015e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4826      	ldr	r0, [pc, #152]	@ (8001694 <HAL_FMC_MspInit+0x110>)
 80015fc:	f000 fcb2 	bl	8001f64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001600:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001604:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001612:	230c      	movs	r3, #12
 8001614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	481f      	ldr	r0, [pc, #124]	@ (8001698 <HAL_FMC_MspInit+0x114>)
 800161c:	f000 fca2 	bl	8001f64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001620:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001624:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	4818      	ldr	r0, [pc, #96]	@ (800169c <HAL_FMC_MspInit+0x118>)
 800163c:	f000 fc92 	bl	8001f64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001640:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001644:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4811      	ldr	r0, [pc, #68]	@ (80016a0 <HAL_FMC_MspInit+0x11c>)
 800165c:	f000 fc82 	bl	8001f64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001660:	2360      	movs	r3, #96	@ 0x60
 8001662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001664:	2302      	movs	r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166c:	2303      	movs	r3, #3
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001670:	230c      	movs	r3, #12
 8001672:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	4619      	mov	r1, r3
 8001678:	480a      	ldr	r0, [pc, #40]	@ (80016a4 <HAL_FMC_MspInit+0x120>)
 800167a:	f000 fc73 	bl	8001f64 <HAL_GPIO_Init>
 800167e:	e000      	b.n	8001682 <HAL_FMC_MspInit+0xfe>
    return;
 8001680:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200003f0 	.word	0x200003f0
 800168c:	40023800 	.word	0x40023800
 8001690:	40021400 	.word	0x40021400
 8001694:	40020800 	.word	0x40020800
 8001698:	40021800 	.word	0x40021800
 800169c:	40021000 	.word	0x40021000
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40020400 	.word	0x40020400

080016a8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016b0:	f7ff ff68 	bl	8001584 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}

080016bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	@ 0x38
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d4:	4a32      	ldr	r2, [pc, #200]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016d6:	f043 0310 	orr.w	r3, r3, #16
 80016da:	6413      	str	r3, [r2, #64]	@ 0x40
 80016dc:	4b30      	ldr	r3, [pc, #192]	@ (80017a0 <HAL_InitTick+0xe4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016e8:	f107 0210 	add.w	r2, r7, #16
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 fa40 	bl	8004b78 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d103      	bne.n	800170a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001702:	f003 fa11 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8001706:	6378      	str	r0, [r7, #52]	@ 0x34
 8001708:	e004      	b.n	8001714 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800170a:	f003 fa0d 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 800170e:	4603      	mov	r3, r0
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <HAL_InitTick+0xe8>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	0c9b      	lsrs	r3, r3, #18
 800171e:	3b01      	subs	r3, #1
 8001720:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_InitTick+0xec>)
 8001724:	4a21      	ldr	r2, [pc, #132]	@ (80017ac <HAL_InitTick+0xf0>)
 8001726:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001728:	4b1f      	ldr	r3, [pc, #124]	@ (80017a8 <HAL_InitTick+0xec>)
 800172a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800172e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001730:	4a1d      	ldr	r2, [pc, #116]	@ (80017a8 <HAL_InitTick+0xec>)
 8001732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001734:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001736:	4b1c      	ldr	r3, [pc, #112]	@ (80017a8 <HAL_InitTick+0xec>)
 8001738:	2200      	movs	r2, #0
 800173a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173c:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <HAL_InitTick+0xec>)
 800173e:	2200      	movs	r2, #0
 8001740:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001742:	4b19      	ldr	r3, [pc, #100]	@ (80017a8 <HAL_InitTick+0xec>)
 8001744:	2200      	movs	r2, #0
 8001746:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001748:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <HAL_InitTick+0xec>)
 800174a:	f003 fcc4 	bl	80050d6 <HAL_TIM_Base_Init>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001754:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001758:	2b00      	cmp	r3, #0
 800175a:	d11b      	bne.n	8001794 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800175c:	4812      	ldr	r0, [pc, #72]	@ (80017a8 <HAL_InitTick+0xec>)
 800175e:	f003 fd09 	bl	8005174 <HAL_TIM_Base_Start_IT>
 8001762:	4603      	mov	r3, r0
 8001764:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001768:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800176c:	2b00      	cmp	r3, #0
 800176e:	d111      	bne.n	8001794 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001770:	2036      	movs	r0, #54	@ 0x36
 8001772:	f000 f9e1 	bl	8001b38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d808      	bhi.n	800178e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	2036      	movs	r0, #54	@ 0x36
 8001782:	f000 f9bd 	bl	8001b00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001786:	4a0a      	ldr	r2, [pc, #40]	@ (80017b0 <HAL_InitTick+0xf4>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	e002      	b.n	8001794 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001794:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001798:	4618      	mov	r0, r3
 800179a:	3738      	adds	r7, #56	@ 0x38
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40023800 	.word	0x40023800
 80017a4:	431bde83 	.word	0x431bde83
 80017a8:	200003f4 	.word	0x200003f4
 80017ac:	40001000 	.word	0x40001000
 80017b0:	20000004 	.word	0x20000004

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <NMI_Handler+0x4>

080017bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017c0:	bf00      	nop
 80017c2:	e7fd      	b.n	80017c0 <HardFault_Handler+0x4>

080017c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c8:	bf00      	nop
 80017ca:	e7fd      	b.n	80017c8 <MemManage_Handler+0x4>

080017cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <BusFault_Handler+0x4>

080017d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <UsageFault_Handler+0x4>

080017dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80017ee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80017f2:	f000 fd97 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM6_DAC_IRQHandler+0x10>)
 8001802:	f003 fd27 	bl	8005254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	200003f4 	.word	0x200003f4

08001810 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001814:	4802      	ldr	r0, [pc, #8]	@ (8001820 <OTG_HS_IRQHandler+0x10>)
 8001816:	f001 fc08 	bl	800302a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20006270 	.word	0x20006270

08001824 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001828:	4802      	ldr	r0, [pc, #8]	@ (8001834 <LTDC_IRQHandler+0x10>)
 800182a:	f001 f823 	bl	8002874 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200001b8 	.word	0x200001b8

08001838 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <DMA2D_IRQHandler+0x10>)
 800183e:	f000 f9ee 	bl	8001c1e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000124 	.word	0x20000124

0800184c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <SystemInit+0x20>)
 8001852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001856:	4a05      	ldr	r2, [pc, #20]	@ (800186c <SystemInit+0x20>)
 8001858:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800185c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001870:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001874:	f7ff ffea 	bl	800184c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800187a:	490d      	ldr	r1, [pc, #52]	@ (80018b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800187c:	4a0d      	ldr	r2, [pc, #52]	@ (80018b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800187e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001880:	e002      	b.n	8001888 <LoopCopyDataInit>

08001882 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001882:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001884:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001886:	3304      	adds	r3, #4

08001888 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001888:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800188c:	d3f9      	bcc.n	8001882 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800188e:	4a0a      	ldr	r2, [pc, #40]	@ (80018b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001890:	4c0a      	ldr	r4, [pc, #40]	@ (80018bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001894:	e001      	b.n	800189a <LoopFillZerobss>

08001896 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001896:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001898:	3204      	adds	r2, #4

0800189a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800189c:	d3fb      	bcc.n	8001896 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800189e:	f00c f82d 	bl	800d8fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a2:	f7fe fe25 	bl	80004f0 <main>
  bx  lr    
 80018a6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018a8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80018b4:	0800dc78 	.word	0x0800dc78
  ldr r2, =_sbss
 80018b8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80018bc:	20006974 	.word	0x20006974

080018c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c0:	e7fe      	b.n	80018c0 <ADC_IRQHandler>
	...

080018c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001904 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001904 <HAL_Init+0x40>)
 80018ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001904 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <HAL_Init+0x40>)
 80018da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018e0:	4b08      	ldr	r3, [pc, #32]	@ (8001904 <HAL_Init+0x40>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a07      	ldr	r2, [pc, #28]	@ (8001904 <HAL_Init+0x40>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ec:	2003      	movs	r0, #3
 80018ee:	f000 f8fc 	bl	8001aea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff fee2 	bl	80016bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f8:	f7ff fb4c 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40023c00 	.word	0x40023c00

08001908 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_IncTick+0x20>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_IncTick+0x24>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4413      	add	r3, r2
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <HAL_IncTick+0x24>)
 800191a:	6013      	str	r3, [r2, #0]
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000008 	.word	0x20000008
 800192c:	2000043c 	.word	0x2000043c

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	2000043c 	.word	0x2000043c

08001948 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001950:	f7ff ffee 	bl	8001930 <HAL_GetTick>
 8001954:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d005      	beq.n	800196e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001962:	4b0a      	ldr	r3, [pc, #40]	@ (800198c <HAL_Delay+0x44>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	461a      	mov	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800196e:	bf00      	nop
 8001970:	f7ff ffde 	bl	8001930 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	429a      	cmp	r2, r3
 800197e:	d8f7      	bhi.n	8001970 <HAL_Delay+0x28>
  {
  }
}
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000008 	.word	0x20000008

08001990 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	68ba      	ldr	r2, [r7, #8]
 80019a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019ac:	4013      	ands	r3, r2
 80019ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019c2:	4a04      	ldr	r2, [pc, #16]	@ (80019d4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	60d3      	str	r3, [r2, #12]
}
 80019c8:	bf00      	nop
 80019ca:	3714      	adds	r7, #20
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019dc:	4b04      	ldr	r3, [pc, #16]	@ (80019f0 <__NVIC_GetPriorityGrouping+0x18>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	0a1b      	lsrs	r3, r3, #8
 80019e2:	f003 0307 	and.w	r3, r3, #7
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	db0b      	blt.n	8001a1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	f003 021f 	and.w	r2, r3, #31
 8001a0c:	4907      	ldr	r1, [pc, #28]	@ (8001a2c <__NVIC_EnableIRQ+0x38>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	095b      	lsrs	r3, r3, #5
 8001a14:	2001      	movs	r0, #1
 8001a16:	fa00 f202 	lsl.w	r2, r0, r2
 8001a1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100

08001a30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	db0a      	blt.n	8001a5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	490c      	ldr	r1, [pc, #48]	@ (8001a7c <__NVIC_SetPriority+0x4c>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	0112      	lsls	r2, r2, #4
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	440b      	add	r3, r1
 8001a54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a58:	e00a      	b.n	8001a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	b2da      	uxtb	r2, r3
 8001a5e:	4908      	ldr	r1, [pc, #32]	@ (8001a80 <__NVIC_SetPriority+0x50>)
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	3b04      	subs	r3, #4
 8001a68:	0112      	lsls	r2, r2, #4
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	440b      	add	r3, r1
 8001a6e:	761a      	strb	r2, [r3, #24]
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	e000e100 	.word	0xe000e100
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f1c3 0307 	rsb	r3, r3, #7
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	bf28      	it	cs
 8001aa2:	2304      	movcs	r3, #4
 8001aa4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3304      	adds	r3, #4
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d902      	bls.n	8001ab4 <NVIC_EncodePriority+0x30>
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	3b03      	subs	r3, #3
 8001ab2:	e000      	b.n	8001ab6 <NVIC_EncodePriority+0x32>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43da      	mvns	r2, r3
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001acc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001adc:	4313      	orrs	r3, r2
         );
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3724      	adds	r7, #36	@ 0x24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff4c 	bl	8001990 <__NVIC_SetPriorityGrouping>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
 8001b0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b12:	f7ff ff61 	bl	80019d8 <__NVIC_GetPriorityGrouping>
 8001b16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	6978      	ldr	r0, [r7, #20]
 8001b1e:	f7ff ffb1 	bl	8001a84 <NVIC_EncodePriority>
 8001b22:	4602      	mov	r2, r0
 8001b24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff80 	bl	8001a30 <__NVIC_SetPriority>
}
 8001b30:	bf00      	nop
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff ff54 	bl	80019f4 <__NVIC_EnableIRQ>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	795b      	ldrb	r3, [r3, #5]
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d105      	bne.n	8001b7c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff fa38 	bl	8000fec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e03b      	b.n	8001c16 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001ba4:	b2db      	uxtb	r3, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fa3c 	bl	8001030 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bdc:	f023 0107 	bic.w	r1, r3, #7
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	430a      	orrs	r2, r1
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001bf6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	68d1      	ldr	r1, [r2, #12]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	430b      	orrs	r3, r1
 8001c04:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3708      	adds	r7, #8
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d026      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d021      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c58:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2204      	movs	r2, #4
 8001c72:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d026      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d021      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cb0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbe:	f043 0202 	orr.w	r2, r3, #2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2204      	movs	r2, #4
 8001cca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d026      	beq.n	8001d3e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d021      	beq.n	8001d3e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d08:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2208      	movs	r2, #8
 8001d10:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d16:	f043 0204 	orr.w	r2, r3, #4
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2204      	movs	r2, #4
 8001d22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	695b      	ldr	r3, [r3, #20]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d013      	beq.n	8001d70 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00e      	beq.n	8001d70 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d60:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2204      	movs	r2, #4
 8001d68:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f000 f853 	bl	8001e16 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d024      	beq.n	8001dc4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d01f      	beq.n	8001dc4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d92:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 0310 	and.w	r3, r3, #16
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01f      	beq.n	8001e0e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d01a      	beq.n	8001e0e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001de6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2210      	movs	r2, #16
 8001dee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e08:	6878      	ldr	r0, [r7, #4]
 8001e0a:	f000 f80e 	bl	8001e2a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr

08001e2a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_DMA2D_ConfigLayer+0x20>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e079      	b.n	8001f54 <HAL_DMA2D_ConfigLayer+0x114>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	3318      	adds	r3, #24
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	041b      	lsls	r3, r3, #16
 8001e86:	4313      	orrs	r3, r2
 8001e88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001e8a:	4b35      	ldr	r3, [pc, #212]	@ (8001f60 <HAL_DMA2D_ConfigLayer+0x120>)
 8001e8c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b0a      	cmp	r3, #10
 8001e94:	d003      	beq.n	8001e9e <HAL_DMA2D_ConfigLayer+0x5e>
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b09      	cmp	r3, #9
 8001e9c:	d107      	bne.n	8001eae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	e005      	b.n	8001eba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	061b      	lsls	r3, r3, #24
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d120      	bne.n	8001f02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	ea02 0103 	and.w	r1, r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b0a      	cmp	r3, #10
 8001ee8:	d003      	beq.n	8001ef2 <HAL_DMA2D_ConfigLayer+0xb2>
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b09      	cmp	r3, #9
 8001ef0:	d127      	bne.n	8001f42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	68da      	ldr	r2, [r3, #12]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001efe:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f00:	e01f      	b.n	8001f42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	69da      	ldr	r2, [r3, #28]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	ea02 0103 	and.w	r1, r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	697a      	ldr	r2, [r7, #20]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b0a      	cmp	r3, #10
 8001f2a:	d003      	beq.n	8001f34 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d106      	bne.n	8001f42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f40:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	ff03000f 	.word	0xff03000f

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b089      	sub	sp, #36	@ 0x24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
 8001f7e:	e177      	b.n	8002270 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f80:	2201      	movs	r2, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	697a      	ldr	r2, [r7, #20]
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f94:	693a      	ldr	r2, [r7, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8166 	bne.w	800226a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d005      	beq.n	8001fb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d130      	bne.n	8002018 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fec:	2201      	movs	r2, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0201 	and.w	r2, r3, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b03      	cmp	r3, #3
 8002022:	d017      	beq.n	8002054 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d123      	bne.n	80020a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	08da      	lsrs	r2, r3, #3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3208      	adds	r2, #8
 8002068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	f003 0307 	and.w	r3, r3, #7
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	220f      	movs	r2, #15
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	691a      	ldr	r2, [r3, #16]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	08da      	lsrs	r2, r3, #3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	3208      	adds	r2, #8
 80020a2:	69b9      	ldr	r1, [r7, #24]
 80020a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f003 0203 	and.w	r2, r3, #3
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80c0 	beq.w	800226a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b66      	ldr	r3, [pc, #408]	@ (8002288 <HAL_GPIO_Init+0x324>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f2:	4a65      	ldr	r2, [pc, #404]	@ (8002288 <HAL_GPIO_Init+0x324>)
 80020f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fa:	4b63      	ldr	r3, [pc, #396]	@ (8002288 <HAL_GPIO_Init+0x324>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002106:	4a61      	ldr	r2, [pc, #388]	@ (800228c <HAL_GPIO_Init+0x328>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0303 	and.w	r3, r3, #3
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	220f      	movs	r2, #15
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43db      	mvns	r3, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4013      	ands	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a58      	ldr	r2, [pc, #352]	@ (8002290 <HAL_GPIO_Init+0x32c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d037      	beq.n	80021a2 <HAL_GPIO_Init+0x23e>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a57      	ldr	r2, [pc, #348]	@ (8002294 <HAL_GPIO_Init+0x330>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_GPIO_Init+0x23a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a56      	ldr	r2, [pc, #344]	@ (8002298 <HAL_GPIO_Init+0x334>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d02b      	beq.n	800219a <HAL_GPIO_Init+0x236>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a55      	ldr	r2, [pc, #340]	@ (800229c <HAL_GPIO_Init+0x338>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d025      	beq.n	8002196 <HAL_GPIO_Init+0x232>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a54      	ldr	r2, [pc, #336]	@ (80022a0 <HAL_GPIO_Init+0x33c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <HAL_GPIO_Init+0x22e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a53      	ldr	r2, [pc, #332]	@ (80022a4 <HAL_GPIO_Init+0x340>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d019      	beq.n	800218e <HAL_GPIO_Init+0x22a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a52      	ldr	r2, [pc, #328]	@ (80022a8 <HAL_GPIO_Init+0x344>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d013      	beq.n	800218a <HAL_GPIO_Init+0x226>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a51      	ldr	r2, [pc, #324]	@ (80022ac <HAL_GPIO_Init+0x348>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d00d      	beq.n	8002186 <HAL_GPIO_Init+0x222>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a50      	ldr	r2, [pc, #320]	@ (80022b0 <HAL_GPIO_Init+0x34c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d007      	beq.n	8002182 <HAL_GPIO_Init+0x21e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a4f      	ldr	r2, [pc, #316]	@ (80022b4 <HAL_GPIO_Init+0x350>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d101      	bne.n	800217e <HAL_GPIO_Init+0x21a>
 800217a:	2309      	movs	r3, #9
 800217c:	e012      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 800217e:	230a      	movs	r3, #10
 8002180:	e010      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 8002182:	2308      	movs	r3, #8
 8002184:	e00e      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 8002186:	2307      	movs	r3, #7
 8002188:	e00c      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 800218a:	2306      	movs	r3, #6
 800218c:	e00a      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 800218e:	2305      	movs	r3, #5
 8002190:	e008      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 8002192:	2304      	movs	r3, #4
 8002194:	e006      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 8002196:	2303      	movs	r3, #3
 8002198:	e004      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 800219a:	2302      	movs	r3, #2
 800219c:	e002      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <HAL_GPIO_Init+0x240>
 80021a2:	2300      	movs	r3, #0
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	f002 0203 	and.w	r2, r2, #3
 80021aa:	0092      	lsls	r2, r2, #2
 80021ac:	4093      	lsls	r3, r2
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b4:	4935      	ldr	r1, [pc, #212]	@ (800228c <HAL_GPIO_Init+0x328>)
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	089b      	lsrs	r3, r3, #2
 80021ba:	3302      	adds	r3, #2
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c2:	4b3d      	ldr	r3, [pc, #244]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e6:	4a34      	ldr	r2, [pc, #208]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ec:	4b32      	ldr	r3, [pc, #200]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002210:	4a29      	ldr	r2, [pc, #164]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002216:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223a:	4a1f      	ldr	r2, [pc, #124]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002240:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4313      	orrs	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002264:	4a14      	ldr	r2, [pc, #80]	@ (80022b8 <HAL_GPIO_Init+0x354>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3301      	adds	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b0f      	cmp	r3, #15
 8002274:	f67f ae84 	bls.w	8001f80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002278:	bf00      	nop
 800227a:	bf00      	nop
 800227c:	3724      	adds	r7, #36	@ 0x24
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800
 800228c:	40013800 	.word	0x40013800
 8002290:	40020000 	.word	0x40020000
 8002294:	40020400 	.word	0x40020400
 8002298:	40020800 	.word	0x40020800
 800229c:	40020c00 	.word	0x40020c00
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40021400 	.word	0x40021400
 80022a8:	40021800 	.word	0x40021800
 80022ac:	40021c00 	.word	0x40021c00
 80022b0:	40022000 	.word	0x40022000
 80022b4:	40022400 	.word	0x40022400
 80022b8:	40013c00 	.word	0x40013c00

080022bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	460b      	mov	r3, r1
 80022c6:	807b      	strh	r3, [r7, #2]
 80022c8:	4613      	mov	r3, r2
 80022ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022cc:	787b      	ldrb	r3, [r7, #1]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d2:	887a      	ldrh	r2, [r7, #2]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022d8:	e003      	b.n	80022e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	041a      	lsls	r2, r3, #16
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	619a      	str	r2, [r3, #24]
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002300:	887a      	ldrh	r2, [r7, #2]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	4013      	ands	r3, r2
 8002306:	041a      	lsls	r2, r3, #16
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	43d9      	mvns	r1, r3
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	400b      	ands	r3, r1
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800232e:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233a:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fd32 	bl	8000dac <HAL_GPIO_EXTI_Callback>
  }
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40013c00 	.word	0x40013c00

08002354 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e12b      	b.n	80025be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fe80 	bl	8001080 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	@ 0x24
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 0201 	bic.w	r2, r2, #1
 8002396:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023b8:	f002 fbb6 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 80023bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	4a81      	ldr	r2, [pc, #516]	@ (80025c8 <HAL_I2C_Init+0x274>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d807      	bhi.n	80023d8 <HAL_I2C_Init+0x84>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	4a80      	ldr	r2, [pc, #512]	@ (80025cc <HAL_I2C_Init+0x278>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	bf94      	ite	ls
 80023d0:	2301      	movls	r3, #1
 80023d2:	2300      	movhi	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e006      	b.n	80023e6 <HAL_I2C_Init+0x92>
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a7d      	ldr	r2, [pc, #500]	@ (80025d0 <HAL_I2C_Init+0x27c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	bf94      	ite	ls
 80023e0:	2301      	movls	r3, #1
 80023e2:	2300      	movhi	r3, #0
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0e7      	b.n	80025be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4a78      	ldr	r2, [pc, #480]	@ (80025d4 <HAL_I2C_Init+0x280>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9b      	lsrs	r3, r3, #18
 80023f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	430a      	orrs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	4a6a      	ldr	r2, [pc, #424]	@ (80025c8 <HAL_I2C_Init+0x274>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d802      	bhi.n	8002428 <HAL_I2C_Init+0xd4>
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	3301      	adds	r3, #1
 8002426:	e009      	b.n	800243c <HAL_I2C_Init+0xe8>
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800242e:	fb02 f303 	mul.w	r3, r2, r3
 8002432:	4a69      	ldr	r2, [pc, #420]	@ (80025d8 <HAL_I2C_Init+0x284>)
 8002434:	fba2 2303 	umull	r2, r3, r2, r3
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	3301      	adds	r3, #1
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	430b      	orrs	r3, r1
 8002442:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800244e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	495c      	ldr	r1, [pc, #368]	@ (80025c8 <HAL_I2C_Init+0x274>)
 8002458:	428b      	cmp	r3, r1
 800245a:	d819      	bhi.n	8002490 <HAL_I2C_Init+0x13c>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e59      	subs	r1, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	fbb1 f3f3 	udiv	r3, r1, r3
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002470:	400b      	ands	r3, r1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00a      	beq.n	800248c <HAL_I2C_Init+0x138>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1e59      	subs	r1, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	fbb1 f3f3 	udiv	r3, r1, r3
 8002484:	3301      	adds	r3, #1
 8002486:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800248a:	e051      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 800248c:	2304      	movs	r3, #4
 800248e:	e04f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_I2C_Init+0x168>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	440b      	add	r3, r1
 80024a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024aa:	3301      	adds	r3, #1
 80024ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	e012      	b.n	80024e2 <HAL_I2C_Init+0x18e>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1e58      	subs	r0, r3, #1
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6859      	ldr	r1, [r3, #4]
 80024c4:	460b      	mov	r3, r1
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	0099      	lsls	r1, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d2:	3301      	adds	r3, #1
 80024d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d8:	2b00      	cmp	r3, #0
 80024da:	bf0c      	ite	eq
 80024dc:	2301      	moveq	r3, #1
 80024de:	2300      	movne	r3, #0
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Init+0x196>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e022      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10e      	bne.n	8002510 <HAL_I2C_Init+0x1bc>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	1e58      	subs	r0, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	460b      	mov	r3, r1
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	440b      	add	r3, r1
 8002500:	fbb0 f3f3 	udiv	r3, r0, r3
 8002504:	3301      	adds	r3, #1
 8002506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800250a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800250e:	e00f      	b.n	8002530 <HAL_I2C_Init+0x1dc>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	1e58      	subs	r0, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6859      	ldr	r1, [r3, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	0099      	lsls	r1, r3, #2
 8002520:	440b      	add	r3, r1
 8002522:	fbb0 f3f3 	udiv	r3, r0, r3
 8002526:	3301      	adds	r3, #1
 8002528:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	6809      	ldr	r1, [r1, #0]
 8002534:	4313      	orrs	r3, r2
 8002536:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	431a      	orrs	r2, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800255e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002562:	687a      	ldr	r2, [r7, #4]
 8002564:	6911      	ldr	r1, [r2, #16]
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68d2      	ldr	r2, [r2, #12]
 800256a:	4311      	orrs	r1, r2
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	431a      	orrs	r2, r3
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	430a      	orrs	r2, r1
 800258e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 0201 	orr.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2220      	movs	r2, #32
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	000186a0 	.word	0x000186a0
 80025cc:	001e847f 	.word	0x001e847f
 80025d0:	003d08ff 	.word	0x003d08ff
 80025d4:	431bde83 	.word	0x431bde83
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d129      	bne.n	8002646 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2224      	movs	r2, #36	@ 0x24
 80025f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0201 	bic.w	r2, r2, #1
 8002608:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0210 	bic.w	r2, r2, #16
 8002618:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	430a      	orrs	r2, r1
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0201 	orr.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002642:	2300      	movs	r3, #0
 8002644:	e000      	b.n	8002648 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b20      	cmp	r3, #32
 800266c:	d12a      	bne.n	80026c4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2224      	movs	r2, #36	@ 0x24
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0201 	bic.w	r2, r2, #1
 8002684:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	f023 030f 	bic.w	r3, r3, #15
 8002694:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	b29a      	uxth	r2, r3
 800269a:	89fb      	ldrh	r3, [r7, #14]
 800269c:	4313      	orrs	r3, r2
 800269e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	89fa      	ldrh	r2, [r7, #14]
 80026a6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0201 	orr.w	r2, r2, #1
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e000      	b.n	80026c6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80026c4:	2302      	movs	r3, #2
  }
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0bf      	b.n	8002866 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe fd2a 	bl	8001154 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002716:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6999      	ldr	r1, [r3, #24]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800272c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	6899      	ldr	r1, [r3, #8]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	4b4a      	ldr	r3, [pc, #296]	@ (8002870 <HAL_LTDC_Init+0x19c>)
 8002748:	400b      	ands	r3, r1
 800274a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	699a      	ldr	r2, [r3, #24]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68d9      	ldr	r1, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	4b3e      	ldr	r3, [pc, #248]	@ (8002870 <HAL_LTDC_Init+0x19c>)
 8002776:	400b      	ands	r3, r1
 8002778:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69db      	ldr	r3, [r3, #28]
 800277e:	041b      	lsls	r3, r3, #16
 8002780:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68d9      	ldr	r1, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1a      	ldr	r2, [r3, #32]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	430a      	orrs	r2, r1
 8002796:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6919      	ldr	r1, [r3, #16]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <HAL_LTDC_Init+0x19c>)
 80027a4:	400b      	ands	r3, r1
 80027a6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ac:	041b      	lsls	r3, r3, #16
 80027ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6919      	ldr	r1, [r3, #16]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	6959      	ldr	r1, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4b27      	ldr	r3, [pc, #156]	@ (8002870 <HAL_LTDC_Init+0x19c>)
 80027d2:	400b      	ands	r3, r1
 80027d4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	041b      	lsls	r3, r3, #16
 80027dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6959      	ldr	r1, [r3, #20]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002804:	041b      	lsls	r3, r3, #16
 8002806:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002816:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	4313      	orrs	r3, r2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0206 	orr.w	r2, r2, #6
 8002842:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	f000f800 	.word	0xf000f800

08002874 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002882:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d023      	beq.n	80028de <HAL_LTDC_IRQHandler+0x6a>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01e      	beq.n	80028de <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0204 	bic.w	r2, r2, #4
 80028ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2204      	movs	r2, #4
 80028b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2204      	movs	r2, #4
 80028cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f000 f86f 	bl	80029bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d023      	beq.n	8002930 <HAL_LTDC_IRQHandler+0xbc>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f003 0302 	and.w	r3, r3, #2
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d01e      	beq.n	8002930 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f022 0202 	bic.w	r2, r2, #2
 8002900:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002910:	f043 0202 	orr.w	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2204      	movs	r2, #4
 800291e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f846 	bl	80029bc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d01b      	beq.n	8002972 <HAL_LTDC_IRQHandler+0xfe>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	2b00      	cmp	r3, #0
 8002942:	d016      	beq.n	8002972 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f022 0201 	bic.w	r2, r2, #1
 8002952:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	2201      	movs	r2, #1
 800295a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f82f 	bl	80029d0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b00      	cmp	r3, #0
 800297a:	d01b      	beq.n	80029b4 <HAL_LTDC_IRQHandler+0x140>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	f003 0308 	and.w	r3, r3, #8
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0208 	bic.w	r2, r2, #8
 8002994:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2208      	movs	r2, #8
 800299c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f818 	bl	80029e4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_LTDC_ConfigLayer+0x1a>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e02c      	b.n	8002a6c <HAL_LTDC_ConfigLayer+0x74>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2134      	movs	r1, #52	@ 0x34
 8002a28:	fb01 f303 	mul.w	r3, r1, r3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	4614      	mov	r4, r2
 8002a36:	461d      	mov	r5, r3
 8002a38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a44:	682b      	ldr	r3, [r5, #0]
 8002a46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f811 	bl	8002a74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2201      	movs	r2, #1
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bdb0      	pop	{r4, r5, r7, pc}

08002a74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b089      	sub	sp, #36	@ 0x24
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	685a      	ldr	r2, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68db      	ldr	r3, [r3, #12]
 8002a8a:	0c1b      	lsrs	r3, r3, #16
 8002a8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a90:	4413      	add	r3, r2
 8002a92:	041b      	lsls	r3, r3, #16
 8002a94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	01db      	lsls	r3, r3, #7
 8002aa0:	4413      	add	r3, r2
 8002aa2:	3384      	adds	r3, #132	@ 0x84
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	4611      	mov	r1, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	01d2      	lsls	r2, r2, #7
 8002ab0:	440a      	add	r2, r1
 8002ab2:	3284      	adds	r2, #132	@ 0x84
 8002ab4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ab8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002aca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002acc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	01db      	lsls	r3, r3, #7
 8002ad8:	440b      	add	r3, r1
 8002ada:	3384      	adds	r3, #132	@ 0x84
 8002adc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ae2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002af2:	4413      	add	r3, r2
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	01db      	lsls	r3, r3, #7
 8002b02:	4413      	add	r3, r2
 8002b04:	3384      	adds	r3, #132	@ 0x84
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	6812      	ldr	r2, [r2, #0]
 8002b0c:	4611      	mov	r1, r2
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	01d2      	lsls	r2, r2, #7
 8002b12:	440a      	add	r2, r1
 8002b14:	3284      	adds	r2, #132	@ 0x84
 8002b16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002b1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b2a:	4413      	add	r3, r2
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	01db      	lsls	r3, r3, #7
 8002b38:	440b      	add	r3, r1
 8002b3a:	3384      	adds	r3, #132	@ 0x84
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	01db      	lsls	r3, r3, #7
 8002b4e:	4413      	add	r3, r2
 8002b50:	3384      	adds	r3, #132	@ 0x84
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4611      	mov	r1, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	01d2      	lsls	r2, r2, #7
 8002b5e:	440a      	add	r2, r1
 8002b60:	3284      	adds	r2, #132	@ 0x84
 8002b62:	f023 0307 	bic.w	r3, r3, #7
 8002b66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	01db      	lsls	r3, r3, #7
 8002b72:	4413      	add	r3, r2
 8002b74:	3384      	adds	r3, #132	@ 0x84
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002b8e:	041b      	lsls	r3, r3, #16
 8002b90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	061b      	lsls	r3, r3, #24
 8002b98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	01db      	lsls	r3, r3, #7
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3384      	adds	r3, #132	@ 0x84
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	01db      	lsls	r3, r3, #7
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3384      	adds	r3, #132	@ 0x84
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2300      	movs	r3, #0
 8002bbc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	01db      	lsls	r3, r3, #7
 8002bd8:	440b      	add	r3, r1
 8002bda:	3384      	adds	r3, #132	@ 0x84
 8002bdc:	4619      	mov	r1, r3
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	461a      	mov	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	01db      	lsls	r3, r3, #7
 8002bee:	4413      	add	r3, r2
 8002bf0:	3384      	adds	r3, #132	@ 0x84
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	6812      	ldr	r2, [r2, #0]
 8002bf8:	4611      	mov	r1, r2
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	01d2      	lsls	r2, r2, #7
 8002bfe:	440a      	add	r2, r1
 8002c00:	3284      	adds	r2, #132	@ 0x84
 8002c02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	01db      	lsls	r3, r3, #7
 8002c12:	4413      	add	r3, r2
 8002c14:	3384      	adds	r3, #132	@ 0x84
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	01db      	lsls	r3, r3, #7
 8002c28:	4413      	add	r3, r2
 8002c2a:	3384      	adds	r3, #132	@ 0x84
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	4611      	mov	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	01d2      	lsls	r2, r2, #7
 8002c38:	440a      	add	r2, r1
 8002c3a:	3284      	adds	r2, #132	@ 0x84
 8002c3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c40:	f023 0307 	bic.w	r3, r3, #7
 8002c44:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	68f9      	ldr	r1, [r7, #12]
 8002c50:	6809      	ldr	r1, [r1, #0]
 8002c52:	4608      	mov	r0, r1
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	01c9      	lsls	r1, r1, #7
 8002c58:	4401      	add	r1, r0
 8002c5a:	3184      	adds	r1, #132	@ 0x84
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	01db      	lsls	r3, r3, #7
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3384      	adds	r3, #132	@ 0x84
 8002c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	01db      	lsls	r3, r3, #7
 8002c7a:	4413      	add	r3, r2
 8002c7c:	3384      	adds	r3, #132	@ 0x84
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2300      	movs	r3, #0
 8002c82:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	01db      	lsls	r3, r3, #7
 8002c8e:	4413      	add	r3, r2
 8002c90:	3384      	adds	r3, #132	@ 0x84
 8002c92:	461a      	mov	r2, r3
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d102      	bne.n	8002ca8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002ca2:	2304      	movs	r3, #4
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e01b      	b.n	8002ce0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	61fb      	str	r3, [r7, #28]
 8002cb4:	e014      	b.n	8002ce0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b04      	cmp	r3, #4
 8002cbc:	d00b      	beq.n	8002cd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d007      	beq.n	8002cd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d003      	beq.n	8002cd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002cd2:	2b07      	cmp	r3, #7
 8002cd4:	d102      	bne.n	8002cdc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61fb      	str	r3, [r7, #28]
 8002cda:	e001      	b.n	8002ce0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	01db      	lsls	r3, r3, #7
 8002cea:	4413      	add	r3, r2
 8002cec:	3384      	adds	r3, #132	@ 0x84
 8002cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	01d2      	lsls	r2, r2, #7
 8002cfa:	440a      	add	r2, r1
 8002cfc:	3284      	adds	r2, #132	@ 0x84
 8002cfe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002d02:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	1acb      	subs	r3, r1, r3
 8002d1a:	69f9      	ldr	r1, [r7, #28]
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002d22:	68f9      	ldr	r1, [r7, #12]
 8002d24:	6809      	ldr	r1, [r1, #0]
 8002d26:	4608      	mov	r0, r1
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	01c9      	lsls	r1, r1, #7
 8002d2c:	4401      	add	r1, r0
 8002d2e:	3184      	adds	r1, #132	@ 0x84
 8002d30:	4313      	orrs	r3, r2
 8002d32:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	01db      	lsls	r3, r3, #7
 8002d3e:	4413      	add	r3, r2
 8002d40:	3384      	adds	r3, #132	@ 0x84
 8002d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	01d2      	lsls	r2, r2, #7
 8002d4e:	440a      	add	r2, r1
 8002d50:	3284      	adds	r2, #132	@ 0x84
 8002d52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d56:	f023 0307 	bic.w	r3, r3, #7
 8002d5a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	01db      	lsls	r3, r3, #7
 8002d66:	4413      	add	r3, r2
 8002d68:	3384      	adds	r3, #132	@ 0x84
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	01db      	lsls	r3, r3, #7
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3384      	adds	r3, #132	@ 0x84
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	4611      	mov	r1, r2
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	01d2      	lsls	r2, r2, #7
 8002d8c:	440a      	add	r2, r1
 8002d8e:	3284      	adds	r2, #132	@ 0x84
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6013      	str	r3, [r2, #0]
}
 8002d96:	bf00      	nop
 8002d98:	3724      	adds	r7, #36	@ 0x24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b086      	sub	sp, #24
 8002da6:	af02      	add	r7, sp, #8
 8002da8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d101      	bne.n	8002db4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e101      	b.n	8002fb8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d106      	bne.n	8002dd4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f00a fa68 	bl	800d2a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2203      	movs	r2, #3
 8002dd8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de2:	d102      	bne.n	8002dea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f003 fa87 	bl	8006302 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7c1a      	ldrb	r2, [r3, #16]
 8002dfc:	f88d 2000 	strb.w	r2, [sp]
 8002e00:	3304      	adds	r3, #4
 8002e02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e04:	f003 f966 	bl	80060d4 <USB_CoreInit>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d005      	beq.n	8002e1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e0ce      	b.n	8002fb8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2100      	movs	r1, #0
 8002e20:	4618      	mov	r0, r3
 8002e22:	f003 fa7f 	bl	8006324 <USB_SetCurrentMode>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0bf      	b.n	8002fb8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
 8002e3c:	e04a      	b.n	8002ed4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e3e:	7bfa      	ldrb	r2, [r7, #15]
 8002e40:	6879      	ldr	r1, [r7, #4]
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	3315      	adds	r3, #21
 8002e4e:	2201      	movs	r2, #1
 8002e50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e52:	7bfa      	ldrb	r2, [r7, #15]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	3314      	adds	r3, #20
 8002e62:	7bfa      	ldrb	r2, [r7, #15]
 8002e64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e66:	7bfa      	ldrb	r2, [r7, #15]
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b298      	uxth	r0, r3
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	332e      	adds	r3, #46	@ 0x2e
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e7e:	7bfa      	ldrb	r2, [r7, #15]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	00db      	lsls	r3, r3, #3
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3318      	adds	r3, #24
 8002e8e:	2200      	movs	r2, #0
 8002e90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e92:	7bfa      	ldrb	r2, [r7, #15]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	331c      	adds	r3, #28
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	3320      	adds	r3, #32
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eba:	7bfa      	ldrb	r2, [r7, #15]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3324      	adds	r3, #36	@ 0x24
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ece:	7bfb      	ldrb	r3, [r7, #15]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	791b      	ldrb	r3, [r3, #4]
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3af      	bcc.n	8002e3e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
 8002ee2:	e044      	b.n	8002f6e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4413      	add	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002efa:	7bfa      	ldrb	r2, [r7, #15]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	4413      	add	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f10:	7bfa      	ldrb	r2, [r7, #15]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	4413      	add	r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f26:	7bfa      	ldrb	r2, [r7, #15]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4413      	add	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f52:	7bfa      	ldrb	r2, [r7, #15]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	791b      	ldrb	r3, [r3, #4]
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3b5      	bcc.n	8002ee4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	7c1a      	ldrb	r2, [r3, #16]
 8002f80:	f88d 2000 	strb.w	r2, [sp]
 8002f84:	3304      	adds	r3, #4
 8002f86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f88:	f003 fa18 	bl	80063bc <USB_DevInit>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d005      	beq.n	8002f9e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e00c      	b.n	8002fb8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f004 fa62 	bl	800747a <USB_DevDisconnect>

  return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_PCD_Start+0x1c>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e022      	b.n	8003022 <HAL_PCD_Start+0x62>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d009      	beq.n	8003004 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d105      	bne.n	8003004 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ffc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4618      	mov	r0, r3
 800300a:	f003 f969 	bl	80062e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fa10 	bl	8007438 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b08d      	sub	sp, #52	@ 0x34
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f004 face 	bl	80075e2 <USB_GetMode>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 848c 	bne.w	8003966 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f004 fa32 	bl	80074bc <USB_ReadInterrupts>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8482 	beq.w	8003964 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	0a1b      	lsrs	r3, r3, #8
 800306a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f004 fa1f 	bl	80074bc <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b02      	cmp	r3, #2
 8003086:	d107      	bne.n	8003098 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695a      	ldr	r2, [r3, #20]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f002 0202 	and.w	r2, r2, #2
 8003096:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f004 fa0d 	bl	80074bc <USB_ReadInterrupts>
 80030a2:	4603      	mov	r3, r0
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d161      	bne.n	8003170 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699a      	ldr	r2, [r3, #24]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0210 	bic.w	r2, r2, #16
 80030ba:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	3304      	adds	r3, #4
 80030da:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	0c5b      	lsrs	r3, r3, #17
 80030e0:	f003 030f 	and.w	r3, r3, #15
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d124      	bne.n	8003132 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80030ee:	4013      	ands	r3, r2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d035      	beq.n	8003160 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	091b      	lsrs	r3, r3, #4
 80030fc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	6a38      	ldr	r0, [r7, #32]
 8003108:	f004 f844 	bl	8007194 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	091b      	lsrs	r3, r3, #4
 8003114:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003118:	441a      	add	r2, r3
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	091b      	lsrs	r3, r3, #4
 8003126:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800312a:	441a      	add	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	615a      	str	r2, [r3, #20]
 8003130:	e016      	b.n	8003160 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	0c5b      	lsrs	r3, r3, #17
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	2b06      	cmp	r3, #6
 800313c:	d110      	bne.n	8003160 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003144:	2208      	movs	r2, #8
 8003146:	4619      	mov	r1, r3
 8003148:	6a38      	ldr	r0, [r7, #32]
 800314a:	f004 f823 	bl	8007194 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	695a      	ldr	r2, [r3, #20]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800315a:	441a      	add	r2, r3
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0210 	orr.w	r2, r2, #16
 800316e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f004 f9a1 	bl	80074bc <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003180:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003184:	f040 80a7 	bne.w	80032d6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003188:	2300      	movs	r3, #0
 800318a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f004 f9a6 	bl	80074e2 <USB_ReadDevAllOutEpInterrupt>
 8003196:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003198:	e099      	b.n	80032ce <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 808e 	beq.w	80032c2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 f9ca 	bl	800754a <USB_ReadDevOutEPInterrupt>
 80031b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ce:	461a      	mov	r2, r3
 80031d0:	2301      	movs	r3, #1
 80031d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 fea4 	bl	8003f24 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00c      	beq.n	8003200 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	015a      	lsls	r2, r3, #5
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031f2:	461a      	mov	r2, r3
 80031f4:	2308      	movs	r3, #8
 80031f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f000 ff7a 	bl	80040f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f003 0310 	and.w	r3, r3, #16
 8003206:	2b00      	cmp	r3, #0
 8003208:	d008      	beq.n	800321c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	015a      	lsls	r2, r3, #5
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	4413      	add	r3, r2
 8003212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003216:	461a      	mov	r2, r3
 8003218:	2310      	movs	r3, #16
 800321a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d030      	beq.n	8003288 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800322e:	2b80      	cmp	r3, #128	@ 0x80
 8003230:	d109      	bne.n	8003246 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	69fa      	ldr	r2, [r7, #28]
 800323c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003240:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003244:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003248:	4613      	mov	r3, r2
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4413      	add	r3, r2
 8003258:	3304      	adds	r3, #4
 800325a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	78db      	ldrb	r3, [r3, #3]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d108      	bne.n	8003276 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2200      	movs	r2, #0
 8003268:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f00a f927 	bl	800d4c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	015a      	lsls	r2, r3, #5
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	4413      	add	r3, r2
 800327e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003282:	461a      	mov	r2, r3
 8003284:	2302      	movs	r3, #2
 8003286:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	f003 0320 	and.w	r3, r3, #32
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329e:	461a      	mov	r2, r3
 80032a0:	2320      	movs	r3, #32
 80032a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d009      	beq.n	80032c2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b0:	015a      	lsls	r2, r3, #5
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032ba:	461a      	mov	r2, r3
 80032bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032c0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c4:	3301      	adds	r3, #1
 80032c6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ca:	085b      	lsrs	r3, r3, #1
 80032cc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f af62 	bne.w	800319a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 f8ee 	bl	80074bc <USB_ReadInterrupts>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80032ea:	f040 80db 	bne.w	80034a4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 f90f 	bl	8007516 <USB_ReadDevAllInEpInterrupt>
 80032f8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80032fe:	e0cd      	b.n	800349c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 80c2 	beq.w	8003490 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f004 f935 	bl	8007586 <USB_ReadDevInEPInterrupt>
 800331c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b00      	cmp	r3, #0
 8003326:	d057      	beq.n	80033d8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	2201      	movs	r2, #1
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	43db      	mvns	r3, r3
 8003342:	69f9      	ldr	r1, [r7, #28]
 8003344:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003348:	4013      	ands	r3, r2
 800334a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003358:	461a      	mov	r2, r3
 800335a:	2301      	movs	r3, #1
 800335c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	799b      	ldrb	r3, [r3, #6]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d132      	bne.n	80033cc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800336a:	4613      	mov	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4413      	add	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	440b      	add	r3, r1
 8003374:	3320      	adds	r3, #32
 8003376:	6819      	ldr	r1, [r3, #0]
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	331c      	adds	r3, #28
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4419      	add	r1, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003390:	4613      	mov	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4413      	add	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4403      	add	r3, r0
 800339a:	3320      	adds	r3, #32
 800339c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d113      	bne.n	80033cc <HAL_PCD_IRQHandler+0x3a2>
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	3324      	adds	r3, #36	@ 0x24
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d108      	bne.n	80033cc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6818      	ldr	r0, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033c4:	461a      	mov	r2, r3
 80033c6:	2101      	movs	r1, #1
 80033c8:	f004 f93c 	bl	8007644 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	4619      	mov	r1, r3
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f009 fff1 	bl	800d3ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	f003 0308 	and.w	r3, r3, #8
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80033ee:	461a      	mov	r2, r3
 80033f0:	2308      	movs	r3, #8
 80033f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340a:	461a      	mov	r2, r3
 800340c:	2310      	movs	r3, #16
 800340e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003426:	461a      	mov	r2, r3
 8003428:	2340      	movs	r3, #64	@ 0x40
 800342a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d023      	beq.n	800347e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003436:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003438:	6a38      	ldr	r0, [r7, #32]
 800343a:	f003 f923 	bl	8006684 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800343e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003440:	4613      	mov	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	4413      	add	r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	3310      	adds	r3, #16
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	3304      	adds	r3, #4
 8003450:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	78db      	ldrb	r3, [r3, #3]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d108      	bne.n	800346c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	b2db      	uxtb	r3, r3
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f00a f83e 	bl	800d4e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800346c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	4413      	add	r3, r2
 8003474:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003478:	461a      	mov	r2, r3
 800347a:	2302      	movs	r3, #2
 800347c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 fcbd 	bl	8003e0a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003492:	3301      	adds	r3, #1
 8003494:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f47f af2e 	bne.w	8003300 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 f807 	bl	80074bc <USB_ReadInterrupts>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034b8:	d122      	bne.n	8003500 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034c8:	f023 0301 	bic.w	r3, r3, #1
 80034cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d108      	bne.n	80034ea <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034e0:	2100      	movs	r1, #0
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fea4 	bl	8004230 <HAL_PCDEx_LPM_Callback>
 80034e8:	e002      	b.n	80034f0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f009 ffdc 	bl	800d4a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695a      	ldr	r2, [r3, #20]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80034fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4618      	mov	r0, r3
 8003506:	f003 ffd9 	bl	80074bc <USB_ReadInterrupts>
 800350a:	4603      	mov	r3, r0
 800350c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003510:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003514:	d112      	bne.n	800353c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	2b01      	cmp	r3, #1
 8003524:	d102      	bne.n	800352c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f009 ff98 	bl	800d45c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695a      	ldr	r2, [r3, #20]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800353a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 ffbb 	bl	80074bc <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003550:	f040 80b7 	bne.w	80036c2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2110      	movs	r1, #16
 800356e:	4618      	mov	r0, r3
 8003570:	f003 f888 	bl	8006684 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003578:	e046      	b.n	8003608 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800357a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800357c:	015a      	lsls	r2, r3, #5
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003586:	461a      	mov	r2, r3
 8003588:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800358c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800358e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003590:	015a      	lsls	r2, r3, #5
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	4413      	add	r3, r2
 8003596:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800359e:	0151      	lsls	r1, r2, #5
 80035a0:	69fa      	ldr	r2, [r7, #28]
 80035a2:	440a      	add	r2, r1
 80035a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ba:	461a      	mov	r2, r3
 80035bc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d2:	0151      	lsls	r1, r2, #5
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	440a      	add	r2, r1
 80035d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035fc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003600:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	3301      	adds	r3, #1
 8003606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	791b      	ldrb	r3, [r3, #4]
 800360c:	461a      	mov	r2, r3
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	4293      	cmp	r3, r2
 8003612:	d3b2      	bcc.n	800357a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003622:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003626:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	7bdb      	ldrb	r3, [r3, #15]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d016      	beq.n	800365e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800363a:	69fa      	ldr	r2, [r7, #28]
 800363c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003640:	f043 030b 	orr.w	r3, r3, #11
 8003644:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800364e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003656:	f043 030b 	orr.w	r3, r3, #11
 800365a:	6453      	str	r3, [r2, #68]	@ 0x44
 800365c:	e015      	b.n	800368a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	69fa      	ldr	r2, [r7, #28]
 8003668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800366c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003670:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003674:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003684:	f043 030b 	orr.w	r3, r3, #11
 8003688:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69fa      	ldr	r2, [r7, #28]
 8003694:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003698:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800369c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036ac:	461a      	mov	r2, r3
 80036ae:	f003 ffc9 	bl	8007644 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695a      	ldr	r2, [r3, #20]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80036c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f003 fef8 	bl	80074bc <USB_ReadInterrupts>
 80036cc:	4603      	mov	r3, r0
 80036ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036d6:	d123      	bne.n	8003720 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f003 ff8e 	bl	80075fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 f845 	bl	8006776 <USB_GetDevSpeed>
 80036ec:	4603      	mov	r3, r0
 80036ee:	461a      	mov	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681c      	ldr	r4, [r3, #0]
 80036f8:	f001 fa0a 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 80036fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003702:	461a      	mov	r2, r3
 8003704:	4620      	mov	r0, r4
 8003706:	f002 fd49 	bl	800619c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f009 fe7d 	bl	800d40a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f003 fec9 	bl	80074bc <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0308 	and.w	r3, r3, #8
 8003730:	2b08      	cmp	r3, #8
 8003732:	d10a      	bne.n	800374a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f009 fe5a 	bl	800d3ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695a      	ldr	r2, [r3, #20]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f002 0208 	and.w	r2, r2, #8
 8003748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f003 feb4 	bl	80074bc <USB_ReadInterrupts>
 8003754:	4603      	mov	r3, r0
 8003756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800375a:	2b80      	cmp	r3, #128	@ 0x80
 800375c:	d123      	bne.n	80037a6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800376a:	2301      	movs	r3, #1
 800376c:	627b      	str	r3, [r7, #36]	@ 0x24
 800376e:	e014      	b.n	800379a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003774:	4613      	mov	r3, r2
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800378a:	b2db      	uxtb	r3, r3
 800378c:	4619      	mov	r1, r3
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fb0a 	bl	8003da8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003796:	3301      	adds	r3, #1
 8003798:	627b      	str	r3, [r7, #36]	@ 0x24
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	791b      	ldrb	r3, [r3, #4]
 800379e:	461a      	mov	r2, r3
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d3e4      	bcc.n	8003770 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fe86 	bl	80074bc <USB_ReadInterrupts>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ba:	d13c      	bne.n	8003836 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037bc:	2301      	movs	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c0:	e02b      	b.n	800381a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	3318      	adds	r3, #24
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d115      	bne.n	8003814 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80037e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	da12      	bge.n	8003814 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f2:	4613      	mov	r3, r2
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3317      	adds	r3, #23
 80037fe:	2201      	movs	r2, #1
 8003800:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003804:	b2db      	uxtb	r3, r3
 8003806:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 faca 	bl	8003da8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	3301      	adds	r3, #1
 8003818:	627b      	str	r3, [r7, #36]	@ 0x24
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	791b      	ldrb	r3, [r3, #4]
 800381e:	461a      	mov	r2, r3
 8003820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003822:	4293      	cmp	r3, r2
 8003824:	d3cd      	bcc.n	80037c2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695a      	ldr	r2, [r3, #20]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003834:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f003 fe3e 	bl	80074bc <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800384a:	d156      	bne.n	80038fa <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800384c:	2301      	movs	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003850:	e045      	b.n	80038de <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003862:	6879      	ldr	r1, [r7, #4]
 8003864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d12e      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800387a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800387c:	2b00      	cmp	r3, #0
 800387e:	da2b      	bge.n	80038d8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800388c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003890:	429a      	cmp	r2, r3
 8003892:	d121      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038a6:	2201      	movs	r2, #1
 80038a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038b2:	6a3b      	ldr	r3, [r7, #32]
 80038b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038d4:	6053      	str	r3, [r2, #4]
            break;
 80038d6:	e008      	b.n	80038ea <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	3301      	adds	r3, #1
 80038dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	791b      	ldrb	r3, [r3, #4]
 80038e2:	461a      	mov	r2, r3
 80038e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d3b3      	bcc.n	8003852 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695a      	ldr	r2, [r3, #20]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80038f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 fddc 	bl	80074bc <USB_ReadInterrupts>
 8003904:	4603      	mov	r3, r0
 8003906:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800390a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800390e:	d10a      	bne.n	8003926 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f009 fdfb 	bl	800d50c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695a      	ldr	r2, [r3, #20]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f003 fdc6 	bl	80074bc <USB_ReadInterrupts>
 8003930:	4603      	mov	r3, r0
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b04      	cmp	r3, #4
 8003938:	d115      	bne.n	8003966 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f009 fdeb 	bl	800d528 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e000      	b.n	8003966 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003964:	bf00      	nop
    }
  }
}
 8003966:	3734      	adds	r7, #52	@ 0x34
 8003968:	46bd      	mov	sp, r7
 800396a:	bd90      	pop	{r4, r7, pc}

0800396c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	460b      	mov	r3, r1
 8003976:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_PCD_SetAddress+0x1a>
 8003982:	2302      	movs	r3, #2
 8003984:	e012      	b.n	80039ac <HAL_PCD_SetAddress+0x40>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fd25 	bl	80073ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	4608      	mov	r0, r1
 80039be:	4611      	mov	r1, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	70fb      	strb	r3, [r7, #3]
 80039c6:	460b      	mov	r3, r1
 80039c8:	803b      	strh	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	da0f      	bge.n	80039fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	f003 020f 	and.w	r2, r3, #15
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	4413      	add	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	3310      	adds	r3, #16
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	3304      	adds	r3, #4
 80039f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	705a      	strb	r2, [r3, #1]
 80039f8:	e00f      	b.n	8003a1a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 020f 	and.w	r2, r3, #15
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	4413      	add	r3, r2
 8003a10:	3304      	adds	r3, #4
 8003a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 030f 	and.w	r3, r3, #15
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a26:	883b      	ldrh	r3, [r7, #0]
 8003a28:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	78ba      	ldrb	r2, [r7, #2]
 8003a34:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	785b      	ldrb	r3, [r3, #1]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d004      	beq.n	8003a48 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a48:	78bb      	ldrb	r3, [r7, #2]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d102      	bne.n	8003a54 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_PCD_EP_Open+0xae>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e00e      	b.n	8003a80 <HAL_PCD_EP_Open+0xcc>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	68f9      	ldr	r1, [r7, #12]
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fea5 	bl	80067c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a7e:	7afb      	ldrb	r3, [r7, #11]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	da0f      	bge.n	8003abc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	f003 020f 	and.w	r2, r3, #15
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	3310      	adds	r3, #16
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3304      	adds	r3, #4
 8003ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	705a      	strb	r2, [r3, #1]
 8003aba:	e00f      	b.n	8003adc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d101      	bne.n	8003af6 <HAL_PCD_EP_Close+0x6e>
 8003af2:	2302      	movs	r3, #2
 8003af4:	e00e      	b.n	8003b14 <HAL_PCD_EP_Close+0x8c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2201      	movs	r2, #1
 8003afa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68f9      	ldr	r1, [r7, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 fee3 	bl	80068d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b2c:	7afb      	ldrb	r3, [r7, #11]
 8003b2e:	f003 020f 	and.w	r2, r3, #15
 8003b32:	4613      	mov	r3, r2
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4413      	add	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4413      	add	r3, r2
 8003b42:	3304      	adds	r3, #4
 8003b44:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	2200      	movs	r2, #0
 8003b56:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b5e:	7afb      	ldrb	r3, [r7, #11]
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	799b      	ldrb	r3, [r3, #6]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d102      	bne.n	8003b78 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6818      	ldr	r0, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	799b      	ldrb	r3, [r3, #6]
 8003b80:	461a      	mov	r2, r3
 8003b82:	6979      	ldr	r1, [r7, #20]
 8003b84:	f002 ff80 	bl	8006a88 <USB_EPStartXfer>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	f003 020f 	and.w	r2, r3, #15
 8003ba4:	6879      	ldr	r1, [r7, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	00db      	lsls	r3, r3, #3
 8003baa:	4413      	add	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	440b      	add	r3, r1
 8003bb0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003bb4:	681b      	ldr	r3, [r3, #0]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	607a      	str	r2, [r7, #4]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bd2:	7afb      	ldrb	r3, [r7, #11]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	3310      	adds	r3, #16
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	3304      	adds	r3, #4
 8003be8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	799b      	ldrb	r3, [r3, #6]
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d102      	bne.n	8003c1c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	799b      	ldrb	r3, [r3, #6]
 8003c24:	461a      	mov	r2, r3
 8003c26:	6979      	ldr	r1, [r7, #20]
 8003c28:	f002 ff2e 	bl	8006a88 <USB_EPStartXfer>

  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b084      	sub	sp, #16
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c42:	78fb      	ldrb	r3, [r7, #3]
 8003c44:	f003 030f 	and.w	r3, r3, #15
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	7912      	ldrb	r2, [r2, #4]
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d901      	bls.n	8003c54 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e04f      	b.n	8003cf4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	da0f      	bge.n	8003c7c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	4413      	add	r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	3310      	adds	r3, #16
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	4413      	add	r3, r2
 8003c70:	3304      	adds	r3, #4
 8003c72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	705a      	strb	r2, [r3, #1]
 8003c7a:	e00d      	b.n	8003c98 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_PCD_EP_SetStall+0x82>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e01d      	b.n	8003cf4 <HAL_PCD_EP_SetStall+0xbe>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f003 fabc 	bl	8007244 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ccc:	78fb      	ldrb	r3, [r7, #3]
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	7999      	ldrb	r1, [r3, #6]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f003 fcad 	bl	8007644 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d08:	78fb      	ldrb	r3, [r7, #3]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	7912      	ldrb	r2, [r2, #4]
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e042      	b.n	8003da0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da0f      	bge.n	8003d42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	3310      	adds	r3, #16
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	3304      	adds	r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	705a      	strb	r2, [r3, #1]
 8003d40:	e00f      	b.n	8003d62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 020f 	and.w	r2, r3, #15
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	b2da      	uxtb	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d101      	bne.n	8003d82 <HAL_PCD_EP_ClrStall+0x86>
 8003d7e:	2302      	movs	r3, #2
 8003d80:	e00e      	b.n	8003da0 <HAL_PCD_EP_ClrStall+0xa4>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2201      	movs	r2, #1
 8003d86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 fac5 	bl	8007320 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003db4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da0c      	bge.n	8003dd6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003dbc:	78fb      	ldrb	r3, [r7, #3]
 8003dbe:	f003 020f 	and.w	r2, r3, #15
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	3310      	adds	r3, #16
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	3304      	adds	r3, #4
 8003dd2:	60fb      	str	r3, [r7, #12]
 8003dd4:	e00c      	b.n	8003df0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	f003 020f 	and.w	r2, r3, #15
 8003ddc:	4613      	mov	r3, r2
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	4413      	add	r3, r2
 8003dec:	3304      	adds	r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f003 f8e4 	bl	8006fc4 <USB_EPStopXfer>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e00:	7afb      	ldrb	r3, [r7, #11]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b08a      	sub	sp, #40	@ 0x28
 8003e0e:	af02      	add	r7, sp, #8
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	3310      	adds	r3, #16
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3304      	adds	r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	695a      	ldr	r2, [r3, #20]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d901      	bls.n	8003e42 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e06b      	b.n	8003f1a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691a      	ldr	r2, [r3, #16]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	69fa      	ldr	r2, [r7, #28]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d902      	bls.n	8003e5e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3303      	adds	r3, #3
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e66:	e02a      	b.n	8003ebe <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d902      	bls.n	8003e84 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	3303      	adds	r3, #3
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	68d9      	ldr	r1, [r3, #12]
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	6978      	ldr	r0, [r7, #20]
 8003ea2:	f003 f939 	bl	8007118 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	441a      	add	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	695a      	ldr	r2, [r3, #20]
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	441a      	add	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eca:	699b      	ldr	r3, [r3, #24]
 8003ecc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d809      	bhi.n	8003ee8 <PCD_WriteEmptyTxFifo+0xde>
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d203      	bcs.n	8003ee8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1bf      	bne.n	8003e68 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d811      	bhi.n	8003f18 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	2201      	movs	r2, #1
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	6939      	ldr	r1, [r7, #16]
 8003f10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f14:	4013      	ands	r3, r2
 8003f16:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f18:	2300      	movs	r3, #0
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3720      	adds	r7, #32
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	333c      	adds	r3, #60	@ 0x3c
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	799b      	ldrb	r3, [r3, #6]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d17b      	bne.n	8004052 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d015      	beq.n	8003f90 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	4a61      	ldr	r2, [pc, #388]	@ (80040ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	f240 80b9 	bls.w	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80b3 	beq.w	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f86:	461a      	mov	r2, r3
 8003f88:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f8c:	6093      	str	r3, [r2, #8]
 8003f8e:	e0a7      	b.n	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2320      	movs	r3, #32
 8003faa:	6093      	str	r3, [r2, #8]
 8003fac:	e098      	b.n	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f040 8093 	bne.w	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	4a4b      	ldr	r2, [pc, #300]	@ (80040ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d90f      	bls.n	8003fe2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fde:	6093      	str	r3, [r2, #8]
 8003fe0:	e07e      	b.n	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4413      	add	r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6a1a      	ldr	r2, [r3, #32]
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	0159      	lsls	r1, r3, #5
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	440b      	add	r3, r1
 8004004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800400e:	1ad2      	subs	r2, r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d114      	bne.n	8004044 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d109      	bne.n	8004036 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800402c:	461a      	mov	r2, r3
 800402e:	2101      	movs	r1, #1
 8004030:	f003 fb08 	bl	8007644 <USB_EP0_OutStart>
 8004034:	e006      	b.n	8004044 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	441a      	add	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	4619      	mov	r1, r3
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f009 f99a 	bl	800d384 <HAL_PCD_DataOutStageCallback>
 8004050:	e046      	b.n	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4a26      	ldr	r2, [pc, #152]	@ (80040f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d124      	bne.n	80040a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00a      	beq.n	800407a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004070:	461a      	mov	r2, r3
 8004072:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004076:	6093      	str	r3, [r2, #8]
 8004078:	e032      	b.n	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f003 0320 	and.w	r3, r3, #32
 8004080:	2b00      	cmp	r3, #0
 8004082:	d008      	beq.n	8004096 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	2320      	movs	r3, #32
 8004094:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	4619      	mov	r1, r3
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f009 f971 	bl	800d384 <HAL_PCD_DataOutStageCallback>
 80040a2:	e01d      	b.n	80040e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d114      	bne.n	80040d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	4613      	mov	r3, r2
 80040b0:	00db      	lsls	r3, r3, #3
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	440b      	add	r3, r1
 80040b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d108      	bne.n	80040d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6818      	ldr	r0, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040cc:	461a      	mov	r2, r3
 80040ce:	2100      	movs	r1, #0
 80040d0:	f003 fab8 	bl	8007644 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	4619      	mov	r1, r3
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f009 f952 	bl	800d384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3720      	adds	r7, #32
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	4f54300a 	.word	0x4f54300a
 80040f0:	4f54310a 	.word	0x4f54310a

080040f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	333c      	adds	r3, #60	@ 0x3c
 800410c:	3304      	adds	r3, #4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	4a15      	ldr	r2, [pc, #84]	@ (800417c <PCD_EP_OutSetupPacket_int+0x88>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d90e      	bls.n	8004148 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004130:	2b00      	cmp	r3, #0
 8004132:	d009      	beq.n	8004148 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004140:	461a      	mov	r2, r3
 8004142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004146:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f009 f909 	bl	800d360 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	4a0a      	ldr	r2, [pc, #40]	@ (800417c <PCD_EP_OutSetupPacket_int+0x88>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d90c      	bls.n	8004170 <PCD_EP_OutSetupPacket_int+0x7c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	799b      	ldrb	r3, [r3, #6]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d108      	bne.n	8004170 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004168:	461a      	mov	r2, r3
 800416a:	2101      	movs	r1, #1
 800416c:	f003 fa6a 	bl	8007644 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	4f54300a 	.word	0x4f54300a

08004180 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
 8004188:	460b      	mov	r3, r1
 800418a:	70fb      	strb	r3, [r7, #3]
 800418c:	4613      	mov	r3, r2
 800418e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d107      	bne.n	80041ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800419e:	883b      	ldrh	r3, [r7, #0]
 80041a0:	0419      	lsls	r1, r3, #16
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	68ba      	ldr	r2, [r7, #8]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80041ac:	e028      	b.n	8004200 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b4:	0c1b      	lsrs	r3, r3, #16
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	4413      	add	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041bc:	2300      	movs	r3, #0
 80041be:	73fb      	strb	r3, [r7, #15]
 80041c0:	e00d      	b.n	80041de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	3340      	adds	r3, #64	@ 0x40
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	0c1b      	lsrs	r3, r3, #16
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	4413      	add	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
 80041da:	3301      	adds	r3, #1
 80041dc:	73fb      	strb	r3, [r7, #15]
 80041de:	7bfa      	ldrb	r2, [r7, #15]
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d3ec      	bcc.n	80041c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80041e8:	883b      	ldrh	r3, [r7, #0]
 80041ea:	0418      	lsls	r0, r3, #16
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6819      	ldr	r1, [r3, #0]
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	4302      	orrs	r2, r0
 80041f8:	3340      	adds	r3, #64	@ 0x40
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	440b      	add	r3, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3714      	adds	r7, #20
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	887a      	ldrh	r2, [r7, #2]
 8004220:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e267      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d075      	beq.n	8004352 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004266:	4b88      	ldr	r3, [pc, #544]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
 800426e:	2b04      	cmp	r3, #4
 8004270:	d00c      	beq.n	800428c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004272:	4b85      	ldr	r3, [pc, #532]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800427a:	2b08      	cmp	r3, #8
 800427c:	d112      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427e:	4b82      	ldr	r3, [pc, #520]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004286:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800428a:	d10b      	bne.n	80042a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800428c:	4b7e      	ldr	r3, [pc, #504]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05b      	beq.n	8004350 <HAL_RCC_OscConfig+0x108>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d157      	bne.n	8004350 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e242      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d106      	bne.n	80042bc <HAL_RCC_OscConfig+0x74>
 80042ae:	4b76      	ldr	r3, [pc, #472]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a75      	ldr	r2, [pc, #468]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e01d      	b.n	80042f8 <HAL_RCC_OscConfig+0xb0>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c4:	d10c      	bne.n	80042e0 <HAL_RCC_OscConfig+0x98>
 80042c6:	4b70      	ldr	r3, [pc, #448]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a6f      	ldr	r2, [pc, #444]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	4b6d      	ldr	r3, [pc, #436]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a6c      	ldr	r2, [pc, #432]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00b      	b.n	80042f8 <HAL_RCC_OscConfig+0xb0>
 80042e0:	4b69      	ldr	r3, [pc, #420]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a68      	ldr	r2, [pc, #416]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	4b66      	ldr	r3, [pc, #408]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a65      	ldr	r2, [pc, #404]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80042f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fd fb16 	bl	8001930 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004308:	f7fd fb12 	bl	8001930 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b64      	cmp	r3, #100	@ 0x64
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e207      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	4b5b      	ldr	r3, [pc, #364]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0f0      	beq.n	8004308 <HAL_RCC_OscConfig+0xc0>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fd fb02 	bl	8001930 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fd fafe 	bl	8001930 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	@ 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e1f3      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	4b51      	ldr	r3, [pc, #324]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1f0      	bne.n	8004330 <HAL_RCC_OscConfig+0xe8>
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004350:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d063      	beq.n	8004426 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800435e:	4b4a      	ldr	r3, [pc, #296]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800436a:	4b47      	ldr	r3, [pc, #284]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004372:	2b08      	cmp	r3, #8
 8004374:	d11c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004376:	4b44      	ldr	r3, [pc, #272]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d116      	bne.n	80043b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004382:	4b41      	ldr	r3, [pc, #260]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d005      	beq.n	800439a <HAL_RCC_OscConfig+0x152>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d001      	beq.n	800439a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e1c7      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800439a:	4b3b      	ldr	r3, [pc, #236]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	00db      	lsls	r3, r3, #3
 80043a8:	4937      	ldr	r1, [pc, #220]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	e03a      	b.n	8004426 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d020      	beq.n	80043fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b8:	4b34      	ldr	r3, [pc, #208]	@ (800448c <HAL_RCC_OscConfig+0x244>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043be:	f7fd fab7 	bl	8001930 <HAL_GetTick>
 80043c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c4:	e008      	b.n	80043d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c6:	f7fd fab3 	bl	8001930 <HAL_GetTick>
 80043ca:	4602      	mov	r2, r0
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	1ad3      	subs	r3, r2, r3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d901      	bls.n	80043d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d4:	2303      	movs	r3, #3
 80043d6:	e1a8      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d0f0      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e4:	4b28      	ldr	r3, [pc, #160]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4925      	ldr	r1, [pc, #148]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]
 80043f8:	e015      	b.n	8004426 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043fa:	4b24      	ldr	r3, [pc, #144]	@ (800448c <HAL_RCC_OscConfig+0x244>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fa96 	bl	8001930 <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004408:	f7fd fa92 	bl	8001930 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e187      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800441a:	4b1b      	ldr	r3, [pc, #108]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	2b00      	cmp	r3, #0
 8004430:	d036      	beq.n	80044a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d016      	beq.n	8004468 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443a:	4b15      	ldr	r3, [pc, #84]	@ (8004490 <HAL_RCC_OscConfig+0x248>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004440:	f7fd fa76 	bl	8001930 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004448:	f7fd fa72 	bl	8001930 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e167      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800445a:	4b0b      	ldr	r3, [pc, #44]	@ (8004488 <HAL_RCC_OscConfig+0x240>)
 800445c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x200>
 8004466:	e01b      	b.n	80044a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004468:	4b09      	ldr	r3, [pc, #36]	@ (8004490 <HAL_RCC_OscConfig+0x248>)
 800446a:	2200      	movs	r2, #0
 800446c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446e:	f7fd fa5f 	bl	8001930 <HAL_GetTick>
 8004472:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004474:	e00e      	b.n	8004494 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004476:	f7fd fa5b 	bl	8001930 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b02      	cmp	r3, #2
 8004482:	d907      	bls.n	8004494 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e150      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
 8004488:	40023800 	.word	0x40023800
 800448c:	42470000 	.word	0x42470000
 8004490:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	4b88      	ldr	r3, [pc, #544]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004496:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004498:	f003 0302 	and.w	r3, r3, #2
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1ea      	bne.n	8004476 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8097 	beq.w	80045dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ae:	2300      	movs	r3, #0
 80044b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044b2:	4b81      	ldr	r3, [pc, #516]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10f      	bne.n	80044de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	60bb      	str	r3, [r7, #8]
 80044c2:	4b7d      	ldr	r3, [pc, #500]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c6:	4a7c      	ldr	r2, [pc, #496]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ce:	4b7a      	ldr	r3, [pc, #488]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d6:	60bb      	str	r3, [r7, #8]
 80044d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044da:	2301      	movs	r3, #1
 80044dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b77      	ldr	r3, [pc, #476]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d118      	bne.n	800451c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ea:	4b74      	ldr	r3, [pc, #464]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a73      	ldr	r2, [pc, #460]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 80044f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f6:	f7fd fa1b 	bl	8001930 <HAL_GetTick>
 80044fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fc:	e008      	b.n	8004510 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fe:	f7fd fa17 	bl	8001930 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	2b02      	cmp	r3, #2
 800450a:	d901      	bls.n	8004510 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e10c      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004510:	4b6a      	ldr	r3, [pc, #424]	@ (80046bc <HAL_RCC_OscConfig+0x474>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0f0      	beq.n	80044fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d106      	bne.n	8004532 <HAL_RCC_OscConfig+0x2ea>
 8004524:	4b64      	ldr	r3, [pc, #400]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004526:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004528:	4a63      	ldr	r2, [pc, #396]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800452a:	f043 0301 	orr.w	r3, r3, #1
 800452e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004530:	e01c      	b.n	800456c <HAL_RCC_OscConfig+0x324>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b05      	cmp	r3, #5
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0x30c>
 800453a:	4b5f      	ldr	r3, [pc, #380]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453e:	4a5e      	ldr	r2, [pc, #376]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004540:	f043 0304 	orr.w	r3, r3, #4
 8004544:	6713      	str	r3, [r2, #112]	@ 0x70
 8004546:	4b5c      	ldr	r3, [pc, #368]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800454a:	4a5b      	ldr	r2, [pc, #364]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6713      	str	r3, [r2, #112]	@ 0x70
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0x324>
 8004554:	4b58      	ldr	r3, [pc, #352]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004556:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004558:	4a57      	ldr	r2, [pc, #348]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800455a:	f023 0301 	bic.w	r3, r3, #1
 800455e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004560:	4b55      	ldr	r3, [pc, #340]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004564:	4a54      	ldr	r2, [pc, #336]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004566:	f023 0304 	bic.w	r3, r3, #4
 800456a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d015      	beq.n	80045a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004574:	f7fd f9dc 	bl	8001930 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800457a:	e00a      	b.n	8004592 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457c:	f7fd f9d8 	bl	8001930 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800458a:	4293      	cmp	r3, r2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e0cb      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004592:	4b49      	ldr	r3, [pc, #292]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	f003 0302 	and.w	r3, r3, #2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d0ee      	beq.n	800457c <HAL_RCC_OscConfig+0x334>
 800459e:	e014      	b.n	80045ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045a0:	f7fd f9c6 	bl	8001930 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fd f9c2 	bl	8001930 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0b5      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045be:	4b3e      	ldr	r3, [pc, #248]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1ee      	bne.n	80045a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ca:	7dfb      	ldrb	r3, [r7, #23]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d105      	bne.n	80045dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045d0:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d4:	4a38      	ldr	r2, [pc, #224]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80a1 	beq.w	8004728 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e6:	4b34      	ldr	r3, [pc, #208]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f003 030c 	and.w	r3, r3, #12
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	d05c      	beq.n	80046ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d141      	bne.n	800467e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045fa:	4b31      	ldr	r3, [pc, #196]	@ (80046c0 <HAL_RCC_OscConfig+0x478>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004600:	f7fd f996 	bl	8001930 <HAL_GetTick>
 8004604:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	e008      	b.n	800461a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004608:	f7fd f992 	bl	8001930 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	2b02      	cmp	r3, #2
 8004614:	d901      	bls.n	800461a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e087      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800461a:	4b27      	ldr	r3, [pc, #156]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1f0      	bne.n	8004608 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69da      	ldr	r2, [r3, #28]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004634:	019b      	lsls	r3, r3, #6
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800463c:	085b      	lsrs	r3, r3, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	041b      	lsls	r3, r3, #16
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	491b      	ldr	r1, [pc, #108]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 800464c:	4313      	orrs	r3, r2
 800464e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004650:	4b1b      	ldr	r3, [pc, #108]	@ (80046c0 <HAL_RCC_OscConfig+0x478>)
 8004652:	2201      	movs	r2, #1
 8004654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004656:	f7fd f96b 	bl	8001930 <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465e:	f7fd f967 	bl	8001930 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e05c      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004670:	4b11      	ldr	r3, [pc, #68]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x416>
 800467c:	e054      	b.n	8004728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467e:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <HAL_RCC_OscConfig+0x478>)
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004684:	f7fd f954 	bl	8001930 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468c:	f7fd f950 	bl	8001930 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b02      	cmp	r3, #2
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e045      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469e:	4b06      	ldr	r3, [pc, #24]	@ (80046b8 <HAL_RCC_OscConfig+0x470>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x444>
 80046aa:	e03d      	b.n	8004728 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d107      	bne.n	80046c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e038      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
 80046b8:	40023800 	.word	0x40023800
 80046bc:	40007000 	.word	0x40007000
 80046c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004734 <HAL_RCC_OscConfig+0x4ec>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	699b      	ldr	r3, [r3, #24]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d028      	beq.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d121      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d11a      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d111      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470a:	085b      	lsrs	r3, r3, #1
 800470c:	3b01      	subs	r3, #1
 800470e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004720:	429a      	cmp	r2, r3
 8004722:	d001      	beq.n	8004728 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800

08004738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e0cc      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800474c:	4b68      	ldr	r3, [pc, #416]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d90c      	bls.n	8004774 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b65      	ldr	r3, [pc, #404]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b63      	ldr	r3, [pc, #396]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e0b8      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800478c:	4b59      	ldr	r3, [pc, #356]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a58      	ldr	r2, [pc, #352]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a4:	4b53      	ldr	r3, [pc, #332]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	4a52      	ldr	r2, [pc, #328]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047b0:	4b50      	ldr	r3, [pc, #320]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	494d      	ldr	r1, [pc, #308]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0301 	and.w	r3, r3, #1
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d044      	beq.n	8004858 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d6:	4b47      	ldr	r3, [pc, #284]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d119      	bne.n	8004816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e07f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d003      	beq.n	80047f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047f2:	2b03      	cmp	r3, #3
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f6:	4b3f      	ldr	r3, [pc, #252]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d109      	bne.n	8004816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e06f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004806:	4b3b      	ldr	r3, [pc, #236]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e067      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004816:	4b37      	ldr	r3, [pc, #220]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	689b      	ldr	r3, [r3, #8]
 800481a:	f023 0203 	bic.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4934      	ldr	r1, [pc, #208]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	4313      	orrs	r3, r2
 8004826:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004828:	f7fd f882 	bl	8001930 <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	e00a      	b.n	8004846 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004830:	f7fd f87e 	bl	8001930 <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483e:	4293      	cmp	r3, r2
 8004840:	d901      	bls.n	8004846 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e04f      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	4b2b      	ldr	r3, [pc, #172]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 020c 	and.w	r2, r3, #12
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	429a      	cmp	r2, r3
 8004856:	d1eb      	bne.n	8004830 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004858:	4b25      	ldr	r3, [pc, #148]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 030f 	and.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	429a      	cmp	r2, r3
 8004864:	d20c      	bcs.n	8004880 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004866:	4b22      	ldr	r3, [pc, #136]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	b2d2      	uxtb	r2, r2
 800486c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486e:	4b20      	ldr	r3, [pc, #128]	@ (80048f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e032      	b.n	80048e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d008      	beq.n	800489e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800488c:	4b19      	ldr	r3, [pc, #100]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4916      	ldr	r1, [pc, #88]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d009      	beq.n	80048be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048aa:	4b12      	ldr	r3, [pc, #72]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	490e      	ldr	r1, [pc, #56]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048be:	f000 f821 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 80048c2:	4602      	mov	r2, r0
 80048c4:	4b0b      	ldr	r3, [pc, #44]	@ (80048f4 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	490a      	ldr	r1, [pc, #40]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c0>)
 80048d0:	5ccb      	ldrb	r3, [r1, r3]
 80048d2:	fa22 f303 	lsr.w	r3, r2, r3
 80048d6:	4a09      	ldr	r2, [pc, #36]	@ (80048fc <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048da:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <HAL_RCC_ClockConfig+0x1c8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fc feec 	bl	80016bc <HAL_InitTick>

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	40023c00 	.word	0x40023c00
 80048f4:	40023800 	.word	0x40023800
 80048f8:	0800dc50 	.word	0x0800dc50
 80048fc:	20000000 	.word	0x20000000
 8004900:	20000004 	.word	0x20000004

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004908:	b094      	sub	sp, #80	@ 0x50
 800490a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800491c:	4b79      	ldr	r3, [pc, #484]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 030c 	and.w	r3, r3, #12
 8004924:	2b08      	cmp	r3, #8
 8004926:	d00d      	beq.n	8004944 <HAL_RCC_GetSysClockFreq+0x40>
 8004928:	2b08      	cmp	r3, #8
 800492a:	f200 80e1 	bhi.w	8004af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0x34>
 8004932:	2b04      	cmp	r3, #4
 8004934:	d003      	beq.n	800493e <HAL_RCC_GetSysClockFreq+0x3a>
 8004936:	e0db      	b.n	8004af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004938:	4b73      	ldr	r3, [pc, #460]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800493c:	e0db      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493e:	4b73      	ldr	r3, [pc, #460]	@ (8004b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8004940:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004942:	e0d8      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004944:	4b6f      	ldr	r3, [pc, #444]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800494c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800494e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d063      	beq.n	8004a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800495a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	2200      	movs	r2, #0
 8004962:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004964:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	633b      	str	r3, [r7, #48]	@ 0x30
 800496e:	2300      	movs	r3, #0
 8004970:	637b      	str	r3, [r7, #52]	@ 0x34
 8004972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	f04f 0000 	mov.w	r0, #0
 800497e:	f04f 0100 	mov.w	r1, #0
 8004982:	0159      	lsls	r1, r3, #5
 8004984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004988:	0150      	lsls	r0, r2, #5
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4621      	mov	r1, r4
 8004990:	1a51      	subs	r1, r2, r1
 8004992:	6139      	str	r1, [r7, #16]
 8004994:	4629      	mov	r1, r5
 8004996:	eb63 0301 	sbc.w	r3, r3, r1
 800499a:	617b      	str	r3, [r7, #20]
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a8:	4659      	mov	r1, fp
 80049aa:	018b      	lsls	r3, r1, #6
 80049ac:	4651      	mov	r1, sl
 80049ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049b2:	4651      	mov	r1, sl
 80049b4:	018a      	lsls	r2, r1, #6
 80049b6:	4651      	mov	r1, sl
 80049b8:	ebb2 0801 	subs.w	r8, r2, r1
 80049bc:	4659      	mov	r1, fp
 80049be:	eb63 0901 	sbc.w	r9, r3, r1
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	f04f 0300 	mov.w	r3, #0
 80049ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d6:	4690      	mov	r8, r2
 80049d8:	4699      	mov	r9, r3
 80049da:	4623      	mov	r3, r4
 80049dc:	eb18 0303 	adds.w	r3, r8, r3
 80049e0:	60bb      	str	r3, [r7, #8]
 80049e2:	462b      	mov	r3, r5
 80049e4:	eb49 0303 	adc.w	r3, r9, r3
 80049e8:	60fb      	str	r3, [r7, #12]
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049f6:	4629      	mov	r1, r5
 80049f8:	024b      	lsls	r3, r1, #9
 80049fa:	4621      	mov	r1, r4
 80049fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a00:	4621      	mov	r1, r4
 8004a02:	024a      	lsls	r2, r1, #9
 8004a04:	4610      	mov	r0, r2
 8004a06:	4619      	mov	r1, r3
 8004a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a14:	f7fb fbf4 	bl	8000200 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	e058      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b38      	ldr	r3, [pc, #224]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	2200      	movs	r2, #0
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	4611      	mov	r1, r2
 8004a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a32:	623b      	str	r3, [r7, #32]
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a3c:	4642      	mov	r2, r8
 8004a3e:	464b      	mov	r3, r9
 8004a40:	f04f 0000 	mov.w	r0, #0
 8004a44:	f04f 0100 	mov.w	r1, #0
 8004a48:	0159      	lsls	r1, r3, #5
 8004a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a4e:	0150      	lsls	r0, r2, #5
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4641      	mov	r1, r8
 8004a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a74:	ebb2 040a 	subs.w	r4, r2, sl
 8004a78:	eb63 050b 	sbc.w	r5, r3, fp
 8004a7c:	f04f 0200 	mov.w	r2, #0
 8004a80:	f04f 0300 	mov.w	r3, #0
 8004a84:	00eb      	lsls	r3, r5, #3
 8004a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a8a:	00e2      	lsls	r2, r4, #3
 8004a8c:	4614      	mov	r4, r2
 8004a8e:	461d      	mov	r5, r3
 8004a90:	4643      	mov	r3, r8
 8004a92:	18e3      	adds	r3, r4, r3
 8004a94:	603b      	str	r3, [r7, #0]
 8004a96:	464b      	mov	r3, r9
 8004a98:	eb45 0303 	adc.w	r3, r5, r3
 8004a9c:	607b      	str	r3, [r7, #4]
 8004a9e:	f04f 0200 	mov.w	r2, #0
 8004aa2:	f04f 0300 	mov.w	r3, #0
 8004aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aaa:	4629      	mov	r1, r5
 8004aac:	028b      	lsls	r3, r1, #10
 8004aae:	4621      	mov	r1, r4
 8004ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab4:	4621      	mov	r1, r4
 8004ab6:	028a      	lsls	r2, r1, #10
 8004ab8:	4610      	mov	r0, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004abe:	2200      	movs	r2, #0
 8004ac0:	61bb      	str	r3, [r7, #24]
 8004ac2:	61fa      	str	r2, [r7, #28]
 8004ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac8:	f7fb fb9a 	bl	8000200 <__aeabi_uldivmod>
 8004acc:	4602      	mov	r2, r0
 8004ace:	460b      	mov	r3, r1
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0c1b      	lsrs	r3, r3, #16
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	3301      	adds	r3, #1
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ae4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ae6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aee:	e002      	b.n	8004af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004af0:	4b05      	ldr	r3, [pc, #20]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8004af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3750      	adds	r7, #80	@ 0x50
 8004afc:	46bd      	mov	sp, r7
 8004afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b02:	bf00      	nop
 8004b04:	40023800 	.word	0x40023800
 8004b08:	00f42400 	.word	0x00f42400
 8004b0c:	007a1200 	.word	0x007a1200

08004b10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b14:	4b03      	ldr	r3, [pc, #12]	@ (8004b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b16:	681b      	ldr	r3, [r3, #0]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
 8004b22:	bf00      	nop
 8004b24:	20000000 	.word	0x20000000

08004b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b2c:	f7ff fff0 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b30:	4602      	mov	r2, r0
 8004b32:	4b05      	ldr	r3, [pc, #20]	@ (8004b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	0a9b      	lsrs	r3, r3, #10
 8004b38:	f003 0307 	and.w	r3, r3, #7
 8004b3c:	4903      	ldr	r1, [pc, #12]	@ (8004b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3e:	5ccb      	ldrb	r3, [r1, r3]
 8004b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	0800dc60 	.word	0x0800dc60

08004b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b54:	f7ff ffdc 	bl	8004b10 <HAL_RCC_GetHCLKFreq>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	0b5b      	lsrs	r3, r3, #13
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	4903      	ldr	r1, [pc, #12]	@ (8004b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b66:	5ccb      	ldrb	r3, [r1, r3]
 8004b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	40023800 	.word	0x40023800
 8004b74:	0800dc60 	.word	0x0800dc60

08004b78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	220f      	movs	r2, #15
 8004b86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b88:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0203 	and.w	r2, r3, #3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b94:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bac:	4b09      	ldr	r3, [pc, #36]	@ (8004bd4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	08db      	lsrs	r3, r3, #3
 8004bb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bba:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <HAL_RCC_GetClockConfig+0x60>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 020f 	and.w	r2, r3, #15
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	601a      	str	r2, [r3, #0]
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	40023c00 	.word	0x40023c00

08004bdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d075      	beq.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c10:	4b91      	ldr	r3, [pc, #580]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c12:	2200      	movs	r2, #0
 8004c14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c16:	f7fc fe8b 	bl	8001930 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c1e:	f7fc fe87 	bl	8001930 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e189      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c30:	4b8a      	ldr	r3, [pc, #552]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f0      	bne.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 0301 	and.w	r3, r3, #1
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d009      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	019a      	lsls	r2, r3, #6
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	071b      	lsls	r3, r3, #28
 8004c54:	4981      	ldr	r1, [pc, #516]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01f      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c68:	4b7c      	ldr	r3, [pc, #496]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6e:	0f1b      	lsrs	r3, r3, #28
 8004c70:	f003 0307 	and.w	r3, r3, #7
 8004c74:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	019a      	lsls	r2, r3, #6
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	061b      	lsls	r3, r3, #24
 8004c82:	431a      	orrs	r2, r3
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	071b      	lsls	r3, r3, #28
 8004c88:	4974      	ldr	r1, [pc, #464]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004c90:	4b72      	ldr	r3, [pc, #456]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c96:	f023 021f 	bic.w	r2, r3, #31
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	496e      	ldr	r1, [pc, #440]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	019a      	lsls	r2, r3, #6
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	061b      	lsls	r3, r3, #24
 8004cc0:	431a      	orrs	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	071b      	lsls	r3, r3, #28
 8004cc8:	4964      	ldr	r1, [pc, #400]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cd0:	4b61      	ldr	r3, [pc, #388]	@ (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cd6:	f7fc fe2b 	bl	8001930 <HAL_GetTick>
 8004cda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cde:	f7fc fe27 	bl	8001930 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e129      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cf0:	4b5a      	ldr	r3, [pc, #360]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0304 	and.w	r3, r3, #4
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d105      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d079      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc fe09 	bl	8001930 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d22:	f7fc fe05 	bl	8001930 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e107      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d34:	4b49      	ldr	r3, [pc, #292]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d40:	d0ef      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0304 	and.w	r3, r3, #4
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d4e:	4b43      	ldr	r3, [pc, #268]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d54:	0f1b      	lsrs	r3, r3, #28
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	019a      	lsls	r2, r3, #6
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	061b      	lsls	r3, r3, #24
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	071b      	lsls	r3, r3, #28
 8004d6e:	493b      	ldr	r1, [pc, #236]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d76:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d7c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a1b      	ldr	r3, [r3, #32]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	021b      	lsls	r3, r3, #8
 8004d88:	4934      	ldr	r1, [pc, #208]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01e      	beq.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004da2:	0e1b      	lsrs	r3, r3, #24
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	019a      	lsls	r2, r3, #6
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	061b      	lsls	r3, r3, #24
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	071b      	lsls	r3, r3, #28
 8004dbc:	4927      	ldr	r1, [pc, #156]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004dc4:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	4922      	ldr	r1, [pc, #136]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dda:	4b21      	ldr	r3, [pc, #132]	@ (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004de0:	f7fc fda6 	bl	8001930 <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004de8:	f7fc fda2 	bl	8001930 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e0a4      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004dfa:	4b18      	ldr	r3, [pc, #96]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e06:	d1ef      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0320 	and.w	r3, r3, #32
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 808b 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e26:	4b0d      	ldr	r3, [pc, #52]	@ (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e32:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a0b      	ldr	r2, [pc, #44]	@ (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e3e:	f7fc fd77 	bl	8001930 <HAL_GetTick>
 8004e42:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e44:	e010      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e46:	f7fc fd73 	bl	8001930 <HAL_GetTick>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d909      	bls.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e075      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e58:	42470068 	.word	0x42470068
 8004e5c:	40023800 	.word	0x40023800
 8004e60:	42470070 	.word	0x42470070
 8004e64:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e68:	4b38      	ldr	r3, [pc, #224]	@ (8004f4c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0e8      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e74:	4b36      	ldr	r3, [pc, #216]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02f      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e88:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d028      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e92:	4b2f      	ldr	r3, [pc, #188]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e9a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f54 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ea8:	4a29      	ldr	r2, [pc, #164]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004eae:	4b28      	ldr	r3, [pc, #160]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d114      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004eba:	f7fc fd39 	bl	8001930 <HAL_GetTick>
 8004ebe:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fc fd35 	bl	8001930 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e035      	b.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d0ee      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ef0:	d10d      	bne.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ef2:	4b17      	ldr	r3, [pc, #92]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f06:	4912      	ldr	r1, [pc, #72]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	608b      	str	r3, [r1, #8]
 8004f0c:	e005      	b.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f0e:	4b10      	ldr	r3, [pc, #64]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	4a0f      	ldr	r2, [pc, #60]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f14:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f18:	6093      	str	r3, [r2, #8]
 8004f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f1c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f26:	490a      	ldr	r1, [pc, #40]	@ (8004f50 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0310 	and.w	r3, r3, #16
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004f3e:	4b06      	ldr	r3, [pc, #24]	@ (8004f58 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f40:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40007000 	.word	0x40007000
 8004f50:	40023800 	.word	0x40023800
 8004f54:	42470e40 	.word	0x42470e40
 8004f58:	424711e0 	.word	0x424711e0

08004f5c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b082      	sub	sp, #8
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e025      	b.n	8004fbc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f7fc fb8f 	bl	80016a8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2202      	movs	r2, #2
 8004f8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3304      	adds	r3, #4
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4610      	mov	r0, r2
 8004f9e:	f000 ffd3 	bl	8005f48 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6818      	ldr	r0, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	461a      	mov	r2, r3
 8004fac:	6839      	ldr	r1, [r7, #0]
 8004fae:	f001 f828 	bl	8006002 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e07b      	b.n	80050ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d108      	bne.n	8004ff0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fe6:	d009      	beq.n	8004ffc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	61da      	str	r2, [r3, #28]
 8004fee:	e005      	b.n	8004ffc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc f9cc 	bl	80013b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005032:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005076:	431a      	orrs	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005080:	ea42 0103 	orr.w	r1, r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005088:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	0c1b      	lsrs	r3, r3, #16
 800509a:	f003 0104 	and.w	r1, r3, #4
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	f003 0210 	and.w	r2, r3, #16
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	69da      	ldr	r2, [r3, #28]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e041      	b.n	800516c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7fc f9d7 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2202      	movs	r2, #2
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f000 fa7d 	bl	8005614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3708      	adds	r7, #8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b01      	cmp	r3, #1
 8005186:	d001      	beq.n	800518c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e04e      	b.n	800522a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	68da      	ldr	r2, [r3, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0201 	orr.w	r2, r2, #1
 80051a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a23      	ldr	r2, [pc, #140]	@ (8005238 <HAL_TIM_Base_Start_IT+0xc4>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d022      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051b6:	d01d      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1f      	ldr	r2, [pc, #124]	@ (800523c <HAL_TIM_Base_Start_IT+0xc8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d018      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005240 <HAL_TIM_Base_Start_IT+0xcc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d013      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a1c      	ldr	r2, [pc, #112]	@ (8005244 <HAL_TIM_Base_Start_IT+0xd0>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00e      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a1b      	ldr	r2, [pc, #108]	@ (8005248 <HAL_TIM_Base_Start_IT+0xd4>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d009      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a19      	ldr	r2, [pc, #100]	@ (800524c <HAL_TIM_Base_Start_IT+0xd8>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d004      	beq.n	80051f4 <HAL_TIM_Base_Start_IT+0x80>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a18      	ldr	r2, [pc, #96]	@ (8005250 <HAL_TIM_Base_Start_IT+0xdc>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d111      	bne.n	8005218 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2b06      	cmp	r3, #6
 8005204:	d010      	beq.n	8005228 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f042 0201 	orr.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005216:	e007      	b.n	8005228 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f042 0201 	orr.w	r2, r2, #1
 8005226:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3714      	adds	r7, #20
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40010000 	.word	0x40010000
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	40000c00 	.word	0x40000c00
 8005248:	40010400 	.word	0x40010400
 800524c:	40014000 	.word	0x40014000
 8005250:	40001800 	.word	0x40001800

08005254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 0302 	and.w	r3, r3, #2
 8005272:	2b00      	cmp	r3, #0
 8005274:	d020      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01b      	beq.n	80052b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0202 	mvn.w	r2, #2
 8005288:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	f003 0303 	and.w	r3, r3, #3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f999 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f98b 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f99c 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	f003 0304 	and.w	r3, r3, #4
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d020      	beq.n	8005304 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01b      	beq.n	8005304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0204 	mvn.w	r2, #4
 80052d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2202      	movs	r2, #2
 80052da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f973 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 80052f0:	e005      	b.n	80052fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f965 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 f976 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	f003 0308 	and.w	r3, r3, #8
 800530a:	2b00      	cmp	r3, #0
 800530c:	d020      	beq.n	8005350 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01b      	beq.n	8005350 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0208 	mvn.w	r2, #8
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2204      	movs	r2, #4
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f94d 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f93f 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f950 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b00      	cmp	r3, #0
 8005358:	d020      	beq.n	800539c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	d01b      	beq.n	800539c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f06f 0210 	mvn.w	r2, #16
 800536c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2208      	movs	r2, #8
 8005372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800537e:	2b00      	cmp	r3, #0
 8005380:	d003      	beq.n	800538a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f927 	bl	80055d6 <HAL_TIM_IC_CaptureCallback>
 8005388:	e005      	b.n	8005396 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f919 	bl	80055c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 f92a 	bl	80055ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00c      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d007      	beq.n	80053c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0201 	mvn.w	r2, #1
 80053b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb fdd2 	bl	8000f64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00c      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d007      	beq.n	80053e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fae4 	bl	80059ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00c      	beq.n	8005408 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d007      	beq.n	8005408 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f8fb 	bl	80055fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00c      	beq.n	800542c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d007      	beq.n	800542c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f06f 0220 	mvn.w	r2, #32
 8005424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 fab6 	bl	8005998 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800542c:	bf00      	nop
 800542e:	3710      	adds	r7, #16
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800543e:	2300      	movs	r3, #0
 8005440:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIM_ConfigClockSource+0x1c>
 800544c:	2302      	movs	r3, #2
 800544e:	e0b4      	b.n	80055ba <HAL_TIM_ConfigClockSource+0x186>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800546e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005476:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005488:	d03e      	beq.n	8005508 <HAL_TIM_ConfigClockSource+0xd4>
 800548a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800548e:	f200 8087 	bhi.w	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 8005492:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005496:	f000 8086 	beq.w	80055a6 <HAL_TIM_ConfigClockSource+0x172>
 800549a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800549e:	d87f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b70      	cmp	r3, #112	@ 0x70
 80054a2:	d01a      	beq.n	80054da <HAL_TIM_ConfigClockSource+0xa6>
 80054a4:	2b70      	cmp	r3, #112	@ 0x70
 80054a6:	d87b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b60      	cmp	r3, #96	@ 0x60
 80054aa:	d050      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x11a>
 80054ac:	2b60      	cmp	r3, #96	@ 0x60
 80054ae:	d877      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b50      	cmp	r3, #80	@ 0x50
 80054b2:	d03c      	beq.n	800552e <HAL_TIM_ConfigClockSource+0xfa>
 80054b4:	2b50      	cmp	r3, #80	@ 0x50
 80054b6:	d873      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b8:	2b40      	cmp	r3, #64	@ 0x40
 80054ba:	d058      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x13a>
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d86f      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b30      	cmp	r3, #48	@ 0x30
 80054c2:	d064      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054c4:	2b30      	cmp	r3, #48	@ 0x30
 80054c6:	d86b      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b20      	cmp	r3, #32
 80054ca:	d060      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054cc:	2b20      	cmp	r3, #32
 80054ce:	d867      	bhi.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05c      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d05a      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x15a>
 80054d8:	e062      	b.n	80055a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ea:	f000 f9b9 	bl	8005860 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	609a      	str	r2, [r3, #8]
      break;
 8005506:	e04f      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005518:	f000 f9a2 	bl	8005860 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689a      	ldr	r2, [r3, #8]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800552a:	609a      	str	r2, [r3, #8]
      break;
 800552c:	e03c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f916 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2150      	movs	r1, #80	@ 0x50
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f96f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800554c:	e02c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f935 	bl	80057ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2160      	movs	r1, #96	@ 0x60
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f95f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800556c:	e01c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f8f6 	bl	800576c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2140      	movs	r1, #64	@ 0x40
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f94f 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800558c:	e00c      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f000 f946 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 800559e:	e003      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	73fb      	strb	r3, [r7, #15]
      break;
 80055a4:	e000      	b.n	80055a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}

080055c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ca:	bf00      	nop
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b083      	sub	sp, #12
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055de:	bf00      	nop
 80055e0:	370c      	adds	r7, #12
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055f2:	bf00      	nop
 80055f4:	370c      	adds	r7, #12
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr

080055fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055fe:	b480      	push	{r7}
 8005600:	b083      	sub	sp, #12
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005606:	bf00      	nop
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
	...

08005614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a46      	ldr	r2, [pc, #280]	@ (8005740 <TIM_Base_SetConfig+0x12c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005632:	d00f      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a43      	ldr	r2, [pc, #268]	@ (8005744 <TIM_Base_SetConfig+0x130>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a42      	ldr	r2, [pc, #264]	@ (8005748 <TIM_Base_SetConfig+0x134>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a41      	ldr	r2, [pc, #260]	@ (800574c <TIM_Base_SetConfig+0x138>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a40      	ldr	r2, [pc, #256]	@ (8005750 <TIM_Base_SetConfig+0x13c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d108      	bne.n	8005666 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a35      	ldr	r2, [pc, #212]	@ (8005740 <TIM_Base_SetConfig+0x12c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d02b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005674:	d027      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a32      	ldr	r2, [pc, #200]	@ (8005744 <TIM_Base_SetConfig+0x130>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d023      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a31      	ldr	r2, [pc, #196]	@ (8005748 <TIM_Base_SetConfig+0x134>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d01f      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a30      	ldr	r2, [pc, #192]	@ (800574c <TIM_Base_SetConfig+0x138>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d01b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2f      	ldr	r2, [pc, #188]	@ (8005750 <TIM_Base_SetConfig+0x13c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d017      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2e      	ldr	r2, [pc, #184]	@ (8005754 <TIM_Base_SetConfig+0x140>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d013      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a2d      	ldr	r2, [pc, #180]	@ (8005758 <TIM_Base_SetConfig+0x144>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d00f      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a2c      	ldr	r2, [pc, #176]	@ (800575c <TIM_Base_SetConfig+0x148>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d00b      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005760 <TIM_Base_SetConfig+0x14c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d007      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005764 <TIM_Base_SetConfig+0x150>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d003      	beq.n	80056c6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a29      	ldr	r2, [pc, #164]	@ (8005768 <TIM_Base_SetConfig+0x154>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d108      	bne.n	80056d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a10      	ldr	r2, [pc, #64]	@ (8005740 <TIM_Base_SetConfig+0x12c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_Base_SetConfig+0xf8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	@ (8005750 <TIM_Base_SetConfig+0x13c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d103      	bne.n	8005714 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	691a      	ldr	r2, [r3, #16]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b01      	cmp	r3, #1
 8005724:	d105      	bne.n	8005732 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	611a      	str	r2, [r3, #16]
  }
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40010000 	.word	0x40010000
 8005744:	40000400 	.word	0x40000400
 8005748:	40000800 	.word	0x40000800
 800574c:	40000c00 	.word	0x40000c00
 8005750:	40010400 	.word	0x40010400
 8005754:	40014000 	.word	0x40014000
 8005758:	40014400 	.word	0x40014400
 800575c:	40014800 	.word	0x40014800
 8005760:	40001800 	.word	0x40001800
 8005764:	40001c00 	.word	0x40001c00
 8005768:	40002000 	.word	0x40002000

0800576c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800576c:	b480      	push	{r7}
 800576e:	b087      	sub	sp, #28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6a1b      	ldr	r3, [r3, #32]
 800577c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0201 	bic.w	r2, r3, #1
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005796:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f023 030a 	bic.w	r3, r3, #10
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	621a      	str	r2, [r3, #32]
}
 80057be:	bf00      	nop
 80057c0:	371c      	adds	r7, #28
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr

080057ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ca:	b480      	push	{r7}
 80057cc:	b087      	sub	sp, #28
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	60f8      	str	r0, [r7, #12]
 80057d2:	60b9      	str	r1, [r7, #8]
 80057d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f023 0210 	bic.w	r2, r3, #16
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	031b      	lsls	r3, r3, #12
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005806:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	011b      	lsls	r3, r3, #4
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	4313      	orrs	r3, r2
 8005810:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	621a      	str	r2, [r3, #32]
}
 800581e:	bf00      	nop
 8005820:	371c      	adds	r7, #28
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	f043 0307 	orr.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
 800586c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800587a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	021a      	lsls	r2, r3, #8
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	431a      	orrs	r2, r3
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4313      	orrs	r3, r2
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	4313      	orrs	r3, r2
 800588c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	609a      	str	r2, [r3, #8]
}
 8005894:	bf00      	nop
 8005896:	371c      	adds	r7, #28
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e05a      	b.n	800596e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a21      	ldr	r2, [pc, #132]	@ (800597c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d022      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005904:	d01d      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1d      	ldr	r2, [pc, #116]	@ (8005980 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d018      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1b      	ldr	r2, [pc, #108]	@ (8005984 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1a      	ldr	r2, [pc, #104]	@ (8005988 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d00e      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a17      	ldr	r2, [pc, #92]	@ (8005990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a15      	ldr	r2, [pc, #84]	@ (8005994 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d10c      	bne.n	800595c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	68ba      	ldr	r2, [r7, #8]
 8005950:	4313      	orrs	r3, r2
 8005952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40010000 	.word	0x40010000
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40010400 	.word	0x40010400
 8005990:	40014000 	.word	0x40014000
 8005994:	40001800 	.word	0x40001800

08005998 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b082      	sub	sp, #8
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e042      	b.n	8005a58 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d106      	bne.n	80059ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2200      	movs	r2, #0
 80059e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f7fb fd84 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2224      	movs	r2, #36	@ 0x24
 80059f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f82b 	bl	8005a60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691a      	ldr	r2, [r3, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	695a      	ldr	r2, [r3, #20]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68da      	ldr	r2, [r3, #12]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2220      	movs	r2, #32
 8005a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a64:	b0c0      	sub	sp, #256	@ 0x100
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a7c:	68d9      	ldr	r1, [r3, #12]
 8005a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	ea40 0301 	orr.w	r3, r0, r1
 8005a88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a8e:	689a      	ldr	r2, [r3, #8]
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	431a      	orrs	r2, r3
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	695b      	ldr	r3, [r3, #20]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa4:	69db      	ldr	r3, [r3, #28]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ab8:	f021 010c 	bic.w	r1, r1, #12
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ac6:	430b      	orrs	r3, r1
 8005ac8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ada:	6999      	ldr	r1, [r3, #24]
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	ea40 0301 	orr.w	r3, r0, r1
 8005ae6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	4b8f      	ldr	r3, [pc, #572]	@ (8005d2c <UART_SetConfig+0x2cc>)
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d005      	beq.n	8005b00 <UART_SetConfig+0xa0>
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	4b8d      	ldr	r3, [pc, #564]	@ (8005d30 <UART_SetConfig+0x2d0>)
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d104      	bne.n	8005b0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b00:	f7ff f826 	bl	8004b50 <HAL_RCC_GetPCLK2Freq>
 8005b04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b08:	e003      	b.n	8005b12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b0a:	f7ff f80d 	bl	8004b28 <HAL_RCC_GetPCLK1Freq>
 8005b0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b16:	69db      	ldr	r3, [r3, #28]
 8005b18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b1c:	f040 810c 	bne.w	8005d38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b32:	4622      	mov	r2, r4
 8005b34:	462b      	mov	r3, r5
 8005b36:	1891      	adds	r1, r2, r2
 8005b38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b3a:	415b      	adcs	r3, r3
 8005b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b42:	4621      	mov	r1, r4
 8005b44:	eb12 0801 	adds.w	r8, r2, r1
 8005b48:	4629      	mov	r1, r5
 8005b4a:	eb43 0901 	adc.w	r9, r3, r1
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b62:	4690      	mov	r8, r2
 8005b64:	4699      	mov	r9, r3
 8005b66:	4623      	mov	r3, r4
 8005b68:	eb18 0303 	adds.w	r3, r8, r3
 8005b6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b70:	462b      	mov	r3, r5
 8005b72:	eb49 0303 	adc.w	r3, r9, r3
 8005b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005b8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b8e:	460b      	mov	r3, r1
 8005b90:	18db      	adds	r3, r3, r3
 8005b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b94:	4613      	mov	r3, r2
 8005b96:	eb42 0303 	adc.w	r3, r2, r3
 8005b9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005b9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ba0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ba4:	f7fa fb2c 	bl	8000200 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4b61      	ldr	r3, [pc, #388]	@ (8005d34 <UART_SetConfig+0x2d4>)
 8005bae:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb2:	095b      	lsrs	r3, r3, #5
 8005bb4:	011c      	lsls	r4, r3, #4
 8005bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bc8:	4642      	mov	r2, r8
 8005bca:	464b      	mov	r3, r9
 8005bcc:	1891      	adds	r1, r2, r2
 8005bce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bd0:	415b      	adcs	r3, r3
 8005bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bd8:	4641      	mov	r1, r8
 8005bda:	eb12 0a01 	adds.w	sl, r2, r1
 8005bde:	4649      	mov	r1, r9
 8005be0:	eb43 0b01 	adc.w	fp, r3, r1
 8005be4:	f04f 0200 	mov.w	r2, #0
 8005be8:	f04f 0300 	mov.w	r3, #0
 8005bec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005bf0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005bf4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bf8:	4692      	mov	sl, r2
 8005bfa:	469b      	mov	fp, r3
 8005bfc:	4643      	mov	r3, r8
 8005bfe:	eb1a 0303 	adds.w	r3, sl, r3
 8005c02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c06:	464b      	mov	r3, r9
 8005c08:	eb4b 0303 	adc.w	r3, fp, r3
 8005c0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c24:	460b      	mov	r3, r1
 8005c26:	18db      	adds	r3, r3, r3
 8005c28:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	eb42 0303 	adc.w	r3, r2, r3
 8005c30:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c3a:	f7fa fae1 	bl	8000200 <__aeabi_uldivmod>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4611      	mov	r1, r2
 8005c44:	4b3b      	ldr	r3, [pc, #236]	@ (8005d34 <UART_SetConfig+0x2d4>)
 8005c46:	fba3 2301 	umull	r2, r3, r3, r1
 8005c4a:	095b      	lsrs	r3, r3, #5
 8005c4c:	2264      	movs	r2, #100	@ 0x64
 8005c4e:	fb02 f303 	mul.w	r3, r2, r3
 8005c52:	1acb      	subs	r3, r1, r3
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c5a:	4b36      	ldr	r3, [pc, #216]	@ (8005d34 <UART_SetConfig+0x2d4>)
 8005c5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c60:	095b      	lsrs	r3, r3, #5
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c68:	441c      	add	r4, r3
 8005c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c6e:	2200      	movs	r2, #0
 8005c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c7c:	4642      	mov	r2, r8
 8005c7e:	464b      	mov	r3, r9
 8005c80:	1891      	adds	r1, r2, r2
 8005c82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005c84:	415b      	adcs	r3, r3
 8005c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	1851      	adds	r1, r2, r1
 8005c90:	6339      	str	r1, [r7, #48]	@ 0x30
 8005c92:	4649      	mov	r1, r9
 8005c94:	414b      	adcs	r3, r1
 8005c96:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c98:	f04f 0200 	mov.w	r2, #0
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005ca4:	4659      	mov	r1, fp
 8005ca6:	00cb      	lsls	r3, r1, #3
 8005ca8:	4651      	mov	r1, sl
 8005caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cae:	4651      	mov	r1, sl
 8005cb0:	00ca      	lsls	r2, r1, #3
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	4642      	mov	r2, r8
 8005cba:	189b      	adds	r3, r3, r2
 8005cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cc0:	464b      	mov	r3, r9
 8005cc2:	460a      	mov	r2, r1
 8005cc4:	eb42 0303 	adc.w	r3, r2, r3
 8005cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	18db      	adds	r3, r3, r3
 8005ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	eb42 0303 	adc.w	r3, r2, r3
 8005cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005cf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005cf6:	f7fa fa83 	bl	8000200 <__aeabi_uldivmod>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <UART_SetConfig+0x2d4>)
 8005d00:	fba3 1302 	umull	r1, r3, r3, r2
 8005d04:	095b      	lsrs	r3, r3, #5
 8005d06:	2164      	movs	r1, #100	@ 0x64
 8005d08:	fb01 f303 	mul.w	r3, r1, r3
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	00db      	lsls	r3, r3, #3
 8005d10:	3332      	adds	r3, #50	@ 0x32
 8005d12:	4a08      	ldr	r2, [pc, #32]	@ (8005d34 <UART_SetConfig+0x2d4>)
 8005d14:	fba2 2303 	umull	r2, r3, r2, r3
 8005d18:	095b      	lsrs	r3, r3, #5
 8005d1a:	f003 0207 	and.w	r2, r3, #7
 8005d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4422      	add	r2, r4
 8005d26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d28:	e106      	b.n	8005f38 <UART_SetConfig+0x4d8>
 8005d2a:	bf00      	nop
 8005d2c:	40011000 	.word	0x40011000
 8005d30:	40011400 	.word	0x40011400
 8005d34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	464b      	mov	r3, r9
 8005d4e:	1891      	adds	r1, r2, r2
 8005d50:	6239      	str	r1, [r7, #32]
 8005d52:	415b      	adcs	r3, r3
 8005d54:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d5a:	4641      	mov	r1, r8
 8005d5c:	1854      	adds	r4, r2, r1
 8005d5e:	4649      	mov	r1, r9
 8005d60:	eb43 0501 	adc.w	r5, r3, r1
 8005d64:	f04f 0200 	mov.w	r2, #0
 8005d68:	f04f 0300 	mov.w	r3, #0
 8005d6c:	00eb      	lsls	r3, r5, #3
 8005d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d72:	00e2      	lsls	r2, r4, #3
 8005d74:	4614      	mov	r4, r2
 8005d76:	461d      	mov	r5, r3
 8005d78:	4643      	mov	r3, r8
 8005d7a:	18e3      	adds	r3, r4, r3
 8005d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d80:	464b      	mov	r3, r9
 8005d82:	eb45 0303 	adc.w	r3, r5, r3
 8005d86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005d96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d9a:	f04f 0200 	mov.w	r2, #0
 8005d9e:	f04f 0300 	mov.w	r3, #0
 8005da2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005da6:	4629      	mov	r1, r5
 8005da8:	008b      	lsls	r3, r1, #2
 8005daa:	4621      	mov	r1, r4
 8005dac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005db0:	4621      	mov	r1, r4
 8005db2:	008a      	lsls	r2, r1, #2
 8005db4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005db8:	f7fa fa22 	bl	8000200 <__aeabi_uldivmod>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4b60      	ldr	r3, [pc, #384]	@ (8005f44 <UART_SetConfig+0x4e4>)
 8005dc2:	fba3 2302 	umull	r2, r3, r3, r2
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	011c      	lsls	r4, r3, #4
 8005dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005dd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005dd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ddc:	4642      	mov	r2, r8
 8005dde:	464b      	mov	r3, r9
 8005de0:	1891      	adds	r1, r2, r2
 8005de2:	61b9      	str	r1, [r7, #24]
 8005de4:	415b      	adcs	r3, r3
 8005de6:	61fb      	str	r3, [r7, #28]
 8005de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005dec:	4641      	mov	r1, r8
 8005dee:	1851      	adds	r1, r2, r1
 8005df0:	6139      	str	r1, [r7, #16]
 8005df2:	4649      	mov	r1, r9
 8005df4:	414b      	adcs	r3, r1
 8005df6:	617b      	str	r3, [r7, #20]
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	f04f 0300 	mov.w	r3, #0
 8005e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e04:	4659      	mov	r1, fp
 8005e06:	00cb      	lsls	r3, r1, #3
 8005e08:	4651      	mov	r1, sl
 8005e0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e0e:	4651      	mov	r1, sl
 8005e10:	00ca      	lsls	r2, r1, #3
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	4642      	mov	r2, r8
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e20:	464b      	mov	r3, r9
 8005e22:	460a      	mov	r2, r1
 8005e24:	eb42 0303 	adc.w	r3, r2, r3
 8005e28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e38:	f04f 0200 	mov.w	r2, #0
 8005e3c:	f04f 0300 	mov.w	r3, #0
 8005e40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e44:	4649      	mov	r1, r9
 8005e46:	008b      	lsls	r3, r1, #2
 8005e48:	4641      	mov	r1, r8
 8005e4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e4e:	4641      	mov	r1, r8
 8005e50:	008a      	lsls	r2, r1, #2
 8005e52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e56:	f7fa f9d3 	bl	8000200 <__aeabi_uldivmod>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	4b38      	ldr	r3, [pc, #224]	@ (8005f44 <UART_SetConfig+0x4e4>)
 8005e62:	fba3 2301 	umull	r2, r3, r3, r1
 8005e66:	095b      	lsrs	r3, r3, #5
 8005e68:	2264      	movs	r2, #100	@ 0x64
 8005e6a:	fb02 f303 	mul.w	r3, r2, r3
 8005e6e:	1acb      	subs	r3, r1, r3
 8005e70:	011b      	lsls	r3, r3, #4
 8005e72:	3332      	adds	r3, #50	@ 0x32
 8005e74:	4a33      	ldr	r2, [pc, #204]	@ (8005f44 <UART_SetConfig+0x4e4>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	095b      	lsrs	r3, r3, #5
 8005e7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005e80:	441c      	add	r4, r3
 8005e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e86:	2200      	movs	r2, #0
 8005e88:	673b      	str	r3, [r7, #112]	@ 0x70
 8005e8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005e8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005e90:	4642      	mov	r2, r8
 8005e92:	464b      	mov	r3, r9
 8005e94:	1891      	adds	r1, r2, r2
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	415b      	adcs	r3, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ea0:	4641      	mov	r1, r8
 8005ea2:	1851      	adds	r1, r2, r1
 8005ea4:	6039      	str	r1, [r7, #0]
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	414b      	adcs	r3, r1
 8005eaa:	607b      	str	r3, [r7, #4]
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	f04f 0300 	mov.w	r3, #0
 8005eb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005eb8:	4659      	mov	r1, fp
 8005eba:	00cb      	lsls	r3, r1, #3
 8005ebc:	4651      	mov	r1, sl
 8005ebe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ec2:	4651      	mov	r1, sl
 8005ec4:	00ca      	lsls	r2, r1, #3
 8005ec6:	4610      	mov	r0, r2
 8005ec8:	4619      	mov	r1, r3
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4642      	mov	r2, r8
 8005ece:	189b      	adds	r3, r3, r2
 8005ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ed2:	464b      	mov	r3, r9
 8005ed4:	460a      	mov	r2, r1
 8005ed6:	eb42 0303 	adc.w	r3, r2, r3
 8005eda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ee6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ee8:	f04f 0200 	mov.w	r2, #0
 8005eec:	f04f 0300 	mov.w	r3, #0
 8005ef0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ef4:	4649      	mov	r1, r9
 8005ef6:	008b      	lsls	r3, r1, #2
 8005ef8:	4641      	mov	r1, r8
 8005efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005efe:	4641      	mov	r1, r8
 8005f00:	008a      	lsls	r2, r1, #2
 8005f02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f06:	f7fa f97b 	bl	8000200 <__aeabi_uldivmod>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f44 <UART_SetConfig+0x4e4>)
 8005f10:	fba3 1302 	umull	r1, r3, r3, r2
 8005f14:	095b      	lsrs	r3, r3, #5
 8005f16:	2164      	movs	r1, #100	@ 0x64
 8005f18:	fb01 f303 	mul.w	r3, r1, r3
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	3332      	adds	r3, #50	@ 0x32
 8005f22:	4a08      	ldr	r2, [pc, #32]	@ (8005f44 <UART_SetConfig+0x4e4>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	095b      	lsrs	r3, r3, #5
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4422      	add	r2, r4
 8005f36:	609a      	str	r2, [r3, #8]
}
 8005f38:	bf00      	nop
 8005f3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f44:	51eb851f 	.word	0x51eb851f

08005f48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d123      	bne.n	8005fa2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005f62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f66:	683a      	ldr	r2, [r7, #0]
 8005f68:	6851      	ldr	r1, [r2, #4]
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	6892      	ldr	r2, [r2, #8]
 8005f6e:	4311      	orrs	r1, r2
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	68d2      	ldr	r2, [r2, #12]
 8005f74:	4311      	orrs	r1, r2
 8005f76:	683a      	ldr	r2, [r7, #0]
 8005f78:	6912      	ldr	r2, [r2, #16]
 8005f7a:	4311      	orrs	r1, r2
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	6952      	ldr	r2, [r2, #20]
 8005f80:	4311      	orrs	r1, r2
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	6992      	ldr	r2, [r2, #24]
 8005f86:	4311      	orrs	r1, r2
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	69d2      	ldr	r2, [r2, #28]
 8005f8c:	4311      	orrs	r1, r2
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	6a12      	ldr	r2, [r2, #32]
 8005f92:	4311      	orrs	r1, r2
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e028      	b.n	8005ff4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	69d9      	ldr	r1, [r3, #28]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	4319      	orrs	r1, r3
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005fc8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	6851      	ldr	r1, [r2, #4]
 8005fd0:	683a      	ldr	r2, [r7, #0]
 8005fd2:	6892      	ldr	r2, [r2, #8]
 8005fd4:	4311      	orrs	r1, r2
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	68d2      	ldr	r2, [r2, #12]
 8005fda:	4311      	orrs	r1, r2
 8005fdc:	683a      	ldr	r2, [r7, #0]
 8005fde:	6912      	ldr	r2, [r2, #16]
 8005fe0:	4311      	orrs	r1, r2
 8005fe2:	683a      	ldr	r2, [r7, #0]
 8005fe4:	6952      	ldr	r2, [r2, #20]
 8005fe6:	4311      	orrs	r1, r2
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	6992      	ldr	r2, [r2, #24]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006002:	b480      	push	{r7}
 8006004:	b085      	sub	sp, #20
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d128      	bne.n	8006066 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	1e59      	subs	r1, r3, #1
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	3b01      	subs	r3, #1
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	4319      	orrs	r1, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	3b01      	subs	r3, #1
 8006032:	021b      	lsls	r3, r3, #8
 8006034:	4319      	orrs	r1, r3
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	3b01      	subs	r3, #1
 800603c:	031b      	lsls	r3, r3, #12
 800603e:	4319      	orrs	r1, r3
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	3b01      	subs	r3, #1
 8006046:	041b      	lsls	r3, r3, #16
 8006048:	4319      	orrs	r1, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	3b01      	subs	r3, #1
 8006050:	051b      	lsls	r3, r3, #20
 8006052:	4319      	orrs	r1, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	699b      	ldr	r3, [r3, #24]
 8006058:	3b01      	subs	r3, #1
 800605a:	061b      	lsls	r3, r3, #24
 800605c:	430b      	orrs	r3, r1
 800605e:	431a      	orrs	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	e02f      	b.n	80060c6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800606e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	68d2      	ldr	r2, [r2, #12]
 8006076:	3a01      	subs	r2, #1
 8006078:	0311      	lsls	r1, r2, #12
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	6952      	ldr	r2, [r2, #20]
 800607e:	3a01      	subs	r2, #1
 8006080:	0512      	lsls	r2, r2, #20
 8006082:	430a      	orrs	r2, r1
 8006084:	431a      	orrs	r2, r3
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	1e59      	subs	r1, r3, #1
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	3b01      	subs	r3, #1
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4319      	orrs	r1, r3
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	3b01      	subs	r3, #1
 80060a8:	021b      	lsls	r3, r3, #8
 80060aa:	4319      	orrs	r1, r3
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	3b01      	subs	r3, #1
 80060b2:	041b      	lsls	r3, r3, #16
 80060b4:	4319      	orrs	r1, r3
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	061b      	lsls	r3, r3, #24
 80060be:	430b      	orrs	r3, r1
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80060c6:	2300      	movs	r3, #0
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060d4:	b084      	sub	sp, #16
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	f107 001c 	add.w	r0, r7, #28
 80060e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060e6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d123      	bne.n	8006136 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006102:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006116:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800611a:	2b01      	cmp	r3, #1
 800611c:	d105      	bne.n	800612a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fae8 	bl	8007700 <USB_CoreReset>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]
 8006134:	e01b      	b.n	800616e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 fadc 	bl	8007700 <USB_CoreReset>
 8006148:	4603      	mov	r3, r0
 800614a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800614c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006150:	2b00      	cmp	r3, #0
 8006152:	d106      	bne.n	8006162 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006158:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006160:	e005      	b.n	800616e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006166:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800616e:	7fbb      	ldrb	r3, [r7, #30]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d10b      	bne.n	800618c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	f043 0206 	orr.w	r2, r3, #6
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006198:	b004      	add	sp, #16
 800619a:	4770      	bx	lr

0800619c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	4613      	mov	r3, r2
 80061a8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061aa:	79fb      	ldrb	r3, [r7, #7]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d165      	bne.n	800627c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	4a41      	ldr	r2, [pc, #260]	@ (80062b8 <USB_SetTurnaroundTime+0x11c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d906      	bls.n	80061c6 <USB_SetTurnaroundTime+0x2a>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4a40      	ldr	r2, [pc, #256]	@ (80062bc <USB_SetTurnaroundTime+0x120>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d202      	bcs.n	80061c6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061c0:	230f      	movs	r3, #15
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	e062      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4a3c      	ldr	r2, [pc, #240]	@ (80062bc <USB_SetTurnaroundTime+0x120>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d306      	bcc.n	80061dc <USB_SetTurnaroundTime+0x40>
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4a3b      	ldr	r2, [pc, #236]	@ (80062c0 <USB_SetTurnaroundTime+0x124>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d202      	bcs.n	80061dc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061d6:	230e      	movs	r3, #14
 80061d8:	617b      	str	r3, [r7, #20]
 80061da:	e057      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	4a38      	ldr	r2, [pc, #224]	@ (80062c0 <USB_SetTurnaroundTime+0x124>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d306      	bcc.n	80061f2 <USB_SetTurnaroundTime+0x56>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	4a37      	ldr	r2, [pc, #220]	@ (80062c4 <USB_SetTurnaroundTime+0x128>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d202      	bcs.n	80061f2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80061ec:	230d      	movs	r3, #13
 80061ee:	617b      	str	r3, [r7, #20]
 80061f0:	e04c      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	4a33      	ldr	r2, [pc, #204]	@ (80062c4 <USB_SetTurnaroundTime+0x128>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d306      	bcc.n	8006208 <USB_SetTurnaroundTime+0x6c>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	4a32      	ldr	r2, [pc, #200]	@ (80062c8 <USB_SetTurnaroundTime+0x12c>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d802      	bhi.n	8006208 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006202:	230c      	movs	r3, #12
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	e041      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4a2f      	ldr	r2, [pc, #188]	@ (80062c8 <USB_SetTurnaroundTime+0x12c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d906      	bls.n	800621e <USB_SetTurnaroundTime+0x82>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	4a2e      	ldr	r2, [pc, #184]	@ (80062cc <USB_SetTurnaroundTime+0x130>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d802      	bhi.n	800621e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006218:	230b      	movs	r3, #11
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e036      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	4a2a      	ldr	r2, [pc, #168]	@ (80062cc <USB_SetTurnaroundTime+0x130>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d906      	bls.n	8006234 <USB_SetTurnaroundTime+0x98>
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4a29      	ldr	r2, [pc, #164]	@ (80062d0 <USB_SetTurnaroundTime+0x134>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d802      	bhi.n	8006234 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800622e:	230a      	movs	r3, #10
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	e02b      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	4a26      	ldr	r2, [pc, #152]	@ (80062d0 <USB_SetTurnaroundTime+0x134>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d906      	bls.n	800624a <USB_SetTurnaroundTime+0xae>
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	4a25      	ldr	r2, [pc, #148]	@ (80062d4 <USB_SetTurnaroundTime+0x138>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d202      	bcs.n	800624a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006244:	2309      	movs	r3, #9
 8006246:	617b      	str	r3, [r7, #20]
 8006248:	e020      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	4a21      	ldr	r2, [pc, #132]	@ (80062d4 <USB_SetTurnaroundTime+0x138>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d306      	bcc.n	8006260 <USB_SetTurnaroundTime+0xc4>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4a20      	ldr	r2, [pc, #128]	@ (80062d8 <USB_SetTurnaroundTime+0x13c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d802      	bhi.n	8006260 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800625a:	2308      	movs	r3, #8
 800625c:	617b      	str	r3, [r7, #20]
 800625e:	e015      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4a1d      	ldr	r2, [pc, #116]	@ (80062d8 <USB_SetTurnaroundTime+0x13c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d906      	bls.n	8006276 <USB_SetTurnaroundTime+0xda>
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	4a1c      	ldr	r2, [pc, #112]	@ (80062dc <USB_SetTurnaroundTime+0x140>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d202      	bcs.n	8006276 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006270:	2307      	movs	r3, #7
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	e00a      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006276:	2306      	movs	r3, #6
 8006278:	617b      	str	r3, [r7, #20]
 800627a:	e007      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d102      	bne.n	8006288 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006282:	2309      	movs	r3, #9
 8006284:	617b      	str	r3, [r7, #20]
 8006286:	e001      	b.n	800628c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006288:	2309      	movs	r3, #9
 800628a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	029b      	lsls	r3, r3, #10
 80062a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80062a4:	431a      	orrs	r2, r3
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	371c      	adds	r7, #28
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	00d8acbf 	.word	0x00d8acbf
 80062bc:	00e4e1c0 	.word	0x00e4e1c0
 80062c0:	00f42400 	.word	0x00f42400
 80062c4:	01067380 	.word	0x01067380
 80062c8:	011a499f 	.word	0x011a499f
 80062cc:	01312cff 	.word	0x01312cff
 80062d0:	014ca43f 	.word	0x014ca43f
 80062d4:	016e3600 	.word	0x016e3600
 80062d8:	01a6ab1f 	.word	0x01a6ab1f
 80062dc:	01e84800 	.word	0x01e84800

080062e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	f043 0201 	orr.w	r2, r3, #1
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f023 0201 	bic.w	r2, r3, #1
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006330:	2300      	movs	r3, #0
 8006332:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	2b01      	cmp	r3, #1
 8006344:	d115      	bne.n	8006372 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006352:	200a      	movs	r0, #10
 8006354:	f7fb faf8 	bl	8001948 <HAL_Delay>
      ms += 10U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	330a      	adds	r3, #10
 800635c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 f93f 	bl	80075e2 <USB_GetMode>
 8006364:	4603      	mov	r3, r0
 8006366:	2b01      	cmp	r3, #1
 8006368:	d01e      	beq.n	80063a8 <USB_SetCurrentMode+0x84>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2bc7      	cmp	r3, #199	@ 0xc7
 800636e:	d9f0      	bls.n	8006352 <USB_SetCurrentMode+0x2e>
 8006370:	e01a      	b.n	80063a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d115      	bne.n	80063a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006384:	200a      	movs	r0, #10
 8006386:	f7fb fadf 	bl	8001948 <HAL_Delay>
      ms += 10U;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	330a      	adds	r3, #10
 800638e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f001 f926 	bl	80075e2 <USB_GetMode>
 8006396:	4603      	mov	r3, r0
 8006398:	2b00      	cmp	r3, #0
 800639a:	d005      	beq.n	80063a8 <USB_SetCurrentMode+0x84>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2bc7      	cmp	r3, #199	@ 0xc7
 80063a0:	d9f0      	bls.n	8006384 <USB_SetCurrentMode+0x60>
 80063a2:	e001      	b.n	80063a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e005      	b.n	80063b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80063ac:	d101      	bne.n	80063b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e000      	b.n	80063b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063bc:	b084      	sub	sp, #16
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ce:	2300      	movs	r3, #0
 80063d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063d6:	2300      	movs	r3, #0
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	e009      	b.n	80063f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	3340      	adds	r3, #64	@ 0x40
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	4413      	add	r3, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	3301      	adds	r3, #1
 80063ee:	613b      	str	r3, [r7, #16]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	2b0e      	cmp	r3, #14
 80063f4:	d9f2      	bls.n	80063dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d11c      	bne.n	8006438 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800640c:	f043 0302 	orr.w	r3, r3, #2
 8006410:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006416:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	639a      	str	r2, [r3, #56]	@ 0x38
 8006436:	e00b      	b.n	8006450 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800643c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006448:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006456:	461a      	mov	r2, r3
 8006458:	2300      	movs	r3, #0
 800645a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800645c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006460:	2b01      	cmp	r3, #1
 8006462:	d10d      	bne.n	8006480 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006464:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800646c:	2100      	movs	r1, #0
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f000 f968 	bl	8006744 <USB_SetDevSpeed>
 8006474:	e008      	b.n	8006488 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006476:	2101      	movs	r1, #1
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f963 	bl	8006744 <USB_SetDevSpeed>
 800647e:	e003      	b.n	8006488 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006480:	2103      	movs	r1, #3
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f95e 	bl	8006744 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006488:	2110      	movs	r1, #16
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f8fa 	bl	8006684 <USB_FlushTxFifo>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f924 	bl	80066e8 <USB_FlushRxFifo>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b0:	461a      	mov	r2, r3
 80064b2:	2300      	movs	r3, #0
 80064b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064bc:	461a      	mov	r2, r3
 80064be:	2300      	movs	r3, #0
 80064c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064c8:	461a      	mov	r2, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
 80064d2:	e043      	b.n	800655c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064ea:	d118      	bne.n	800651e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10a      	bne.n	8006508 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80064fe:	461a      	mov	r2, r3
 8006500:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	e013      	b.n	8006530 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006514:	461a      	mov	r2, r3
 8006516:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800651a:	6013      	str	r3, [r2, #0]
 800651c:	e008      	b.n	8006530 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	015a      	lsls	r2, r3, #5
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	4413      	add	r3, r2
 8006526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800652a:	461a      	mov	r2, r3
 800652c:	2300      	movs	r3, #0
 800652e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	4413      	add	r3, r2
 8006538:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800653c:	461a      	mov	r2, r3
 800653e:	2300      	movs	r3, #0
 8006540:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654e:	461a      	mov	r2, r3
 8006550:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006554:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3301      	adds	r3, #1
 800655a:	613b      	str	r3, [r7, #16]
 800655c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006560:	461a      	mov	r2, r3
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	4293      	cmp	r3, r2
 8006566:	d3b5      	bcc.n	80064d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e043      	b.n	80065f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006584:	d118      	bne.n	80065b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006598:	461a      	mov	r2, r3
 800659a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e013      	b.n	80065ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ae:	461a      	mov	r2, r3
 80065b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e008      	b.n	80065ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	015a      	lsls	r2, r3, #5
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	4413      	add	r3, r2
 80065c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065c4:	461a      	mov	r2, r3
 80065c6:	2300      	movs	r3, #0
 80065c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d6:	461a      	mov	r2, r3
 80065d8:	2300      	movs	r3, #0
 80065da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80065ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3301      	adds	r3, #1
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80065fa:	461a      	mov	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4293      	cmp	r3, r2
 8006600:	d3b5      	bcc.n	800656e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	68fa      	ldr	r2, [r7, #12]
 800660c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006614:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006622:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006624:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006628:	2b00      	cmp	r3, #0
 800662a:	d105      	bne.n	8006638 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	699b      	ldr	r3, [r3, #24]
 8006630:	f043 0210 	orr.w	r2, r3, #16
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	699a      	ldr	r2, [r3, #24]
 800663c:	4b10      	ldr	r3, [pc, #64]	@ (8006680 <USB_DevInit+0x2c4>)
 800663e:	4313      	orrs	r3, r2
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006644:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006648:	2b00      	cmp	r3, #0
 800664a:	d005      	beq.n	8006658 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f043 0208 	orr.w	r2, r3, #8
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006658:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800665c:	2b01      	cmp	r3, #1
 800665e:	d107      	bne.n	8006670 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	699b      	ldr	r3, [r3, #24]
 8006664:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3718      	adds	r7, #24
 8006676:	46bd      	mov	sp, r7
 8006678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800667c:	b004      	add	sp, #16
 800667e:	4770      	bx	lr
 8006680:	803c3800 	.word	0x803c3800

08006684 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800669e:	d901      	bls.n	80066a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e01b      	b.n	80066dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	daf2      	bge.n	8006692 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	019b      	lsls	r3, r3, #6
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3301      	adds	r3, #1
 80066c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066c8:	d901      	bls.n	80066ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e006      	b.n	80066dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d0f0      	beq.n	80066bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3301      	adds	r3, #1
 80066f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006700:	d901      	bls.n	8006706 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e018      	b.n	8006738 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	daf2      	bge.n	80066f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2210      	movs	r2, #16
 8006716:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3301      	adds	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006724:	d901      	bls.n	800672a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e006      	b.n	8006738 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f003 0310 	and.w	r3, r3, #16
 8006732:	2b10      	cmp	r3, #16
 8006734:	d0f0      	beq.n	8006718 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3714      	adds	r7, #20
 800673c:	46bd      	mov	sp, r7
 800673e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006742:	4770      	bx	lr

08006744 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	460b      	mov	r3, r1
 800674e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	78fb      	ldrb	r3, [r7, #3]
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006764:	4313      	orrs	r3, r2
 8006766:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006776:	b480      	push	{r7}
 8006778:	b087      	sub	sp, #28
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f003 0306 	and.w	r3, r3, #6
 800678e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d102      	bne.n	800679c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006796:	2300      	movs	r3, #0
 8006798:	75fb      	strb	r3, [r7, #23]
 800679a:	e00a      	b.n	80067b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d002      	beq.n	80067a8 <USB_GetDevSpeed+0x32>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2b06      	cmp	r3, #6
 80067a6:	d102      	bne.n	80067ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067a8:	2302      	movs	r3, #2
 80067aa:	75fb      	strb	r3, [r7, #23]
 80067ac:	e001      	b.n	80067b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067ae:	230f      	movs	r3, #15
 80067b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	371c      	adds	r7, #28
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	785b      	ldrb	r3, [r3, #1]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d13a      	bne.n	8006852 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	f003 030f 	and.w	r3, r3, #15
 80067ec:	2101      	movs	r1, #1
 80067ee:	fa01 f303 	lsl.w	r3, r1, r3
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	68f9      	ldr	r1, [r7, #12]
 80067f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067fa:	4313      	orrs	r3, r2
 80067fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	015a      	lsls	r2, r3, #5
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	4413      	add	r3, r2
 8006806:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d155      	bne.n	80068c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006820:	681a      	ldr	r2, [r3, #0]
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689b      	ldr	r3, [r3, #8]
 8006826:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	791b      	ldrb	r3, [r3, #4]
 800682e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006830:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	059b      	lsls	r3, r3, #22
 8006836:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006838:	4313      	orrs	r3, r2
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	0151      	lsls	r1, r2, #5
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	440a      	add	r2, r1
 8006842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006846:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800684a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	e036      	b.n	80068c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006858:	69da      	ldr	r2, [r3, #28]
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f003 030f 	and.w	r3, r3, #15
 8006862:	2101      	movs	r1, #1
 8006864:	fa01 f303 	lsl.w	r3, r1, r3
 8006868:	041b      	lsls	r3, r3, #16
 800686a:	68f9      	ldr	r1, [r7, #12]
 800686c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006870:	4313      	orrs	r3, r2
 8006872:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d11a      	bne.n	80068c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	791b      	ldrb	r3, [r3, #4]
 80068a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068a6:	430b      	orrs	r3, r1
 80068a8:	4313      	orrs	r3, r2
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3714      	adds	r7, #20
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b085      	sub	sp, #20
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d161      	bne.n	80069b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006902:	d11f      	bne.n	8006944 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	015a      	lsls	r2, r3, #5
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	4413      	add	r3, r2
 800690c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	0151      	lsls	r1, r2, #5
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	440a      	add	r2, r1
 800691a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800691e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006922:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006942:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800694a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	f003 030f 	and.w	r3, r3, #15
 8006954:	2101      	movs	r1, #1
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	b29b      	uxth	r3, r3
 800695c:	43db      	mvns	r3, r3
 800695e:	68f9      	ldr	r1, [r7, #12]
 8006960:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006964:	4013      	ands	r3, r2
 8006966:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 030f 	and.w	r3, r3, #15
 8006978:	2101      	movs	r1, #1
 800697a:	fa01 f303 	lsl.w	r3, r1, r3
 800697e:	b29b      	uxth	r3, r3
 8006980:	43db      	mvns	r3, r3
 8006982:	68f9      	ldr	r1, [r7, #12]
 8006984:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006988:	4013      	ands	r3, r2
 800698a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	015a      	lsls	r2, r3, #5
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	4413      	add	r3, r2
 8006994:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	0159      	lsls	r1, r3, #5
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	440b      	add	r3, r1
 80069a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a6:	4619      	mov	r1, r3
 80069a8:	4b35      	ldr	r3, [pc, #212]	@ (8006a80 <USB_DeactivateEndpoint+0x1b0>)
 80069aa:	4013      	ands	r3, r2
 80069ac:	600b      	str	r3, [r1, #0]
 80069ae:	e060      	b.n	8006a72 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069c6:	d11f      	bne.n	8006a08 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68ba      	ldr	r2, [r7, #8]
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80069e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 030f 	and.w	r3, r3, #15
 8006a18:	2101      	movs	r1, #1
 8006a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1e:	041b      	lsls	r3, r3, #16
 8006a20:	43db      	mvns	r3, r3
 8006a22:	68f9      	ldr	r1, [r7, #12]
 8006a24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a28:	4013      	ands	r3, r2
 8006a2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	f003 030f 	and.w	r3, r3, #15
 8006a3c:	2101      	movs	r1, #1
 8006a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a42:	041b      	lsls	r3, r3, #16
 8006a44:	43db      	mvns	r3, r3
 8006a46:	68f9      	ldr	r1, [r7, #12]
 8006a48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a5c:	681a      	ldr	r2, [r3, #0]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	0159      	lsls	r1, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	440b      	add	r3, r1
 8006a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4b05      	ldr	r3, [pc, #20]	@ (8006a84 <USB_DeactivateEndpoint+0x1b4>)
 8006a6e:	4013      	ands	r3, r2
 8006a70:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr
 8006a80:	ec337800 	.word	0xec337800
 8006a84:	eff37800 	.word	0xeff37800

08006a88 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b08a      	sub	sp, #40	@ 0x28
 8006a8c:	af02      	add	r7, sp, #8
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	4613      	mov	r3, r2
 8006a94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	785b      	ldrb	r3, [r3, #1]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	f040 817f 	bne.w	8006da8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	691b      	ldr	r3, [r3, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d132      	bne.n	8006b18 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	69fb      	ldr	r3, [r7, #28]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006abe:	691b      	ldr	r3, [r3, #16]
 8006ac0:	69ba      	ldr	r2, [r7, #24]
 8006ac2:	0151      	lsls	r1, r2, #5
 8006ac4:	69fa      	ldr	r2, [r7, #28]
 8006ac6:	440a      	add	r2, r1
 8006ac8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006acc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ad0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ad4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	015a      	lsls	r2, r3, #5
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	4413      	add	r3, r2
 8006ade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ae2:	691b      	ldr	r3, [r3, #16]
 8006ae4:	69ba      	ldr	r2, [r7, #24]
 8006ae6:	0151      	lsls	r1, r2, #5
 8006ae8:	69fa      	ldr	r2, [r7, #28]
 8006aea:	440a      	add	r2, r1
 8006aec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006af0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b10:	0cdb      	lsrs	r3, r3, #19
 8006b12:	04db      	lsls	r3, r3, #19
 8006b14:	6113      	str	r3, [r2, #16]
 8006b16:	e097      	b.n	8006c48 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	0151      	lsls	r1, r2, #5
 8006b2a:	69fa      	ldr	r2, [r7, #28]
 8006b2c:	440a      	add	r2, r1
 8006b2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b32:	0cdb      	lsrs	r3, r3, #19
 8006b34:	04db      	lsls	r3, r3, #19
 8006b36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b52:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b56:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b5a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d11a      	bne.n	8006b98 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	691a      	ldr	r2, [r3, #16]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d903      	bls.n	8006b76 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	0151      	lsls	r1, r2, #5
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	440a      	add	r2, r1
 8006b8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b90:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b94:	6113      	str	r3, [r2, #16]
 8006b96:	e044      	b.n	8006c22 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	1e5a      	subs	r2, r3, #1
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	8afb      	ldrh	r3, [r7, #22]
 8006bbe:	04d9      	lsls	r1, r3, #19
 8006bc0:	4ba4      	ldr	r3, [pc, #656]	@ (8006e54 <USB_EPStartXfer+0x3cc>)
 8006bc2:	400b      	ands	r3, r1
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	0148      	lsls	r0, r1, #5
 8006bc8:	69f9      	ldr	r1, [r7, #28]
 8006bca:	4401      	add	r1, r0
 8006bcc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	791b      	ldrb	r3, [r3, #4]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d122      	bne.n	8006c22 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	015a      	lsls	r2, r3, #5
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	4413      	add	r3, r2
 8006be4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bf6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006bfa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	8afb      	ldrh	r3, [r7, #22]
 8006c0c:	075b      	lsls	r3, r3, #29
 8006c0e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006c12:	69b9      	ldr	r1, [r7, #24]
 8006c14:	0148      	lsls	r0, r1, #5
 8006c16:	69f9      	ldr	r1, [r7, #28]
 8006c18:	4401      	add	r1, r0
 8006c1a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c38:	69b9      	ldr	r1, [r7, #24]
 8006c3a:	0148      	lsls	r0, r1, #5
 8006c3c:	69f9      	ldr	r1, [r7, #28]
 8006c3e:	4401      	add	r1, r0
 8006c40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c44:	4313      	orrs	r3, r2
 8006c46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d14b      	bne.n	8006ce6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c62:	461a      	mov	r2, r3
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	791b      	ldrb	r3, [r3, #4]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d128      	bne.n	8006cc4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d110      	bne.n	8006ca4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	0151      	lsls	r1, r2, #5
 8006c94:	69fa      	ldr	r2, [r7, #28]
 8006c96:	440a      	add	r2, r1
 8006c98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e00f      	b.n	8006cc4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	69ba      	ldr	r2, [r7, #24]
 8006cb4:	0151      	lsls	r1, r2, #5
 8006cb6:	69fa      	ldr	r2, [r7, #28]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006cc2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cde:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	e166      	b.n	8006fb4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	0151      	lsls	r1, r2, #5
 8006cf8:	69fa      	ldr	r2, [r7, #28]
 8006cfa:	440a      	add	r2, r1
 8006cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d04:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	791b      	ldrb	r3, [r3, #4]
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d015      	beq.n	8006d3a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 814e 	beq.w	8006fb4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 030f 	and.w	r3, r3, #15
 8006d28:	2101      	movs	r1, #1
 8006d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2e:	69f9      	ldr	r1, [r7, #28]
 8006d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d34:	4313      	orrs	r3, r2
 8006d36:	634b      	str	r3, [r1, #52]	@ 0x34
 8006d38:	e13c      	b.n	8006fb4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d110      	bne.n	8006d6c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	015a      	lsls	r2, r3, #5
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	4413      	add	r3, r2
 8006d52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	0151      	lsls	r1, r2, #5
 8006d5c:	69fa      	ldr	r2, [r7, #28]
 8006d5e:	440a      	add	r2, r1
 8006d60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d68:	6013      	str	r3, [r2, #0]
 8006d6a:	e00f      	b.n	8006d8c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	015a      	lsls	r2, r3, #5
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	0151      	lsls	r1, r2, #5
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	440a      	add	r2, r1
 8006d82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d8a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	68d9      	ldr	r1, [r3, #12]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	781a      	ldrb	r2, [r3, #0]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	691b      	ldr	r3, [r3, #16]
 8006d98:	b298      	uxth	r0, r3
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4603      	mov	r3, r0
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f9b9 	bl	8007118 <USB_WritePacket>
 8006da6:	e105      	b.n	8006fb4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006dc2:	0cdb      	lsrs	r3, r3, #19
 8006dc4:	04db      	lsls	r3, r3, #19
 8006dc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006de6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d132      	bne.n	8006e58 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	689a      	ldr	r2, [r3, #8]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	689a      	ldr	r2, [r3, #8]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e16:	691a      	ldr	r2, [r3, #16]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e20:	69b9      	ldr	r1, [r7, #24]
 8006e22:	0148      	lsls	r0, r1, #5
 8006e24:	69f9      	ldr	r1, [r7, #28]
 8006e26:	4401      	add	r1, r0
 8006e28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3c:	691b      	ldr	r3, [r3, #16]
 8006e3e:	69ba      	ldr	r2, [r7, #24]
 8006e40:	0151      	lsls	r1, r2, #5
 8006e42:	69fa      	ldr	r2, [r7, #28]
 8006e44:	440a      	add	r2, r1
 8006e46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e4e:	6113      	str	r3, [r2, #16]
 8006e50:	e062      	b.n	8006f18 <USB_EPStartXfer+0x490>
 8006e52:	bf00      	nop
 8006e54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d123      	bne.n	8006ea8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	015a      	lsls	r2, r3, #5
 8006e64:	69fb      	ldr	r3, [r7, #28]
 8006e66:	4413      	add	r3, r2
 8006e68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6c:	691a      	ldr	r2, [r3, #16]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e76:	69b9      	ldr	r1, [r7, #24]
 8006e78:	0148      	lsls	r0, r1, #5
 8006e7a:	69f9      	ldr	r1, [r7, #28]
 8006e7c:	4401      	add	r1, r0
 8006e7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e82:	4313      	orrs	r3, r2
 8006e84:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	015a      	lsls	r2, r3, #5
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	0151      	lsls	r1, r2, #5
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	440a      	add	r2, r1
 8006e9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ea0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ea4:	6113      	str	r3, [r2, #16]
 8006ea6:	e037      	b.n	8006f18 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	1e5a      	subs	r2, r3, #1
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	8afa      	ldrh	r2, [r7, #22]
 8006ec4:	fb03 f202 	mul.w	r2, r3, r2
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ed8:	691a      	ldr	r2, [r3, #16]
 8006eda:	8afb      	ldrh	r3, [r7, #22]
 8006edc:	04d9      	lsls	r1, r3, #19
 8006ede:	4b38      	ldr	r3, [pc, #224]	@ (8006fc0 <USB_EPStartXfer+0x538>)
 8006ee0:	400b      	ands	r3, r1
 8006ee2:	69b9      	ldr	r1, [r7, #24]
 8006ee4:	0148      	lsls	r0, r1, #5
 8006ee6:	69f9      	ldr	r1, [r7, #28]
 8006ee8:	4401      	add	r1, r0
 8006eea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	015a      	lsls	r2, r3, #5
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006efe:	691a      	ldr	r2, [r3, #16]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	6a1b      	ldr	r3, [r3, #32]
 8006f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f08:	69b9      	ldr	r1, [r7, #24]
 8006f0a:	0148      	lsls	r0, r1, #5
 8006f0c:	69f9      	ldr	r1, [r7, #28]
 8006f0e:	4401      	add	r1, r0
 8006f10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f14:	4313      	orrs	r3, r2
 8006f16:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f18:	79fb      	ldrb	r3, [r7, #7]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d10d      	bne.n	8006f3a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	68db      	ldr	r3, [r3, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d009      	beq.n	8006f3a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	68d9      	ldr	r1, [r3, #12]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f36:	460a      	mov	r2, r1
 8006f38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	791b      	ldrb	r3, [r3, #4]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d128      	bne.n	8006f94 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d110      	bne.n	8006f74 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	0151      	lsls	r1, r2, #5
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	440a      	add	r2, r1
 8006f68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e00f      	b.n	8006f94 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	0151      	lsls	r1, r2, #5
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	440a      	add	r2, r1
 8006faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006fb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3720      	adds	r7, #32
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	1ff80000 	.word	0x1ff80000

08006fc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b087      	sub	sp, #28
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	785b      	ldrb	r3, [r3, #1]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d14a      	bne.n	8007078 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ffa:	f040 8086 	bne.w	800710a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	015a      	lsls	r2, r3, #5
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4413      	add	r3, r2
 8007008:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	7812      	ldrb	r2, [r2, #0]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800701c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007020:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	683a      	ldr	r2, [r7, #0]
 8007034:	7812      	ldrb	r2, [r2, #0]
 8007036:	0151      	lsls	r1, r2, #5
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	440a      	add	r2, r1
 800703c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007040:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007044:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007052:	4293      	cmp	r3, r2
 8007054:	d902      	bls.n	800705c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
          break;
 800705a:	e056      	b.n	800710a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	015a      	lsls	r2, r3, #5
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	4413      	add	r3, r2
 8007066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007074:	d0e7      	beq.n	8007046 <USB_EPStopXfer+0x82>
 8007076:	e048      	b.n	800710a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800708c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007090:	d13b      	bne.n	800710a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	0151      	lsls	r1, r2, #5
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	440a      	add	r2, r1
 80070ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070b4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	683a      	ldr	r2, [r7, #0]
 80070c8:	7812      	ldrb	r2, [r2, #0]
 80070ca:	0151      	lsls	r1, r2, #5
 80070cc:	693a      	ldr	r2, [r7, #16]
 80070ce:	440a      	add	r2, r1
 80070d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070d8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d902      	bls.n	80070f0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	75fb      	strb	r3, [r7, #23]
          break;
 80070ee:	e00c      	b.n	800710a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	781b      	ldrb	r3, [r3, #0]
 80070f4:	015a      	lsls	r2, r3, #5
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	4413      	add	r3, r2
 80070fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007104:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007108:	d0e7      	beq.n	80070da <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800710a:	7dfb      	ldrb	r3, [r7, #23]
}
 800710c:	4618      	mov	r0, r3
 800710e:	371c      	adds	r7, #28
 8007110:	46bd      	mov	sp, r7
 8007112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007116:	4770      	bx	lr

08007118 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	@ 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	4611      	mov	r1, r2
 8007124:	461a      	mov	r2, r3
 8007126:	460b      	mov	r3, r1
 8007128:	71fb      	strb	r3, [r7, #7]
 800712a:	4613      	mov	r3, r2
 800712c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d123      	bne.n	8007186 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800713e:	88bb      	ldrh	r3, [r7, #4]
 8007140:	3303      	adds	r3, #3
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
 800714a:	e018      	b.n	800717e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800714c:	79fb      	ldrb	r3, [r7, #7]
 800714e:	031a      	lsls	r2, r3, #12
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	4413      	add	r3, r2
 8007154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007158:	461a      	mov	r2, r3
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	3301      	adds	r3, #1
 8007164:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	3301      	adds	r3, #1
 800716a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	3301      	adds	r3, #1
 8007170:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007178:	69bb      	ldr	r3, [r7, #24]
 800717a:	3301      	adds	r3, #1
 800717c:	61bb      	str	r3, [r7, #24]
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	429a      	cmp	r2, r3
 8007184:	d3e2      	bcc.n	800714c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007186:	2300      	movs	r3, #0
}
 8007188:	4618      	mov	r0, r3
 800718a:	3724      	adds	r7, #36	@ 0x24
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007194:	b480      	push	{r7}
 8007196:	b08b      	sub	sp, #44	@ 0x2c
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	4613      	mov	r3, r2
 80071a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071aa:	88fb      	ldrh	r3, [r7, #6]
 80071ac:	089b      	lsrs	r3, r3, #2
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071b2:	88fb      	ldrh	r3, [r7, #6]
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071ba:	2300      	movs	r3, #0
 80071bc:	623b      	str	r3, [r7, #32]
 80071be:	e014      	b.n	80071ea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071c0:	69bb      	ldr	r3, [r7, #24]
 80071c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80071cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ce:	3301      	adds	r3, #1
 80071d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d4:	3301      	adds	r3, #1
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071da:	3301      	adds	r3, #1
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	3301      	adds	r3, #1
 80071e2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80071e4:	6a3b      	ldr	r3, [r7, #32]
 80071e6:	3301      	adds	r3, #1
 80071e8:	623b      	str	r3, [r7, #32]
 80071ea:	6a3a      	ldr	r2, [r7, #32]
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d3e6      	bcc.n	80071c0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80071f2:	8bfb      	ldrh	r3, [r7, #30]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01e      	beq.n	8007236 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007202:	461a      	mov	r2, r3
 8007204:	f107 0310 	add.w	r3, r7, #16
 8007208:	6812      	ldr	r2, [r2, #0]
 800720a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	6a3b      	ldr	r3, [r7, #32]
 8007210:	b2db      	uxtb	r3, r3
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
 8007218:	b2da      	uxtb	r2, r3
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	701a      	strb	r2, [r3, #0]
      i++;
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	3301      	adds	r3, #1
 8007222:	623b      	str	r3, [r7, #32]
      pDest++;
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	3301      	adds	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800722a:	8bfb      	ldrh	r3, [r7, #30]
 800722c:	3b01      	subs	r3, #1
 800722e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007230:	8bfb      	ldrh	r3, [r7, #30]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1ea      	bne.n	800720c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007238:	4618      	mov	r0, r3
 800723a:	372c      	adds	r7, #44	@ 0x2c
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007244:	b480      	push	{r7}
 8007246:	b085      	sub	sp, #20
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	785b      	ldrb	r3, [r3, #1]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d12c      	bne.n	80072ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	db12      	blt.n	8007298 <USB_EPSetStall+0x54>
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00f      	beq.n	8007298 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	015a      	lsls	r2, r3, #5
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4413      	add	r3, r2
 8007280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	0151      	lsls	r1, r2, #5
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	440a      	add	r2, r1
 800728e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007292:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007296:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072b6:	6013      	str	r3, [r2, #0]
 80072b8:	e02b      	b.n	8007312 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db12      	blt.n	80072f2 <USB_EPSetStall+0xae>
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00f      	beq.n	80072f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800730c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007310:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3714      	adds	r7, #20
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	785b      	ldrb	r3, [r3, #1]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d128      	bne.n	800738e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007356:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800735a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	791b      	ldrb	r3, [r3, #4]
 8007360:	2b03      	cmp	r3, #3
 8007362:	d003      	beq.n	800736c <USB_EPClearStall+0x4c>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	791b      	ldrb	r3, [r3, #4]
 8007368:	2b02      	cmp	r3, #2
 800736a:	d138      	bne.n	80073de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	015a      	lsls	r2, r3, #5
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	4413      	add	r3, r2
 8007374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	0151      	lsls	r1, r2, #5
 800737e:	68fa      	ldr	r2, [r7, #12]
 8007380:	440a      	add	r2, r1
 8007382:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007386:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	e027      	b.n	80073de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	015a      	lsls	r2, r3, #5
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4413      	add	r3, r2
 8007396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	0151      	lsls	r1, r2, #5
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	440a      	add	r2, r1
 80073a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	791b      	ldrb	r3, [r3, #4]
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d003      	beq.n	80073be <USB_EPClearStall+0x9e>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	791b      	ldrb	r3, [r3, #4]
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d10f      	bne.n	80073de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	0151      	lsls	r1, r2, #5
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	440a      	add	r2, r1
 80073d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800740a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800740e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	78fb      	ldrb	r3, [r7, #3]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007420:	68f9      	ldr	r1, [r7, #12]
 8007422:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007426:	4313      	orrs	r3, r2
 8007428:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800742a:	2300      	movs	r3, #0
}
 800742c:	4618      	mov	r0, r3
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68fa      	ldr	r2, [r7, #12]
 800744e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007466:	f023 0302 	bic.w	r3, r3, #2
 800746a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007494:	f023 0303 	bic.w	r3, r3, #3
 8007498:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074a8:	f043 0302 	orr.w	r3, r3, #2
 80074ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	4013      	ands	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074d4:	68fb      	ldr	r3, [r7, #12]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	4013      	ands	r3, r2
 8007504:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	0c1b      	lsrs	r3, r3, #16
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007516:	b480      	push	{r7}
 8007518:	b085      	sub	sp, #20
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007528:	699b      	ldr	r3, [r3, #24]
 800752a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	68ba      	ldr	r2, [r7, #8]
 8007536:	4013      	ands	r3, r2
 8007538:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	b29b      	uxth	r3, r3
}
 800753e:	4618      	mov	r0, r3
 8007540:	3714      	adds	r7, #20
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800754a:	b480      	push	{r7}
 800754c:	b085      	sub	sp, #20
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800755a:	78fb      	ldrb	r3, [r7, #3]
 800755c:	015a      	lsls	r2, r3, #5
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4413      	add	r3, r2
 8007562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	4013      	ands	r3, r2
 8007576:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007578:	68bb      	ldr	r3, [r7, #8]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007586:	b480      	push	{r7}
 8007588:	b087      	sub	sp, #28
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
 800758e:	460b      	mov	r3, r1
 8007590:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075aa:	78fb      	ldrb	r3, [r7, #3]
 80075ac:	f003 030f 	and.w	r3, r3, #15
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	fa22 f303 	lsr.w	r3, r2, r3
 80075b6:	01db      	lsls	r3, r3, #7
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4013      	ands	r3, r2
 80075d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075d4:	68bb      	ldr	r3, [r7, #8]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	371c      	adds	r7, #28
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b083      	sub	sp, #12
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	695b      	ldr	r3, [r3, #20]
 80075ee:	f003 0301 	and.w	r3, r3, #1
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	370c      	adds	r7, #12
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr

080075fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80075fe:	b480      	push	{r7}
 8007600:	b085      	sub	sp, #20
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007618:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800761c:	f023 0307 	bic.w	r3, r3, #7
 8007620:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007634:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007636:	2300      	movs	r3, #0
}
 8007638:	4618      	mov	r0, r3
 800763a:	3714      	adds	r7, #20
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007644:	b480      	push	{r7}
 8007646:	b087      	sub	sp, #28
 8007648:	af00      	add	r7, sp, #0
 800764a:	60f8      	str	r0, [r7, #12]
 800764c:	460b      	mov	r3, r1
 800764e:	607a      	str	r2, [r7, #4]
 8007650:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	333c      	adds	r3, #60	@ 0x3c
 800765a:	3304      	adds	r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	4a26      	ldr	r2, [pc, #152]	@ (80076fc <USB_EP0_OutStart+0xb8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d90a      	bls.n	800767e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007674:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007678:	d101      	bne.n	800767e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	e037      	b.n	80076ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007684:	461a      	mov	r2, r3
 8007686:	2300      	movs	r3, #0
 8007688:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	697a      	ldr	r2, [r7, #20]
 8007694:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007698:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800769c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	697a      	ldr	r2, [r7, #20]
 80076a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076ac:	f043 0318 	orr.w	r3, r3, #24
 80076b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80076c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d10f      	bne.n	80076ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	697a      	ldr	r2, [r7, #20]
 80076e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80076ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	371c      	adds	r7, #28
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	4f54300a 	.word	0x4f54300a

08007700 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007708:	2300      	movs	r3, #0
 800770a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3301      	adds	r3, #1
 8007710:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007718:	d901      	bls.n	800771e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e01b      	b.n	8007756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	2b00      	cmp	r3, #0
 8007724:	daf2      	bge.n	800770c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	f043 0201 	orr.w	r2, r3, #1
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	3301      	adds	r3, #1
 800773a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007742:	d901      	bls.n	8007748 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007744:	2303      	movs	r3, #3
 8007746:	e006      	b.n	8007756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	691b      	ldr	r3, [r3, #16]
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b01      	cmp	r3, #1
 8007752:	d0f0      	beq.n	8007736 <USB_CoreReset+0x36>

  return HAL_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3714      	adds	r7, #20
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
	...

08007764 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	460b      	mov	r3, r1
 800776e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007770:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007774:	f006 f876 	bl	800d864 <USBD_static_malloc>
 8007778:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d109      	bne.n	8007794 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	32b0      	adds	r2, #176	@ 0xb0
 800778a:	2100      	movs	r1, #0
 800778c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007790:	2302      	movs	r3, #2
 8007792:	e0d4      	b.n	800793e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007794:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f006 f8a6 	bl	800d8ec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	32b0      	adds	r2, #176	@ 0xb0
 80077aa:	68f9      	ldr	r1, [r7, #12]
 80077ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	32b0      	adds	r2, #176	@ 0xb0
 80077ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	7c1b      	ldrb	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d138      	bne.n	800783e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077cc:	4b5e      	ldr	r3, [pc, #376]	@ (8007948 <USBD_CDC_Init+0x1e4>)
 80077ce:	7819      	ldrb	r1, [r3, #0]
 80077d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077d4:	2202      	movs	r2, #2
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f005 ff21 	bl	800d61e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077dc:	4b5a      	ldr	r3, [pc, #360]	@ (8007948 <USBD_CDC_Init+0x1e4>)
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	f003 020f 	and.w	r2, r3, #15
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	3324      	adds	r3, #36	@ 0x24
 80077f2:	2201      	movs	r2, #1
 80077f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80077f6:	4b55      	ldr	r3, [pc, #340]	@ (800794c <USBD_CDC_Init+0x1e8>)
 80077f8:	7819      	ldrb	r1, [r3, #0]
 80077fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077fe:	2202      	movs	r2, #2
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f005 ff0c 	bl	800d61e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007806:	4b51      	ldr	r3, [pc, #324]	@ (800794c <USBD_CDC_Init+0x1e8>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	f003 020f 	and.w	r2, r3, #15
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	4613      	mov	r3, r2
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800781e:	2201      	movs	r2, #1
 8007820:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007822:	4b4b      	ldr	r3, [pc, #300]	@ (8007950 <USBD_CDC_Init+0x1ec>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f003 020f 	and.w	r2, r3, #15
 800782a:	6879      	ldr	r1, [r7, #4]
 800782c:	4613      	mov	r3, r2
 800782e:	009b      	lsls	r3, r3, #2
 8007830:	4413      	add	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	440b      	add	r3, r1
 8007836:	3326      	adds	r3, #38	@ 0x26
 8007838:	2210      	movs	r2, #16
 800783a:	801a      	strh	r2, [r3, #0]
 800783c:	e035      	b.n	80078aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800783e:	4b42      	ldr	r3, [pc, #264]	@ (8007948 <USBD_CDC_Init+0x1e4>)
 8007840:	7819      	ldrb	r1, [r3, #0]
 8007842:	2340      	movs	r3, #64	@ 0x40
 8007844:	2202      	movs	r2, #2
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f005 fee9 	bl	800d61e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800784c:	4b3e      	ldr	r3, [pc, #248]	@ (8007948 <USBD_CDC_Init+0x1e4>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 020f 	and.w	r2, r3, #15
 8007854:	6879      	ldr	r1, [r7, #4]
 8007856:	4613      	mov	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4413      	add	r3, r2
 800785c:	009b      	lsls	r3, r3, #2
 800785e:	440b      	add	r3, r1
 8007860:	3324      	adds	r3, #36	@ 0x24
 8007862:	2201      	movs	r2, #1
 8007864:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007866:	4b39      	ldr	r3, [pc, #228]	@ (800794c <USBD_CDC_Init+0x1e8>)
 8007868:	7819      	ldrb	r1, [r3, #0]
 800786a:	2340      	movs	r3, #64	@ 0x40
 800786c:	2202      	movs	r2, #2
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f005 fed5 	bl	800d61e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007874:	4b35      	ldr	r3, [pc, #212]	@ (800794c <USBD_CDC_Init+0x1e8>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	6879      	ldr	r1, [r7, #4]
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800788c:	2201      	movs	r2, #1
 800788e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007890:	4b2f      	ldr	r3, [pc, #188]	@ (8007950 <USBD_CDC_Init+0x1ec>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	3326      	adds	r3, #38	@ 0x26
 80078a6:	2210      	movs	r2, #16
 80078a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078aa:	4b29      	ldr	r3, [pc, #164]	@ (8007950 <USBD_CDC_Init+0x1ec>)
 80078ac:	7819      	ldrb	r1, [r3, #0]
 80078ae:	2308      	movs	r3, #8
 80078b0:	2203      	movs	r2, #3
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f005 feb3 	bl	800d61e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078b8:	4b25      	ldr	r3, [pc, #148]	@ (8007950 <USBD_CDC_Init+0x1ec>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	f003 020f 	and.w	r2, r3, #15
 80078c0:	6879      	ldr	r1, [r7, #4]
 80078c2:	4613      	mov	r3, r2
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	440b      	add	r3, r1
 80078cc:	3324      	adds	r3, #36	@ 0x24
 80078ce:	2201      	movs	r2, #1
 80078d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	2200      	movs	r2, #0
 80078d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	33b0      	adds	r3, #176	@ 0xb0
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007908:	2302      	movs	r3, #2
 800790a:	e018      	b.n	800793e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	7c1b      	ldrb	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d10a      	bne.n	800792a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007914:	4b0d      	ldr	r3, [pc, #52]	@ (800794c <USBD_CDC_Init+0x1e8>)
 8007916:	7819      	ldrb	r1, [r3, #0]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800791e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f005 ff6a 	bl	800d7fc <USBD_LL_PrepareReceive>
 8007928:	e008      	b.n	800793c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800792a:	4b08      	ldr	r3, [pc, #32]	@ (800794c <USBD_CDC_Init+0x1e8>)
 800792c:	7819      	ldrb	r1, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007934:	2340      	movs	r3, #64	@ 0x40
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f005 ff60 	bl	800d7fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000093 	.word	0x20000093
 800794c:	20000094 	.word	0x20000094
 8007950:	20000095 	.word	0x20000095

08007954 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007960:	4b3a      	ldr	r3, [pc, #232]	@ (8007a4c <USBD_CDC_DeInit+0xf8>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f005 fe7f 	bl	800d66a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800796c:	4b37      	ldr	r3, [pc, #220]	@ (8007a4c <USBD_CDC_DeInit+0xf8>)
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	f003 020f 	and.w	r2, r3, #15
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	3324      	adds	r3, #36	@ 0x24
 8007982:	2200      	movs	r2, #0
 8007984:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007986:	4b32      	ldr	r3, [pc, #200]	@ (8007a50 <USBD_CDC_DeInit+0xfc>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f005 fe6c 	bl	800d66a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007992:	4b2f      	ldr	r3, [pc, #188]	@ (8007a50 <USBD_CDC_DeInit+0xfc>)
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	f003 020f 	and.w	r2, r3, #15
 800799a:	6879      	ldr	r1, [r7, #4]
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	440b      	add	r3, r1
 80079a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079aa:	2200      	movs	r2, #0
 80079ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079ae:	4b29      	ldr	r3, [pc, #164]	@ (8007a54 <USBD_CDC_DeInit+0x100>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	4619      	mov	r1, r3
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f005 fe58 	bl	800d66a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079ba:	4b26      	ldr	r3, [pc, #152]	@ (8007a54 <USBD_CDC_DeInit+0x100>)
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	f003 020f 	and.w	r2, r3, #15
 80079c2:	6879      	ldr	r1, [r7, #4]
 80079c4:	4613      	mov	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	3324      	adds	r3, #36	@ 0x24
 80079d0:	2200      	movs	r2, #0
 80079d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079d4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a54 <USBD_CDC_DeInit+0x100>)
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3326      	adds	r3, #38	@ 0x26
 80079ea:	2200      	movs	r2, #0
 80079ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32b0      	adds	r2, #176	@ 0xb0
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01f      	beq.n	8007a40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	33b0      	adds	r3, #176	@ 0xb0
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	685b      	ldr	r3, [r3, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	32b0      	adds	r2, #176	@ 0xb0
 8007a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f005 ff2c 	bl	800d880 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	32b0      	adds	r2, #176	@ 0xb0
 8007a32:	2100      	movs	r1, #0
 8007a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	20000093 	.word	0x20000093
 8007a50:	20000094 	.word	0x20000094
 8007a54:	20000095 	.word	0x20000095

08007a58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	32b0      	adds	r2, #176	@ 0xb0
 8007a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a72:	2300      	movs	r3, #0
 8007a74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007a84:	2303      	movs	r3, #3
 8007a86:	e0bf      	b.n	8007c08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d050      	beq.n	8007b36 <USBD_CDC_Setup+0xde>
 8007a94:	2b20      	cmp	r3, #32
 8007a96:	f040 80af 	bne.w	8007bf8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	88db      	ldrh	r3, [r3, #6]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d03a      	beq.n	8007b18 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	b25b      	sxtb	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	da1b      	bge.n	8007ae4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	33b0      	adds	r3, #176	@ 0xb0
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	4413      	add	r3, r2
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ac2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	88d2      	ldrh	r2, [r2, #6]
 8007ac8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	88db      	ldrh	r3, [r3, #6]
 8007ace:	2b07      	cmp	r3, #7
 8007ad0:	bf28      	it	cs
 8007ad2:	2307      	movcs	r3, #7
 8007ad4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	89fa      	ldrh	r2, [r7, #14]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fd93 	bl	8009608 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007ae2:	e090      	b.n	8007c06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	785a      	ldrb	r2, [r3, #1]
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	88db      	ldrh	r3, [r3, #6]
 8007af2:	2b3f      	cmp	r3, #63	@ 0x3f
 8007af4:	d803      	bhi.n	8007afe <USBD_CDC_Setup+0xa6>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	88db      	ldrh	r3, [r3, #6]
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	e000      	b.n	8007b00 <USBD_CDC_Setup+0xa8>
 8007afe:	2240      	movs	r2, #64	@ 0x40
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b06:	6939      	ldr	r1, [r7, #16]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b0e:	461a      	mov	r2, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f001 fda5 	bl	8009660 <USBD_CtlPrepareRx>
      break;
 8007b16:	e076      	b.n	8007c06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	33b0      	adds	r3, #176	@ 0xb0
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	4413      	add	r3, r2
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	683a      	ldr	r2, [r7, #0]
 8007b2c:	7850      	ldrb	r0, [r2, #1]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	6839      	ldr	r1, [r7, #0]
 8007b32:	4798      	blx	r3
      break;
 8007b34:	e067      	b.n	8007c06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	785b      	ldrb	r3, [r3, #1]
 8007b3a:	2b0b      	cmp	r3, #11
 8007b3c:	d851      	bhi.n	8007be2 <USBD_CDC_Setup+0x18a>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <USBD_CDC_Setup+0xec>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b75 	.word	0x08007b75
 8007b48:	08007bf1 	.word	0x08007bf1
 8007b4c:	08007be3 	.word	0x08007be3
 8007b50:	08007be3 	.word	0x08007be3
 8007b54:	08007be3 	.word	0x08007be3
 8007b58:	08007be3 	.word	0x08007be3
 8007b5c:	08007be3 	.word	0x08007be3
 8007b60:	08007be3 	.word	0x08007be3
 8007b64:	08007be3 	.word	0x08007be3
 8007b68:	08007be3 	.word	0x08007be3
 8007b6c:	08007b9f 	.word	0x08007b9f
 8007b70:	08007bc9 	.word	0x08007bc9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d107      	bne.n	8007b90 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007b80:	f107 030a 	add.w	r3, r7, #10
 8007b84:	2202      	movs	r2, #2
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f001 fd3d 	bl	8009608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b8e:	e032      	b.n	8007bf6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007b90:	6839      	ldr	r1, [r7, #0]
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fcbb 	bl	800950e <USBD_CtlError>
            ret = USBD_FAIL;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	75fb      	strb	r3, [r7, #23]
          break;
 8007b9c:	e02b      	b.n	8007bf6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ba4:	b2db      	uxtb	r3, r3
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d107      	bne.n	8007bba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007baa:	f107 030d 	add.w	r3, r7, #13
 8007bae:	2201      	movs	r2, #1
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fd28 	bl	8009608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bb8:	e01d      	b.n	8007bf6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 fca6 	bl	800950e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	75fb      	strb	r3, [r7, #23]
          break;
 8007bc6:	e016      	b.n	8007bf6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	2b03      	cmp	r3, #3
 8007bd2:	d00f      	beq.n	8007bf4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f001 fc99 	bl	800950e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007be0:	e008      	b.n	8007bf4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007be2:	6839      	ldr	r1, [r7, #0]
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f001 fc92 	bl	800950e <USBD_CtlError>
          ret = USBD_FAIL;
 8007bea:	2303      	movs	r3, #3
 8007bec:	75fb      	strb	r3, [r7, #23]
          break;
 8007bee:	e002      	b.n	8007bf6 <USBD_CDC_Setup+0x19e>
          break;
 8007bf0:	bf00      	nop
 8007bf2:	e008      	b.n	8007c06 <USBD_CDC_Setup+0x1ae>
          break;
 8007bf4:	bf00      	nop
      }
      break;
 8007bf6:	e006      	b.n	8007c06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f001 fc87 	bl	800950e <USBD_CtlError>
      ret = USBD_FAIL;
 8007c00:	2303      	movs	r3, #3
 8007c02:	75fb      	strb	r3, [r7, #23]
      break;
 8007c04:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3718      	adds	r7, #24
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}

08007c10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	32b0      	adds	r2, #176	@ 0xb0
 8007c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d101      	bne.n	8007c3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c36:	2303      	movs	r3, #3
 8007c38:	e065      	b.n	8007d06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	32b0      	adds	r2, #176	@ 0xb0
 8007c44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c4a:	78fb      	ldrb	r3, [r7, #3]
 8007c4c:	f003 020f 	and.w	r2, r3, #15
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	440b      	add	r3, r1
 8007c5c:	3318      	adds	r3, #24
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d02f      	beq.n	8007cc4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c64:	78fb      	ldrb	r3, [r7, #3]
 8007c66:	f003 020f 	and.w	r2, r3, #15
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	3318      	adds	r3, #24
 8007c78:	681a      	ldr	r2, [r3, #0]
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	f003 010f 	and.w	r1, r3, #15
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	460b      	mov	r3, r1
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	440b      	add	r3, r1
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	4403      	add	r3, r0
 8007c8c:	331c      	adds	r3, #28
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	fbb2 f1f3 	udiv	r1, r2, r3
 8007c94:	fb01 f303 	mul.w	r3, r1, r3
 8007c98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d112      	bne.n	8007cc4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	f003 020f 	and.w	r2, r3, #15
 8007ca4:	6879      	ldr	r1, [r7, #4]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4413      	add	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	440b      	add	r3, r1
 8007cb0:	3318      	adds	r3, #24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cb6:	78f9      	ldrb	r1, [r7, #3]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2200      	movs	r2, #0
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	f005 fd7c 	bl	800d7ba <USBD_LL_Transmit>
 8007cc2:	e01f      	b.n	8007d04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cd2:	687a      	ldr	r2, [r7, #4]
 8007cd4:	33b0      	adds	r3, #176	@ 0xb0
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d010      	beq.n	8007d04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	33b0      	adds	r3, #176	@ 0xb0
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	4413      	add	r3, r2
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	691b      	ldr	r3, [r3, #16]
 8007cf4:	68ba      	ldr	r2, [r7, #8]
 8007cf6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007d00:	78fa      	ldrb	r2, [r7, #3]
 8007d02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d04:	2300      	movs	r3, #0
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	460b      	mov	r3, r1
 8007d18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	32b0      	adds	r2, #176	@ 0xb0
 8007d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	32b0      	adds	r2, #176	@ 0xb0
 8007d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d101      	bne.n	8007d40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d3c:	2303      	movs	r3, #3
 8007d3e:	e01a      	b.n	8007d76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d40:	78fb      	ldrb	r3, [r7, #3]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f005 fd7a 	bl	800d83e <USBD_LL_GetRxDataSize>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	33b0      	adds	r3, #176	@ 0xb0
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d6a:	68fa      	ldr	r2, [r7, #12]
 8007d6c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d70:	4611      	mov	r1, r2
 8007d72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	32b0      	adds	r2, #176	@ 0xb0
 8007d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d101      	bne.n	8007da0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e024      	b.n	8007dea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	33b0      	adds	r3, #176	@ 0xb0
 8007daa:	009b      	lsls	r3, r3, #2
 8007dac:	4413      	add	r3, r2
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d019      	beq.n	8007de8 <USBD_CDC_EP0_RxReady+0x6a>
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007dba:	2bff      	cmp	r3, #255	@ 0xff
 8007dbc:	d014      	beq.n	8007de8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	33b0      	adds	r3, #176	@ 0xb0
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007dd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	22ff      	movs	r2, #255	@ 0xff
 8007de4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007de8:	2300      	movs	r3, #0
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	3710      	adds	r7, #16
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
	...

08007df4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007dfc:	2182      	movs	r1, #130	@ 0x82
 8007dfe:	4818      	ldr	r0, [pc, #96]	@ (8007e60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e00:	f000 fd4f 	bl	80088a2 <USBD_GetEpDesc>
 8007e04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e06:	2101      	movs	r1, #1
 8007e08:	4815      	ldr	r0, [pc, #84]	@ (8007e60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e0a:	f000 fd4a 	bl	80088a2 <USBD_GetEpDesc>
 8007e0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e10:	2181      	movs	r1, #129	@ 0x81
 8007e12:	4813      	ldr	r0, [pc, #76]	@ (8007e60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e14:	f000 fd45 	bl	80088a2 <USBD_GetEpDesc>
 8007e18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d002      	beq.n	8007e26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	2210      	movs	r2, #16
 8007e24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d006      	beq.n	8007e3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e34:	711a      	strb	r2, [r3, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d006      	beq.n	8007e4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e48:	711a      	strb	r2, [r3, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2243      	movs	r2, #67	@ 0x43
 8007e52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e54:	4b02      	ldr	r3, [pc, #8]	@ (8007e60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000050 	.word	0x20000050

08007e64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b086      	sub	sp, #24
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e6c:	2182      	movs	r1, #130	@ 0x82
 8007e6e:	4818      	ldr	r0, [pc, #96]	@ (8007ed0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e70:	f000 fd17 	bl	80088a2 <USBD_GetEpDesc>
 8007e74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e76:	2101      	movs	r1, #1
 8007e78:	4815      	ldr	r0, [pc, #84]	@ (8007ed0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e7a:	f000 fd12 	bl	80088a2 <USBD_GetEpDesc>
 8007e7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e80:	2181      	movs	r1, #129	@ 0x81
 8007e82:	4813      	ldr	r0, [pc, #76]	@ (8007ed0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e84:	f000 fd0d 	bl	80088a2 <USBD_GetEpDesc>
 8007e88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2210      	movs	r2, #16
 8007e94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d006      	beq.n	8007eaa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	711a      	strb	r2, [r3, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f042 0202 	orr.w	r2, r2, #2
 8007ea8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d006      	beq.n	8007ebe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	711a      	strb	r2, [r3, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	f042 0202 	orr.w	r2, r2, #2
 8007ebc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2243      	movs	r2, #67	@ 0x43
 8007ec2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ec4:	4b02      	ldr	r3, [pc, #8]	@ (8007ed0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20000050 	.word	0x20000050

08007ed4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007edc:	2182      	movs	r1, #130	@ 0x82
 8007ede:	4818      	ldr	r0, [pc, #96]	@ (8007f40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ee0:	f000 fcdf 	bl	80088a2 <USBD_GetEpDesc>
 8007ee4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	4815      	ldr	r0, [pc, #84]	@ (8007f40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007eea:	f000 fcda 	bl	80088a2 <USBD_GetEpDesc>
 8007eee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ef0:	2181      	movs	r1, #129	@ 0x81
 8007ef2:	4813      	ldr	r0, [pc, #76]	@ (8007f40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ef4:	f000 fcd5 	bl	80088a2 <USBD_GetEpDesc>
 8007ef8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d002      	beq.n	8007f06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2210      	movs	r2, #16
 8007f04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d006      	beq.n	8007f1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f14:	711a      	strb	r2, [r3, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d006      	beq.n	8007f2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	2200      	movs	r2, #0
 8007f24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f28:	711a      	strb	r2, [r3, #4]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2243      	movs	r2, #67	@ 0x43
 8007f32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f34:	4b02      	ldr	r3, [pc, #8]	@ (8007f40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3718      	adds	r7, #24
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000050 	.word	0x20000050

08007f44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	220a      	movs	r2, #10
 8007f50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f52:	4b03      	ldr	r3, [pc, #12]	@ (8007f60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr
 8007f60:	2000000c 	.word	0x2000000c

08007f64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e009      	b.n	8007f8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	33b0      	adds	r3, #176	@ 0xb0
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	370c      	adds	r7, #12
 8007f90:	46bd      	mov	sp, r7
 8007f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f96:	4770      	bx	lr

08007f98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b087      	sub	sp, #28
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	32b0      	adds	r2, #176	@ 0xb0
 8007fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fb2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fb4:	697b      	ldr	r3, [r7, #20]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e008      	b.n	8007fd0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b085      	sub	sp, #20
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32b0      	adds	r2, #176	@ 0xb0
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e004      	b.n	800800a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	683a      	ldr	r2, [r7, #0]
 8008004:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008008:	2300      	movs	r3, #0
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr
	...

08008018 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b084      	sub	sp, #16
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	32b0      	adds	r2, #176	@ 0xb0
 800802a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008030:	2301      	movs	r3, #1
 8008032:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d101      	bne.n	800803e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800803a:	2303      	movs	r3, #3
 800803c:	e025      	b.n	800808a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008044:	2b00      	cmp	r3, #0
 8008046:	d11f      	bne.n	8008088 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2201      	movs	r2, #1
 800804c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008050:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <USBD_CDC_TransmitPacket+0x7c>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	f003 020f 	and.w	r2, r3, #15
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	4613      	mov	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	4413      	add	r3, r2
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4403      	add	r3, r0
 800806a:	3318      	adds	r3, #24
 800806c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800806e:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <USBD_CDC_TransmitPacket+0x7c>)
 8008070:	7819      	ldrb	r1, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f005 fb9b 	bl	800d7ba <USBD_LL_Transmit>

    ret = USBD_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008088:	7bfb      	ldrb	r3, [r7, #15]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	20000093 	.word	0x20000093

08008098 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	32b0      	adds	r2, #176	@ 0xb0
 80080aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	32b0      	adds	r2, #176	@ 0xb0
 80080ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e018      	b.n	80080f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	7c1b      	ldrb	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10a      	bne.n	80080e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080ce:	4b0c      	ldr	r3, [pc, #48]	@ (8008100 <USBD_CDC_ReceivePacket+0x68>)
 80080d0:	7819      	ldrb	r1, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f005 fb8d 	bl	800d7fc <USBD_LL_PrepareReceive>
 80080e2:	e008      	b.n	80080f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080e4:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <USBD_CDC_ReceivePacket+0x68>)
 80080e6:	7819      	ldrb	r1, [r3, #0]
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080ee:	2340      	movs	r3, #64	@ 0x40
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f005 fb83 	bl	800d7fc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3710      	adds	r7, #16
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	20000094 	.word	0x20000094

08008104 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	4613      	mov	r3, r2
 8008110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d101      	bne.n	800811c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008118:	2303      	movs	r3, #3
 800811a:	e01f      	b.n	800815c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2200      	movs	r2, #0
 8008120:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2201      	movs	r2, #1
 8008146:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	79fa      	ldrb	r2, [r7, #7]
 800814e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f005 f9f7 	bl	800d544 <USBD_LL_Init>
 8008156:	4603      	mov	r3, r0
 8008158:	75fb      	strb	r3, [r7, #23]

  return ret;
 800815a:	7dfb      	ldrb	r3, [r7, #23]
}
 800815c:	4618      	mov	r0, r3
 800815e:	3718      	adds	r7, #24
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008178:	2303      	movs	r3, #3
 800817a:	e025      	b.n	80081c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	32ae      	adds	r2, #174	@ 0xae
 800818e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00f      	beq.n	80081b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	32ae      	adds	r2, #174	@ 0xae
 80081a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a8:	f107 020e 	add.w	r2, r7, #14
 80081ac:	4610      	mov	r0, r2
 80081ae:	4798      	blx	r3
 80081b0:	4602      	mov	r2, r0
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80081be:	1c5a      	adds	r2, r3, #1
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f005 fa05 	bl	800d5e8 <USBD_LL_Start>
 80081de:	4603      	mov	r3, r0
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3708      	adds	r7, #8
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80081fe:	b580      	push	{r7, lr}
 8008200:	b084      	sub	sp, #16
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
 8008206:	460b      	mov	r3, r1
 8008208:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800820a:	2300      	movs	r3, #0
 800820c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	2b00      	cmp	r3, #0
 8008216:	d009      	beq.n	800822c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	78fa      	ldrb	r2, [r7, #3]
 8008222:	4611      	mov	r1, r2
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	4798      	blx	r3
 8008228:	4603      	mov	r3, r0
 800822a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800822c:	7bfb      	ldrb	r3, [r7, #15]
}
 800822e:	4618      	mov	r0, r3
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	460b      	mov	r3, r1
 8008240:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	78fa      	ldrb	r2, [r7, #3]
 8008250:	4611      	mov	r1, r2
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	4798      	blx	r3
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d001      	beq.n	8008260 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008260:	7bfb      	ldrb	r3, [r7, #15]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b084      	sub	sp, #16
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	4618      	mov	r0, r3
 800827e:	f001 f90c 	bl	800949a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008290:	461a      	mov	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800829e:	f003 031f 	and.w	r3, r3, #31
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d01a      	beq.n	80082dc <USBD_LL_SetupStage+0x72>
 80082a6:	2b02      	cmp	r3, #2
 80082a8:	d822      	bhi.n	80082f0 <USBD_LL_SetupStage+0x86>
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d002      	beq.n	80082b4 <USBD_LL_SetupStage+0x4a>
 80082ae:	2b01      	cmp	r3, #1
 80082b0:	d00a      	beq.n	80082c8 <USBD_LL_SetupStage+0x5e>
 80082b2:	e01d      	b.n	80082f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fb63 	bl	8008988 <USBD_StdDevReq>
 80082c2:	4603      	mov	r3, r0
 80082c4:	73fb      	strb	r3, [r7, #15]
      break;
 80082c6:	e020      	b.n	800830a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ce:	4619      	mov	r1, r3
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 fbcb 	bl	8008a6c <USBD_StdItfReq>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73fb      	strb	r3, [r7, #15]
      break;
 80082da:	e016      	b.n	800830a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082e2:	4619      	mov	r1, r3
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fc2d 	bl	8008b44 <USBD_StdEPReq>
 80082ea:	4603      	mov	r3, r0
 80082ec:	73fb      	strb	r3, [r7, #15]
      break;
 80082ee:	e00c      	b.n	800830a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f005 f9d2 	bl	800d6a8 <USBD_LL_StallEP>
 8008304:	4603      	mov	r3, r0
 8008306:	73fb      	strb	r3, [r7, #15]
      break;
 8008308:	bf00      	nop
  }

  return ret;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3710      	adds	r7, #16
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}

08008314 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b086      	sub	sp, #24
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	460b      	mov	r3, r1
 800831e:	607a      	str	r2, [r7, #4]
 8008320:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008322:	2300      	movs	r3, #0
 8008324:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d16e      	bne.n	800840a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008332:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800833a:	2b03      	cmp	r3, #3
 800833c:	f040 8098 	bne.w	8008470 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	689a      	ldr	r2, [r3, #8]
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	429a      	cmp	r2, r3
 800834a:	d913      	bls.n	8008374 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	689a      	ldr	r2, [r3, #8]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	1ad2      	subs	r2, r2, r3
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	68da      	ldr	r2, [r3, #12]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	4293      	cmp	r3, r2
 8008364:	bf28      	it	cs
 8008366:	4613      	movcs	r3, r2
 8008368:	461a      	mov	r2, r3
 800836a:	6879      	ldr	r1, [r7, #4]
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f001 f994 	bl	800969a <USBD_CtlContinueRx>
 8008372:	e07d      	b.n	8008470 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800837a:	f003 031f 	and.w	r3, r3, #31
 800837e:	2b02      	cmp	r3, #2
 8008380:	d014      	beq.n	80083ac <USBD_LL_DataOutStage+0x98>
 8008382:	2b02      	cmp	r3, #2
 8008384:	d81d      	bhi.n	80083c2 <USBD_LL_DataOutStage+0xae>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <USBD_LL_DataOutStage+0x7c>
 800838a:	2b01      	cmp	r3, #1
 800838c:	d003      	beq.n	8008396 <USBD_LL_DataOutStage+0x82>
 800838e:	e018      	b.n	80083c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008390:	2300      	movs	r3, #0
 8008392:	75bb      	strb	r3, [r7, #22]
            break;
 8008394:	e018      	b.n	80083c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800839c:	b2db      	uxtb	r3, r3
 800839e:	4619      	mov	r1, r3
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fa64 	bl	800886e <USBD_CoreFindIF>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75bb      	strb	r3, [r7, #22]
            break;
 80083aa:	e00d      	b.n	80083c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083b2:	b2db      	uxtb	r3, r3
 80083b4:	4619      	mov	r1, r3
 80083b6:	68f8      	ldr	r0, [r7, #12]
 80083b8:	f000 fa66 	bl	8008888 <USBD_CoreFindEP>
 80083bc:	4603      	mov	r3, r0
 80083be:	75bb      	strb	r3, [r7, #22]
            break;
 80083c0:	e002      	b.n	80083c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	75bb      	strb	r3, [r7, #22]
            break;
 80083c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083c8:	7dbb      	ldrb	r3, [r7, #22]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d119      	bne.n	8008402 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	2b03      	cmp	r3, #3
 80083d8:	d113      	bne.n	8008402 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083da:	7dba      	ldrb	r2, [r7, #22]
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	32ae      	adds	r2, #174	@ 0xae
 80083e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00b      	beq.n	8008402 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80083ea:	7dba      	ldrb	r2, [r7, #22]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80083f2:	7dba      	ldrb	r2, [r7, #22]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	32ae      	adds	r2, #174	@ 0xae
 80083f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	68f8      	ldr	r0, [r7, #12]
 8008400:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	f001 f95a 	bl	80096bc <USBD_CtlSendStatus>
 8008408:	e032      	b.n	8008470 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008410:	b2db      	uxtb	r3, r3
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fa37 	bl	8008888 <USBD_CoreFindEP>
 800841a:	4603      	mov	r3, r0
 800841c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800841e:	7dbb      	ldrb	r3, [r7, #22]
 8008420:	2bff      	cmp	r3, #255	@ 0xff
 8008422:	d025      	beq.n	8008470 <USBD_LL_DataOutStage+0x15c>
 8008424:	7dbb      	ldrb	r3, [r7, #22]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d122      	bne.n	8008470 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b03      	cmp	r3, #3
 8008434:	d117      	bne.n	8008466 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008436:	7dba      	ldrb	r2, [r7, #22]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	32ae      	adds	r2, #174	@ 0xae
 800843c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00f      	beq.n	8008466 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008446:	7dba      	ldrb	r2, [r7, #22]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800844e:	7dba      	ldrb	r2, [r7, #22]
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	32ae      	adds	r2, #174	@ 0xae
 8008454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	7afa      	ldrb	r2, [r7, #11]
 800845c:	4611      	mov	r1, r2
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	4798      	blx	r3
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
 800846e:	e000      	b.n	8008472 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008470:	2300      	movs	r3, #0
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800847a:	b580      	push	{r7, lr}
 800847c:	b086      	sub	sp, #24
 800847e:	af00      	add	r7, sp, #0
 8008480:	60f8      	str	r0, [r7, #12]
 8008482:	460b      	mov	r3, r1
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008488:	7afb      	ldrb	r3, [r7, #11]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d16f      	bne.n	800856e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	3314      	adds	r3, #20
 8008492:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800849a:	2b02      	cmp	r3, #2
 800849c:	d15a      	bne.n	8008554 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	689a      	ldr	r2, [r3, #8]
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d914      	bls.n	80084d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	68db      	ldr	r3, [r3, #12]
 80084b2:	1ad2      	subs	r2, r2, r3
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	689b      	ldr	r3, [r3, #8]
 80084bc:	461a      	mov	r2, r3
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	68f8      	ldr	r0, [r7, #12]
 80084c2:	f001 f8bc 	bl	800963e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084c6:	2300      	movs	r3, #0
 80084c8:	2200      	movs	r2, #0
 80084ca:	2100      	movs	r1, #0
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f005 f995 	bl	800d7fc <USBD_LL_PrepareReceive>
 80084d2:	e03f      	b.n	8008554 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	68da      	ldr	r2, [r3, #12]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	429a      	cmp	r2, r3
 80084de:	d11c      	bne.n	800851a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d316      	bcc.n	800851a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d20f      	bcs.n	800851a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80084fa:	2200      	movs	r2, #0
 80084fc:	2100      	movs	r1, #0
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f001 f89d 	bl	800963e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2200      	movs	r2, #0
 8008508:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800850c:	2300      	movs	r3, #0
 800850e:	2200      	movs	r2, #0
 8008510:	2100      	movs	r1, #0
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f005 f972 	bl	800d7fc <USBD_LL_PrepareReceive>
 8008518:	e01c      	b.n	8008554 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b03      	cmp	r3, #3
 8008524:	d10f      	bne.n	8008546 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008546:	2180      	movs	r1, #128	@ 0x80
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f005 f8ad 	bl	800d6a8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f001 f8c7 	bl	80096e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800855a:	2b00      	cmp	r3, #0
 800855c:	d03a      	beq.n	80085d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f7ff fe42 	bl	80081e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800856c:	e032      	b.n	80085d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800856e:	7afb      	ldrb	r3, [r7, #11]
 8008570:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008574:	b2db      	uxtb	r3, r3
 8008576:	4619      	mov	r1, r3
 8008578:	68f8      	ldr	r0, [r7, #12]
 800857a:	f000 f985 	bl	8008888 <USBD_CoreFindEP>
 800857e:	4603      	mov	r3, r0
 8008580:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008582:	7dfb      	ldrb	r3, [r7, #23]
 8008584:	2bff      	cmp	r3, #255	@ 0xff
 8008586:	d025      	beq.n	80085d4 <USBD_LL_DataInStage+0x15a>
 8008588:	7dfb      	ldrb	r3, [r7, #23]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d122      	bne.n	80085d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008594:	b2db      	uxtb	r3, r3
 8008596:	2b03      	cmp	r3, #3
 8008598:	d11c      	bne.n	80085d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800859a:	7dfa      	ldrb	r2, [r7, #23]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	32ae      	adds	r2, #174	@ 0xae
 80085a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085a4:	695b      	ldr	r3, [r3, #20]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d014      	beq.n	80085d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80085aa:	7dfa      	ldrb	r2, [r7, #23]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085b2:	7dfa      	ldrb	r2, [r7, #23]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	32ae      	adds	r2, #174	@ 0xae
 80085b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	7afa      	ldrb	r2, [r7, #11]
 80085c0:	4611      	mov	r1, r2
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085ca:	7dbb      	ldrb	r3, [r7, #22]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085d0:	7dbb      	ldrb	r3, [r7, #22]
 80085d2:	e000      	b.n	80085d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2200      	movs	r2, #0
 80085fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008616:	2b00      	cmp	r3, #0
 8008618:	d014      	beq.n	8008644 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00e      	beq.n	8008644 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6852      	ldr	r2, [r2, #4]
 8008632:	b2d2      	uxtb	r2, r2
 8008634:	4611      	mov	r1, r2
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008640:	2303      	movs	r3, #3
 8008642:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008644:	2340      	movs	r3, #64	@ 0x40
 8008646:	2200      	movs	r2, #0
 8008648:	2100      	movs	r1, #0
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f004 ffe7 	bl	800d61e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2240      	movs	r2, #64	@ 0x40
 800865c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008660:	2340      	movs	r3, #64	@ 0x40
 8008662:	2200      	movs	r2, #0
 8008664:	2180      	movs	r1, #128	@ 0x80
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f004 ffd9 	bl	800d61e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2240      	movs	r2, #64	@ 0x40
 8008676:	621a      	str	r2, [r3, #32]

  return ret;
 8008678:	7bfb      	ldrb	r3, [r7, #15]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	460b      	mov	r3, r1
 800868c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	78fa      	ldrb	r2, [r7, #3]
 8008692:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr

080086a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b04      	cmp	r3, #4
 80086b4:	d006      	beq.n	80086c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2204      	movs	r2, #4
 80086c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d106      	bne.n	80086fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80086fc:	2300      	movs	r3, #0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	370c      	adds	r7, #12
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b082      	sub	sp, #8
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008718:	b2db      	uxtb	r3, r3
 800871a:	2b03      	cmp	r3, #3
 800871c:	d110      	bne.n	8008740 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008724:	2b00      	cmp	r3, #0
 8008726:	d00b      	beq.n	8008740 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800872e:	69db      	ldr	r3, [r3, #28]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}

0800874a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800874a:	b580      	push	{r7, lr}
 800874c:	b082      	sub	sp, #8
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
 8008752:	460b      	mov	r3, r1
 8008754:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	32ae      	adds	r2, #174	@ 0xae
 8008760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d101      	bne.n	800876c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008768:	2303      	movs	r3, #3
 800876a:	e01c      	b.n	80087a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008772:	b2db      	uxtb	r3, r3
 8008774:	2b03      	cmp	r3, #3
 8008776:	d115      	bne.n	80087a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	32ae      	adds	r2, #174	@ 0xae
 8008782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	32ae      	adds	r2, #174	@ 0xae
 8008796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879a:	6a1b      	ldr	r3, [r3, #32]
 800879c:	78fa      	ldrb	r2, [r7, #3]
 800879e:	4611      	mov	r1, r2
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3708      	adds	r7, #8
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}

080087ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b082      	sub	sp, #8
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
 80087b6:	460b      	mov	r3, r1
 80087b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	32ae      	adds	r2, #174	@ 0xae
 80087c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d101      	bne.n	80087d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087cc:	2303      	movs	r3, #3
 80087ce:	e01c      	b.n	800880a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d115      	bne.n	8008808 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	32ae      	adds	r2, #174	@ 0xae
 80087e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00b      	beq.n	8008808 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	32ae      	adds	r2, #174	@ 0xae
 80087fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008800:	78fa      	ldrb	r2, [r7, #3]
 8008802:	4611      	mov	r1, r2
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008808:	2300      	movs	r3, #0
}
 800880a:	4618      	mov	r0, r3
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}

08008812 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008812:	b480      	push	{r7}
 8008814:	b083      	sub	sp, #12
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	370c      	adds	r7, #12
 8008820:	46bd      	mov	sp, r7
 8008822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008826:	4770      	bx	lr

08008828 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008830:	2300      	movs	r3, #0
 8008832:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00e      	beq.n	8008864 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6852      	ldr	r2, [r2, #4]
 8008852:	b2d2      	uxtb	r2, r2
 8008854:	4611      	mov	r1, r2
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	4798      	blx	r3
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	d001      	beq.n	8008864 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008860:	2303      	movs	r3, #3
 8008862:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	460b      	mov	r3, r1
 8008878:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800887a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800887c:	4618      	mov	r0, r3
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008888:	b480      	push	{r7}
 800888a:	b083      	sub	sp, #12
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	460b      	mov	r3, r1
 8008892:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008894:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008896:	4618      	mov	r0, r3
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b086      	sub	sp, #24
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	460b      	mov	r3, r1
 80088ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088b6:	2300      	movs	r3, #0
 80088b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	885b      	ldrh	r3, [r3, #2]
 80088be:	b29b      	uxth	r3, r3
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d91f      	bls.n	8008908 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088ce:	e013      	b.n	80088f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088d0:	f107 030a 	add.w	r3, r7, #10
 80088d4:	4619      	mov	r1, r3
 80088d6:	6978      	ldr	r0, [r7, #20]
 80088d8:	f000 f81b 	bl	8008912 <USBD_GetNextDesc>
 80088dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	785b      	ldrb	r3, [r3, #1]
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	d108      	bne.n	80088f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	789b      	ldrb	r3, [r3, #2]
 80088ee:	78fa      	ldrb	r2, [r7, #3]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d008      	beq.n	8008906 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	885b      	ldrh	r3, [r3, #2]
 80088fc:	b29a      	uxth	r2, r3
 80088fe:	897b      	ldrh	r3, [r7, #10]
 8008900:	429a      	cmp	r2, r3
 8008902:	d8e5      	bhi.n	80088d0 <USBD_GetEpDesc+0x2e>
 8008904:	e000      	b.n	8008908 <USBD_GetEpDesc+0x66>
          break;
 8008906:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008908:	693b      	ldr	r3, [r7, #16]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3718      	adds	r7, #24
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}

08008912 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008912:	b480      	push	{r7}
 8008914:	b085      	sub	sp, #20
 8008916:	af00      	add	r7, sp, #0
 8008918:	6078      	str	r0, [r7, #4]
 800891a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	881b      	ldrh	r3, [r3, #0]
 8008924:	68fa      	ldr	r2, [r7, #12]
 8008926:	7812      	ldrb	r2, [r2, #0]
 8008928:	4413      	add	r3, r2
 800892a:	b29a      	uxth	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	461a      	mov	r2, r3
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4413      	add	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800893c:	68fb      	ldr	r3, [r7, #12]
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800894a:	b480      	push	{r7}
 800894c:	b087      	sub	sp, #28
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	3301      	adds	r3, #1
 8008960:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008968:	8a3b      	ldrh	r3, [r7, #16]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	b21a      	sxth	r2, r3
 800896e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008972:	4313      	orrs	r3, r2
 8008974:	b21b      	sxth	r3, r3
 8008976:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008978:	89fb      	ldrh	r3, [r7, #14]
}
 800897a:	4618      	mov	r0, r3
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
	...

08008988 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	781b      	ldrb	r3, [r3, #0]
 800899a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800899e:	2b40      	cmp	r3, #64	@ 0x40
 80089a0:	d005      	beq.n	80089ae <USBD_StdDevReq+0x26>
 80089a2:	2b40      	cmp	r3, #64	@ 0x40
 80089a4:	d857      	bhi.n	8008a56 <USBD_StdDevReq+0xce>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00f      	beq.n	80089ca <USBD_StdDevReq+0x42>
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d153      	bne.n	8008a56 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	32ae      	adds	r2, #174	@ 0xae
 80089b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	6839      	ldr	r1, [r7, #0]
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	4798      	blx	r3
 80089c4:	4603      	mov	r3, r0
 80089c6:	73fb      	strb	r3, [r7, #15]
      break;
 80089c8:	e04a      	b.n	8008a60 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	785b      	ldrb	r3, [r3, #1]
 80089ce:	2b09      	cmp	r3, #9
 80089d0:	d83b      	bhi.n	8008a4a <USBD_StdDevReq+0xc2>
 80089d2:	a201      	add	r2, pc, #4	@ (adr r2, 80089d8 <USBD_StdDevReq+0x50>)
 80089d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089d8:	08008a2d 	.word	0x08008a2d
 80089dc:	08008a41 	.word	0x08008a41
 80089e0:	08008a4b 	.word	0x08008a4b
 80089e4:	08008a37 	.word	0x08008a37
 80089e8:	08008a4b 	.word	0x08008a4b
 80089ec:	08008a0b 	.word	0x08008a0b
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a4b 	.word	0x08008a4b
 80089f8:	08008a23 	.word	0x08008a23
 80089fc:	08008a15 	.word	0x08008a15
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a00:	6839      	ldr	r1, [r7, #0]
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fa3c 	bl	8008e80 <USBD_GetDescriptor>
          break;
 8008a08:	e024      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fba1 	bl	8009154 <USBD_SetAddress>
          break;
 8008a12:	e01f      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a14:	6839      	ldr	r1, [r7, #0]
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f000 fbe0 	bl	80091dc <USBD_SetConfig>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
          break;
 8008a20:	e018      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc83 	bl	8009330 <USBD_GetConfig>
          break;
 8008a2a:	e013      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a2c:	6839      	ldr	r1, [r7, #0]
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fcb4 	bl	800939c <USBD_GetStatus>
          break;
 8008a34:	e00e      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a36:	6839      	ldr	r1, [r7, #0]
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 fce3 	bl	8009404 <USBD_SetFeature>
          break;
 8008a3e:	e009      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fd07 	bl	8009456 <USBD_ClrFeature>
          break;
 8008a48:	e004      	b.n	8008a54 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a4a:	6839      	ldr	r1, [r7, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f000 fd5e 	bl	800950e <USBD_CtlError>
          break;
 8008a52:	bf00      	nop
      }
      break;
 8008a54:	e004      	b.n	8008a60 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fd58 	bl	800950e <USBD_CtlError>
      break;
 8008a5e:	bf00      	nop
  }

  return ret;
 8008a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3710      	adds	r7, #16
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop

08008a6c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a76:	2300      	movs	r3, #0
 8008a78:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a82:	2b40      	cmp	r3, #64	@ 0x40
 8008a84:	d005      	beq.n	8008a92 <USBD_StdItfReq+0x26>
 8008a86:	2b40      	cmp	r3, #64	@ 0x40
 8008a88:	d852      	bhi.n	8008b30 <USBD_StdItfReq+0xc4>
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d001      	beq.n	8008a92 <USBD_StdItfReq+0x26>
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d14e      	bne.n	8008b30 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a98:	b2db      	uxtb	r3, r3
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b02      	cmp	r3, #2
 8008a9e:	d840      	bhi.n	8008b22 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	889b      	ldrh	r3, [r3, #4]
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d836      	bhi.n	8008b18 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	889b      	ldrh	r3, [r3, #4]
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fedb 	bl	800886e <USBD_CoreFindIF>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2bff      	cmp	r3, #255	@ 0xff
 8008ac0:	d01d      	beq.n	8008afe <USBD_StdItfReq+0x92>
 8008ac2:	7bbb      	ldrb	r3, [r7, #14]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11a      	bne.n	8008afe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ac8:	7bba      	ldrb	r2, [r7, #14]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	32ae      	adds	r2, #174	@ 0xae
 8008ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d00f      	beq.n	8008af8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008ad8:	7bba      	ldrb	r2, [r7, #14]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ae0:	7bba      	ldrb	r2, [r7, #14]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	32ae      	adds	r2, #174	@ 0xae
 8008ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	4798      	blx	r3
 8008af2:	4603      	mov	r3, r0
 8008af4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008af6:	e004      	b.n	8008b02 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008af8:	2303      	movs	r3, #3
 8008afa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008afc:	e001      	b.n	8008b02 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008afe:	2303      	movs	r3, #3
 8008b00:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	88db      	ldrh	r3, [r3, #6]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d110      	bne.n	8008b2c <USBD_StdItfReq+0xc0>
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10d      	bne.n	8008b2c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fdd3 	bl	80096bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b16:	e009      	b.n	8008b2c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fcf7 	bl	800950e <USBD_CtlError>
          break;
 8008b20:	e004      	b.n	8008b2c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fcf2 	bl	800950e <USBD_CtlError>
          break;
 8008b2a:	e000      	b.n	8008b2e <USBD_StdItfReq+0xc2>
          break;
 8008b2c:	bf00      	nop
      }
      break;
 8008b2e:	e004      	b.n	8008b3a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fceb 	bl	800950e <USBD_CtlError>
      break;
 8008b38:	bf00      	nop
  }

  return ret;
 8008b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b4e:	2300      	movs	r3, #0
 8008b50:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	889b      	ldrh	r3, [r3, #4]
 8008b56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b60:	2b40      	cmp	r3, #64	@ 0x40
 8008b62:	d007      	beq.n	8008b74 <USBD_StdEPReq+0x30>
 8008b64:	2b40      	cmp	r3, #64	@ 0x40
 8008b66:	f200 817f 	bhi.w	8008e68 <USBD_StdEPReq+0x324>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d02a      	beq.n	8008bc4 <USBD_StdEPReq+0x80>
 8008b6e:	2b20      	cmp	r3, #32
 8008b70:	f040 817a 	bne.w	8008e68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	4619      	mov	r1, r3
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f7ff fe85 	bl	8008888 <USBD_CoreFindEP>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b82:	7b7b      	ldrb	r3, [r7, #13]
 8008b84:	2bff      	cmp	r3, #255	@ 0xff
 8008b86:	f000 8174 	beq.w	8008e72 <USBD_StdEPReq+0x32e>
 8008b8a:	7b7b      	ldrb	r3, [r7, #13]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f040 8170 	bne.w	8008e72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008b92:	7b7a      	ldrb	r2, [r7, #13]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008b9a:	7b7a      	ldrb	r2, [r7, #13]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	32ae      	adds	r2, #174	@ 0xae
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 8163 	beq.w	8008e72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008bac:	7b7a      	ldrb	r2, [r7, #13]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	32ae      	adds	r2, #174	@ 0xae
 8008bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	4798      	blx	r3
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008bc2:	e156      	b.n	8008e72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	785b      	ldrb	r3, [r3, #1]
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d008      	beq.n	8008bde <USBD_StdEPReq+0x9a>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	f300 8145 	bgt.w	8008e5c <USBD_StdEPReq+0x318>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 809b 	beq.w	8008d0e <USBD_StdEPReq+0x1ca>
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d03c      	beq.n	8008c56 <USBD_StdEPReq+0x112>
 8008bdc:	e13e      	b.n	8008e5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d002      	beq.n	8008bf0 <USBD_StdEPReq+0xac>
 8008bea:	2b03      	cmp	r3, #3
 8008bec:	d016      	beq.n	8008c1c <USBD_StdEPReq+0xd8>
 8008bee:	e02c      	b.n	8008c4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bf0:	7bbb      	ldrb	r3, [r7, #14]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <USBD_StdEPReq+0xce>
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b80      	cmp	r3, #128	@ 0x80
 8008bfa:	d00a      	beq.n	8008c12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	4619      	mov	r1, r3
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f004 fd51 	bl	800d6a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c06:	2180      	movs	r1, #128	@ 0x80
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f004 fd4d 	bl	800d6a8 <USBD_LL_StallEP>
 8008c0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c10:	e020      	b.n	8008c54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fc7a 	bl	800950e <USBD_CtlError>
              break;
 8008c1a:	e01b      	b.n	8008c54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	885b      	ldrh	r3, [r3, #2]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10e      	bne.n	8008c42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c24:	7bbb      	ldrb	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00b      	beq.n	8008c42 <USBD_StdEPReq+0xfe>
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	2b80      	cmp	r3, #128	@ 0x80
 8008c2e:	d008      	beq.n	8008c42 <USBD_StdEPReq+0xfe>
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	88db      	ldrh	r3, [r3, #6]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d104      	bne.n	8008c42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c38:	7bbb      	ldrb	r3, [r7, #14]
 8008c3a:	4619      	mov	r1, r3
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f004 fd33 	bl	800d6a8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fd3a 	bl	80096bc <USBD_CtlSendStatus>

              break;
 8008c48:	e004      	b.n	8008c54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fc5e 	bl	800950e <USBD_CtlError>
              break;
 8008c52:	bf00      	nop
          }
          break;
 8008c54:	e107      	b.n	8008e66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d002      	beq.n	8008c68 <USBD_StdEPReq+0x124>
 8008c62:	2b03      	cmp	r3, #3
 8008c64:	d016      	beq.n	8008c94 <USBD_StdEPReq+0x150>
 8008c66:	e04b      	b.n	8008d00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00d      	beq.n	8008c8a <USBD_StdEPReq+0x146>
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b80      	cmp	r3, #128	@ 0x80
 8008c72:	d00a      	beq.n	8008c8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c74:	7bbb      	ldrb	r3, [r7, #14]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 fd15 	bl	800d6a8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c7e:	2180      	movs	r1, #128	@ 0x80
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f004 fd11 	bl	800d6a8 <USBD_LL_StallEP>
 8008c86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c88:	e040      	b.n	8008d0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fc3e 	bl	800950e <USBD_CtlError>
              break;
 8008c92:	e03b      	b.n	8008d0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	885b      	ldrh	r3, [r3, #2]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d136      	bne.n	8008d0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d004      	beq.n	8008cb0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008ca6:	7bbb      	ldrb	r3, [r7, #14]
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f004 fd1b 	bl	800d6e6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fd03 	bl	80096bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cb6:	7bbb      	ldrb	r3, [r7, #14]
 8008cb8:	4619      	mov	r1, r3
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f7ff fde4 	bl	8008888 <USBD_CoreFindEP>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cc4:	7b7b      	ldrb	r3, [r7, #13]
 8008cc6:	2bff      	cmp	r3, #255	@ 0xff
 8008cc8:	d01f      	beq.n	8008d0a <USBD_StdEPReq+0x1c6>
 8008cca:	7b7b      	ldrb	r3, [r7, #13]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d11c      	bne.n	8008d0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008cd0:	7b7a      	ldrb	r2, [r7, #13]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cd8:	7b7a      	ldrb	r2, [r7, #13]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	32ae      	adds	r2, #174	@ 0xae
 8008cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d010      	beq.n	8008d0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ce8:	7b7a      	ldrb	r2, [r7, #13]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	32ae      	adds	r2, #174	@ 0xae
 8008cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	6839      	ldr	r1, [r7, #0]
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	4798      	blx	r3
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008cfe:	e004      	b.n	8008d0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d00:	6839      	ldr	r1, [r7, #0]
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fc03 	bl	800950e <USBD_CtlError>
              break;
 8008d08:	e000      	b.n	8008d0c <USBD_StdEPReq+0x1c8>
              break;
 8008d0a:	bf00      	nop
          }
          break;
 8008d0c:	e0ab      	b.n	8008e66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d002      	beq.n	8008d20 <USBD_StdEPReq+0x1dc>
 8008d1a:	2b03      	cmp	r3, #3
 8008d1c:	d032      	beq.n	8008d84 <USBD_StdEPReq+0x240>
 8008d1e:	e097      	b.n	8008e50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d20:	7bbb      	ldrb	r3, [r7, #14]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d007      	beq.n	8008d36 <USBD_StdEPReq+0x1f2>
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b80      	cmp	r3, #128	@ 0x80
 8008d2a:	d004      	beq.n	8008d36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 fbed 	bl	800950e <USBD_CtlError>
                break;
 8008d34:	e091      	b.n	8008e5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	da0b      	bge.n	8008d56 <USBD_StdEPReq+0x212>
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	3310      	adds	r3, #16
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	4413      	add	r3, r2
 8008d52:	3304      	adds	r3, #4
 8008d54:	e00b      	b.n	8008d6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d5c:	4613      	mov	r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	4413      	add	r3, r2
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	4413      	add	r3, r2
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	2200      	movs	r2, #0
 8008d74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2202      	movs	r2, #2
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc43 	bl	8009608 <USBD_CtlSendData>
              break;
 8008d82:	e06a      	b.n	8008e5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	da11      	bge.n	8008db0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d8c:	7bbb      	ldrb	r3, [r7, #14]
 8008d8e:	f003 020f 	and.w	r2, r3, #15
 8008d92:	6879      	ldr	r1, [r7, #4]
 8008d94:	4613      	mov	r3, r2
 8008d96:	009b      	lsls	r3, r3, #2
 8008d98:	4413      	add	r3, r2
 8008d9a:	009b      	lsls	r3, r3, #2
 8008d9c:	440b      	add	r3, r1
 8008d9e:	3324      	adds	r3, #36	@ 0x24
 8008da0:	881b      	ldrh	r3, [r3, #0]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d117      	bne.n	8008dd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fbb0 	bl	800950e <USBD_CtlError>
                  break;
 8008dae:	e054      	b.n	8008e5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008db0:	7bbb      	ldrb	r3, [r7, #14]
 8008db2:	f003 020f 	and.w	r2, r3, #15
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	4613      	mov	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	4413      	add	r3, r2
 8008dbe:	009b      	lsls	r3, r3, #2
 8008dc0:	440b      	add	r3, r1
 8008dc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008dc6:	881b      	ldrh	r3, [r3, #0]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d104      	bne.n	8008dd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dcc:	6839      	ldr	r1, [r7, #0]
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 fb9d 	bl	800950e <USBD_CtlError>
                  break;
 8008dd4:	e041      	b.n	8008e5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	da0b      	bge.n	8008df6 <USBD_StdEPReq+0x2b2>
 8008dde:	7bbb      	ldrb	r3, [r7, #14]
 8008de0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008de4:	4613      	mov	r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	009b      	lsls	r3, r3, #2
 8008dec:	3310      	adds	r3, #16
 8008dee:	687a      	ldr	r2, [r7, #4]
 8008df0:	4413      	add	r3, r2
 8008df2:	3304      	adds	r3, #4
 8008df4:	e00b      	b.n	8008e0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e08:	687a      	ldr	r2, [r7, #4]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d002      	beq.n	8008e1c <USBD_StdEPReq+0x2d8>
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	2b80      	cmp	r3, #128	@ 0x80
 8008e1a:	d103      	bne.n	8008e24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e00e      	b.n	8008e42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f004 fc7b 	bl	800d724 <USBD_LL_IsStallEP>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d003      	beq.n	8008e3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	2201      	movs	r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e42:	68bb      	ldr	r3, [r7, #8]
 8008e44:	2202      	movs	r2, #2
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fbdd 	bl	8009608 <USBD_CtlSendData>
              break;
 8008e4e:	e004      	b.n	8008e5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e50:	6839      	ldr	r1, [r7, #0]
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fb5b 	bl	800950e <USBD_CtlError>
              break;
 8008e58:	bf00      	nop
          }
          break;
 8008e5a:	e004      	b.n	8008e66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fb55 	bl	800950e <USBD_CtlError>
          break;
 8008e64:	bf00      	nop
      }
      break;
 8008e66:	e005      	b.n	8008e74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e68:	6839      	ldr	r1, [r7, #0]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fb4f 	bl	800950e <USBD_CtlError>
      break;
 8008e70:	e000      	b.n	8008e74 <USBD_StdEPReq+0x330>
      break;
 8008e72:	bf00      	nop
  }

  return ret;
 8008e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3710      	adds	r7, #16
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
	...

08008e80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	885b      	ldrh	r3, [r3, #2]
 8008e9a:	0a1b      	lsrs	r3, r3, #8
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	2b06      	cmp	r3, #6
 8008ea2:	f200 8128 	bhi.w	80090f6 <USBD_GetDescriptor+0x276>
 8008ea6:	a201      	add	r2, pc, #4	@ (adr r2, 8008eac <USBD_GetDescriptor+0x2c>)
 8008ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eac:	08008ec9 	.word	0x08008ec9
 8008eb0:	08008ee1 	.word	0x08008ee1
 8008eb4:	08008f21 	.word	0x08008f21
 8008eb8:	080090f7 	.word	0x080090f7
 8008ebc:	080090f7 	.word	0x080090f7
 8008ec0:	08009097 	.word	0x08009097
 8008ec4:	080090c3 	.word	0x080090c3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	687a      	ldr	r2, [r7, #4]
 8008ed2:	7c12      	ldrb	r2, [r2, #16]
 8008ed4:	f107 0108 	add.w	r1, r7, #8
 8008ed8:	4610      	mov	r0, r2
 8008eda:	4798      	blx	r3
 8008edc:	60f8      	str	r0, [r7, #12]
      break;
 8008ede:	e112      	b.n	8009106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	7c1b      	ldrb	r3, [r3, #16]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d10d      	bne.n	8008f04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef0:	f107 0208 	add.w	r2, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	3301      	adds	r3, #1
 8008efe:	2202      	movs	r2, #2
 8008f00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f02:	e100      	b.n	8009106 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f0c:	f107 0208 	add.w	r2, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	701a      	strb	r2, [r3, #0]
      break;
 8008f1e:	e0f2      	b.n	8009106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	885b      	ldrh	r3, [r3, #2]
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b05      	cmp	r3, #5
 8008f28:	f200 80ac 	bhi.w	8009084 <USBD_GetDescriptor+0x204>
 8008f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f34 <USBD_GetDescriptor+0xb4>)
 8008f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f32:	bf00      	nop
 8008f34:	08008f4d 	.word	0x08008f4d
 8008f38:	08008f81 	.word	0x08008f81
 8008f3c:	08008fb5 	.word	0x08008fb5
 8008f40:	08008fe9 	.word	0x08008fe9
 8008f44:	0800901d 	.word	0x0800901d
 8008f48:	08009051 	.word	0x08009051
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00b      	beq.n	8008f70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	7c12      	ldrb	r2, [r2, #16]
 8008f64:	f107 0108 	add.w	r1, r7, #8
 8008f68:	4610      	mov	r0, r2
 8008f6a:	4798      	blx	r3
 8008f6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f6e:	e091      	b.n	8009094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f70:	6839      	ldr	r1, [r7, #0]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f000 facb 	bl	800950e <USBD_CtlError>
            err++;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f7e:	e089      	b.n	8009094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00b      	beq.n	8008fa4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	7c12      	ldrb	r2, [r2, #16]
 8008f98:	f107 0108 	add.w	r1, r7, #8
 8008f9c:	4610      	mov	r0, r2
 8008f9e:	4798      	blx	r3
 8008fa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fa2:	e077      	b.n	8009094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fa4:	6839      	ldr	r1, [r7, #0]
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f000 fab1 	bl	800950e <USBD_CtlError>
            err++;
 8008fac:	7afb      	ldrb	r3, [r7, #11]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fb2:	e06f      	b.n	8009094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fba:	68db      	ldr	r3, [r3, #12]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	7c12      	ldrb	r2, [r2, #16]
 8008fcc:	f107 0108 	add.w	r1, r7, #8
 8008fd0:	4610      	mov	r0, r2
 8008fd2:	4798      	blx	r3
 8008fd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fd6:	e05d      	b.n	8009094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fa97 	bl	800950e <USBD_CtlError>
            err++;
 8008fe0:	7afb      	ldrb	r3, [r7, #11]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	72fb      	strb	r3, [r7, #11]
          break;
 8008fe6:	e055      	b.n	8009094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d00b      	beq.n	800900c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	687a      	ldr	r2, [r7, #4]
 8008ffe:	7c12      	ldrb	r2, [r2, #16]
 8009000:	f107 0108 	add.w	r1, r7, #8
 8009004:	4610      	mov	r0, r2
 8009006:	4798      	blx	r3
 8009008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900a:	e043      	b.n	8009094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fa7d 	bl	800950e <USBD_CtlError>
            err++;
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	3301      	adds	r3, #1
 8009018:	72fb      	strb	r3, [r7, #11]
          break;
 800901a:	e03b      	b.n	8009094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00b      	beq.n	8009040 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	7c12      	ldrb	r2, [r2, #16]
 8009034:	f107 0108 	add.w	r1, r7, #8
 8009038:	4610      	mov	r0, r2
 800903a:	4798      	blx	r3
 800903c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800903e:	e029      	b.n	8009094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009040:	6839      	ldr	r1, [r7, #0]
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fa63 	bl	800950e <USBD_CtlError>
            err++;
 8009048:	7afb      	ldrb	r3, [r7, #11]
 800904a:	3301      	adds	r3, #1
 800904c:	72fb      	strb	r3, [r7, #11]
          break;
 800904e:	e021      	b.n	8009094 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009062:	699b      	ldr	r3, [r3, #24]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	7c12      	ldrb	r2, [r2, #16]
 8009068:	f107 0108 	add.w	r1, r7, #8
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
 8009070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009072:	e00f      	b.n	8009094 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009074:	6839      	ldr	r1, [r7, #0]
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 fa49 	bl	800950e <USBD_CtlError>
            err++;
 800907c:	7afb      	ldrb	r3, [r7, #11]
 800907e:	3301      	adds	r3, #1
 8009080:	72fb      	strb	r3, [r7, #11]
          break;
 8009082:	e007      	b.n	8009094 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	f000 fa41 	bl	800950e <USBD_CtlError>
          err++;
 800908c:	7afb      	ldrb	r3, [r7, #11]
 800908e:	3301      	adds	r3, #1
 8009090:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009092:	bf00      	nop
      }
      break;
 8009094:	e037      	b.n	8009106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	7c1b      	ldrb	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d109      	bne.n	80090b2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090a6:	f107 0208 	add.w	r2, r7, #8
 80090aa:	4610      	mov	r0, r2
 80090ac:	4798      	blx	r3
 80090ae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b0:	e029      	b.n	8009106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090b2:	6839      	ldr	r1, [r7, #0]
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 fa2a 	bl	800950e <USBD_CtlError>
        err++;
 80090ba:	7afb      	ldrb	r3, [r7, #11]
 80090bc:	3301      	adds	r3, #1
 80090be:	72fb      	strb	r3, [r7, #11]
      break;
 80090c0:	e021      	b.n	8009106 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	7c1b      	ldrb	r3, [r3, #16]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10d      	bne.n	80090e6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090d2:	f107 0208 	add.w	r2, r7, #8
 80090d6:	4610      	mov	r0, r2
 80090d8:	4798      	blx	r3
 80090da:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	3301      	adds	r3, #1
 80090e0:	2207      	movs	r2, #7
 80090e2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090e4:	e00f      	b.n	8009106 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090e6:	6839      	ldr	r1, [r7, #0]
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f000 fa10 	bl	800950e <USBD_CtlError>
        err++;
 80090ee:	7afb      	ldrb	r3, [r7, #11]
 80090f0:	3301      	adds	r3, #1
 80090f2:	72fb      	strb	r3, [r7, #11]
      break;
 80090f4:	e007      	b.n	8009106 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fa08 	bl	800950e <USBD_CtlError>
      err++;
 80090fe:	7afb      	ldrb	r3, [r7, #11]
 8009100:	3301      	adds	r3, #1
 8009102:	72fb      	strb	r3, [r7, #11]
      break;
 8009104:	bf00      	nop
  }

  if (err != 0U)
 8009106:	7afb      	ldrb	r3, [r7, #11]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d11e      	bne.n	800914a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	88db      	ldrh	r3, [r3, #6]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d016      	beq.n	8009142 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009114:	893b      	ldrh	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00e      	beq.n	8009138 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	88da      	ldrh	r2, [r3, #6]
 800911e:	893b      	ldrh	r3, [r7, #8]
 8009120:	4293      	cmp	r3, r2
 8009122:	bf28      	it	cs
 8009124:	4613      	movcs	r3, r2
 8009126:	b29b      	uxth	r3, r3
 8009128:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800912a:	893b      	ldrh	r3, [r7, #8]
 800912c:	461a      	mov	r2, r3
 800912e:	68f9      	ldr	r1, [r7, #12]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 fa69 	bl	8009608 <USBD_CtlSendData>
 8009136:	e009      	b.n	800914c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f9e7 	bl	800950e <USBD_CtlError>
 8009140:	e004      	b.n	800914c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 faba 	bl	80096bc <USBD_CtlSendStatus>
 8009148:	e000      	b.n	800914c <USBD_GetDescriptor+0x2cc>
    return;
 800914a:	bf00      	nop
  }
}
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop

08009154 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b084      	sub	sp, #16
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
 800915c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	889b      	ldrh	r3, [r3, #4]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d131      	bne.n	80091ca <USBD_SetAddress+0x76>
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	88db      	ldrh	r3, [r3, #6]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d12d      	bne.n	80091ca <USBD_SetAddress+0x76>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	885b      	ldrh	r3, [r3, #2]
 8009172:	2b7f      	cmp	r3, #127	@ 0x7f
 8009174:	d829      	bhi.n	80091ca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	885b      	ldrh	r3, [r3, #2]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009180:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b03      	cmp	r3, #3
 800918c:	d104      	bne.n	8009198 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 f9bc 	bl	800950e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	e01d      	b.n	80091d4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	7bfa      	ldrb	r2, [r7, #15]
 800919c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091a0:	7bfb      	ldrb	r3, [r7, #15]
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f004 fae9 	bl	800d77c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa86 	bl	80096bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091b0:	7bfb      	ldrb	r3, [r7, #15]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d004      	beq.n	80091c0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2202      	movs	r2, #2
 80091ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091be:	e009      	b.n	80091d4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c8:	e004      	b.n	80091d4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091ca:	6839      	ldr	r1, [r7, #0]
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f99e 	bl	800950e <USBD_CtlError>
  }
}
 80091d2:	bf00      	nop
 80091d4:	bf00      	nop
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091e6:	2300      	movs	r3, #0
 80091e8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	4b4e      	ldr	r3, [pc, #312]	@ (800932c <USBD_SetConfig+0x150>)
 80091f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091f4:	4b4d      	ldr	r3, [pc, #308]	@ (800932c <USBD_SetConfig+0x150>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d905      	bls.n	8009208 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f985 	bl	800950e <USBD_CtlError>
    return USBD_FAIL;
 8009204:	2303      	movs	r3, #3
 8009206:	e08c      	b.n	8009322 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b02      	cmp	r3, #2
 8009212:	d002      	beq.n	800921a <USBD_SetConfig+0x3e>
 8009214:	2b03      	cmp	r3, #3
 8009216:	d029      	beq.n	800926c <USBD_SetConfig+0x90>
 8009218:	e075      	b.n	8009306 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800921a:	4b44      	ldr	r3, [pc, #272]	@ (800932c <USBD_SetConfig+0x150>)
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d020      	beq.n	8009264 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009222:	4b42      	ldr	r3, [pc, #264]	@ (800932c <USBD_SetConfig+0x150>)
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	461a      	mov	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800922c:	4b3f      	ldr	r3, [pc, #252]	@ (800932c <USBD_SetConfig+0x150>)
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	4619      	mov	r1, r3
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f7fe ffe3 	bl	80081fe <USBD_SetClassConfig>
 8009238:	4603      	mov	r3, r0
 800923a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d008      	beq.n	8009254 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f962 	bl	800950e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2202      	movs	r2, #2
 800924e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009252:	e065      	b.n	8009320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fa31 	bl	80096bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2203      	movs	r2, #3
 800925e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009262:	e05d      	b.n	8009320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 fa29 	bl	80096bc <USBD_CtlSendStatus>
      break;
 800926a:	e059      	b.n	8009320 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800926c:	4b2f      	ldr	r3, [pc, #188]	@ (800932c <USBD_SetConfig+0x150>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d112      	bne.n	800929a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2202      	movs	r2, #2
 8009278:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800927c:	4b2b      	ldr	r3, [pc, #172]	@ (800932c <USBD_SetConfig+0x150>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009286:	4b29      	ldr	r3, [pc, #164]	@ (800932c <USBD_SetConfig+0x150>)
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	4619      	mov	r1, r3
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7fe ffd2 	bl	8008236 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f000 fa12 	bl	80096bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009298:	e042      	b.n	8009320 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800929a:	4b24      	ldr	r3, [pc, #144]	@ (800932c <USBD_SetConfig+0x150>)
 800929c:	781b      	ldrb	r3, [r3, #0]
 800929e:	461a      	mov	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	d02a      	beq.n	80092fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	4619      	mov	r1, r3
 80092b0:	6878      	ldr	r0, [r7, #4]
 80092b2:	f7fe ffc0 	bl	8008236 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092b6:	4b1d      	ldr	r3, [pc, #116]	@ (800932c <USBD_SetConfig+0x150>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092c0:	4b1a      	ldr	r3, [pc, #104]	@ (800932c <USBD_SetConfig+0x150>)
 80092c2:	781b      	ldrb	r3, [r3, #0]
 80092c4:	4619      	mov	r1, r3
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f7fe ff99 	bl	80081fe <USBD_SetClassConfig>
 80092cc:	4603      	mov	r3, r0
 80092ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092d0:	7bfb      	ldrb	r3, [r7, #15]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00f      	beq.n	80092f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f918 	bl	800950e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fe ffa5 	bl	8008236 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80092f4:	e014      	b.n	8009320 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f9e0 	bl	80096bc <USBD_CtlSendStatus>
      break;
 80092fc:	e010      	b.n	8009320 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f9dc 	bl	80096bc <USBD_CtlSendStatus>
      break;
 8009304:	e00c      	b.n	8009320 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009306:	6839      	ldr	r1, [r7, #0]
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f000 f900 	bl	800950e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800930e:	4b07      	ldr	r3, [pc, #28]	@ (800932c <USBD_SetConfig+0x150>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7fe ff8e 	bl	8008236 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800931a:	2303      	movs	r3, #3
 800931c:	73fb      	strb	r3, [r7, #15]
      break;
 800931e:	bf00      	nop
  }

  return ret;
 8009320:	7bfb      	ldrb	r3, [r7, #15]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}
 800932a:	bf00      	nop
 800932c:	20000440 	.word	0x20000440

08009330 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	88db      	ldrh	r3, [r3, #6]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d004      	beq.n	800934c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009342:	6839      	ldr	r1, [r7, #0]
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f8e2 	bl	800950e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800934a:	e023      	b.n	8009394 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009352:	b2db      	uxtb	r3, r3
 8009354:	2b02      	cmp	r3, #2
 8009356:	dc02      	bgt.n	800935e <USBD_GetConfig+0x2e>
 8009358:	2b00      	cmp	r3, #0
 800935a:	dc03      	bgt.n	8009364 <USBD_GetConfig+0x34>
 800935c:	e015      	b.n	800938a <USBD_GetConfig+0x5a>
 800935e:	2b03      	cmp	r3, #3
 8009360:	d00b      	beq.n	800937a <USBD_GetConfig+0x4a>
 8009362:	e012      	b.n	800938a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3308      	adds	r3, #8
 800936e:	2201      	movs	r2, #1
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f948 	bl	8009608 <USBD_CtlSendData>
        break;
 8009378:	e00c      	b.n	8009394 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3304      	adds	r3, #4
 800937e:	2201      	movs	r2, #1
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f940 	bl	8009608 <USBD_CtlSendData>
        break;
 8009388:	e004      	b.n	8009394 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8be 	bl	800950e <USBD_CtlError>
        break;
 8009392:	bf00      	nop
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	3b01      	subs	r3, #1
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d81e      	bhi.n	80093f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	88db      	ldrh	r3, [r3, #6]
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d004      	beq.n	80093c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093bc:	6839      	ldr	r1, [r7, #0]
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f000 f8a5 	bl	800950e <USBD_CtlError>
        break;
 80093c4:	e01a      	b.n	80093fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d005      	beq.n	80093e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	f043 0202 	orr.w	r2, r3, #2
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	330c      	adds	r3, #12
 80093e6:	2202      	movs	r2, #2
 80093e8:	4619      	mov	r1, r3
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f000 f90c 	bl	8009608 <USBD_CtlSendData>
      break;
 80093f0:	e004      	b.n	80093fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80093f2:	6839      	ldr	r1, [r7, #0]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 f88a 	bl	800950e <USBD_CtlError>
      break;
 80093fa:	bf00      	nop
  }
}
 80093fc:	bf00      	nop
 80093fe:	3708      	adds	r7, #8
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d107      	bne.n	8009426 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f94c 	bl	80096bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009424:	e013      	b.n	800944e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	885b      	ldrh	r3, [r3, #2]
 800942a:	2b02      	cmp	r3, #2
 800942c:	d10b      	bne.n	8009446 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	889b      	ldrh	r3, [r3, #4]
 8009432:	0a1b      	lsrs	r3, r3, #8
 8009434:	b29b      	uxth	r3, r3
 8009436:	b2da      	uxtb	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f93c 	bl	80096bc <USBD_CtlSendStatus>
}
 8009444:	e003      	b.n	800944e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009446:	6839      	ldr	r1, [r7, #0]
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f860 	bl	800950e <USBD_CtlError>
}
 800944e:	bf00      	nop
 8009450:	3708      	adds	r7, #8
 8009452:	46bd      	mov	sp, r7
 8009454:	bd80      	pop	{r7, pc}

08009456 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b082      	sub	sp, #8
 800945a:	af00      	add	r7, sp, #0
 800945c:	6078      	str	r0, [r7, #4]
 800945e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009466:	b2db      	uxtb	r3, r3
 8009468:	3b01      	subs	r3, #1
 800946a:	2b02      	cmp	r3, #2
 800946c:	d80b      	bhi.n	8009486 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	885b      	ldrh	r3, [r3, #2]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d10c      	bne.n	8009490 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2200      	movs	r2, #0
 800947a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f91c 	bl	80096bc <USBD_CtlSendStatus>
      }
      break;
 8009484:	e004      	b.n	8009490 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 f840 	bl	800950e <USBD_CtlError>
      break;
 800948e:	e000      	b.n	8009492 <USBD_ClrFeature+0x3c>
      break;
 8009490:	bf00      	nop
  }
}
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}

0800949a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800949a:	b580      	push	{r7, lr}
 800949c:	b084      	sub	sp, #16
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
 80094a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	781a      	ldrb	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	3301      	adds	r3, #1
 80094b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	781a      	ldrb	r2, [r3, #0]
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3301      	adds	r3, #1
 80094c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094c4:	68f8      	ldr	r0, [r7, #12]
 80094c6:	f7ff fa40 	bl	800894a <SWAPBYTE>
 80094ca:	4603      	mov	r3, r0
 80094cc:	461a      	mov	r2, r3
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	3301      	adds	r3, #1
 80094d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3301      	adds	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094de:	68f8      	ldr	r0, [r7, #12]
 80094e0:	f7ff fa33 	bl	800894a <SWAPBYTE>
 80094e4:	4603      	mov	r3, r0
 80094e6:	461a      	mov	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094f8:	68f8      	ldr	r0, [r7, #12]
 80094fa:	f7ff fa26 	bl	800894a <SWAPBYTE>
 80094fe:	4603      	mov	r3, r0
 8009500:	461a      	mov	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	80da      	strh	r2, [r3, #6]
}
 8009506:	bf00      	nop
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b082      	sub	sp, #8
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
 8009516:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009518:	2180      	movs	r1, #128	@ 0x80
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f004 f8c4 	bl	800d6a8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009520:	2100      	movs	r1, #0
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f004 f8c0 	bl	800d6a8 <USBD_LL_StallEP>
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800953c:	2300      	movs	r3, #0
 800953e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d042      	beq.n	80095cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800954a:	6938      	ldr	r0, [r7, #16]
 800954c:	f000 f842 	bl	80095d4 <USBD_GetLen>
 8009550:	4603      	mov	r3, r0
 8009552:	3301      	adds	r3, #1
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800955a:	d808      	bhi.n	800956e <USBD_GetString+0x3e>
 800955c:	6938      	ldr	r0, [r7, #16]
 800955e:	f000 f839 	bl	80095d4 <USBD_GetLen>
 8009562:	4603      	mov	r3, r0
 8009564:	3301      	adds	r3, #1
 8009566:	b29b      	uxth	r3, r3
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	b29a      	uxth	r2, r3
 800956c:	e001      	b.n	8009572 <USBD_GetString+0x42>
 800956e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	68ba      	ldr	r2, [r7, #8]
 800957a:	4413      	add	r3, r2
 800957c:	687a      	ldr	r2, [r7, #4]
 800957e:	7812      	ldrb	r2, [r2, #0]
 8009580:	701a      	strb	r2, [r3, #0]
  idx++;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	3301      	adds	r3, #1
 8009586:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009588:	7dfb      	ldrb	r3, [r7, #23]
 800958a:	68ba      	ldr	r2, [r7, #8]
 800958c:	4413      	add	r3, r2
 800958e:	2203      	movs	r2, #3
 8009590:	701a      	strb	r2, [r3, #0]
  idx++;
 8009592:	7dfb      	ldrb	r3, [r7, #23]
 8009594:	3301      	adds	r3, #1
 8009596:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009598:	e013      	b.n	80095c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800959a:	7dfb      	ldrb	r3, [r7, #23]
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	4413      	add	r3, r2
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	7812      	ldrb	r2, [r2, #0]
 80095a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	3301      	adds	r3, #1
 80095aa:	613b      	str	r3, [r7, #16]
    idx++;
 80095ac:	7dfb      	ldrb	r3, [r7, #23]
 80095ae:	3301      	adds	r3, #1
 80095b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	4413      	add	r3, r2
 80095b8:	2200      	movs	r2, #0
 80095ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	3301      	adds	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1e7      	bne.n	800959a <USBD_GetString+0x6a>
 80095ca:	e000      	b.n	80095ce <USBD_GetString+0x9e>
    return;
 80095cc:	bf00      	nop
  }
}
 80095ce:	3718      	adds	r7, #24
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}

080095d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095e4:	e005      	b.n	80095f2 <USBD_GetLen+0x1e>
  {
    len++;
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	3301      	adds	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	3301      	adds	r3, #1
 80095f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f5      	bne.n	80095e6 <USBD_GetLen+0x12>
  }

  return len;
 80095fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2202      	movs	r2, #2
 8009618:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	687a      	ldr	r2, [r7, #4]
 8009620:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	687a      	ldr	r2, [r7, #4]
 8009626:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	2100      	movs	r1, #0
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f004 f8c3 	bl	800d7ba <USBD_LL_Transmit>

  return USBD_OK;
 8009634:	2300      	movs	r3, #0
}
 8009636:	4618      	mov	r0, r3
 8009638:	3710      	adds	r7, #16
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800963e:	b580      	push	{r7, lr}
 8009640:	b084      	sub	sp, #16
 8009642:	af00      	add	r7, sp, #0
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	60b9      	str	r1, [r7, #8]
 8009648:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68ba      	ldr	r2, [r7, #8]
 800964e:	2100      	movs	r1, #0
 8009650:	68f8      	ldr	r0, [r7, #12]
 8009652:	f004 f8b2 	bl	800d7ba <USBD_LL_Transmit>

  return USBD_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3710      	adds	r7, #16
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	2203      	movs	r2, #3
 8009670:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	687a      	ldr	r2, [r7, #4]
 8009678:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	2100      	movs	r1, #0
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f004 f8b6 	bl	800d7fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68ba      	ldr	r2, [r7, #8]
 80096aa:	2100      	movs	r1, #0
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f004 f8a5 	bl	800d7fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2204      	movs	r2, #4
 80096c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096cc:	2300      	movs	r3, #0
 80096ce:	2200      	movs	r2, #0
 80096d0:	2100      	movs	r1, #0
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f004 f871 	bl	800d7ba <USBD_LL_Transmit>

  return USBD_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3708      	adds	r7, #8
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b082      	sub	sp, #8
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2205      	movs	r2, #5
 80096ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096f2:	2300      	movs	r3, #0
 80096f4:	2200      	movs	r2, #0
 80096f6:	2100      	movs	r1, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f004 f87f 	bl	800d7fc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096fe:	2300      	movs	r3, #0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <__NVIC_SetPriority>:
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	6039      	str	r1, [r7, #0]
 8009712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009718:	2b00      	cmp	r3, #0
 800971a:	db0a      	blt.n	8009732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	b2da      	uxtb	r2, r3
 8009720:	490c      	ldr	r1, [pc, #48]	@ (8009754 <__NVIC_SetPriority+0x4c>)
 8009722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009726:	0112      	lsls	r2, r2, #4
 8009728:	b2d2      	uxtb	r2, r2
 800972a:	440b      	add	r3, r1
 800972c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009730:	e00a      	b.n	8009748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	b2da      	uxtb	r2, r3
 8009736:	4908      	ldr	r1, [pc, #32]	@ (8009758 <__NVIC_SetPriority+0x50>)
 8009738:	79fb      	ldrb	r3, [r7, #7]
 800973a:	f003 030f 	and.w	r3, r3, #15
 800973e:	3b04      	subs	r3, #4
 8009740:	0112      	lsls	r2, r2, #4
 8009742:	b2d2      	uxtb	r2, r2
 8009744:	440b      	add	r3, r1
 8009746:	761a      	strb	r2, [r3, #24]
}
 8009748:	bf00      	nop
 800974a:	370c      	adds	r7, #12
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	e000e100 	.word	0xe000e100
 8009758:	e000ed00 	.word	0xe000ed00

0800975c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800975c:	b580      	push	{r7, lr}
 800975e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009760:	4b05      	ldr	r3, [pc, #20]	@ (8009778 <SysTick_Handler+0x1c>)
 8009762:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009764:	f002 fa26 	bl	800bbb4 <xTaskGetSchedulerState>
 8009768:	4603      	mov	r3, r0
 800976a:	2b01      	cmp	r3, #1
 800976c:	d001      	beq.n	8009772 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800976e:	f003 f913 	bl	800c998 <xPortSysTickHandler>
  }
}
 8009772:	bf00      	nop
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	e000e010 	.word	0xe000e010

0800977c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009780:	2100      	movs	r1, #0
 8009782:	f06f 0004 	mvn.w	r0, #4
 8009786:	f7ff ffbf 	bl	8009708 <__NVIC_SetPriority>
#endif
}
 800978a:	bf00      	nop
 800978c:	bd80      	pop	{r7, pc}
	...

08009790 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009796:	f3ef 8305 	mrs	r3, IPSR
 800979a:	603b      	str	r3, [r7, #0]
  return(result);
 800979c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d003      	beq.n	80097aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097a2:	f06f 0305 	mvn.w	r3, #5
 80097a6:	607b      	str	r3, [r7, #4]
 80097a8:	e00c      	b.n	80097c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097aa:	4b0a      	ldr	r3, [pc, #40]	@ (80097d4 <osKernelInitialize+0x44>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097b2:	4b08      	ldr	r3, [pc, #32]	@ (80097d4 <osKernelInitialize+0x44>)
 80097b4:	2201      	movs	r2, #1
 80097b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	607b      	str	r3, [r7, #4]
 80097bc:	e002      	b.n	80097c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097be:	f04f 33ff 	mov.w	r3, #4294967295
 80097c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097c4:	687b      	ldr	r3, [r7, #4]
}
 80097c6:	4618      	mov	r0, r3
 80097c8:	370c      	adds	r7, #12
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr
 80097d2:	bf00      	nop
 80097d4:	20000444 	.word	0x20000444

080097d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097d8:	b580      	push	{r7, lr}
 80097da:	b082      	sub	sp, #8
 80097dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097de:	f3ef 8305 	mrs	r3, IPSR
 80097e2:	603b      	str	r3, [r7, #0]
  return(result);
 80097e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d003      	beq.n	80097f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80097ea:	f06f 0305 	mvn.w	r3, #5
 80097ee:	607b      	str	r3, [r7, #4]
 80097f0:	e010      	b.n	8009814 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80097f2:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <osKernelStart+0x48>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d109      	bne.n	800980e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80097fa:	f7ff ffbf 	bl	800977c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80097fe:	4b08      	ldr	r3, [pc, #32]	@ (8009820 <osKernelStart+0x48>)
 8009800:	2202      	movs	r2, #2
 8009802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009804:	f001 fce6 	bl	800b1d4 <vTaskStartScheduler>
      stat = osOK;
 8009808:	2300      	movs	r3, #0
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	e002      	b.n	8009814 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800980e:	f04f 33ff 	mov.w	r3, #4294967295
 8009812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009814:	687b      	ldr	r3, [r7, #4]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20000444 	.word	0x20000444

08009824 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009824:	b580      	push	{r7, lr}
 8009826:	b08e      	sub	sp, #56	@ 0x38
 8009828:	af04      	add	r7, sp, #16
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	60b9      	str	r1, [r7, #8]
 800982e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009830:	2300      	movs	r3, #0
 8009832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009834:	f3ef 8305 	mrs	r3, IPSR
 8009838:	617b      	str	r3, [r7, #20]
  return(result);
 800983a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800983c:	2b00      	cmp	r3, #0
 800983e:	d17e      	bne.n	800993e <osThreadNew+0x11a>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d07b      	beq.n	800993e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009846:	2380      	movs	r3, #128	@ 0x80
 8009848:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800984a:	2318      	movs	r3, #24
 800984c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009852:	f04f 33ff 	mov.w	r3, #4294967295
 8009856:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d045      	beq.n	80098ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d002      	beq.n	800986c <osThreadNew+0x48>
        name = attr->name;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	699b      	ldr	r3, [r3, #24]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d008      	beq.n	8009892 <osThreadNew+0x6e>
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2b38      	cmp	r3, #56	@ 0x38
 8009884:	d805      	bhi.n	8009892 <osThreadNew+0x6e>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	f003 0301 	and.w	r3, r3, #1
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <osThreadNew+0x72>
        return (NULL);
 8009892:	2300      	movs	r3, #0
 8009894:	e054      	b.n	8009940 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	695b      	ldr	r3, [r3, #20]
 80098a2:	089b      	lsrs	r3, r3, #2
 80098a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00e      	beq.n	80098cc <osThreadNew+0xa8>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	2b5b      	cmp	r3, #91	@ 0x5b
 80098b4:	d90a      	bls.n	80098cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d006      	beq.n	80098cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d002      	beq.n	80098cc <osThreadNew+0xa8>
        mem = 1;
 80098c6:	2301      	movs	r3, #1
 80098c8:	61bb      	str	r3, [r7, #24]
 80098ca:	e010      	b.n	80098ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d10c      	bne.n	80098ee <osThreadNew+0xca>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <osThreadNew+0xca>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d104      	bne.n	80098ee <osThreadNew+0xca>
          mem = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	61bb      	str	r3, [r7, #24]
 80098e8:	e001      	b.n	80098ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80098ea:	2300      	movs	r3, #0
 80098ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80098ee:	69bb      	ldr	r3, [r7, #24]
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d110      	bne.n	8009916 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	9301      	str	r3, [sp, #4]
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	6a3a      	ldr	r2, [r7, #32]
 8009908:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f001 fa86 	bl	800ae1c <xTaskCreateStatic>
 8009910:	4603      	mov	r3, r0
 8009912:	613b      	str	r3, [r7, #16]
 8009914:	e013      	b.n	800993e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d110      	bne.n	800993e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800991c:	6a3b      	ldr	r3, [r7, #32]
 800991e:	b29a      	uxth	r2, r3
 8009920:	f107 0310 	add.w	r3, r7, #16
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800992e:	68f8      	ldr	r0, [r7, #12]
 8009930:	f001 fad4 	bl	800aedc <xTaskCreate>
 8009934:	4603      	mov	r3, r0
 8009936:	2b01      	cmp	r3, #1
 8009938:	d001      	beq.n	800993e <osThreadNew+0x11a>
            hTask = NULL;
 800993a:	2300      	movs	r3, #0
 800993c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800993e:	693b      	ldr	r3, [r7, #16]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3728      	adds	r7, #40	@ 0x28
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009950:	f3ef 8305 	mrs	r3, IPSR
 8009954:	60bb      	str	r3, [r7, #8]
  return(result);
 8009956:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009958:	2b00      	cmp	r3, #0
 800995a:	d003      	beq.n	8009964 <osDelay+0x1c>
    stat = osErrorISR;
 800995c:	f06f 0305 	mvn.w	r3, #5
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	e007      	b.n	8009974 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009964:	2300      	movs	r3, #0
 8009966:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d002      	beq.n	8009974 <osDelay+0x2c>
      vTaskDelay(ticks);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 fbfa 	bl	800b168 <vTaskDelay>
    }
  }

  return (stat);
 8009974:	68fb      	ldr	r3, [r7, #12]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3710      	adds	r7, #16
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f002 fe06 	bl	800c598 <pvTimerGetTimerID>
 800998c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d005      	beq.n	80099a0 <TimerCallback+0x22>
    callb->func (callb->arg);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	68fa      	ldr	r2, [r7, #12]
 800999a:	6852      	ldr	r2, [r2, #4]
 800999c:	4610      	mov	r0, r2
 800999e:	4798      	blx	r3
  }
}
 80099a0:	bf00      	nop
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08c      	sub	sp, #48	@ 0x30
 80099ac:	af02      	add	r7, sp, #8
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	607a      	str	r2, [r7, #4]
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	460b      	mov	r3, r1
 80099b6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80099b8:	2300      	movs	r3, #0
 80099ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099bc:	f3ef 8305 	mrs	r3, IPSR
 80099c0:	613b      	str	r3, [r7, #16]
  return(result);
 80099c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d163      	bne.n	8009a90 <osTimerNew+0xe8>
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d060      	beq.n	8009a90 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80099ce:	2008      	movs	r0, #8
 80099d0:	f003 f874 	bl	800cabc <pvPortMalloc>
 80099d4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d059      	beq.n	8009a90 <osTimerNew+0xe8>
      callb->func = func;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	68fa      	ldr	r2, [r7, #12]
 80099e0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80099e8:	7afb      	ldrb	r3, [r7, #11]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d102      	bne.n	80099f4 <osTimerNew+0x4c>
        reload = pdFALSE;
 80099ee:	2300      	movs	r3, #0
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	e001      	b.n	80099f8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80099f4:	2301      	movs	r3, #1
 80099f6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80099f8:	f04f 33ff 	mov.w	r3, #4294967295
 80099fc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80099fe:	2300      	movs	r3, #0
 8009a00:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d01c      	beq.n	8009a42 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d002      	beq.n	8009a16 <osTimerNew+0x6e>
          name = attr->name;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d006      	beq.n	8009a2c <osTimerNew+0x84>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	68db      	ldr	r3, [r3, #12]
 8009a22:	2b2b      	cmp	r3, #43	@ 0x2b
 8009a24:	d902      	bls.n	8009a2c <osTimerNew+0x84>
          mem = 1;
 8009a26:	2301      	movs	r3, #1
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	e00c      	b.n	8009a46 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	689b      	ldr	r3, [r3, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d108      	bne.n	8009a46 <osTimerNew+0x9e>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d104      	bne.n	8009a46 <osTimerNew+0x9e>
            mem = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	61bb      	str	r3, [r7, #24]
 8009a40:	e001      	b.n	8009a46 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d10c      	bne.n	8009a66 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	4b12      	ldr	r3, [pc, #72]	@ (8009a9c <osTimerNew+0xf4>)
 8009a54:	9300      	str	r3, [sp, #0]
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	2101      	movs	r1, #1
 8009a5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a5e:	f002 fa0e 	bl	800be7e <xTimerCreateStatic>
 8009a62:	6238      	str	r0, [r7, #32]
 8009a64:	e00b      	b.n	8009a7e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d108      	bne.n	8009a7e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8009a9c <osTimerNew+0xf4>)
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	69fa      	ldr	r2, [r7, #28]
 8009a74:	2101      	movs	r1, #1
 8009a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a78:	f002 f9e0 	bl	800be3c <xTimerCreate>
 8009a7c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009a7e:	6a3b      	ldr	r3, [r7, #32]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <osTimerNew+0xe8>
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <osTimerNew+0xe8>
        vPortFree (callb);
 8009a8a:	6978      	ldr	r0, [r7, #20]
 8009a8c:	f003 f8e4 	bl	800cc58 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009a90:	6a3b      	ldr	r3, [r7, #32]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3728      	adds	r7, #40	@ 0x28
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	0800997f 	.word	0x0800997f

08009aa0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af02      	add	r7, sp, #8
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aae:	f3ef 8305 	mrs	r3, IPSR
 8009ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d003      	beq.n	8009ac2 <osTimerStart+0x22>
    stat = osErrorISR;
 8009aba:	f06f 0305 	mvn.w	r3, #5
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	e017      	b.n	8009af2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d103      	bne.n	8009ad0 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009ac8:	f06f 0303 	mvn.w	r3, #3
 8009acc:	617b      	str	r3, [r7, #20]
 8009ace:	e010      	b.n	8009af2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	9300      	str	r3, [sp, #0]
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	683a      	ldr	r2, [r7, #0]
 8009ad8:	2104      	movs	r1, #4
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f002 fa4c 	bl	800bf78 <xTimerGenericCommand>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d102      	bne.n	8009aec <osTimerStart+0x4c>
      stat = osOK;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	617b      	str	r3, [r7, #20]
 8009aea:	e002      	b.n	8009af2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009aec:	f06f 0302 	mvn.w	r3, #2
 8009af0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009af2:	697b      	ldr	r3, [r7, #20]
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3718      	adds	r7, #24
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}

08009afc <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b086      	sub	sp, #24
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8009b04:	2300      	movs	r3, #0
 8009b06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b08:	f3ef 8305 	mrs	r3, IPSR
 8009b0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b0e:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d12d      	bne.n	8009b70 <osEventFlagsNew+0x74>
    mem = -1;
 8009b14:	f04f 33ff 	mov.w	r3, #4294967295
 8009b18:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d015      	beq.n	8009b4c <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d006      	beq.n	8009b36 <osEventFlagsNew+0x3a>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	68db      	ldr	r3, [r3, #12]
 8009b2c:	2b1f      	cmp	r3, #31
 8009b2e:	d902      	bls.n	8009b36 <osEventFlagsNew+0x3a>
        mem = 1;
 8009b30:	2301      	movs	r3, #1
 8009b32:	613b      	str	r3, [r7, #16]
 8009b34:	e00c      	b.n	8009b50 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d108      	bne.n	8009b50 <osEventFlagsNew+0x54>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	68db      	ldr	r3, [r3, #12]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d104      	bne.n	8009b50 <osEventFlagsNew+0x54>
          mem = 0;
 8009b46:	2300      	movs	r3, #0
 8009b48:	613b      	str	r3, [r7, #16]
 8009b4a:	e001      	b.n	8009b50 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	d106      	bne.n	8009b64 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f000 f93c 	bl	8009dd8 <xEventGroupCreateStatic>
 8009b60:	6178      	str	r0, [r7, #20]
 8009b62:	e005      	b.n	8009b70 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d102      	bne.n	8009b70 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009b6a:	f000 f96e 	bl	8009e4a <xEventGroupCreate>
 8009b6e:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009b70:	697b      	ldr	r3, [r7, #20]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
	...

08009b7c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b086      	sub	sp, #24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
 8009b84:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d003      	beq.n	8009b98 <osEventFlagsSet+0x1c>
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009b96:	d303      	bcc.n	8009ba0 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8009b98:	f06f 0303 	mvn.w	r3, #3
 8009b9c:	617b      	str	r3, [r7, #20]
 8009b9e:	e028      	b.n	8009bf2 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ba0:	f3ef 8305 	mrs	r3, IPSR
 8009ba4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d01d      	beq.n	8009be8 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009bb0:	f107 0308 	add.w	r3, r7, #8
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6839      	ldr	r1, [r7, #0]
 8009bb8:	6938      	ldr	r0, [r7, #16]
 8009bba:	f000 fb6d 	bl	800a298 <xEventGroupSetBitsFromISR>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d103      	bne.n	8009bcc <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8009bc4:	f06f 0302 	mvn.w	r3, #2
 8009bc8:	617b      	str	r3, [r7, #20]
 8009bca:	e012      	b.n	8009bf2 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00d      	beq.n	8009bf2 <osEventFlagsSet+0x76>
 8009bd6:	4b09      	ldr	r3, [pc, #36]	@ (8009bfc <osEventFlagsSet+0x80>)
 8009bd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bdc:	601a      	str	r2, [r3, #0]
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	e004      	b.n	8009bf2 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8009be8:	6839      	ldr	r1, [r7, #0]
 8009bea:	6938      	ldr	r0, [r7, #16]
 8009bec:	f000 fa8c 	bl	800a108 <xEventGroupSetBits>
 8009bf0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009bf2:	697b      	ldr	r3, [r7, #20]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	e000ed04 	.word	0xe000ed04

08009c00 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009c0e:	693b      	ldr	r3, [r7, #16]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d003      	beq.n	8009c1c <osEventFlagsClear+0x1c>
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009c1a:	d303      	bcc.n	8009c24 <osEventFlagsClear+0x24>
    rflags = (uint32_t)osErrorParameter;
 8009c1c:	f06f 0303 	mvn.w	r3, #3
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e019      	b.n	8009c58 <osEventFlagsClear+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c24:	f3ef 8305 	mrs	r3, IPSR
 8009c28:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d00e      	beq.n	8009c4e <osEventFlagsClear+0x4e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8009c30:	6938      	ldr	r0, [r7, #16]
 8009c32:	f000 fa45 	bl	800a0c0 <xEventGroupGetBitsFromISR>
 8009c36:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8009c38:	6839      	ldr	r1, [r7, #0]
 8009c3a:	6938      	ldr	r0, [r7, #16]
 8009c3c:	f000 fa2c 	bl	800a098 <xEventGroupClearBitsFromISR>
 8009c40:	4603      	mov	r3, r0
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d108      	bne.n	8009c58 <osEventFlagsClear+0x58>
      rflags = (uint32_t)osErrorResource;
 8009c46:	f06f 0302 	mvn.w	r3, #2
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	e004      	b.n	8009c58 <osEventFlagsClear+0x58>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6938      	ldr	r0, [r7, #16]
 8009c52:	f000 f9e7 	bl	800a024 <xEventGroupClearBits>
 8009c56:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009c58:	697b      	ldr	r3, [r7, #20]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b086      	sub	sp, #24
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if (ef_id == NULL) {
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d102      	bne.n	8009c7a <osEventFlagsGet+0x18>
    rflags = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	e00f      	b.n	8009c9a <osEventFlagsGet+0x38>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c7a:	f3ef 8305 	mrs	r3, IPSR
 8009c7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c80:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d004      	beq.n	8009c90 <osEventFlagsGet+0x2e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8009c86:	6938      	ldr	r0, [r7, #16]
 8009c88:	f000 fa1a 	bl	800a0c0 <xEventGroupGetBitsFromISR>
 8009c8c:	6178      	str	r0, [r7, #20]
 8009c8e:	e004      	b.n	8009c9a <osEventFlagsGet+0x38>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8009c90:	2100      	movs	r1, #0
 8009c92:	6938      	ldr	r0, [r7, #16]
 8009c94:	f000 f9c6 	bl	800a024 <xEventGroupClearBits>
 8009c98:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009c9a:	697b      	ldr	r3, [r7, #20]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3718      	adds	r7, #24
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <osEventFlagsWait>:

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b08c      	sub	sp, #48	@ 0x30
 8009ca8:	af02      	add	r7, sp, #8
 8009caa:	60f8      	str	r0, [r7, #12]
 8009cac:	60b9      	str	r1, [r7, #8]
 8009cae:	607a      	str	r2, [r7, #4]
 8009cb0:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <osEventFlagsWait+0x20>
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009cc2:	d303      	bcc.n	8009ccc <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8009cc4:	f06f 0303 	mvn.w	r3, #3
 8009cc8:	61fb      	str	r3, [r7, #28]
 8009cca:	e04b      	b.n	8009d64 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ccc:	f3ef 8305 	mrs	r3, IPSR
 8009cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8009cd2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d003      	beq.n	8009ce0 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8009cd8:	f06f 0305 	mvn.w	r3, #5
 8009cdc:	61fb      	str	r3, [r7, #28]
 8009cde:	e041      	b.n	8009d64 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d002      	beq.n	8009cf0 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8009cea:	2301      	movs	r3, #1
 8009cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cee:	e001      	b.n	8009cf4 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f003 0302 	and.w	r3, r3, #2
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	623b      	str	r3, [r7, #32]
 8009d02:	e001      	b.n	8009d08 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8009d04:	2301      	movs	r3, #1
 8009d06:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d0e:	6a3a      	ldr	r2, [r7, #32]
 8009d10:	68b9      	ldr	r1, [r7, #8]
 8009d12:	69b8      	ldr	r0, [r7, #24]
 8009d14:	f000 f8b4 	bl	8009e80 <xEventGroupWaitBits>
 8009d18:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f003 0301 	and.w	r3, r3, #1
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d010      	beq.n	8009d46 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4013      	ands	r3, r2
 8009d2a:	68ba      	ldr	r2, [r7, #8]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d019      	beq.n	8009d64 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8009d36:	f06f 0301 	mvn.w	r3, #1
 8009d3a:	61fb      	str	r3, [r7, #28]
 8009d3c:	e012      	b.n	8009d64 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009d3e:	f06f 0302 	mvn.w	r3, #2
 8009d42:	61fb      	str	r3, [r7, #28]
 8009d44:	e00e      	b.n	8009d64 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d109      	bne.n	8009d64 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8009d56:	f06f 0301 	mvn.w	r3, #1
 8009d5a:	61fb      	str	r3, [r7, #28]
 8009d5c:	e002      	b.n	8009d64 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009d5e:	f06f 0302 	mvn.w	r3, #2
 8009d62:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8009d64:	69fb      	ldr	r3, [r7, #28]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3728      	adds	r7, #40	@ 0x28
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a07      	ldr	r2, [pc, #28]	@ (8009d9c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	4a06      	ldr	r2, [pc, #24]	@ (8009da0 <vApplicationGetIdleTaskMemory+0x30>)
 8009d86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2280      	movs	r2, #128	@ 0x80
 8009d8c:	601a      	str	r2, [r3, #0]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	20000448 	.word	0x20000448
 8009da0:	200004a4 	.word	0x200004a4

08009da4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a07      	ldr	r2, [pc, #28]	@ (8009dd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009db4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4a06      	ldr	r2, [pc, #24]	@ (8009dd4 <vApplicationGetTimerTaskMemory+0x30>)
 8009dba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dc2:	601a      	str	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	200006a4 	.word	0x200006a4
 8009dd4:	20000700 	.word	0x20000700

08009dd8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d10b      	bne.n	8009dfe <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009df8:	bf00      	nop
 8009dfa:	bf00      	nop
 8009dfc:	e7fd      	b.n	8009dfa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009dfe:	2320      	movs	r3, #32
 8009e00:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b20      	cmp	r3, #32
 8009e06:	d00b      	beq.n	8009e20 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8009e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e0c:	f383 8811 	msr	BASEPRI, r3
 8009e10:	f3bf 8f6f 	isb	sy
 8009e14:	f3bf 8f4f 	dsb	sy
 8009e18:	60fb      	str	r3, [r7, #12]
}
 8009e1a:	bf00      	nop
 8009e1c:	bf00      	nop
 8009e1e:	e7fd      	b.n	8009e1c <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d00a      	beq.n	8009e40 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e30:	697b      	ldr	r3, [r7, #20]
 8009e32:	3304      	adds	r3, #4
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fa43 	bl	800a2c0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009e40:	697b      	ldr	r3, [r7, #20]
	}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b082      	sub	sp, #8
 8009e4e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009e50:	2020      	movs	r0, #32
 8009e52:	f002 fe33 	bl	800cabc <pvPortMalloc>
 8009e56:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d00a      	beq.n	8009e74 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2200      	movs	r2, #0
 8009e62:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 fa29 	bl	800a2c0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2200      	movs	r2, #0
 8009e72:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8009e74:	687b      	ldr	r3, [r7, #4]
	}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3708      	adds	r7, #8
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
	...

08009e80 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b090      	sub	sp, #64	@ 0x40
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
 8009e8c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8009e96:	2300      	movs	r3, #0
 8009e98:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d10b      	bne.n	8009eb8 <xEventGroupWaitBits+0x38>
	__asm volatile
 8009ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	623b      	str	r3, [r7, #32]
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	e7fd      	b.n	8009eb4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ebe:	d30b      	bcc.n	8009ed8 <xEventGroupWaitBits+0x58>
	__asm volatile
 8009ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	61fb      	str	r3, [r7, #28]
}
 8009ed2:	bf00      	nop
 8009ed4:	bf00      	nop
 8009ed6:	e7fd      	b.n	8009ed4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d10b      	bne.n	8009ef6 <xEventGroupWaitBits+0x76>
	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	61bb      	str	r3, [r7, #24]
}
 8009ef0:	bf00      	nop
 8009ef2:	bf00      	nop
 8009ef4:	e7fd      	b.n	8009ef2 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ef6:	f001 fe5d 	bl	800bbb4 <xTaskGetSchedulerState>
 8009efa:	4603      	mov	r3, r0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d102      	bne.n	8009f06 <xEventGroupWaitBits+0x86>
 8009f00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <xEventGroupWaitBits+0x8a>
 8009f06:	2301      	movs	r3, #1
 8009f08:	e000      	b.n	8009f0c <xEventGroupWaitBits+0x8c>
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10b      	bne.n	8009f28 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	617b      	str	r3, [r7, #20]
}
 8009f22:	bf00      	nop
 8009f24:	bf00      	nop
 8009f26:	e7fd      	b.n	8009f24 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8009f28:	f001 f9bc 	bl	800b2a4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009f32:	683a      	ldr	r2, [r7, #0]
 8009f34:	68b9      	ldr	r1, [r7, #8]
 8009f36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009f38:	f000 f98c 	bl	800a254 <prvTestWaitCondition>
 8009f3c:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8009f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d00e      	beq.n	8009f62 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d028      	beq.n	8009fa4 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009f52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	43db      	mvns	r3, r3
 8009f5a:	401a      	ands	r2, r3
 8009f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5e:	601a      	str	r2, [r3, #0]
 8009f60:	e020      	b.n	8009fa4 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009f62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d104      	bne.n	8009f72 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009f70:	e018      	b.n	8009fa4 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d003      	beq.n	8009f80 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d003      	beq.n	8009f8e <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009f8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f90:	1d18      	adds	r0, r3, #4
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f96:	4313      	orrs	r3, r2
 8009f98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	f001 fb7c 	bl	800b698 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009fa4:	f001 f98c 	bl	800b2c0 <xTaskResumeAll>
 8009fa8:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009faa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d031      	beq.n	800a014 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8009fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d107      	bne.n	8009fc6 <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8009fb6:	4b1a      	ldr	r3, [pc, #104]	@ (800a020 <xEventGroupWaitBits+0x1a0>)
 8009fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009fc6:	f001 fe83 	bl	800bcd0 <uxTaskResetEventItemValue>
 8009fca:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d11a      	bne.n	800a00c <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8009fd6:	f002 fc4f 	bl	800c878 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009fe6:	f000 f935 	bl	800a254 <prvTestWaitCondition>
 8009fea:	4603      	mov	r3, r0
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d009      	beq.n	800a004 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d006      	beq.n	800a004 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ff8:	681a      	ldr	r2, [r3, #0]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	401a      	ands	r2, r3
 800a000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a002:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800a004:	2301      	movs	r3, #1
 800a006:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800a008:	f002 fc68 	bl	800c8dc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a00c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a00e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a012:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800a014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a016:	4618      	mov	r0, r3
 800a018:	3740      	adds	r7, #64	@ 0x40
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	e000ed04 	.word	0xe000ed04

0800a024 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b086      	sub	sp, #24
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
 800a02c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d10b      	bne.n	800a050 <xEventGroupClearBits+0x2c>
	__asm volatile
 800a038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	60fb      	str	r3, [r7, #12]
}
 800a04a:	bf00      	nop
 800a04c:	bf00      	nop
 800a04e:	e7fd      	b.n	800a04c <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a056:	d30b      	bcc.n	800a070 <xEventGroupClearBits+0x4c>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	60bb      	str	r3, [r7, #8]
}
 800a06a:	bf00      	nop
 800a06c:	bf00      	nop
 800a06e:	e7fd      	b.n	800a06c <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 800a070:	f002 fc02 	bl	800c878 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	43db      	mvns	r3, r3
 800a082:	401a      	ands	r2, r3
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 800a088:	f002 fc28 	bl	800c8dc <vPortExitCritical>

	return uxReturn;
 800a08c:	693b      	ldr	r3, [r7, #16]
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
 800a0a0:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	683a      	ldr	r2, [r7, #0]
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4804      	ldr	r0, [pc, #16]	@ (800a0bc <xEventGroupClearBitsFromISR+0x24>)
 800a0aa:	f002 fa97 	bl	800c5dc <xTimerPendFunctionCallFromISR>
 800a0ae:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
	}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3710      	adds	r7, #16
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}
 800a0ba:	bf00      	nop
 800a0bc:	0800a23b 	.word	0x0800a23b

0800a0c0 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b089      	sub	sp, #36	@ 0x24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a0cc:	f3ef 8211 	mrs	r2, BASEPRI
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	60fa      	str	r2, [r7, #12]
 800a0e2:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0e6:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a0f8:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800a0fa:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3724      	adds	r7, #36	@ 0x24
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08e      	sub	sp, #56	@ 0x38
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800a112:	2300      	movs	r3, #0
 800a114:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800a11a:	2300      	movs	r3, #0
 800a11c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10b      	bne.n	800a13c <xEventGroupSetBits+0x34>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	613b      	str	r3, [r7, #16]
}
 800a136:	bf00      	nop
 800a138:	bf00      	nop
 800a13a:	e7fd      	b.n	800a138 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a142:	d30b      	bcc.n	800a15c <xEventGroupSetBits+0x54>
	__asm volatile
 800a144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a148:	f383 8811 	msr	BASEPRI, r3
 800a14c:	f3bf 8f6f 	isb	sy
 800a150:	f3bf 8f4f 	dsb	sy
 800a154:	60fb      	str	r3, [r7, #12]
}
 800a156:	bf00      	nop
 800a158:	bf00      	nop
 800a15a:	e7fd      	b.n	800a158 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800a15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15e:	3304      	adds	r3, #4
 800a160:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a164:	3308      	adds	r3, #8
 800a166:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800a168:	f001 f89c 	bl	800b2a4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800a16c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800a172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	431a      	orrs	r2, r3
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800a17e:	e03c      	b.n	800a1fa <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 800a180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800a186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800a190:	69bb      	ldr	r3, [r7, #24]
 800a192:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800a196:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800a19e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d108      	bne.n	800a1bc <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800a1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00b      	beq.n	800a1ce <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1ba:	e008      	b.n	800a1ce <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800a1bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	69bb      	ldr	r3, [r7, #24]
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	69ba      	ldr	r2, [r7, #24]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d101      	bne.n	800a1ce <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800a1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d010      	beq.n	800a1f6 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800a1d4:	697b      	ldr	r3, [r7, #20]
 800a1d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d003      	beq.n	800a1e6 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800a1de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1e0:	69bb      	ldr	r3, [r7, #24]
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800a1f2:	f001 fb1f 	bl	800b834 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800a1fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d1be      	bne.n	800a180 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800a202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a208:	43db      	mvns	r3, r3
 800a20a:	401a      	ands	r2, r3
 800a20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a20e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800a210:	f001 f856 	bl	800b2c0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800a214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a216:	681b      	ldr	r3, [r3, #0]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3738      	adds	r7, #56	@ 0x38
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f7ff ff6b 	bl	800a108 <xEventGroupSetBits>
}
 800a232:	bf00      	nop
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}

0800a23a <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800a23a:	b580      	push	{r7, lr}
 800a23c:	b082      	sub	sp, #8
 800a23e:	af00      	add	r7, sp, #0
 800a240:	6078      	str	r0, [r7, #4]
 800a242:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800a244:	6839      	ldr	r1, [r7, #0]
 800a246:	6878      	ldr	r0, [r7, #4]
 800a248:	f7ff feec 	bl	800a024 <xEventGroupClearBits>
}
 800a24c:	bf00      	nop
 800a24e:	3708      	adds	r7, #8
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}

0800a254 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800a254:	b480      	push	{r7}
 800a256:	b087      	sub	sp, #28
 800a258:	af00      	add	r7, sp, #0
 800a25a:	60f8      	str	r0, [r7, #12]
 800a25c:	60b9      	str	r1, [r7, #8]
 800a25e:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d107      	bne.n	800a27a <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800a26a:	68fa      	ldr	r2, [r7, #12]
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	4013      	ands	r3, r2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d00a      	beq.n	800a28a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
 800a278:	e007      	b.n	800a28a <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	4013      	ands	r3, r2
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	429a      	cmp	r2, r3
 800a284:	d101      	bne.n	800a28a <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800a286:	2301      	movs	r3, #1
 800a288:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800a28a:	697b      	ldr	r3, [r7, #20]
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	371c      	adds	r7, #28
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b086      	sub	sp, #24
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	60f8      	str	r0, [r7, #12]
 800a2a0:	60b9      	str	r1, [r7, #8]
 800a2a2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	68ba      	ldr	r2, [r7, #8]
 800a2a8:	68f9      	ldr	r1, [r7, #12]
 800a2aa:	4804      	ldr	r0, [pc, #16]	@ (800a2bc <xEventGroupSetBitsFromISR+0x24>)
 800a2ac:	f002 f996 	bl	800c5dc <xTimerPendFunctionCallFromISR>
 800a2b0:	6178      	str	r0, [r7, #20]

		return xReturn;
 800a2b2:	697b      	ldr	r3, [r7, #20]
	}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3718      	adds	r7, #24
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}
 800a2bc:	0800a221 	.word	0x0800a221

0800a2c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f103 0208 	add.w	r2, r3, #8
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f103 0208 	add.w	r2, r3, #8
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f103 0208 	add.w	r2, r3, #8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a2f4:	bf00      	nop
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a300:	b480      	push	{r7}
 800a302:	b083      	sub	sp, #12
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a30e:	bf00      	nop
 800a310:	370c      	adds	r7, #12
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	689a      	ldr	r2, [r3, #8]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	683a      	ldr	r2, [r7, #0]
 800a33e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	683a      	ldr	r2, [r7, #0]
 800a344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	1c5a      	adds	r2, r3, #1
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	601a      	str	r2, [r3, #0]
}
 800a356:	bf00      	nop
 800a358:	3714      	adds	r7, #20
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a378:	d103      	bne.n	800a382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	60fb      	str	r3, [r7, #12]
 800a380:	e00c      	b.n	800a39c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	3308      	adds	r3, #8
 800a386:	60fb      	str	r3, [r7, #12]
 800a388:	e002      	b.n	800a390 <vListInsert+0x2e>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	685b      	ldr	r3, [r3, #4]
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68ba      	ldr	r2, [r7, #8]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d2f6      	bcs.n	800a38a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	685a      	ldr	r2, [r3, #4]
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	683a      	ldr	r2, [r7, #0]
 800a3aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	68fa      	ldr	r2, [r7, #12]
 800a3b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	1c5a      	adds	r2, r3, #1
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	601a      	str	r2, [r3, #0]
}
 800a3c8:	bf00      	nop
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	687a      	ldr	r2, [r7, #4]
 800a3e8:	6892      	ldr	r2, [r2, #8]
 800a3ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	6852      	ldr	r2, [r2, #4]
 800a3f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d103      	bne.n	800a408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	1e5a      	subs	r2, r3, #1
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	681b      	ldr	r3, [r3, #0]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3714      	adds	r7, #20
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d10b      	bne.n	800a454 <xQueueGenericReset+0x2c>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	60bb      	str	r3, [r7, #8]
}
 800a44e:	bf00      	nop
 800a450:	bf00      	nop
 800a452:	e7fd      	b.n	800a450 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a454:	f002 fa10 	bl	800c878 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681a      	ldr	r2, [r3, #0]
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a460:	68f9      	ldr	r1, [r7, #12]
 800a462:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	441a      	add	r2, r3
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2200      	movs	r2, #0
 800a472:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a484:	3b01      	subs	r3, #1
 800a486:	68f9      	ldr	r1, [r7, #12]
 800a488:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a48a:	fb01 f303 	mul.w	r3, r1, r3
 800a48e:	441a      	add	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	22ff      	movs	r2, #255	@ 0xff
 800a498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	22ff      	movs	r2, #255	@ 0xff
 800a4a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d114      	bne.n	800a4d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	691b      	ldr	r3, [r3, #16]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d01a      	beq.n	800a4e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	3310      	adds	r3, #16
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f001 f958 	bl	800b76c <xTaskRemoveFromEventList>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d012      	beq.n	800a4e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	@ (800a4f8 <xQueueGenericReset+0xd0>)
 800a4c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4c8:	601a      	str	r2, [r3, #0]
 800a4ca:	f3bf 8f4f 	dsb	sy
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	e009      	b.n	800a4e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	3310      	adds	r3, #16
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f7ff fef1 	bl	800a2c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3324      	adds	r3, #36	@ 0x24
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	f7ff feec 	bl	800a2c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4e8:	f002 f9f8 	bl	800c8dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4ec:	2301      	movs	r3, #1
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	e000ed04 	.word	0xe000ed04

0800a4fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b08e      	sub	sp, #56	@ 0x38
 800a500:	af02      	add	r7, sp, #8
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d10b      	bne.n	800a528 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a514:	f383 8811 	msr	BASEPRI, r3
 800a518:	f3bf 8f6f 	isb	sy
 800a51c:	f3bf 8f4f 	dsb	sy
 800a520:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a522:	bf00      	nop
 800a524:	bf00      	nop
 800a526:	e7fd      	b.n	800a524 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d10b      	bne.n	800a546 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a532:	f383 8811 	msr	BASEPRI, r3
 800a536:	f3bf 8f6f 	isb	sy
 800a53a:	f3bf 8f4f 	dsb	sy
 800a53e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	e7fd      	b.n	800a542 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <xQueueGenericCreateStatic+0x56>
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d001      	beq.n	800a556 <xQueueGenericCreateStatic+0x5a>
 800a552:	2301      	movs	r3, #1
 800a554:	e000      	b.n	800a558 <xQueueGenericCreateStatic+0x5c>
 800a556:	2300      	movs	r3, #0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	623b      	str	r3, [r7, #32]
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d102      	bne.n	800a580 <xQueueGenericCreateStatic+0x84>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <xQueueGenericCreateStatic+0x88>
 800a580:	2301      	movs	r3, #1
 800a582:	e000      	b.n	800a586 <xQueueGenericCreateStatic+0x8a>
 800a584:	2300      	movs	r3, #0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d10b      	bne.n	800a5a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a58e:	f383 8811 	msr	BASEPRI, r3
 800a592:	f3bf 8f6f 	isb	sy
 800a596:	f3bf 8f4f 	dsb	sy
 800a59a:	61fb      	str	r3, [r7, #28]
}
 800a59c:	bf00      	nop
 800a59e:	bf00      	nop
 800a5a0:	e7fd      	b.n	800a59e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5a2:	2350      	movs	r3, #80	@ 0x50
 800a5a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b50      	cmp	r3, #80	@ 0x50
 800a5aa:	d00b      	beq.n	800a5c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b0:	f383 8811 	msr	BASEPRI, r3
 800a5b4:	f3bf 8f6f 	isb	sy
 800a5b8:	f3bf 8f4f 	dsb	sy
 800a5bc:	61bb      	str	r3, [r7, #24]
}
 800a5be:	bf00      	nop
 800a5c0:	bf00      	nop
 800a5c2:	e7fd      	b.n	800a5c0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5c4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a5ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00d      	beq.n	800a5ec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5d8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5de:	9300      	str	r3, [sp, #0]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	68b9      	ldr	r1, [r7, #8]
 800a5e6:	68f8      	ldr	r0, [r7, #12]
 800a5e8:	f000 f805 	bl	800a5f6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3730      	adds	r7, #48	@ 0x30
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}

0800a5f6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a5f6:	b580      	push	{r7, lr}
 800a5f8:	b084      	sub	sp, #16
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	60f8      	str	r0, [r7, #12]
 800a5fe:	60b9      	str	r1, [r7, #8]
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	69ba      	ldr	r2, [r7, #24]
 800a60e:	601a      	str	r2, [r3, #0]
 800a610:	e002      	b.n	800a618 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	687a      	ldr	r2, [r7, #4]
 800a616:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a624:	2101      	movs	r1, #1
 800a626:	69b8      	ldr	r0, [r7, #24]
 800a628:	f7ff fefe 	bl	800a428 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	78fa      	ldrb	r2, [r7, #3]
 800a630:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a634:	bf00      	nop
 800a636:	3710      	adds	r7, #16
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b08e      	sub	sp, #56	@ 0x38
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	60b9      	str	r1, [r7, #8]
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a64a:	2300      	movs	r3, #0
 800a64c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	2b00      	cmp	r3, #0
 800a656:	d10b      	bne.n	800a670 <xQueueGenericSend+0x34>
	__asm volatile
 800a658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a65c:	f383 8811 	msr	BASEPRI, r3
 800a660:	f3bf 8f6f 	isb	sy
 800a664:	f3bf 8f4f 	dsb	sy
 800a668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a66a:	bf00      	nop
 800a66c:	bf00      	nop
 800a66e:	e7fd      	b.n	800a66c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d103      	bne.n	800a67e <xQueueGenericSend+0x42>
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d101      	bne.n	800a682 <xQueueGenericSend+0x46>
 800a67e:	2301      	movs	r3, #1
 800a680:	e000      	b.n	800a684 <xQueueGenericSend+0x48>
 800a682:	2300      	movs	r3, #0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d10b      	bne.n	800a6a0 <xQueueGenericSend+0x64>
	__asm volatile
 800a688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a68c:	f383 8811 	msr	BASEPRI, r3
 800a690:	f3bf 8f6f 	isb	sy
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a69a:	bf00      	nop
 800a69c:	bf00      	nop
 800a69e:	e7fd      	b.n	800a69c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d103      	bne.n	800a6ae <xQueueGenericSend+0x72>
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d101      	bne.n	800a6b2 <xQueueGenericSend+0x76>
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e000      	b.n	800a6b4 <xQueueGenericSend+0x78>
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d10b      	bne.n	800a6d0 <xQueueGenericSend+0x94>
	__asm volatile
 800a6b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6bc:	f383 8811 	msr	BASEPRI, r3
 800a6c0:	f3bf 8f6f 	isb	sy
 800a6c4:	f3bf 8f4f 	dsb	sy
 800a6c8:	623b      	str	r3, [r7, #32]
}
 800a6ca:	bf00      	nop
 800a6cc:	bf00      	nop
 800a6ce:	e7fd      	b.n	800a6cc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6d0:	f001 fa70 	bl	800bbb4 <xTaskGetSchedulerState>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d102      	bne.n	800a6e0 <xQueueGenericSend+0xa4>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d101      	bne.n	800a6e4 <xQueueGenericSend+0xa8>
 800a6e0:	2301      	movs	r3, #1
 800a6e2:	e000      	b.n	800a6e6 <xQueueGenericSend+0xaa>
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <xQueueGenericSend+0xc6>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	61fb      	str	r3, [r7, #28]
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	e7fd      	b.n	800a6fe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a702:	f002 f8b9 	bl	800c878 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a70c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a70e:	429a      	cmp	r2, r3
 800a710:	d302      	bcc.n	800a718 <xQueueGenericSend+0xdc>
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d129      	bne.n	800a76c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	68b9      	ldr	r1, [r7, #8]
 800a71c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a71e:	f000 fa0f 	bl	800ab40 <prvCopyDataToQueue>
 800a722:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d010      	beq.n	800a74e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a72c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72e:	3324      	adds	r3, #36	@ 0x24
 800a730:	4618      	mov	r0, r3
 800a732:	f001 f81b 	bl	800b76c <xTaskRemoveFromEventList>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d013      	beq.n	800a764 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a73c:	4b3f      	ldr	r3, [pc, #252]	@ (800a83c <xQueueGenericSend+0x200>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	e00a      	b.n	800a764 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a74e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a750:	2b00      	cmp	r3, #0
 800a752:	d007      	beq.n	800a764 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a754:	4b39      	ldr	r3, [pc, #228]	@ (800a83c <xQueueGenericSend+0x200>)
 800a756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a764:	f002 f8ba 	bl	800c8dc <vPortExitCritical>
				return pdPASS;
 800a768:	2301      	movs	r3, #1
 800a76a:	e063      	b.n	800a834 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d103      	bne.n	800a77a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a772:	f002 f8b3 	bl	800c8dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a776:	2300      	movs	r3, #0
 800a778:	e05c      	b.n	800a834 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a77a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d106      	bne.n	800a78e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a780:	f107 0314 	add.w	r3, r7, #20
 800a784:	4618      	mov	r0, r3
 800a786:	f001 f8b9 	bl	800b8fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a78a:	2301      	movs	r3, #1
 800a78c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a78e:	f002 f8a5 	bl	800c8dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a792:	f000 fd87 	bl	800b2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a796:	f002 f86f 	bl	800c878 <vPortEnterCritical>
 800a79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a79c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7a0:	b25b      	sxtb	r3, r3
 800a7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7a6:	d103      	bne.n	800a7b0 <xQueueGenericSend+0x174>
 800a7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7b6:	b25b      	sxtb	r3, r3
 800a7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7bc:	d103      	bne.n	800a7c6 <xQueueGenericSend+0x18a>
 800a7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7c6:	f002 f889 	bl	800c8dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7ca:	1d3a      	adds	r2, r7, #4
 800a7cc:	f107 0314 	add.w	r3, r7, #20
 800a7d0:	4611      	mov	r1, r2
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f001 f8a8 	bl	800b928 <xTaskCheckForTimeOut>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d124      	bne.n	800a828 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7e0:	f000 faa6 	bl	800ad30 <prvIsQueueFull>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d018      	beq.n	800a81c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ec:	3310      	adds	r3, #16
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 ff2a 	bl	800b64c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a7f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7fa:	f000 fa31 	bl	800ac60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a7fe:	f000 fd5f 	bl	800b2c0 <xTaskResumeAll>
 800a802:	4603      	mov	r3, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	f47f af7c 	bne.w	800a702 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a80a:	4b0c      	ldr	r3, [pc, #48]	@ (800a83c <xQueueGenericSend+0x200>)
 800a80c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a810:	601a      	str	r2, [r3, #0]
 800a812:	f3bf 8f4f 	dsb	sy
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	e772      	b.n	800a702 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a81c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a81e:	f000 fa1f 	bl	800ac60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a822:	f000 fd4d 	bl	800b2c0 <xTaskResumeAll>
 800a826:	e76c      	b.n	800a702 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a828:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a82a:	f000 fa19 	bl	800ac60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a82e:	f000 fd47 	bl	800b2c0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a832:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a834:	4618      	mov	r0, r3
 800a836:	3738      	adds	r7, #56	@ 0x38
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	e000ed04 	.word	0xe000ed04

0800a840 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b090      	sub	sp, #64	@ 0x40
 800a844:	af00      	add	r7, sp, #0
 800a846:	60f8      	str	r0, [r7, #12]
 800a848:	60b9      	str	r1, [r7, #8]
 800a84a:	607a      	str	r2, [r7, #4]
 800a84c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d10b      	bne.n	800a870 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85c:	f383 8811 	msr	BASEPRI, r3
 800a860:	f3bf 8f6f 	isb	sy
 800a864:	f3bf 8f4f 	dsb	sy
 800a868:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a86a:	bf00      	nop
 800a86c:	bf00      	nop
 800a86e:	e7fd      	b.n	800a86c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d103      	bne.n	800a87e <xQueueGenericSendFromISR+0x3e>
 800a876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d101      	bne.n	800a882 <xQueueGenericSendFromISR+0x42>
 800a87e:	2301      	movs	r3, #1
 800a880:	e000      	b.n	800a884 <xQueueGenericSendFromISR+0x44>
 800a882:	2300      	movs	r3, #0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10b      	bne.n	800a8a0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a89a:	bf00      	nop
 800a89c:	bf00      	nop
 800a89e:	e7fd      	b.n	800a89c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d103      	bne.n	800a8ae <xQueueGenericSendFromISR+0x6e>
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d101      	bne.n	800a8b2 <xQueueGenericSendFromISR+0x72>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e000      	b.n	800a8b4 <xQueueGenericSendFromISR+0x74>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d10b      	bne.n	800a8d0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a8b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8bc:	f383 8811 	msr	BASEPRI, r3
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	623b      	str	r3, [r7, #32]
}
 800a8ca:	bf00      	nop
 800a8cc:	bf00      	nop
 800a8ce:	e7fd      	b.n	800a8cc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8d0:	f002 f8b2 	bl	800ca38 <vPortValidateInterruptPriority>
	__asm volatile
 800a8d4:	f3ef 8211 	mrs	r2, BASEPRI
 800a8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8dc:	f383 8811 	msr	BASEPRI, r3
 800a8e0:	f3bf 8f6f 	isb	sy
 800a8e4:	f3bf 8f4f 	dsb	sy
 800a8e8:	61fa      	str	r2, [r7, #28]
 800a8ea:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a8ec:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8ee:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d302      	bcc.n	800a902 <xQueueGenericSendFromISR+0xc2>
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d12f      	bne.n	800a962 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a908:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a90c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a910:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a918:	f000 f912 	bl	800ab40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a91c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a924:	d112      	bne.n	800a94c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d016      	beq.n	800a95c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a92e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a930:	3324      	adds	r3, #36	@ 0x24
 800a932:	4618      	mov	r0, r3
 800a934:	f000 ff1a 	bl	800b76c <xTaskRemoveFromEventList>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d00e      	beq.n	800a95c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00b      	beq.n	800a95c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	601a      	str	r2, [r3, #0]
 800a94a:	e007      	b.n	800a95c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a94c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a950:	3301      	adds	r3, #1
 800a952:	b2db      	uxtb	r3, r3
 800a954:	b25a      	sxtb	r2, r3
 800a956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a958:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a95c:	2301      	movs	r3, #1
 800a95e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a960:	e001      	b.n	800a966 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a962:	2300      	movs	r3, #0
 800a964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a968:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f383 8811 	msr	BASEPRI, r3
}
 800a970:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a972:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a974:	4618      	mov	r0, r3
 800a976:	3740      	adds	r7, #64	@ 0x40
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b08c      	sub	sp, #48	@ 0x30
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a988:	2300      	movs	r3, #0
 800a98a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a992:	2b00      	cmp	r3, #0
 800a994:	d10b      	bne.n	800a9ae <xQueueReceive+0x32>
	__asm volatile
 800a996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a99a:	f383 8811 	msr	BASEPRI, r3
 800a99e:	f3bf 8f6f 	isb	sy
 800a9a2:	f3bf 8f4f 	dsb	sy
 800a9a6:	623b      	str	r3, [r7, #32]
}
 800a9a8:	bf00      	nop
 800a9aa:	bf00      	nop
 800a9ac:	e7fd      	b.n	800a9aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d103      	bne.n	800a9bc <xQueueReceive+0x40>
 800a9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <xQueueReceive+0x44>
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e000      	b.n	800a9c2 <xQueueReceive+0x46>
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d10b      	bne.n	800a9de <xQueueReceive+0x62>
	__asm volatile
 800a9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ca:	f383 8811 	msr	BASEPRI, r3
 800a9ce:	f3bf 8f6f 	isb	sy
 800a9d2:	f3bf 8f4f 	dsb	sy
 800a9d6:	61fb      	str	r3, [r7, #28]
}
 800a9d8:	bf00      	nop
 800a9da:	bf00      	nop
 800a9dc:	e7fd      	b.n	800a9da <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9de:	f001 f8e9 	bl	800bbb4 <xTaskGetSchedulerState>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d102      	bne.n	800a9ee <xQueueReceive+0x72>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d101      	bne.n	800a9f2 <xQueueReceive+0x76>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e000      	b.n	800a9f4 <xQueueReceive+0x78>
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10b      	bne.n	800aa10 <xQueueReceive+0x94>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	61bb      	str	r3, [r7, #24]
}
 800aa0a:	bf00      	nop
 800aa0c:	bf00      	nop
 800aa0e:	e7fd      	b.n	800aa0c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa10:	f001 ff32 	bl	800c878 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa18:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d01f      	beq.n	800aa60 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa20:	68b9      	ldr	r1, [r7, #8]
 800aa22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa24:	f000 f8f6 	bl	800ac14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2a:	1e5a      	subs	r2, r3, #1
 800aa2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa2e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa32:	691b      	ldr	r3, [r3, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d00f      	beq.n	800aa58 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3a:	3310      	adds	r3, #16
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	f000 fe95 	bl	800b76c <xTaskRemoveFromEventList>
 800aa42:	4603      	mov	r3, r0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d007      	beq.n	800aa58 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa48:	4b3c      	ldr	r3, [pc, #240]	@ (800ab3c <xQueueReceive+0x1c0>)
 800aa4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa4e:	601a      	str	r2, [r3, #0]
 800aa50:	f3bf 8f4f 	dsb	sy
 800aa54:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa58:	f001 ff40 	bl	800c8dc <vPortExitCritical>
				return pdPASS;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e069      	b.n	800ab34 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa66:	f001 ff39 	bl	800c8dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	e062      	b.n	800ab34 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d106      	bne.n	800aa82 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa74:	f107 0310 	add.w	r3, r7, #16
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 ff3f 	bl	800b8fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa82:	f001 ff2b 	bl	800c8dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa86:	f000 fc0d 	bl	800b2a4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa8a:	f001 fef5 	bl	800c878 <vPortEnterCritical>
 800aa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa94:	b25b      	sxtb	r3, r3
 800aa96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9a:	d103      	bne.n	800aaa4 <xQueueReceive+0x128>
 800aa9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaaa:	b25b      	sxtb	r3, r3
 800aaac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aab0:	d103      	bne.n	800aaba <xQueueReceive+0x13e>
 800aab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaba:	f001 ff0f 	bl	800c8dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aabe:	1d3a      	adds	r2, r7, #4
 800aac0:	f107 0310 	add.w	r3, r7, #16
 800aac4:	4611      	mov	r1, r2
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 ff2e 	bl	800b928 <xTaskCheckForTimeOut>
 800aacc:	4603      	mov	r3, r0
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d123      	bne.n	800ab1a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aad2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aad4:	f000 f916 	bl	800ad04 <prvIsQueueEmpty>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d017      	beq.n	800ab0e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae0:	3324      	adds	r3, #36	@ 0x24
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	4611      	mov	r1, r2
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fdb0 	bl	800b64c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aaec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aaee:	f000 f8b7 	bl	800ac60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaf2:	f000 fbe5 	bl	800b2c0 <xTaskResumeAll>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d189      	bne.n	800aa10 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aafc:	4b0f      	ldr	r3, [pc, #60]	@ (800ab3c <xQueueReceive+0x1c0>)
 800aafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab02:	601a      	str	r2, [r3, #0]
 800ab04:	f3bf 8f4f 	dsb	sy
 800ab08:	f3bf 8f6f 	isb	sy
 800ab0c:	e780      	b.n	800aa10 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab10:	f000 f8a6 	bl	800ac60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab14:	f000 fbd4 	bl	800b2c0 <xTaskResumeAll>
 800ab18:	e77a      	b.n	800aa10 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab1c:	f000 f8a0 	bl	800ac60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab20:	f000 fbce 	bl	800b2c0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab26:	f000 f8ed 	bl	800ad04 <prvIsQueueEmpty>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	f43f af6f 	beq.w	800aa10 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab32:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3730      	adds	r7, #48	@ 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	e000ed04 	.word	0xe000ed04

0800ab40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b086      	sub	sp, #24
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	60f8      	str	r0, [r7, #12]
 800ab48:	60b9      	str	r1, [r7, #8]
 800ab4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10d      	bne.n	800ab7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d14d      	bne.n	800ac02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	689b      	ldr	r3, [r3, #8]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f001 f840 	bl	800bbf0 <xTaskPriorityDisinherit>
 800ab70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2200      	movs	r2, #0
 800ab76:	609a      	str	r2, [r3, #8]
 800ab78:	e043      	b.n	800ac02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d119      	bne.n	800abb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6858      	ldr	r0, [r3, #4]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab88:	461a      	mov	r2, r3
 800ab8a:	68b9      	ldr	r1, [r7, #8]
 800ab8c:	f002 feda 	bl	800d944 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	685a      	ldr	r2, [r3, #4]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	441a      	add	r2, r3
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	685a      	ldr	r2, [r3, #4]
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d32b      	bcc.n	800ac02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	605a      	str	r2, [r3, #4]
 800abb2:	e026      	b.n	800ac02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	68d8      	ldr	r0, [r3, #12]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abbc:	461a      	mov	r2, r3
 800abbe:	68b9      	ldr	r1, [r7, #8]
 800abc0:	f002 fec0 	bl	800d944 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abcc:	425b      	negs	r3, r3
 800abce:	441a      	add	r2, r3
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	429a      	cmp	r2, r3
 800abde:	d207      	bcs.n	800abf0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	689a      	ldr	r2, [r3, #8]
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe8:	425b      	negs	r3, r3
 800abea:	441a      	add	r2, r3
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d105      	bne.n	800ac02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d002      	beq.n	800ac02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	3b01      	subs	r3, #1
 800ac00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	1c5a      	adds	r2, r3, #1
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac0a:	697b      	ldr	r3, [r7, #20]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3718      	adds	r7, #24
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d018      	beq.n	800ac58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68da      	ldr	r2, [r3, #12]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac2e:	441a      	add	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	68da      	ldr	r2, [r3, #12]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d303      	bcc.n	800ac48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681a      	ldr	r2, [r3, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	68d9      	ldr	r1, [r3, #12]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac50:	461a      	mov	r2, r3
 800ac52:	6838      	ldr	r0, [r7, #0]
 800ac54:	f002 fe76 	bl	800d944 <memcpy>
	}
}
 800ac58:	bf00      	nop
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b084      	sub	sp, #16
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac68:	f001 fe06 	bl	800c878 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac74:	e011      	b.n	800ac9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d012      	beq.n	800aca4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	3324      	adds	r3, #36	@ 0x24
 800ac82:	4618      	mov	r0, r3
 800ac84:	f000 fd72 	bl	800b76c <xTaskRemoveFromEventList>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac8e:	f000 feaf 	bl	800b9f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac92:	7bfb      	ldrb	r3, [r7, #15]
 800ac94:	3b01      	subs	r3, #1
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dce9      	bgt.n	800ac76 <prvUnlockQueue+0x16>
 800aca2:	e000      	b.n	800aca6 <prvUnlockQueue+0x46>
					break;
 800aca4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	22ff      	movs	r2, #255	@ 0xff
 800acaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800acae:	f001 fe15 	bl	800c8dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acb2:	f001 fde1 	bl	800c878 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acbe:	e011      	b.n	800ace4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d012      	beq.n	800acee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3310      	adds	r3, #16
 800accc:	4618      	mov	r0, r3
 800acce:	f000 fd4d 	bl	800b76c <xTaskRemoveFromEventList>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acd8:	f000 fe8a 	bl	800b9f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acdc:	7bbb      	ldrb	r3, [r7, #14]
 800acde:	3b01      	subs	r3, #1
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ace4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	dce9      	bgt.n	800acc0 <prvUnlockQueue+0x60>
 800acec:	e000      	b.n	800acf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	22ff      	movs	r2, #255	@ 0xff
 800acf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800acf8:	f001 fdf0 	bl	800c8dc <vPortExitCritical>
}
 800acfc:	bf00      	nop
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad0c:	f001 fdb4 	bl	800c878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d102      	bne.n	800ad1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	60fb      	str	r3, [r7, #12]
 800ad1c:	e001      	b.n	800ad22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad22:	f001 fddb 	bl	800c8dc <vPortExitCritical>

	return xReturn;
 800ad26:	68fb      	ldr	r3, [r7, #12]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b084      	sub	sp, #16
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad38:	f001 fd9e 	bl	800c878 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d102      	bne.n	800ad4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad48:	2301      	movs	r3, #1
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	e001      	b.n	800ad52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad52:	f001 fdc3 	bl	800c8dc <vPortExitCritical>

	return xReturn;
 800ad56:	68fb      	ldr	r3, [r7, #12]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3710      	adds	r7, #16
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60fb      	str	r3, [r7, #12]
 800ad6e:	e014      	b.n	800ad9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad70:	4a0f      	ldr	r2, [pc, #60]	@ (800adb0 <vQueueAddToRegistry+0x50>)
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10b      	bne.n	800ad94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad7c:	490c      	ldr	r1, [pc, #48]	@ (800adb0 <vQueueAddToRegistry+0x50>)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	683a      	ldr	r2, [r7, #0]
 800ad82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad86:	4a0a      	ldr	r2, [pc, #40]	@ (800adb0 <vQueueAddToRegistry+0x50>)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	00db      	lsls	r3, r3, #3
 800ad8c:	4413      	add	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad92:	e006      	b.n	800ada2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	3301      	adds	r3, #1
 800ad98:	60fb      	str	r3, [r7, #12]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2b07      	cmp	r3, #7
 800ad9e:	d9e7      	bls.n	800ad70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr
 800adae:	bf00      	nop
 800adb0:	20000b00 	.word	0x20000b00

0800adb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b086      	sub	sp, #24
 800adb8:	af00      	add	r7, sp, #0
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800adc4:	f001 fd58 	bl	800c878 <vPortEnterCritical>
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adce:	b25b      	sxtb	r3, r3
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d103      	bne.n	800adde <vQueueWaitForMessageRestricted+0x2a>
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2200      	movs	r2, #0
 800adda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ade4:	b25b      	sxtb	r3, r3
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adea:	d103      	bne.n	800adf4 <vQueueWaitForMessageRestricted+0x40>
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	2200      	movs	r2, #0
 800adf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800adf4:	f001 fd72 	bl	800c8dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d106      	bne.n	800ae0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	3324      	adds	r3, #36	@ 0x24
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fc83 	bl	800b714 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae0e:	6978      	ldr	r0, [r7, #20]
 800ae10:	f7ff ff26 	bl	800ac60 <prvUnlockQueue>
	}
 800ae14:	bf00      	nop
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08e      	sub	sp, #56	@ 0x38
 800ae20:	af04      	add	r7, sp, #16
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10b      	bne.n	800ae48 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae34:	f383 8811 	msr	BASEPRI, r3
 800ae38:	f3bf 8f6f 	isb	sy
 800ae3c:	f3bf 8f4f 	dsb	sy
 800ae40:	623b      	str	r3, [r7, #32]
}
 800ae42:	bf00      	nop
 800ae44:	bf00      	nop
 800ae46:	e7fd      	b.n	800ae44 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d10b      	bne.n	800ae66 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae52:	f383 8811 	msr	BASEPRI, r3
 800ae56:	f3bf 8f6f 	isb	sy
 800ae5a:	f3bf 8f4f 	dsb	sy
 800ae5e:	61fb      	str	r3, [r7, #28]
}
 800ae60:	bf00      	nop
 800ae62:	bf00      	nop
 800ae64:	e7fd      	b.n	800ae62 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae66:	235c      	movs	r3, #92	@ 0x5c
 800ae68:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	2b5c      	cmp	r3, #92	@ 0x5c
 800ae6e:	d00b      	beq.n	800ae88 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae74:	f383 8811 	msr	BASEPRI, r3
 800ae78:	f3bf 8f6f 	isb	sy
 800ae7c:	f3bf 8f4f 	dsb	sy
 800ae80:	61bb      	str	r3, [r7, #24]
}
 800ae82:	bf00      	nop
 800ae84:	bf00      	nop
 800ae86:	e7fd      	b.n	800ae84 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae88:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d01e      	beq.n	800aece <xTaskCreateStatic+0xb2>
 800ae90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d01b      	beq.n	800aece <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae98:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae9c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae9e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aea8:	2300      	movs	r3, #0
 800aeaa:	9303      	str	r3, [sp, #12]
 800aeac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeae:	9302      	str	r3, [sp, #8]
 800aeb0:	f107 0314 	add.w	r3, r7, #20
 800aeb4:	9301      	str	r3, [sp, #4]
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	9300      	str	r3, [sp, #0]
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	687a      	ldr	r2, [r7, #4]
 800aebe:	68b9      	ldr	r1, [r7, #8]
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f000 f850 	bl	800af66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aec6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aec8:	f000 f8de 	bl	800b088 <prvAddNewTaskToReadyList>
 800aecc:	e001      	b.n	800aed2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aece:	2300      	movs	r3, #0
 800aed0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aed2:	697b      	ldr	r3, [r7, #20]
	}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3728      	adds	r7, #40	@ 0x28
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08c      	sub	sp, #48	@ 0x30
 800aee0:	af04      	add	r7, sp, #16
 800aee2:	60f8      	str	r0, [r7, #12]
 800aee4:	60b9      	str	r1, [r7, #8]
 800aee6:	603b      	str	r3, [r7, #0]
 800aee8:	4613      	mov	r3, r2
 800aeea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aeec:	88fb      	ldrh	r3, [r7, #6]
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4618      	mov	r0, r3
 800aef2:	f001 fde3 	bl	800cabc <pvPortMalloc>
 800aef6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d00e      	beq.n	800af1c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aefe:	205c      	movs	r0, #92	@ 0x5c
 800af00:	f001 fddc 	bl	800cabc <pvPortMalloc>
 800af04:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d003      	beq.n	800af14 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	697a      	ldr	r2, [r7, #20]
 800af10:	631a      	str	r2, [r3, #48]	@ 0x30
 800af12:	e005      	b.n	800af20 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af14:	6978      	ldr	r0, [r7, #20]
 800af16:	f001 fe9f 	bl	800cc58 <vPortFree>
 800af1a:	e001      	b.n	800af20 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d017      	beq.n	800af56 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af26:	69fb      	ldr	r3, [r7, #28]
 800af28:	2200      	movs	r2, #0
 800af2a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af2e:	88fa      	ldrh	r2, [r7, #6]
 800af30:	2300      	movs	r3, #0
 800af32:	9303      	str	r3, [sp, #12]
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af3a:	9301      	str	r3, [sp, #4]
 800af3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	68b9      	ldr	r1, [r7, #8]
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f80e 	bl	800af66 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af4a:	69f8      	ldr	r0, [r7, #28]
 800af4c:	f000 f89c 	bl	800b088 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af50:	2301      	movs	r3, #1
 800af52:	61bb      	str	r3, [r7, #24]
 800af54:	e002      	b.n	800af5c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af56:	f04f 33ff 	mov.w	r3, #4294967295
 800af5a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af5c:	69bb      	ldr	r3, [r7, #24]
	}
 800af5e:	4618      	mov	r0, r3
 800af60:	3720      	adds	r7, #32
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}

0800af66 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b088      	sub	sp, #32
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	60f8      	str	r0, [r7, #12]
 800af6e:	60b9      	str	r1, [r7, #8]
 800af70:	607a      	str	r2, [r7, #4]
 800af72:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af76:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	461a      	mov	r2, r3
 800af7e:	21a5      	movs	r1, #165	@ 0xa5
 800af80:	f002 fcb4 	bl	800d8ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af8e:	3b01      	subs	r3, #1
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	f023 0307 	bic.w	r3, r3, #7
 800af9c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af9e:	69bb      	ldr	r3, [r7, #24]
 800afa0:	f003 0307 	and.w	r3, r3, #7
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00b      	beq.n	800afc0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800afa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afac:	f383 8811 	msr	BASEPRI, r3
 800afb0:	f3bf 8f6f 	isb	sy
 800afb4:	f3bf 8f4f 	dsb	sy
 800afb8:	617b      	str	r3, [r7, #20]
}
 800afba:	bf00      	nop
 800afbc:	bf00      	nop
 800afbe:	e7fd      	b.n	800afbc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d01f      	beq.n	800b006 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afc6:	2300      	movs	r3, #0
 800afc8:	61fb      	str	r3, [r7, #28]
 800afca:	e012      	b.n	800aff2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afcc:	68ba      	ldr	r2, [r7, #8]
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	4413      	add	r3, r2
 800afd2:	7819      	ldrb	r1, [r3, #0]
 800afd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	4413      	add	r3, r2
 800afda:	3334      	adds	r3, #52	@ 0x34
 800afdc:	460a      	mov	r2, r1
 800afde:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800afe0:	68ba      	ldr	r2, [r7, #8]
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	4413      	add	r3, r2
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d006      	beq.n	800affa <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afec:	69fb      	ldr	r3, [r7, #28]
 800afee:	3301      	adds	r3, #1
 800aff0:	61fb      	str	r3, [r7, #28]
 800aff2:	69fb      	ldr	r3, [r7, #28]
 800aff4:	2b0f      	cmp	r3, #15
 800aff6:	d9e9      	bls.n	800afcc <prvInitialiseNewTask+0x66>
 800aff8:	e000      	b.n	800affc <prvInitialiseNewTask+0x96>
			{
				break;
 800affa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800affc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b004:	e003      	b.n	800b00e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b010:	2b37      	cmp	r3, #55	@ 0x37
 800b012:	d901      	bls.n	800b018 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b014:	2337      	movs	r3, #55	@ 0x37
 800b016:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b01c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b01e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b020:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b022:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b026:	2200      	movs	r2, #0
 800b028:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02c:	3304      	adds	r3, #4
 800b02e:	4618      	mov	r0, r3
 800b030:	f7ff f966 	bl	800a300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b036:	3318      	adds	r3, #24
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff f961 	bl	800a300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b042:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b046:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b04c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b052:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b054:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b056:	2200      	movs	r2, #0
 800b058:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05c:	2200      	movs	r2, #0
 800b05e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b062:	683a      	ldr	r2, [r7, #0]
 800b064:	68f9      	ldr	r1, [r7, #12]
 800b066:	69b8      	ldr	r0, [r7, #24]
 800b068:	f001 fad8 	bl	800c61c <pxPortInitialiseStack>
 800b06c:	4602      	mov	r2, r0
 800b06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b070:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d002      	beq.n	800b07e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b07a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b07c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b07e:	bf00      	nop
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
	...

0800b088 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b090:	f001 fbf2 	bl	800c878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b094:	4b2d      	ldr	r3, [pc, #180]	@ (800b14c <prvAddNewTaskToReadyList+0xc4>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	3301      	adds	r3, #1
 800b09a:	4a2c      	ldr	r2, [pc, #176]	@ (800b14c <prvAddNewTaskToReadyList+0xc4>)
 800b09c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b09e:	4b2c      	ldr	r3, [pc, #176]	@ (800b150 <prvAddNewTaskToReadyList+0xc8>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d109      	bne.n	800b0ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b150 <prvAddNewTaskToReadyList+0xc8>)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0ac:	4b27      	ldr	r3, [pc, #156]	@ (800b14c <prvAddNewTaskToReadyList+0xc4>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d110      	bne.n	800b0d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0b4:	f000 fcc0 	bl	800ba38 <prvInitialiseTaskLists>
 800b0b8:	e00d      	b.n	800b0d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0ba:	4b26      	ldr	r3, [pc, #152]	@ (800b154 <prvAddNewTaskToReadyList+0xcc>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d109      	bne.n	800b0d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b0c2:	4b23      	ldr	r3, [pc, #140]	@ (800b150 <prvAddNewTaskToReadyList+0xc8>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d802      	bhi.n	800b0d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b0d0:	4a1f      	ldr	r2, [pc, #124]	@ (800b150 <prvAddNewTaskToReadyList+0xc8>)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b0d6:	4b20      	ldr	r3, [pc, #128]	@ (800b158 <prvAddNewTaskToReadyList+0xd0>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3301      	adds	r3, #1
 800b0dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b158 <prvAddNewTaskToReadyList+0xd0>)
 800b0de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b158 <prvAddNewTaskToReadyList+0xd0>)
 800b0e2:	681a      	ldr	r2, [r3, #0]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ec:	4b1b      	ldr	r3, [pc, #108]	@ (800b15c <prvAddNewTaskToReadyList+0xd4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d903      	bls.n	800b0fc <prvAddNewTaskToReadyList+0x74>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f8:	4a18      	ldr	r2, [pc, #96]	@ (800b15c <prvAddNewTaskToReadyList+0xd4>)
 800b0fa:	6013      	str	r3, [r2, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	4a15      	ldr	r2, [pc, #84]	@ (800b160 <prvAddNewTaskToReadyList+0xd8>)
 800b10a:	441a      	add	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	3304      	adds	r3, #4
 800b110:	4619      	mov	r1, r3
 800b112:	4610      	mov	r0, r2
 800b114:	f7ff f901 	bl	800a31a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b118:	f001 fbe0 	bl	800c8dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b11c:	4b0d      	ldr	r3, [pc, #52]	@ (800b154 <prvAddNewTaskToReadyList+0xcc>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d00e      	beq.n	800b142 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b124:	4b0a      	ldr	r3, [pc, #40]	@ (800b150 <prvAddNewTaskToReadyList+0xc8>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b12e:	429a      	cmp	r2, r3
 800b130:	d207      	bcs.n	800b142 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b132:	4b0c      	ldr	r3, [pc, #48]	@ (800b164 <prvAddNewTaskToReadyList+0xdc>)
 800b134:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b142:	bf00      	nop
 800b144:	3708      	adds	r7, #8
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20001014 	.word	0x20001014
 800b150:	20000b40 	.word	0x20000b40
 800b154:	20001020 	.word	0x20001020
 800b158:	20001030 	.word	0x20001030
 800b15c:	2000101c 	.word	0x2000101c
 800b160:	20000b44 	.word	0x20000b44
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b170:	2300      	movs	r3, #0
 800b172:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d018      	beq.n	800b1ac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b17a:	4b14      	ldr	r3, [pc, #80]	@ (800b1cc <vTaskDelay+0x64>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d00b      	beq.n	800b19a <vTaskDelay+0x32>
	__asm volatile
 800b182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b186:	f383 8811 	msr	BASEPRI, r3
 800b18a:	f3bf 8f6f 	isb	sy
 800b18e:	f3bf 8f4f 	dsb	sy
 800b192:	60bb      	str	r3, [r7, #8]
}
 800b194:	bf00      	nop
 800b196:	bf00      	nop
 800b198:	e7fd      	b.n	800b196 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b19a:	f000 f883 	bl	800b2a4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fdad 	bl	800bd00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1a6:	f000 f88b 	bl	800b2c0 <xTaskResumeAll>
 800b1aa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d107      	bne.n	800b1c2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1b2:	4b07      	ldr	r3, [pc, #28]	@ (800b1d0 <vTaskDelay+0x68>)
 800b1b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b1c2:	bf00      	nop
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}
 800b1ca:	bf00      	nop
 800b1cc:	2000103c 	.word	0x2000103c
 800b1d0:	e000ed04 	.word	0xe000ed04

0800b1d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b08a      	sub	sp, #40	@ 0x28
 800b1d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1de:	2300      	movs	r3, #0
 800b1e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1e2:	463a      	mov	r2, r7
 800b1e4:	1d39      	adds	r1, r7, #4
 800b1e6:	f107 0308 	add.w	r3, r7, #8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7fe fdc0 	bl	8009d70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	68ba      	ldr	r2, [r7, #8]
 800b1f6:	9202      	str	r2, [sp, #8]
 800b1f8:	9301      	str	r3, [sp, #4]
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	9300      	str	r3, [sp, #0]
 800b1fe:	2300      	movs	r3, #0
 800b200:	460a      	mov	r2, r1
 800b202:	4922      	ldr	r1, [pc, #136]	@ (800b28c <vTaskStartScheduler+0xb8>)
 800b204:	4822      	ldr	r0, [pc, #136]	@ (800b290 <vTaskStartScheduler+0xbc>)
 800b206:	f7ff fe09 	bl	800ae1c <xTaskCreateStatic>
 800b20a:	4603      	mov	r3, r0
 800b20c:	4a21      	ldr	r2, [pc, #132]	@ (800b294 <vTaskStartScheduler+0xc0>)
 800b20e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b210:	4b20      	ldr	r3, [pc, #128]	@ (800b294 <vTaskStartScheduler+0xc0>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b218:	2301      	movs	r3, #1
 800b21a:	617b      	str	r3, [r7, #20]
 800b21c:	e001      	b.n	800b222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	2b01      	cmp	r3, #1
 800b226:	d102      	bne.n	800b22e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b228:	f000 fdbe 	bl	800bda8 <xTimerCreateTimerTask>
 800b22c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d116      	bne.n	800b262 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b238:	f383 8811 	msr	BASEPRI, r3
 800b23c:	f3bf 8f6f 	isb	sy
 800b240:	f3bf 8f4f 	dsb	sy
 800b244:	613b      	str	r3, [r7, #16]
}
 800b246:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b248:	4b13      	ldr	r3, [pc, #76]	@ (800b298 <vTaskStartScheduler+0xc4>)
 800b24a:	f04f 32ff 	mov.w	r2, #4294967295
 800b24e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b250:	4b12      	ldr	r3, [pc, #72]	@ (800b29c <vTaskStartScheduler+0xc8>)
 800b252:	2201      	movs	r2, #1
 800b254:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b256:	4b12      	ldr	r3, [pc, #72]	@ (800b2a0 <vTaskStartScheduler+0xcc>)
 800b258:	2200      	movs	r2, #0
 800b25a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b25c:	f001 fa68 	bl	800c730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b260:	e00f      	b.n	800b282 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b268:	d10b      	bne.n	800b282 <vTaskStartScheduler+0xae>
	__asm volatile
 800b26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b26e:	f383 8811 	msr	BASEPRI, r3
 800b272:	f3bf 8f6f 	isb	sy
 800b276:	f3bf 8f4f 	dsb	sy
 800b27a:	60fb      	str	r3, [r7, #12]
}
 800b27c:	bf00      	nop
 800b27e:	bf00      	nop
 800b280:	e7fd      	b.n	800b27e <vTaskStartScheduler+0xaa>
}
 800b282:	bf00      	nop
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop
 800b28c:	0800db30 	.word	0x0800db30
 800b290:	0800ba09 	.word	0x0800ba09
 800b294:	20001038 	.word	0x20001038
 800b298:	20001034 	.word	0x20001034
 800b29c:	20001020 	.word	0x20001020
 800b2a0:	20001018 	.word	0x20001018

0800b2a4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2a8:	4b04      	ldr	r3, [pc, #16]	@ (800b2bc <vTaskSuspendAll+0x18>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	3301      	adds	r3, #1
 800b2ae:	4a03      	ldr	r2, [pc, #12]	@ (800b2bc <vTaskSuspendAll+0x18>)
 800b2b0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b2b2:	bf00      	nop
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ba:	4770      	bx	lr
 800b2bc:	2000103c 	.word	0x2000103c

0800b2c0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2ce:	4b42      	ldr	r3, [pc, #264]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d10b      	bne.n	800b2ee <xTaskResumeAll+0x2e>
	__asm volatile
 800b2d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2da:	f383 8811 	msr	BASEPRI, r3
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	f3bf 8f4f 	dsb	sy
 800b2e6:	603b      	str	r3, [r7, #0]
}
 800b2e8:	bf00      	nop
 800b2ea:	bf00      	nop
 800b2ec:	e7fd      	b.n	800b2ea <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2ee:	f001 fac3 	bl	800c878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2f2:	4b39      	ldr	r3, [pc, #228]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	4a37      	ldr	r2, [pc, #220]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2fc:	4b36      	ldr	r3, [pc, #216]	@ (800b3d8 <xTaskResumeAll+0x118>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d162      	bne.n	800b3ca <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b304:	4b35      	ldr	r3, [pc, #212]	@ (800b3dc <xTaskResumeAll+0x11c>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d05e      	beq.n	800b3ca <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b30c:	e02f      	b.n	800b36e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30e:	4b34      	ldr	r3, [pc, #208]	@ (800b3e0 <xTaskResumeAll+0x120>)
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	3318      	adds	r3, #24
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff f85a 	bl	800a3d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3304      	adds	r3, #4
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff f855 	bl	800a3d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b32e:	4b2d      	ldr	r3, [pc, #180]	@ (800b3e4 <xTaskResumeAll+0x124>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	429a      	cmp	r2, r3
 800b334:	d903      	bls.n	800b33e <xTaskResumeAll+0x7e>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33a:	4a2a      	ldr	r2, [pc, #168]	@ (800b3e4 <xTaskResumeAll+0x124>)
 800b33c:	6013      	str	r3, [r2, #0]
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b342:	4613      	mov	r3, r2
 800b344:	009b      	lsls	r3, r3, #2
 800b346:	4413      	add	r3, r2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4a27      	ldr	r2, [pc, #156]	@ (800b3e8 <xTaskResumeAll+0x128>)
 800b34c:	441a      	add	r2, r3
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	3304      	adds	r3, #4
 800b352:	4619      	mov	r1, r3
 800b354:	4610      	mov	r0, r2
 800b356:	f7fe ffe0 	bl	800a31a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b35e:	4b23      	ldr	r3, [pc, #140]	@ (800b3ec <xTaskResumeAll+0x12c>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b364:	429a      	cmp	r2, r3
 800b366:	d302      	bcc.n	800b36e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b368:	4b21      	ldr	r3, [pc, #132]	@ (800b3f0 <xTaskResumeAll+0x130>)
 800b36a:	2201      	movs	r2, #1
 800b36c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b36e:	4b1c      	ldr	r3, [pc, #112]	@ (800b3e0 <xTaskResumeAll+0x120>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d1cb      	bne.n	800b30e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b37c:	f000 fbfa 	bl	800bb74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b380:	4b1c      	ldr	r3, [pc, #112]	@ (800b3f4 <xTaskResumeAll+0x134>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d010      	beq.n	800b3ae <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b38c:	f000 f846 	bl	800b41c <xTaskIncrementTick>
 800b390:	4603      	mov	r3, r0
 800b392:	2b00      	cmp	r3, #0
 800b394:	d002      	beq.n	800b39c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b396:	4b16      	ldr	r3, [pc, #88]	@ (800b3f0 <xTaskResumeAll+0x130>)
 800b398:	2201      	movs	r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	3b01      	subs	r3, #1
 800b3a0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d1f1      	bne.n	800b38c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b3a8:	4b12      	ldr	r3, [pc, #72]	@ (800b3f4 <xTaskResumeAll+0x134>)
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3ae:	4b10      	ldr	r3, [pc, #64]	@ (800b3f0 <xTaskResumeAll+0x130>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d009      	beq.n	800b3ca <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b3ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f8 <xTaskResumeAll+0x138>)
 800b3bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	f3bf 8f4f 	dsb	sy
 800b3c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3ca:	f001 fa87 	bl	800c8dc <vPortExitCritical>

	return xAlreadyYielded;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	2000103c 	.word	0x2000103c
 800b3dc:	20001014 	.word	0x20001014
 800b3e0:	20000fd4 	.word	0x20000fd4
 800b3e4:	2000101c 	.word	0x2000101c
 800b3e8:	20000b44 	.word	0x20000b44
 800b3ec:	20000b40 	.word	0x20000b40
 800b3f0:	20001028 	.word	0x20001028
 800b3f4:	20001024 	.word	0x20001024
 800b3f8:	e000ed04 	.word	0xe000ed04

0800b3fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b402:	4b05      	ldr	r3, [pc, #20]	@ (800b418 <xTaskGetTickCount+0x1c>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b408:	687b      	ldr	r3, [r7, #4]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	370c      	adds	r7, #12
 800b40e:	46bd      	mov	sp, r7
 800b410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b414:	4770      	bx	lr
 800b416:	bf00      	nop
 800b418:	20001018 	.word	0x20001018

0800b41c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b086      	sub	sp, #24
 800b420:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b422:	2300      	movs	r3, #0
 800b424:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b426:	4b4f      	ldr	r3, [pc, #316]	@ (800b564 <xTaskIncrementTick+0x148>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f040 8090 	bne.w	800b550 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b430:	4b4d      	ldr	r3, [pc, #308]	@ (800b568 <xTaskIncrementTick+0x14c>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	3301      	adds	r3, #1
 800b436:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b438:	4a4b      	ldr	r2, [pc, #300]	@ (800b568 <xTaskIncrementTick+0x14c>)
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d121      	bne.n	800b488 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b444:	4b49      	ldr	r3, [pc, #292]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00b      	beq.n	800b466 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	603b      	str	r3, [r7, #0]
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <xTaskIncrementTick+0x46>
 800b466:	4b41      	ldr	r3, [pc, #260]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	4b40      	ldr	r3, [pc, #256]	@ (800b570 <xTaskIncrementTick+0x154>)
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	4a3e      	ldr	r2, [pc, #248]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b472:	6013      	str	r3, [r2, #0]
 800b474:	4a3e      	ldr	r2, [pc, #248]	@ (800b570 <xTaskIncrementTick+0x154>)
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6013      	str	r3, [r2, #0]
 800b47a:	4b3e      	ldr	r3, [pc, #248]	@ (800b574 <xTaskIncrementTick+0x158>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	4a3c      	ldr	r2, [pc, #240]	@ (800b574 <xTaskIncrementTick+0x158>)
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	f000 fb76 	bl	800bb74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b488:	4b3b      	ldr	r3, [pc, #236]	@ (800b578 <xTaskIncrementTick+0x15c>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	693a      	ldr	r2, [r7, #16]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d349      	bcc.n	800b526 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b492:	4b36      	ldr	r3, [pc, #216]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d104      	bne.n	800b4a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b49c:	4b36      	ldr	r3, [pc, #216]	@ (800b578 <xTaskIncrementTick+0x15c>)
 800b49e:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a2:	601a      	str	r2, [r3, #0]
					break;
 800b4a4:	e03f      	b.n	800b526 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a6:	4b31      	ldr	r3, [pc, #196]	@ (800b56c <xTaskIncrementTick+0x150>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4b6:	693a      	ldr	r2, [r7, #16]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d203      	bcs.n	800b4c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4be:	4a2e      	ldr	r2, [pc, #184]	@ (800b578 <xTaskIncrementTick+0x15c>)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4c4:	e02f      	b.n	800b526 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe ff82 	bl	800a3d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d004      	beq.n	800b4e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	3318      	adds	r3, #24
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f7fe ff79 	bl	800a3d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e6:	4b25      	ldr	r3, [pc, #148]	@ (800b57c <xTaskIncrementTick+0x160>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	429a      	cmp	r2, r3
 800b4ec:	d903      	bls.n	800b4f6 <xTaskIncrementTick+0xda>
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f2:	4a22      	ldr	r2, [pc, #136]	@ (800b57c <xTaskIncrementTick+0x160>)
 800b4f4:	6013      	str	r3, [r2, #0]
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4a1f      	ldr	r2, [pc, #124]	@ (800b580 <xTaskIncrementTick+0x164>)
 800b504:	441a      	add	r2, r3
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	3304      	adds	r3, #4
 800b50a:	4619      	mov	r1, r3
 800b50c:	4610      	mov	r0, r2
 800b50e:	f7fe ff04 	bl	800a31a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b516:	4b1b      	ldr	r3, [pc, #108]	@ (800b584 <xTaskIncrementTick+0x168>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d3b8      	bcc.n	800b492 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b520:	2301      	movs	r3, #1
 800b522:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b524:	e7b5      	b.n	800b492 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b526:	4b17      	ldr	r3, [pc, #92]	@ (800b584 <xTaskIncrementTick+0x168>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b52c:	4914      	ldr	r1, [pc, #80]	@ (800b580 <xTaskIncrementTick+0x164>)
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	440b      	add	r3, r1
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d901      	bls.n	800b542 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b53e:	2301      	movs	r3, #1
 800b540:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b542:	4b11      	ldr	r3, [pc, #68]	@ (800b588 <xTaskIncrementTick+0x16c>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d007      	beq.n	800b55a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b54a:	2301      	movs	r3, #1
 800b54c:	617b      	str	r3, [r7, #20]
 800b54e:	e004      	b.n	800b55a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b550:	4b0e      	ldr	r3, [pc, #56]	@ (800b58c <xTaskIncrementTick+0x170>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3301      	adds	r3, #1
 800b556:	4a0d      	ldr	r2, [pc, #52]	@ (800b58c <xTaskIncrementTick+0x170>)
 800b558:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b55a:	697b      	ldr	r3, [r7, #20]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	2000103c 	.word	0x2000103c
 800b568:	20001018 	.word	0x20001018
 800b56c:	20000fcc 	.word	0x20000fcc
 800b570:	20000fd0 	.word	0x20000fd0
 800b574:	2000102c 	.word	0x2000102c
 800b578:	20001034 	.word	0x20001034
 800b57c:	2000101c 	.word	0x2000101c
 800b580:	20000b44 	.word	0x20000b44
 800b584:	20000b40 	.word	0x20000b40
 800b588:	20001028 	.word	0x20001028
 800b58c:	20001024 	.word	0x20001024

0800b590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b590:	b480      	push	{r7}
 800b592:	b085      	sub	sp, #20
 800b594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b596:	4b28      	ldr	r3, [pc, #160]	@ (800b638 <vTaskSwitchContext+0xa8>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b59e:	4b27      	ldr	r3, [pc, #156]	@ (800b63c <vTaskSwitchContext+0xac>)
 800b5a0:	2201      	movs	r2, #1
 800b5a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5a4:	e042      	b.n	800b62c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b5a6:	4b25      	ldr	r3, [pc, #148]	@ (800b63c <vTaskSwitchContext+0xac>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ac:	4b24      	ldr	r3, [pc, #144]	@ (800b640 <vTaskSwitchContext+0xb0>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	60fb      	str	r3, [r7, #12]
 800b5b2:	e011      	b.n	800b5d8 <vTaskSwitchContext+0x48>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10b      	bne.n	800b5d2 <vTaskSwitchContext+0x42>
	__asm volatile
 800b5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5be:	f383 8811 	msr	BASEPRI, r3
 800b5c2:	f3bf 8f6f 	isb	sy
 800b5c6:	f3bf 8f4f 	dsb	sy
 800b5ca:	607b      	str	r3, [r7, #4]
}
 800b5cc:	bf00      	nop
 800b5ce:	bf00      	nop
 800b5d0:	e7fd      	b.n	800b5ce <vTaskSwitchContext+0x3e>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	3b01      	subs	r3, #1
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	491a      	ldr	r1, [pc, #104]	@ (800b644 <vTaskSwitchContext+0xb4>)
 800b5da:	68fa      	ldr	r2, [r7, #12]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	009b      	lsls	r3, r3, #2
 800b5e4:	440b      	add	r3, r1
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d0e3      	beq.n	800b5b4 <vTaskSwitchContext+0x24>
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4413      	add	r3, r2
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	4a13      	ldr	r2, [pc, #76]	@ (800b644 <vTaskSwitchContext+0xb4>)
 800b5f8:	4413      	add	r3, r2
 800b5fa:	60bb      	str	r3, [r7, #8]
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	605a      	str	r2, [r3, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	685a      	ldr	r2, [r3, #4]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	3308      	adds	r3, #8
 800b60e:	429a      	cmp	r2, r3
 800b610:	d104      	bne.n	800b61c <vTaskSwitchContext+0x8c>
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	685a      	ldr	r2, [r3, #4]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	605a      	str	r2, [r3, #4]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	68db      	ldr	r3, [r3, #12]
 800b622:	4a09      	ldr	r2, [pc, #36]	@ (800b648 <vTaskSwitchContext+0xb8>)
 800b624:	6013      	str	r3, [r2, #0]
 800b626:	4a06      	ldr	r2, [pc, #24]	@ (800b640 <vTaskSwitchContext+0xb0>)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6013      	str	r3, [r2, #0]
}
 800b62c:	bf00      	nop
 800b62e:	3714      	adds	r7, #20
 800b630:	46bd      	mov	sp, r7
 800b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b636:	4770      	bx	lr
 800b638:	2000103c 	.word	0x2000103c
 800b63c:	20001028 	.word	0x20001028
 800b640:	2000101c 	.word	0x2000101c
 800b644:	20000b44 	.word	0x20000b44
 800b648:	20000b40 	.word	0x20000b40

0800b64c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d10b      	bne.n	800b674 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b660:	f383 8811 	msr	BASEPRI, r3
 800b664:	f3bf 8f6f 	isb	sy
 800b668:	f3bf 8f4f 	dsb	sy
 800b66c:	60fb      	str	r3, [r7, #12]
}
 800b66e:	bf00      	nop
 800b670:	bf00      	nop
 800b672:	e7fd      	b.n	800b670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b674:	4b07      	ldr	r3, [pc, #28]	@ (800b694 <vTaskPlaceOnEventList+0x48>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	3318      	adds	r3, #24
 800b67a:	4619      	mov	r1, r3
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7fe fe70 	bl	800a362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b682:	2101      	movs	r1, #1
 800b684:	6838      	ldr	r0, [r7, #0]
 800b686:	f000 fb3b 	bl	800bd00 <prvAddCurrentTaskToDelayedList>
}
 800b68a:	bf00      	nop
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	20000b40 	.word	0x20000b40

0800b698 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b086      	sub	sp, #24
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	60f8      	str	r0, [r7, #12]
 800b6a0:	60b9      	str	r1, [r7, #8]
 800b6a2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d10b      	bne.n	800b6c2 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800b6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ae:	f383 8811 	msr	BASEPRI, r3
 800b6b2:	f3bf 8f6f 	isb	sy
 800b6b6:	f3bf 8f4f 	dsb	sy
 800b6ba:	617b      	str	r3, [r7, #20]
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	e7fd      	b.n	800b6be <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b6c2:	4b12      	ldr	r3, [pc, #72]	@ (800b70c <vTaskPlaceOnUnorderedEventList+0x74>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d10b      	bne.n	800b6e2 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800b6ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ce:	f383 8811 	msr	BASEPRI, r3
 800b6d2:	f3bf 8f6f 	isb	sy
 800b6d6:	f3bf 8f4f 	dsb	sy
 800b6da:	613b      	str	r3, [r7, #16]
}
 800b6dc:	bf00      	nop
 800b6de:	bf00      	nop
 800b6e0:	e7fd      	b.n	800b6de <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b6e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b710 <vTaskPlaceOnUnorderedEventList+0x78>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	68ba      	ldr	r2, [r7, #8]
 800b6e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800b6ec:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6ee:	4b08      	ldr	r3, [pc, #32]	@ (800b710 <vTaskPlaceOnUnorderedEventList+0x78>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	3318      	adds	r3, #24
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	68f8      	ldr	r0, [r7, #12]
 800b6f8:	f7fe fe0f 	bl	800a31a <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6fc:	2101      	movs	r1, #1
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fafe 	bl	800bd00 <prvAddCurrentTaskToDelayedList>
}
 800b704:	bf00      	nop
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	2000103c 	.word	0x2000103c
 800b710:	20000b40 	.word	0x20000b40

0800b714 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	60b9      	str	r1, [r7, #8]
 800b71e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d10b      	bne.n	800b73e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
 800b736:	617b      	str	r3, [r7, #20]
}
 800b738:	bf00      	nop
 800b73a:	bf00      	nop
 800b73c:	e7fd      	b.n	800b73a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b73e:	4b0a      	ldr	r3, [pc, #40]	@ (800b768 <vTaskPlaceOnEventListRestricted+0x54>)
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	3318      	adds	r3, #24
 800b744:	4619      	mov	r1, r3
 800b746:	68f8      	ldr	r0, [r7, #12]
 800b748:	f7fe fde7 	bl	800a31a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d002      	beq.n	800b758 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b752:	f04f 33ff 	mov.w	r3, #4294967295
 800b756:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b758:	6879      	ldr	r1, [r7, #4]
 800b75a:	68b8      	ldr	r0, [r7, #8]
 800b75c:	f000 fad0 	bl	800bd00 <prvAddCurrentTaskToDelayedList>
	}
 800b760:	bf00      	nop
 800b762:	3718      	adds	r7, #24
 800b764:	46bd      	mov	sp, r7
 800b766:	bd80      	pop	{r7, pc}
 800b768:	20000b40 	.word	0x20000b40

0800b76c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b086      	sub	sp, #24
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	68db      	ldr	r3, [r3, #12]
 800b778:	68db      	ldr	r3, [r3, #12]
 800b77a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d10b      	bne.n	800b79a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b786:	f383 8811 	msr	BASEPRI, r3
 800b78a:	f3bf 8f6f 	isb	sy
 800b78e:	f3bf 8f4f 	dsb	sy
 800b792:	60fb      	str	r3, [r7, #12]
}
 800b794:	bf00      	nop
 800b796:	bf00      	nop
 800b798:	e7fd      	b.n	800b796 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	3318      	adds	r3, #24
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7fe fe18 	bl	800a3d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b7a4:	4b1d      	ldr	r3, [pc, #116]	@ (800b81c <xTaskRemoveFromEventList+0xb0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d11d      	bne.n	800b7e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	3304      	adds	r3, #4
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7fe fe0f 	bl	800a3d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ba:	4b19      	ldr	r3, [pc, #100]	@ (800b820 <xTaskRemoveFromEventList+0xb4>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d903      	bls.n	800b7ca <xTaskRemoveFromEventList+0x5e>
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7c6:	4a16      	ldr	r2, [pc, #88]	@ (800b820 <xTaskRemoveFromEventList+0xb4>)
 800b7c8:	6013      	str	r3, [r2, #0]
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	4a13      	ldr	r2, [pc, #76]	@ (800b824 <xTaskRemoveFromEventList+0xb8>)
 800b7d8:	441a      	add	r2, r3
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3304      	adds	r3, #4
 800b7de:	4619      	mov	r1, r3
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f7fe fd9a 	bl	800a31a <vListInsertEnd>
 800b7e6:	e005      	b.n	800b7f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7e8:	693b      	ldr	r3, [r7, #16]
 800b7ea:	3318      	adds	r3, #24
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	480e      	ldr	r0, [pc, #56]	@ (800b828 <xTaskRemoveFromEventList+0xbc>)
 800b7f0:	f7fe fd93 	bl	800a31a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7f8:	4b0c      	ldr	r3, [pc, #48]	@ (800b82c <xTaskRemoveFromEventList+0xc0>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d905      	bls.n	800b80e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b802:	2301      	movs	r3, #1
 800b804:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b806:	4b0a      	ldr	r3, [pc, #40]	@ (800b830 <xTaskRemoveFromEventList+0xc4>)
 800b808:	2201      	movs	r2, #1
 800b80a:	601a      	str	r2, [r3, #0]
 800b80c:	e001      	b.n	800b812 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b812:	697b      	ldr	r3, [r7, #20]
}
 800b814:	4618      	mov	r0, r3
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	2000103c 	.word	0x2000103c
 800b820:	2000101c 	.word	0x2000101c
 800b824:	20000b44 	.word	0x20000b44
 800b828:	20000fd4 	.word	0x20000fd4
 800b82c:	20000b40 	.word	0x20000b40
 800b830:	20001028 	.word	0x20001028

0800b834 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b83e:	4b2a      	ldr	r3, [pc, #168]	@ (800b8e8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d10b      	bne.n	800b85e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 800b846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84a:	f383 8811 	msr	BASEPRI, r3
 800b84e:	f3bf 8f6f 	isb	sy
 800b852:	f3bf 8f4f 	dsb	sy
 800b856:	613b      	str	r3, [r7, #16]
}
 800b858:	bf00      	nop
 800b85a:	bf00      	nop
 800b85c:	e7fd      	b.n	800b85a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68db      	ldr	r3, [r3, #12]
 800b86c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d10b      	bne.n	800b88c <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 800b874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b878:	f383 8811 	msr	BASEPRI, r3
 800b87c:	f3bf 8f6f 	isb	sy
 800b880:	f3bf 8f4f 	dsb	sy
 800b884:	60fb      	str	r3, [r7, #12]
}
 800b886:	bf00      	nop
 800b888:	bf00      	nop
 800b88a:	e7fd      	b.n	800b888 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7fe fda1 	bl	800a3d4 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	3304      	adds	r3, #4
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fd9c 	bl	800a3d4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8a0:	4b12      	ldr	r3, [pc, #72]	@ (800b8ec <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d903      	bls.n	800b8b0 <vTaskRemoveFromUnorderedEventList+0x7c>
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8ac:	4a0f      	ldr	r2, [pc, #60]	@ (800b8ec <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4a0c      	ldr	r2, [pc, #48]	@ (800b8f0 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b8be:	441a      	add	r2, r3
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	f7fe fd27 	bl	800a31a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b8cc:	697b      	ldr	r3, [r7, #20]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d0:	4b08      	ldr	r3, [pc, #32]	@ (800b8f4 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d902      	bls.n	800b8e0 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b8da:	4b07      	ldr	r3, [pc, #28]	@ (800b8f8 <vTaskRemoveFromUnorderedEventList+0xc4>)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
	}
}
 800b8e0:	bf00      	nop
 800b8e2:	3718      	adds	r7, #24
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	2000103c 	.word	0x2000103c
 800b8ec:	2000101c 	.word	0x2000101c
 800b8f0:	20000b44 	.word	0x20000b44
 800b8f4:	20000b40 	.word	0x20000b40
 800b8f8:	20001028 	.word	0x20001028

0800b8fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b083      	sub	sp, #12
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b904:	4b06      	ldr	r3, [pc, #24]	@ (800b920 <vTaskInternalSetTimeOutState+0x24>)
 800b906:	681a      	ldr	r2, [r3, #0]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b90c:	4b05      	ldr	r3, [pc, #20]	@ (800b924 <vTaskInternalSetTimeOutState+0x28>)
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	605a      	str	r2, [r3, #4]
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	2000102c 	.word	0x2000102c
 800b924:	20001018 	.word	0x20001018

0800b928 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b088      	sub	sp, #32
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10b      	bne.n	800b950 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	613b      	str	r3, [r7, #16]
}
 800b94a:	bf00      	nop
 800b94c:	bf00      	nop
 800b94e:	e7fd      	b.n	800b94c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10b      	bne.n	800b96e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b95a:	f383 8811 	msr	BASEPRI, r3
 800b95e:	f3bf 8f6f 	isb	sy
 800b962:	f3bf 8f4f 	dsb	sy
 800b966:	60fb      	str	r3, [r7, #12]
}
 800b968:	bf00      	nop
 800b96a:	bf00      	nop
 800b96c:	e7fd      	b.n	800b96a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b96e:	f000 ff83 	bl	800c878 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b972:	4b1d      	ldr	r3, [pc, #116]	@ (800b9e8 <xTaskCheckForTimeOut+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	685b      	ldr	r3, [r3, #4]
 800b97c:	69ba      	ldr	r2, [r7, #24]
 800b97e:	1ad3      	subs	r3, r2, r3
 800b980:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b98a:	d102      	bne.n	800b992 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b98c:	2300      	movs	r3, #0
 800b98e:	61fb      	str	r3, [r7, #28]
 800b990:	e023      	b.n	800b9da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	4b15      	ldr	r3, [pc, #84]	@ (800b9ec <xTaskCheckForTimeOut+0xc4>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d007      	beq.n	800b9ae <xTaskCheckForTimeOut+0x86>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	69ba      	ldr	r2, [r7, #24]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d302      	bcc.n	800b9ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	61fb      	str	r3, [r7, #28]
 800b9ac:	e015      	b.n	800b9da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	697a      	ldr	r2, [r7, #20]
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d20b      	bcs.n	800b9d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	1ad2      	subs	r2, r2, r3
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f7ff ff99 	bl	800b8fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	61fb      	str	r3, [r7, #28]
 800b9ce:	e004      	b.n	800b9da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b9da:	f000 ff7f 	bl	800c8dc <vPortExitCritical>

	return xReturn;
 800b9de:	69fb      	ldr	r3, [r7, #28]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3720      	adds	r7, #32
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}
 800b9e8:	20001018 	.word	0x20001018
 800b9ec:	2000102c 	.word	0x2000102c

0800b9f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b9f0:	b480      	push	{r7}
 800b9f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b9f4:	4b03      	ldr	r3, [pc, #12]	@ (800ba04 <vTaskMissedYield+0x14>)
 800b9f6:	2201      	movs	r2, #1
 800b9f8:	601a      	str	r2, [r3, #0]
}
 800b9fa:	bf00      	nop
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	20001028 	.word	0x20001028

0800ba08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba10:	f000 f852 	bl	800bab8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba14:	4b06      	ldr	r3, [pc, #24]	@ (800ba30 <prvIdleTask+0x28>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	d9f9      	bls.n	800ba10 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba1c:	4b05      	ldr	r3, [pc, #20]	@ (800ba34 <prvIdleTask+0x2c>)
 800ba1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba22:	601a      	str	r2, [r3, #0]
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ba2c:	e7f0      	b.n	800ba10 <prvIdleTask+0x8>
 800ba2e:	bf00      	nop
 800ba30:	20000b44 	.word	0x20000b44
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba3e:	2300      	movs	r3, #0
 800ba40:	607b      	str	r3, [r7, #4]
 800ba42:	e00c      	b.n	800ba5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	4613      	mov	r3, r2
 800ba48:	009b      	lsls	r3, r3, #2
 800ba4a:	4413      	add	r3, r2
 800ba4c:	009b      	lsls	r3, r3, #2
 800ba4e:	4a12      	ldr	r2, [pc, #72]	@ (800ba98 <prvInitialiseTaskLists+0x60>)
 800ba50:	4413      	add	r3, r2
 800ba52:	4618      	mov	r0, r3
 800ba54:	f7fe fc34 	bl	800a2c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	607b      	str	r3, [r7, #4]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2b37      	cmp	r3, #55	@ 0x37
 800ba62:	d9ef      	bls.n	800ba44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ba64:	480d      	ldr	r0, [pc, #52]	@ (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba66:	f7fe fc2b 	bl	800a2c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ba6a:	480d      	ldr	r0, [pc, #52]	@ (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba6c:	f7fe fc28 	bl	800a2c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ba70:	480c      	ldr	r0, [pc, #48]	@ (800baa4 <prvInitialiseTaskLists+0x6c>)
 800ba72:	f7fe fc25 	bl	800a2c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ba76:	480c      	ldr	r0, [pc, #48]	@ (800baa8 <prvInitialiseTaskLists+0x70>)
 800ba78:	f7fe fc22 	bl	800a2c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ba7c:	480b      	ldr	r0, [pc, #44]	@ (800baac <prvInitialiseTaskLists+0x74>)
 800ba7e:	f7fe fc1f 	bl	800a2c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ba82:	4b0b      	ldr	r3, [pc, #44]	@ (800bab0 <prvInitialiseTaskLists+0x78>)
 800ba84:	4a05      	ldr	r2, [pc, #20]	@ (800ba9c <prvInitialiseTaskLists+0x64>)
 800ba86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ba88:	4b0a      	ldr	r3, [pc, #40]	@ (800bab4 <prvInitialiseTaskLists+0x7c>)
 800ba8a:	4a05      	ldr	r2, [pc, #20]	@ (800baa0 <prvInitialiseTaskLists+0x68>)
 800ba8c:	601a      	str	r2, [r3, #0]
}
 800ba8e:	bf00      	nop
 800ba90:	3708      	adds	r7, #8
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	20000b44 	.word	0x20000b44
 800ba9c:	20000fa4 	.word	0x20000fa4
 800baa0:	20000fb8 	.word	0x20000fb8
 800baa4:	20000fd4 	.word	0x20000fd4
 800baa8:	20000fe8 	.word	0x20000fe8
 800baac:	20001000 	.word	0x20001000
 800bab0:	20000fcc 	.word	0x20000fcc
 800bab4:	20000fd0 	.word	0x20000fd0

0800bab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800babe:	e019      	b.n	800baf4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bac0:	f000 feda 	bl	800c878 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bac4:	4b10      	ldr	r3, [pc, #64]	@ (800bb08 <prvCheckTasksWaitingTermination+0x50>)
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	68db      	ldr	r3, [r3, #12]
 800baca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	3304      	adds	r3, #4
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe fc7f 	bl	800a3d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	@ (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	3b01      	subs	r3, #1
 800badc:	4a0b      	ldr	r2, [pc, #44]	@ (800bb0c <prvCheckTasksWaitingTermination+0x54>)
 800bade:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bae0:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	3b01      	subs	r3, #1
 800bae6:	4a0a      	ldr	r2, [pc, #40]	@ (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800bae8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800baea:	f000 fef7 	bl	800c8dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f000 f810 	bl	800bb14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <prvCheckTasksWaitingTermination+0x58>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d1e1      	bne.n	800bac0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bafc:	bf00      	nop
 800bafe:	bf00      	nop
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	20000fe8 	.word	0x20000fe8
 800bb0c:	20001014 	.word	0x20001014
 800bb10:	20000ffc 	.word	0x20000ffc

0800bb14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d108      	bne.n	800bb38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f001 f894 	bl	800cc58 <vPortFree>
				vPortFree( pxTCB );
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f001 f891 	bl	800cc58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bb36:	e019      	b.n	800bb6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb3e:	2b01      	cmp	r3, #1
 800bb40:	d103      	bne.n	800bb4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bb42:	6878      	ldr	r0, [r7, #4]
 800bb44:	f001 f888 	bl	800cc58 <vPortFree>
	}
 800bb48:	e010      	b.n	800bb6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d00b      	beq.n	800bb6c <prvDeleteTCB+0x58>
	__asm volatile
 800bb54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb58:	f383 8811 	msr	BASEPRI, r3
 800bb5c:	f3bf 8f6f 	isb	sy
 800bb60:	f3bf 8f4f 	dsb	sy
 800bb64:	60fb      	str	r3, [r7, #12]
}
 800bb66:	bf00      	nop
 800bb68:	bf00      	nop
 800bb6a:	e7fd      	b.n	800bb68 <prvDeleteTCB+0x54>
	}
 800bb6c:	bf00      	nop
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb7a:	4b0c      	ldr	r3, [pc, #48]	@ (800bbac <prvResetNextTaskUnblockTime+0x38>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d104      	bne.n	800bb8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bb84:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bb8c:	e008      	b.n	800bba0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb8e:	4b07      	ldr	r3, [pc, #28]	@ (800bbac <prvResetNextTaskUnblockTime+0x38>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	4a04      	ldr	r2, [pc, #16]	@ (800bbb0 <prvResetNextTaskUnblockTime+0x3c>)
 800bb9e:	6013      	str	r3, [r2, #0]
}
 800bba0:	bf00      	nop
 800bba2:	370c      	adds	r7, #12
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr
 800bbac:	20000fcc 	.word	0x20000fcc
 800bbb0:	20001034 	.word	0x20001034

0800bbb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bbba:	4b0b      	ldr	r3, [pc, #44]	@ (800bbe8 <xTaskGetSchedulerState+0x34>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d102      	bne.n	800bbc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	607b      	str	r3, [r7, #4]
 800bbc6:	e008      	b.n	800bbda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc8:	4b08      	ldr	r3, [pc, #32]	@ (800bbec <xTaskGetSchedulerState+0x38>)
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d102      	bne.n	800bbd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	607b      	str	r3, [r7, #4]
 800bbd4:	e001      	b.n	800bbda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bbda:	687b      	ldr	r3, [r7, #4]
	}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	20001020 	.word	0x20001020
 800bbec:	2000103c 	.word	0x2000103c

0800bbf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b086      	sub	sp, #24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d058      	beq.n	800bcb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bc06:	4b2f      	ldr	r3, [pc, #188]	@ (800bcc4 <xTaskPriorityDisinherit+0xd4>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d00b      	beq.n	800bc28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc14:	f383 8811 	msr	BASEPRI, r3
 800bc18:	f3bf 8f6f 	isb	sy
 800bc1c:	f3bf 8f4f 	dsb	sy
 800bc20:	60fb      	str	r3, [r7, #12]
}
 800bc22:	bf00      	nop
 800bc24:	bf00      	nop
 800bc26:	e7fd      	b.n	800bc24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10b      	bne.n	800bc48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bc30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc34:	f383 8811 	msr	BASEPRI, r3
 800bc38:	f3bf 8f6f 	isb	sy
 800bc3c:	f3bf 8f4f 	dsb	sy
 800bc40:	60bb      	str	r3, [r7, #8]
}
 800bc42:	bf00      	nop
 800bc44:	bf00      	nop
 800bc46:	e7fd      	b.n	800bc44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bc48:	693b      	ldr	r3, [r7, #16]
 800bc4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc4c:	1e5a      	subs	r2, r3, #1
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d02c      	beq.n	800bcb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d128      	bne.n	800bcb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	3304      	adds	r3, #4
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe fbb2 	bl	800a3d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc84:	693b      	ldr	r3, [r7, #16]
 800bc86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc88:	4b0f      	ldr	r3, [pc, #60]	@ (800bcc8 <xTaskPriorityDisinherit+0xd8>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d903      	bls.n	800bc98 <xTaskPriorityDisinherit+0xa8>
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc94:	4a0c      	ldr	r2, [pc, #48]	@ (800bcc8 <xTaskPriorityDisinherit+0xd8>)
 800bc96:	6013      	str	r3, [r2, #0]
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4a09      	ldr	r2, [pc, #36]	@ (800bccc <xTaskPriorityDisinherit+0xdc>)
 800bca6:	441a      	add	r2, r3
 800bca8:	693b      	ldr	r3, [r7, #16]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f7fe fb33 	bl	800a31a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bcb8:	697b      	ldr	r3, [r7, #20]
	}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3718      	adds	r7, #24
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20000b40 	.word	0x20000b40
 800bcc8:	2000101c 	.word	0x2000101c
 800bccc:	20000b44 	.word	0x20000b44

0800bcd0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bcd6:	4b09      	ldr	r3, [pc, #36]	@ (800bcfc <uxTaskResetEventItemValue+0x2c>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	699b      	ldr	r3, [r3, #24]
 800bcdc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcde:	4b07      	ldr	r3, [pc, #28]	@ (800bcfc <uxTaskResetEventItemValue+0x2c>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce4:	4b05      	ldr	r3, [pc, #20]	@ (800bcfc <uxTaskResetEventItemValue+0x2c>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800bcec:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bcee:	687b      	ldr	r3, [r7, #4]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	370c      	adds	r7, #12
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	20000b40 	.word	0x20000b40

0800bd00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b084      	sub	sp, #16
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
 800bd08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd0a:	4b21      	ldr	r3, [pc, #132]	@ (800bd90 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd10:	4b20      	ldr	r3, [pc, #128]	@ (800bd94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	3304      	adds	r3, #4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe fb5c 	bl	800a3d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd22:	d10a      	bne.n	800bd3a <prvAddCurrentTaskToDelayedList+0x3a>
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d007      	beq.n	800bd3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd2a:	4b1a      	ldr	r3, [pc, #104]	@ (800bd94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3304      	adds	r3, #4
 800bd30:	4619      	mov	r1, r3
 800bd32:	4819      	ldr	r0, [pc, #100]	@ (800bd98 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd34:	f7fe faf1 	bl	800a31a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bd38:	e026      	b.n	800bd88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bd3a:	68fa      	ldr	r2, [r7, #12]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4413      	add	r3, r2
 800bd40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bd42:	4b14      	ldr	r3, [pc, #80]	@ (800bd94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bd4a:	68ba      	ldr	r2, [r7, #8]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	429a      	cmp	r2, r3
 800bd50:	d209      	bcs.n	800bd66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd52:	4b12      	ldr	r3, [pc, #72]	@ (800bd9c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd54:	681a      	ldr	r2, [r3, #0]
 800bd56:	4b0f      	ldr	r3, [pc, #60]	@ (800bd94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	3304      	adds	r3, #4
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	4610      	mov	r0, r2
 800bd60:	f7fe faff 	bl	800a362 <vListInsert>
}
 800bd64:	e010      	b.n	800bd88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd66:	4b0e      	ldr	r3, [pc, #56]	@ (800bda0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd68:	681a      	ldr	r2, [r3, #0]
 800bd6a:	4b0a      	ldr	r3, [pc, #40]	@ (800bd94 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	4619      	mov	r1, r3
 800bd72:	4610      	mov	r0, r2
 800bd74:	f7fe faf5 	bl	800a362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd78:	4b0a      	ldr	r3, [pc, #40]	@ (800bda4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	68ba      	ldr	r2, [r7, #8]
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d202      	bcs.n	800bd88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd82:	4a08      	ldr	r2, [pc, #32]	@ (800bda4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	6013      	str	r3, [r2, #0]
}
 800bd88:	bf00      	nop
 800bd8a:	3710      	adds	r7, #16
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	20001018 	.word	0x20001018
 800bd94:	20000b40 	.word	0x20000b40
 800bd98:	20001000 	.word	0x20001000
 800bd9c:	20000fd0 	.word	0x20000fd0
 800bda0:	20000fcc 	.word	0x20000fcc
 800bda4:	20001034 	.word	0x20001034

0800bda8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b08a      	sub	sp, #40	@ 0x28
 800bdac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bdb2:	f000 fbb1 	bl	800c518 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bdb6:	4b1d      	ldr	r3, [pc, #116]	@ (800be2c <xTimerCreateTimerTask+0x84>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d021      	beq.n	800be02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bdc6:	1d3a      	adds	r2, r7, #4
 800bdc8:	f107 0108 	add.w	r1, r7, #8
 800bdcc:	f107 030c 	add.w	r3, r7, #12
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7fd ffe7 	bl	8009da4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bdd6:	6879      	ldr	r1, [r7, #4]
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	68fa      	ldr	r2, [r7, #12]
 800bddc:	9202      	str	r2, [sp, #8]
 800bdde:	9301      	str	r3, [sp, #4]
 800bde0:	2302      	movs	r3, #2
 800bde2:	9300      	str	r3, [sp, #0]
 800bde4:	2300      	movs	r3, #0
 800bde6:	460a      	mov	r2, r1
 800bde8:	4911      	ldr	r1, [pc, #68]	@ (800be30 <xTimerCreateTimerTask+0x88>)
 800bdea:	4812      	ldr	r0, [pc, #72]	@ (800be34 <xTimerCreateTimerTask+0x8c>)
 800bdec:	f7ff f816 	bl	800ae1c <xTaskCreateStatic>
 800bdf0:	4603      	mov	r3, r0
 800bdf2:	4a11      	ldr	r2, [pc, #68]	@ (800be38 <xTimerCreateTimerTask+0x90>)
 800bdf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdf6:	4b10      	ldr	r3, [pc, #64]	@ (800be38 <xTimerCreateTimerTask+0x90>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d001      	beq.n	800be02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdfe:	2301      	movs	r3, #1
 800be00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	613b      	str	r3, [r7, #16]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be20:	697b      	ldr	r3, [r7, #20]
}
 800be22:	4618      	mov	r0, r3
 800be24:	3718      	adds	r7, #24
 800be26:	46bd      	mov	sp, r7
 800be28:	bd80      	pop	{r7, pc}
 800be2a:	bf00      	nop
 800be2c:	20001070 	.word	0x20001070
 800be30:	0800db38 	.word	0x0800db38
 800be34:	0800c0b1 	.word	0x0800c0b1
 800be38:	20001074 	.word	0x20001074

0800be3c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b088      	sub	sp, #32
 800be40:	af02      	add	r7, sp, #8
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
 800be48:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800be4a:	202c      	movs	r0, #44	@ 0x2c
 800be4c:	f000 fe36 	bl	800cabc <pvPortMalloc>
 800be50:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00d      	beq.n	800be74 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2200      	movs	r2, #0
 800be5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800be60:	697b      	ldr	r3, [r7, #20]
 800be62:	9301      	str	r3, [sp, #4]
 800be64:	6a3b      	ldr	r3, [r7, #32]
 800be66:	9300      	str	r3, [sp, #0]
 800be68:	683b      	ldr	r3, [r7, #0]
 800be6a:	687a      	ldr	r2, [r7, #4]
 800be6c:	68b9      	ldr	r1, [r7, #8]
 800be6e:	68f8      	ldr	r0, [r7, #12]
 800be70:	f000 f845 	bl	800befe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800be74:	697b      	ldr	r3, [r7, #20]
	}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b08a      	sub	sp, #40	@ 0x28
 800be82:	af02      	add	r7, sp, #8
 800be84:	60f8      	str	r0, [r7, #12]
 800be86:	60b9      	str	r1, [r7, #8]
 800be88:	607a      	str	r2, [r7, #4]
 800be8a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800be8c:	232c      	movs	r3, #44	@ 0x2c
 800be8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	2b2c      	cmp	r3, #44	@ 0x2c
 800be94:	d00b      	beq.n	800beae <xTimerCreateStatic+0x30>
	__asm volatile
 800be96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	61bb      	str	r3, [r7, #24]
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	e7fd      	b.n	800beaa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800beae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800beb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <xTimerCreateStatic+0x50>
	__asm volatile
 800beb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beba:	f383 8811 	msr	BASEPRI, r3
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	f3bf 8f4f 	dsb	sy
 800bec6:	617b      	str	r3, [r7, #20]
}
 800bec8:	bf00      	nop
 800beca:	bf00      	nop
 800becc:	e7fd      	b.n	800beca <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800bece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bed0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800bed2:	69fb      	ldr	r3, [r7, #28]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00d      	beq.n	800bef4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800bed8:	69fb      	ldr	r3, [r7, #28]
 800beda:	2202      	movs	r2, #2
 800bedc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800bee0:	69fb      	ldr	r3, [r7, #28]
 800bee2:	9301      	str	r3, [sp, #4]
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	9300      	str	r3, [sp, #0]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	68b9      	ldr	r1, [r7, #8]
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 f805 	bl	800befe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800bef4:	69fb      	ldr	r3, [r7, #28]
	}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3720      	adds	r7, #32
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b086      	sub	sp, #24
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	60f8      	str	r0, [r7, #12]
 800bf06:	60b9      	str	r1, [r7, #8]
 800bf08:	607a      	str	r2, [r7, #4]
 800bf0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d10b      	bne.n	800bf2a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800bf12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf16:	f383 8811 	msr	BASEPRI, r3
 800bf1a:	f3bf 8f6f 	isb	sy
 800bf1e:	f3bf 8f4f 	dsb	sy
 800bf22:	617b      	str	r3, [r7, #20]
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	e7fd      	b.n	800bf26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800bf2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d01e      	beq.n	800bf6e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800bf30:	f000 faf2 	bl	800c518 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800bf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800bf3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800bf46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf48:	6a3a      	ldr	r2, [r7, #32]
 800bf4a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf4e:	3304      	adds	r3, #4
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7fe f9d5 	bl	800a300 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d008      	beq.n	800bf6e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf62:	f043 0304 	orr.w	r3, r3, #4
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800bf6e:	bf00      	nop
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
	...

0800bf78 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b08a      	sub	sp, #40	@ 0x28
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	60f8      	str	r0, [r7, #12]
 800bf80:	60b9      	str	r1, [r7, #8]
 800bf82:	607a      	str	r2, [r7, #4]
 800bf84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bf86:	2300      	movs	r3, #0
 800bf88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10b      	bne.n	800bfa8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	623b      	str	r3, [r7, #32]
}
 800bfa2:	bf00      	nop
 800bfa4:	bf00      	nop
 800bfa6:	e7fd      	b.n	800bfa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bfa8:	4b19      	ldr	r3, [pc, #100]	@ (800c010 <xTimerGenericCommand+0x98>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d02a      	beq.n	800c006 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2b05      	cmp	r3, #5
 800bfc0:	dc18      	bgt.n	800bff4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bfc2:	f7ff fdf7 	bl	800bbb4 <xTaskGetSchedulerState>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b02      	cmp	r3, #2
 800bfca:	d109      	bne.n	800bfe0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bfcc:	4b10      	ldr	r3, [pc, #64]	@ (800c010 <xTimerGenericCommand+0x98>)
 800bfce:	6818      	ldr	r0, [r3, #0]
 800bfd0:	f107 0110 	add.w	r1, r7, #16
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bfd8:	f7fe fb30 	bl	800a63c <xQueueGenericSend>
 800bfdc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bfde:	e012      	b.n	800c006 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bfe0:	4b0b      	ldr	r3, [pc, #44]	@ (800c010 <xTimerGenericCommand+0x98>)
 800bfe2:	6818      	ldr	r0, [r3, #0]
 800bfe4:	f107 0110 	add.w	r1, r7, #16
 800bfe8:	2300      	movs	r3, #0
 800bfea:	2200      	movs	r2, #0
 800bfec:	f7fe fb26 	bl	800a63c <xQueueGenericSend>
 800bff0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bff2:	e008      	b.n	800c006 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bff4:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <xTimerGenericCommand+0x98>)
 800bff6:	6818      	ldr	r0, [r3, #0]
 800bff8:	f107 0110 	add.w	r1, r7, #16
 800bffc:	2300      	movs	r3, #0
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	f7fe fc1e 	bl	800a840 <xQueueGenericSendFromISR>
 800c004:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c008:	4618      	mov	r0, r3
 800c00a:	3728      	adds	r7, #40	@ 0x28
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	20001070 	.word	0x20001070

0800c014 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b088      	sub	sp, #32
 800c018:	af02      	add	r7, sp, #8
 800c01a:	6078      	str	r0, [r7, #4]
 800c01c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c01e:	4b23      	ldr	r3, [pc, #140]	@ (800c0ac <prvProcessExpiredTimer+0x98>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	68db      	ldr	r3, [r3, #12]
 800c026:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	3304      	adds	r3, #4
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe f9d1 	bl	800a3d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c038:	f003 0304 	and.w	r3, r3, #4
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d023      	beq.n	800c088 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	699a      	ldr	r2, [r3, #24]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	18d1      	adds	r1, r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	683a      	ldr	r2, [r7, #0]
 800c04c:	6978      	ldr	r0, [r7, #20]
 800c04e:	f000 f8d5 	bl	800c1fc <prvInsertTimerInActiveList>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d020      	beq.n	800c09a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c058:	2300      	movs	r3, #0
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	2300      	movs	r3, #0
 800c05e:	687a      	ldr	r2, [r7, #4]
 800c060:	2100      	movs	r1, #0
 800c062:	6978      	ldr	r0, [r7, #20]
 800c064:	f7ff ff88 	bl	800bf78 <xTimerGenericCommand>
 800c068:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c06a:	693b      	ldr	r3, [r7, #16]
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d114      	bne.n	800c09a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	60fb      	str	r3, [r7, #12]
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	e7fd      	b.n	800c084 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c088:	697b      	ldr	r3, [r7, #20]
 800c08a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c08e:	f023 0301 	bic.w	r3, r3, #1
 800c092:	b2da      	uxtb	r2, r3
 800c094:	697b      	ldr	r3, [r7, #20]
 800c096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	6978      	ldr	r0, [r7, #20]
 800c0a0:	4798      	blx	r3
}
 800c0a2:	bf00      	nop
 800c0a4:	3718      	adds	r7, #24
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20001068 	.word	0x20001068

0800c0b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0b8:	f107 0308 	add.w	r3, r7, #8
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 f859 	bl	800c174 <prvGetNextExpireTime>
 800c0c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	4619      	mov	r1, r3
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f000 f805 	bl	800c0d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c0ce:	f000 f8d7 	bl	800c280 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c0d2:	bf00      	nop
 800c0d4:	e7f0      	b.n	800c0b8 <prvTimerTask+0x8>
	...

0800c0d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c0e2:	f7ff f8df 	bl	800b2a4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0e6:	f107 0308 	add.w	r3, r7, #8
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f000 f866 	bl	800c1bc <prvSampleTimeNow>
 800c0f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c0f2:	68bb      	ldr	r3, [r7, #8]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d130      	bne.n	800c15a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d10a      	bne.n	800c114 <prvProcessTimerOrBlockTask+0x3c>
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	429a      	cmp	r2, r3
 800c104:	d806      	bhi.n	800c114 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c106:	f7ff f8db 	bl	800b2c0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c10a:	68f9      	ldr	r1, [r7, #12]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff ff81 	bl	800c014 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c112:	e024      	b.n	800c15e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d008      	beq.n	800c12c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c11a:	4b13      	ldr	r3, [pc, #76]	@ (800c168 <prvProcessTimerOrBlockTask+0x90>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <prvProcessTimerOrBlockTask+0x50>
 800c124:	2301      	movs	r3, #1
 800c126:	e000      	b.n	800c12a <prvProcessTimerOrBlockTask+0x52>
 800c128:	2300      	movs	r3, #0
 800c12a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c12c:	4b0f      	ldr	r3, [pc, #60]	@ (800c16c <prvProcessTimerOrBlockTask+0x94>)
 800c12e:	6818      	ldr	r0, [r3, #0]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	1ad3      	subs	r3, r2, r3
 800c136:	683a      	ldr	r2, [r7, #0]
 800c138:	4619      	mov	r1, r3
 800c13a:	f7fe fe3b 	bl	800adb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c13e:	f7ff f8bf 	bl	800b2c0 <xTaskResumeAll>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c148:	4b09      	ldr	r3, [pc, #36]	@ (800c170 <prvProcessTimerOrBlockTask+0x98>)
 800c14a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c14e:	601a      	str	r2, [r3, #0]
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	f3bf 8f6f 	isb	sy
}
 800c158:	e001      	b.n	800c15e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c15a:	f7ff f8b1 	bl	800b2c0 <xTaskResumeAll>
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	2000106c 	.word	0x2000106c
 800c16c:	20001070 	.word	0x20001070
 800c170:	e000ed04 	.word	0xe000ed04

0800c174 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c174:	b480      	push	{r7}
 800c176:	b085      	sub	sp, #20
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c17c:	4b0e      	ldr	r3, [pc, #56]	@ (800c1b8 <prvGetNextExpireTime+0x44>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d101      	bne.n	800c18a <prvGetNextExpireTime+0x16>
 800c186:	2201      	movs	r2, #1
 800c188:	e000      	b.n	800c18c <prvGetNextExpireTime+0x18>
 800c18a:	2200      	movs	r2, #0
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d105      	bne.n	800c1a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c198:	4b07      	ldr	r3, [pc, #28]	@ (800c1b8 <prvGetNextExpireTime+0x44>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	60fb      	str	r3, [r7, #12]
 800c1a2:	e001      	b.n	800c1a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3714      	adds	r7, #20
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	20001068 	.word	0x20001068

0800c1bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c1c4:	f7ff f91a 	bl	800b3fc <xTaskGetTickCount>
 800c1c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c1ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c1f8 <prvSampleTimeNow+0x3c>)
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	429a      	cmp	r2, r3
 800c1d2:	d205      	bcs.n	800c1e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c1d4:	f000 f93a 	bl	800c44c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	601a      	str	r2, [r3, #0]
 800c1de:	e002      	b.n	800c1e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c1e6:	4a04      	ldr	r2, [pc, #16]	@ (800c1f8 <prvSampleTimeNow+0x3c>)
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	20001078 	.word	0x20001078

0800c1fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b086      	sub	sp, #24
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	607a      	str	r2, [r7, #4]
 800c208:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c20a:	2300      	movs	r3, #0
 800c20c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	68fa      	ldr	r2, [r7, #12]
 800c218:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	429a      	cmp	r2, r3
 800c220:	d812      	bhi.n	800c248 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	1ad2      	subs	r2, r2, r3
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d302      	bcc.n	800c236 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c230:	2301      	movs	r3, #1
 800c232:	617b      	str	r3, [r7, #20]
 800c234:	e01b      	b.n	800c26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c236:	4b10      	ldr	r3, [pc, #64]	@ (800c278 <prvInsertTimerInActiveList+0x7c>)
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	3304      	adds	r3, #4
 800c23e:	4619      	mov	r1, r3
 800c240:	4610      	mov	r0, r2
 800c242:	f7fe f88e 	bl	800a362 <vListInsert>
 800c246:	e012      	b.n	800c26e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	429a      	cmp	r2, r3
 800c24e:	d206      	bcs.n	800c25e <prvInsertTimerInActiveList+0x62>
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	429a      	cmp	r2, r3
 800c256:	d302      	bcc.n	800c25e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c258:	2301      	movs	r3, #1
 800c25a:	617b      	str	r3, [r7, #20]
 800c25c:	e007      	b.n	800c26e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c25e:	4b07      	ldr	r3, [pc, #28]	@ (800c27c <prvInsertTimerInActiveList+0x80>)
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	3304      	adds	r3, #4
 800c266:	4619      	mov	r1, r3
 800c268:	4610      	mov	r0, r2
 800c26a:	f7fe f87a 	bl	800a362 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c26e:	697b      	ldr	r3, [r7, #20]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3718      	adds	r7, #24
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}
 800c278:	2000106c 	.word	0x2000106c
 800c27c:	20001068 	.word	0x20001068

0800c280 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b08e      	sub	sp, #56	@ 0x38
 800c284:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c286:	e0ce      	b.n	800c426 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	da19      	bge.n	800c2c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c28e:	1d3b      	adds	r3, r7, #4
 800c290:	3304      	adds	r3, #4
 800c292:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c296:	2b00      	cmp	r3, #0
 800c298:	d10b      	bne.n	800c2b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c29a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29e:	f383 8811 	msr	BASEPRI, r3
 800c2a2:	f3bf 8f6f 	isb	sy
 800c2a6:	f3bf 8f4f 	dsb	sy
 800c2aa:	61fb      	str	r3, [r7, #28]
}
 800c2ac:	bf00      	nop
 800c2ae:	bf00      	nop
 800c2b0:	e7fd      	b.n	800c2ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2b8:	6850      	ldr	r0, [r2, #4]
 800c2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2bc:	6892      	ldr	r2, [r2, #8]
 800c2be:	4611      	mov	r1, r2
 800c2c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f2c0 80ae 	blt.w	800c426 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d0:	695b      	ldr	r3, [r3, #20]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d004      	beq.n	800c2e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d8:	3304      	adds	r3, #4
 800c2da:	4618      	mov	r0, r3
 800c2dc:	f7fe f87a 	bl	800a3d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c2e0:	463b      	mov	r3, r7
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff ff6a 	bl	800c1bc <prvSampleTimeNow>
 800c2e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2b09      	cmp	r3, #9
 800c2ee:	f200 8097 	bhi.w	800c420 <prvProcessReceivedCommands+0x1a0>
 800c2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f8 <prvProcessReceivedCommands+0x78>)
 800c2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f8:	0800c321 	.word	0x0800c321
 800c2fc:	0800c321 	.word	0x0800c321
 800c300:	0800c321 	.word	0x0800c321
 800c304:	0800c397 	.word	0x0800c397
 800c308:	0800c3ab 	.word	0x0800c3ab
 800c30c:	0800c3f7 	.word	0x0800c3f7
 800c310:	0800c321 	.word	0x0800c321
 800c314:	0800c321 	.word	0x0800c321
 800c318:	0800c397 	.word	0x0800c397
 800c31c:	0800c3ab 	.word	0x0800c3ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c322:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c326:	f043 0301 	orr.w	r3, r3, #1
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c332:	68ba      	ldr	r2, [r7, #8]
 800c334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c336:	699b      	ldr	r3, [r3, #24]
 800c338:	18d1      	adds	r1, r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c33e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c340:	f7ff ff5c 	bl	800c1fc <prvInsertTimerInActiveList>
 800c344:	4603      	mov	r3, r0
 800c346:	2b00      	cmp	r3, #0
 800c348:	d06c      	beq.n	800c424 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c350:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c354:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c358:	f003 0304 	and.w	r3, r3, #4
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d061      	beq.n	800c424 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	441a      	add	r2, r3
 800c368:	2300      	movs	r3, #0
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	2300      	movs	r3, #0
 800c36e:	2100      	movs	r1, #0
 800c370:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c372:	f7ff fe01 	bl	800bf78 <xTimerGenericCommand>
 800c376:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c378:	6a3b      	ldr	r3, [r7, #32]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d152      	bne.n	800c424 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	61bb      	str	r3, [r7, #24]
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	e7fd      	b.n	800c392 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c39c:	f023 0301 	bic.w	r3, r3, #1
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c3a8:	e03d      	b.n	800c426 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c3aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3b0:	f043 0301 	orr.w	r3, r3, #1
 800c3b4:	b2da      	uxtb	r2, r3
 800c3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c3bc:	68ba      	ldr	r2, [r7, #8]
 800c3be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c4:	699b      	ldr	r3, [r3, #24]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d10b      	bne.n	800c3e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	617b      	str	r3, [r7, #20]
}
 800c3dc:	bf00      	nop
 800c3de:	bf00      	nop
 800c3e0:	e7fd      	b.n	800c3de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3e4:	699a      	ldr	r2, [r3, #24]
 800c3e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e8:	18d1      	adds	r1, r2, r3
 800c3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c3f0:	f7ff ff04 	bl	800c1fc <prvInsertTimerInActiveList>
					break;
 800c3f4:	e017      	b.n	800c426 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3fc:	f003 0302 	and.w	r3, r3, #2
 800c400:	2b00      	cmp	r3, #0
 800c402:	d103      	bne.n	800c40c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c404:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c406:	f000 fc27 	bl	800cc58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c40a:	e00c      	b.n	800c426 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c40c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c40e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c412:	f023 0301 	bic.w	r3, r3, #1
 800c416:	b2da      	uxtb	r2, r3
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c41e:	e002      	b.n	800c426 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c420:	bf00      	nop
 800c422:	e000      	b.n	800c426 <prvProcessReceivedCommands+0x1a6>
					break;
 800c424:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c426:	4b08      	ldr	r3, [pc, #32]	@ (800c448 <prvProcessReceivedCommands+0x1c8>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	1d39      	adds	r1, r7, #4
 800c42c:	2200      	movs	r2, #0
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe faa4 	bl	800a97c <xQueueReceive>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	f47f af26 	bne.w	800c288 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c43c:	bf00      	nop
 800c43e:	bf00      	nop
 800c440:	3730      	adds	r7, #48	@ 0x30
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	20001070 	.word	0x20001070

0800c44c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c452:	e049      	b.n	800c4e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c454:	4b2e      	ldr	r3, [pc, #184]	@ (800c510 <prvSwitchTimerLists+0xc4>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	68db      	ldr	r3, [r3, #12]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45e:	4b2c      	ldr	r3, [pc, #176]	@ (800c510 <prvSwitchTimerLists+0xc4>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	68db      	ldr	r3, [r3, #12]
 800c464:	68db      	ldr	r3, [r3, #12]
 800c466:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	3304      	adds	r3, #4
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7fd ffb1 	bl	800a3d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	6a1b      	ldr	r3, [r3, #32]
 800c476:	68f8      	ldr	r0, [r7, #12]
 800c478:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c480:	f003 0304 	and.w	r3, r3, #4
 800c484:	2b00      	cmp	r3, #0
 800c486:	d02f      	beq.n	800c4e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	699b      	ldr	r3, [r3, #24]
 800c48c:	693a      	ldr	r2, [r7, #16]
 800c48e:	4413      	add	r3, r2
 800c490:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c492:	68ba      	ldr	r2, [r7, #8]
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	429a      	cmp	r2, r3
 800c498:	d90e      	bls.n	800c4b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	68fa      	ldr	r2, [r7, #12]
 800c4a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4a6:	4b1a      	ldr	r3, [pc, #104]	@ (800c510 <prvSwitchTimerLists+0xc4>)
 800c4a8:	681a      	ldr	r2, [r3, #0]
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	3304      	adds	r3, #4
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	f7fd ff56 	bl	800a362 <vListInsert>
 800c4b6:	e017      	b.n	800c4e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	693a      	ldr	r2, [r7, #16]
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	68f8      	ldr	r0, [r7, #12]
 800c4c4:	f7ff fd58 	bl	800bf78 <xTimerGenericCommand>
 800c4c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10b      	bne.n	800c4e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	603b      	str	r3, [r7, #0]
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	e7fd      	b.n	800c4e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c4e8:	4b09      	ldr	r3, [pc, #36]	@ (800c510 <prvSwitchTimerLists+0xc4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1b0      	bne.n	800c454 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c4f2:	4b07      	ldr	r3, [pc, #28]	@ (800c510 <prvSwitchTimerLists+0xc4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c4f8:	4b06      	ldr	r3, [pc, #24]	@ (800c514 <prvSwitchTimerLists+0xc8>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a04      	ldr	r2, [pc, #16]	@ (800c510 <prvSwitchTimerLists+0xc4>)
 800c4fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c500:	4a04      	ldr	r2, [pc, #16]	@ (800c514 <prvSwitchTimerLists+0xc8>)
 800c502:	697b      	ldr	r3, [r7, #20]
 800c504:	6013      	str	r3, [r2, #0]
}
 800c506:	bf00      	nop
 800c508:	3718      	adds	r7, #24
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}
 800c50e:	bf00      	nop
 800c510:	20001068 	.word	0x20001068
 800c514:	2000106c 	.word	0x2000106c

0800c518 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c51e:	f000 f9ab 	bl	800c878 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c522:	4b15      	ldr	r3, [pc, #84]	@ (800c578 <prvCheckForValidListAndQueue+0x60>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d120      	bne.n	800c56c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c52a:	4814      	ldr	r0, [pc, #80]	@ (800c57c <prvCheckForValidListAndQueue+0x64>)
 800c52c:	f7fd fec8 	bl	800a2c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c530:	4813      	ldr	r0, [pc, #76]	@ (800c580 <prvCheckForValidListAndQueue+0x68>)
 800c532:	f7fd fec5 	bl	800a2c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c536:	4b13      	ldr	r3, [pc, #76]	@ (800c584 <prvCheckForValidListAndQueue+0x6c>)
 800c538:	4a10      	ldr	r2, [pc, #64]	@ (800c57c <prvCheckForValidListAndQueue+0x64>)
 800c53a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c53c:	4b12      	ldr	r3, [pc, #72]	@ (800c588 <prvCheckForValidListAndQueue+0x70>)
 800c53e:	4a10      	ldr	r2, [pc, #64]	@ (800c580 <prvCheckForValidListAndQueue+0x68>)
 800c540:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c542:	2300      	movs	r3, #0
 800c544:	9300      	str	r3, [sp, #0]
 800c546:	4b11      	ldr	r3, [pc, #68]	@ (800c58c <prvCheckForValidListAndQueue+0x74>)
 800c548:	4a11      	ldr	r2, [pc, #68]	@ (800c590 <prvCheckForValidListAndQueue+0x78>)
 800c54a:	2110      	movs	r1, #16
 800c54c:	200a      	movs	r0, #10
 800c54e:	f7fd ffd5 	bl	800a4fc <xQueueGenericCreateStatic>
 800c552:	4603      	mov	r3, r0
 800c554:	4a08      	ldr	r2, [pc, #32]	@ (800c578 <prvCheckForValidListAndQueue+0x60>)
 800c556:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c558:	4b07      	ldr	r3, [pc, #28]	@ (800c578 <prvCheckForValidListAndQueue+0x60>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d005      	beq.n	800c56c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c560:	4b05      	ldr	r3, [pc, #20]	@ (800c578 <prvCheckForValidListAndQueue+0x60>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	490b      	ldr	r1, [pc, #44]	@ (800c594 <prvCheckForValidListAndQueue+0x7c>)
 800c566:	4618      	mov	r0, r3
 800c568:	f7fe fbfa 	bl	800ad60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c56c:	f000 f9b6 	bl	800c8dc <vPortExitCritical>
}
 800c570:	bf00      	nop
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}
 800c576:	bf00      	nop
 800c578:	20001070 	.word	0x20001070
 800c57c:	20001040 	.word	0x20001040
 800c580:	20001054 	.word	0x20001054
 800c584:	20001068 	.word	0x20001068
 800c588:	2000106c 	.word	0x2000106c
 800c58c:	2000111c 	.word	0x2000111c
 800c590:	2000107c 	.word	0x2000107c
 800c594:	0800db40 	.word	0x0800db40

0800c598 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10b      	bne.n	800c5c2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800c5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5ae:	f383 8811 	msr	BASEPRI, r3
 800c5b2:	f3bf 8f6f 	isb	sy
 800c5b6:	f3bf 8f4f 	dsb	sy
 800c5ba:	60fb      	str	r3, [r7, #12]
}
 800c5bc:	bf00      	nop
 800c5be:	bf00      	nop
 800c5c0:	e7fd      	b.n	800c5be <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c5c2:	f000 f959 	bl	800c878 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	69db      	ldr	r3, [r3, #28]
 800c5ca:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c5cc:	f000 f986 	bl	800c8dc <vPortExitCritical>

	return pvReturn;
 800c5d0:	693b      	ldr	r3, [r7, #16]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
	...

0800c5dc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	b08a      	sub	sp, #40	@ 0x28
 800c5e0:	af00      	add	r7, sp, #0
 800c5e2:	60f8      	str	r0, [r7, #12]
 800c5e4:	60b9      	str	r1, [r7, #8]
 800c5e6:	607a      	str	r2, [r7, #4]
 800c5e8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c5ea:	f06f 0301 	mvn.w	r3, #1
 800c5ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c5fc:	4b06      	ldr	r3, [pc, #24]	@ (800c618 <xTimerPendFunctionCallFromISR+0x3c>)
 800c5fe:	6818      	ldr	r0, [r3, #0]
 800c600:	f107 0114 	add.w	r1, r7, #20
 800c604:	2300      	movs	r3, #0
 800c606:	683a      	ldr	r2, [r7, #0]
 800c608:	f7fe f91a 	bl	800a840 <xQueueGenericSendFromISR>
 800c60c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c60e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800c610:	4618      	mov	r0, r3
 800c612:	3728      	adds	r7, #40	@ 0x28
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	20001070 	.word	0x20001070

0800c61c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b085      	sub	sp, #20
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	3b04      	subs	r3, #4
 800c62c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	3b04      	subs	r3, #4
 800c63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f023 0201 	bic.w	r2, r3, #1
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	3b04      	subs	r3, #4
 800c64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c64c:	4a0c      	ldr	r2, [pc, #48]	@ (800c680 <pxPortInitialiseStack+0x64>)
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	3b14      	subs	r3, #20
 800c656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c658:	687a      	ldr	r2, [r7, #4]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	3b04      	subs	r3, #4
 800c662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f06f 0202 	mvn.w	r2, #2
 800c66a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	3b20      	subs	r3, #32
 800c670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c672:	68fb      	ldr	r3, [r7, #12]
}
 800c674:	4618      	mov	r0, r3
 800c676:	3714      	adds	r7, #20
 800c678:	46bd      	mov	sp, r7
 800c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67e:	4770      	bx	lr
 800c680:	0800c685 	.word	0x0800c685

0800c684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c684:	b480      	push	{r7}
 800c686:	b085      	sub	sp, #20
 800c688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c68e:	4b13      	ldr	r3, [pc, #76]	@ (800c6dc <prvTaskExitError+0x58>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c696:	d00b      	beq.n	800c6b0 <prvTaskExitError+0x2c>
	__asm volatile
 800c698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69c:	f383 8811 	msr	BASEPRI, r3
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	60fb      	str	r3, [r7, #12]
}
 800c6aa:	bf00      	nop
 800c6ac:	bf00      	nop
 800c6ae:	e7fd      	b.n	800c6ac <prvTaskExitError+0x28>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	60bb      	str	r3, [r7, #8]
}
 800c6c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c6c4:	bf00      	nop
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d0fc      	beq.n	800c6c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c6cc:	bf00      	nop
 800c6ce:	bf00      	nop
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	20000098 	.word	0x20000098

0800c6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c6e0:	4b07      	ldr	r3, [pc, #28]	@ (800c700 <pxCurrentTCBConst2>)
 800c6e2:	6819      	ldr	r1, [r3, #0]
 800c6e4:	6808      	ldr	r0, [r1, #0]
 800c6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ea:	f380 8809 	msr	PSP, r0
 800c6ee:	f3bf 8f6f 	isb	sy
 800c6f2:	f04f 0000 	mov.w	r0, #0
 800c6f6:	f380 8811 	msr	BASEPRI, r0
 800c6fa:	4770      	bx	lr
 800c6fc:	f3af 8000 	nop.w

0800c700 <pxCurrentTCBConst2>:
 800c700:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c704:	bf00      	nop
 800c706:	bf00      	nop

0800c708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c708:	4808      	ldr	r0, [pc, #32]	@ (800c72c <prvPortStartFirstTask+0x24>)
 800c70a:	6800      	ldr	r0, [r0, #0]
 800c70c:	6800      	ldr	r0, [r0, #0]
 800c70e:	f380 8808 	msr	MSP, r0
 800c712:	f04f 0000 	mov.w	r0, #0
 800c716:	f380 8814 	msr	CONTROL, r0
 800c71a:	b662      	cpsie	i
 800c71c:	b661      	cpsie	f
 800c71e:	f3bf 8f4f 	dsb	sy
 800c722:	f3bf 8f6f 	isb	sy
 800c726:	df00      	svc	0
 800c728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c72a:	bf00      	nop
 800c72c:	e000ed08 	.word	0xe000ed08

0800c730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b086      	sub	sp, #24
 800c734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c736:	4b47      	ldr	r3, [pc, #284]	@ (800c854 <xPortStartScheduler+0x124>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	4a47      	ldr	r2, [pc, #284]	@ (800c858 <xPortStartScheduler+0x128>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d10b      	bne.n	800c758 <xPortStartScheduler+0x28>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	613b      	str	r3, [r7, #16]
}
 800c752:	bf00      	nop
 800c754:	bf00      	nop
 800c756:	e7fd      	b.n	800c754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c758:	4b3e      	ldr	r3, [pc, #248]	@ (800c854 <xPortStartScheduler+0x124>)
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a3f      	ldr	r2, [pc, #252]	@ (800c85c <xPortStartScheduler+0x12c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d10b      	bne.n	800c77a <xPortStartScheduler+0x4a>
	__asm volatile
 800c762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c766:	f383 8811 	msr	BASEPRI, r3
 800c76a:	f3bf 8f6f 	isb	sy
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	60fb      	str	r3, [r7, #12]
}
 800c774:	bf00      	nop
 800c776:	bf00      	nop
 800c778:	e7fd      	b.n	800c776 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c77a:	4b39      	ldr	r3, [pc, #228]	@ (800c860 <xPortStartScheduler+0x130>)
 800c77c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c77e:	697b      	ldr	r3, [r7, #20]
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	b2db      	uxtb	r3, r3
 800c784:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	22ff      	movs	r2, #255	@ 0xff
 800c78a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	b2db      	uxtb	r3, r3
 800c792:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	b2db      	uxtb	r3, r3
 800c798:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c79c:	b2da      	uxtb	r2, r3
 800c79e:	4b31      	ldr	r3, [pc, #196]	@ (800c864 <xPortStartScheduler+0x134>)
 800c7a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c7a2:	4b31      	ldr	r3, [pc, #196]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7a4:	2207      	movs	r2, #7
 800c7a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7a8:	e009      	b.n	800c7be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c7aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	3b01      	subs	r3, #1
 800c7b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c7b4:	78fb      	ldrb	r3, [r7, #3]
 800c7b6:	b2db      	uxtb	r3, r3
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	b2db      	uxtb	r3, r3
 800c7bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c7be:	78fb      	ldrb	r3, [r7, #3]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7c6:	2b80      	cmp	r3, #128	@ 0x80
 800c7c8:	d0ef      	beq.n	800c7aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c7ca:	4b27      	ldr	r3, [pc, #156]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	f1c3 0307 	rsb	r3, r3, #7
 800c7d2:	2b04      	cmp	r3, #4
 800c7d4:	d00b      	beq.n	800c7ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7da:	f383 8811 	msr	BASEPRI, r3
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f3bf 8f4f 	dsb	sy
 800c7e6:	60bb      	str	r3, [r7, #8]
}
 800c7e8:	bf00      	nop
 800c7ea:	bf00      	nop
 800c7ec:	e7fd      	b.n	800c7ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	021b      	lsls	r3, r3, #8
 800c7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c868 <xPortStartScheduler+0x138>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c800:	4a19      	ldr	r2, [pc, #100]	@ (800c868 <xPortStartScheduler+0x138>)
 800c802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	b2da      	uxtb	r2, r3
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c80c:	4b17      	ldr	r3, [pc, #92]	@ (800c86c <xPortStartScheduler+0x13c>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	4a16      	ldr	r2, [pc, #88]	@ (800c86c <xPortStartScheduler+0x13c>)
 800c812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c818:	4b14      	ldr	r3, [pc, #80]	@ (800c86c <xPortStartScheduler+0x13c>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a13      	ldr	r2, [pc, #76]	@ (800c86c <xPortStartScheduler+0x13c>)
 800c81e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c824:	f000 f8da 	bl	800c9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c828:	4b11      	ldr	r3, [pc, #68]	@ (800c870 <xPortStartScheduler+0x140>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c82e:	f000 f8f9 	bl	800ca24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c832:	4b10      	ldr	r3, [pc, #64]	@ (800c874 <xPortStartScheduler+0x144>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a0f      	ldr	r2, [pc, #60]	@ (800c874 <xPortStartScheduler+0x144>)
 800c838:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c83c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c83e:	f7ff ff63 	bl	800c708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c842:	f7fe fea5 	bl	800b590 <vTaskSwitchContext>
	prvTaskExitError();
 800c846:	f7ff ff1d 	bl	800c684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c84a:	2300      	movs	r3, #0
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3718      	adds	r7, #24
 800c850:	46bd      	mov	sp, r7
 800c852:	bd80      	pop	{r7, pc}
 800c854:	e000ed00 	.word	0xe000ed00
 800c858:	410fc271 	.word	0x410fc271
 800c85c:	410fc270 	.word	0x410fc270
 800c860:	e000e400 	.word	0xe000e400
 800c864:	2000116c 	.word	0x2000116c
 800c868:	20001170 	.word	0x20001170
 800c86c:	e000ed20 	.word	0xe000ed20
 800c870:	20000098 	.word	0x20000098
 800c874:	e000ef34 	.word	0xe000ef34

0800c878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c878:	b480      	push	{r7}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	607b      	str	r3, [r7, #4]
}
 800c890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c892:	4b10      	ldr	r3, [pc, #64]	@ (800c8d4 <vPortEnterCritical+0x5c>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	3301      	adds	r3, #1
 800c898:	4a0e      	ldr	r2, [pc, #56]	@ (800c8d4 <vPortEnterCritical+0x5c>)
 800c89a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c89c:	4b0d      	ldr	r3, [pc, #52]	@ (800c8d4 <vPortEnterCritical+0x5c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d110      	bne.n	800c8c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c8d8 <vPortEnterCritical+0x60>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d00b      	beq.n	800c8c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
 800c8be:	603b      	str	r3, [r7, #0]
}
 800c8c0:	bf00      	nop
 800c8c2:	bf00      	nop
 800c8c4:	e7fd      	b.n	800c8c2 <vPortEnterCritical+0x4a>
	}
}
 800c8c6:	bf00      	nop
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr
 800c8d2:	bf00      	nop
 800c8d4:	20000098 	.word	0x20000098
 800c8d8:	e000ed04 	.word	0xe000ed04

0800c8dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c8dc:	b480      	push	{r7}
 800c8de:	b083      	sub	sp, #12
 800c8e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c8e2:	4b12      	ldr	r3, [pc, #72]	@ (800c92c <vPortExitCritical+0x50>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d10b      	bne.n	800c902 <vPortExitCritical+0x26>
	__asm volatile
 800c8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ee:	f383 8811 	msr	BASEPRI, r3
 800c8f2:	f3bf 8f6f 	isb	sy
 800c8f6:	f3bf 8f4f 	dsb	sy
 800c8fa:	607b      	str	r3, [r7, #4]
}
 800c8fc:	bf00      	nop
 800c8fe:	bf00      	nop
 800c900:	e7fd      	b.n	800c8fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c902:	4b0a      	ldr	r3, [pc, #40]	@ (800c92c <vPortExitCritical+0x50>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	3b01      	subs	r3, #1
 800c908:	4a08      	ldr	r2, [pc, #32]	@ (800c92c <vPortExitCritical+0x50>)
 800c90a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c90c:	4b07      	ldr	r3, [pc, #28]	@ (800c92c <vPortExitCritical+0x50>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	2b00      	cmp	r3, #0
 800c912:	d105      	bne.n	800c920 <vPortExitCritical+0x44>
 800c914:	2300      	movs	r3, #0
 800c916:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	f383 8811 	msr	BASEPRI, r3
}
 800c91e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c920:	bf00      	nop
 800c922:	370c      	adds	r7, #12
 800c924:	46bd      	mov	sp, r7
 800c926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92a:	4770      	bx	lr
 800c92c:	20000098 	.word	0x20000098

0800c930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c930:	f3ef 8009 	mrs	r0, PSP
 800c934:	f3bf 8f6f 	isb	sy
 800c938:	4b15      	ldr	r3, [pc, #84]	@ (800c990 <pxCurrentTCBConst>)
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	f01e 0f10 	tst.w	lr, #16
 800c940:	bf08      	it	eq
 800c942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c94a:	6010      	str	r0, [r2, #0]
 800c94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c954:	f380 8811 	msr	BASEPRI, r0
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
 800c960:	f7fe fe16 	bl	800b590 <vTaskSwitchContext>
 800c964:	f04f 0000 	mov.w	r0, #0
 800c968:	f380 8811 	msr	BASEPRI, r0
 800c96c:	bc09      	pop	{r0, r3}
 800c96e:	6819      	ldr	r1, [r3, #0]
 800c970:	6808      	ldr	r0, [r1, #0]
 800c972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c976:	f01e 0f10 	tst.w	lr, #16
 800c97a:	bf08      	it	eq
 800c97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c980:	f380 8809 	msr	PSP, r0
 800c984:	f3bf 8f6f 	isb	sy
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	f3af 8000 	nop.w

0800c990 <pxCurrentTCBConst>:
 800c990:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c994:	bf00      	nop
 800c996:	bf00      	nop

0800c998 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	607b      	str	r3, [r7, #4]
}
 800c9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c9b2:	f7fe fd33 	bl	800b41c <xTaskIncrementTick>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c9bc:	4b06      	ldr	r3, [pc, #24]	@ (800c9d8 <xPortSysTickHandler+0x40>)
 800c9be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9c2:	601a      	str	r2, [r3, #0]
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	f383 8811 	msr	BASEPRI, r3
}
 800c9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	e000ed04 	.word	0xe000ed04

0800c9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c9dc:	b480      	push	{r7}
 800c9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ca14 <vPortSetupTimerInterrupt+0x38>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800ca18 <vPortSetupTimerInterrupt+0x3c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a0a      	ldr	r2, [pc, #40]	@ (800ca1c <vPortSetupTimerInterrupt+0x40>)
 800c9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c9f6:	099b      	lsrs	r3, r3, #6
 800c9f8:	4a09      	ldr	r2, [pc, #36]	@ (800ca20 <vPortSetupTimerInterrupt+0x44>)
 800c9fa:	3b01      	subs	r3, #1
 800c9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c9fe:	4b04      	ldr	r3, [pc, #16]	@ (800ca10 <vPortSetupTimerInterrupt+0x34>)
 800ca00:	2207      	movs	r2, #7
 800ca02:	601a      	str	r2, [r3, #0]
}
 800ca04:	bf00      	nop
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	e000e010 	.word	0xe000e010
 800ca14:	e000e018 	.word	0xe000e018
 800ca18:	20000000 	.word	0x20000000
 800ca1c:	10624dd3 	.word	0x10624dd3
 800ca20:	e000e014 	.word	0xe000e014

0800ca24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ca24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ca34 <vPortEnableVFP+0x10>
 800ca28:	6801      	ldr	r1, [r0, #0]
 800ca2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ca2e:	6001      	str	r1, [r0, #0]
 800ca30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ca32:	bf00      	nop
 800ca34:	e000ed88 	.word	0xe000ed88

0800ca38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ca3e:	f3ef 8305 	mrs	r3, IPSR
 800ca42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b0f      	cmp	r3, #15
 800ca48:	d915      	bls.n	800ca76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ca4a:	4a18      	ldr	r2, [pc, #96]	@ (800caac <vPortValidateInterruptPriority+0x74>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4413      	add	r3, r2
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ca54:	4b16      	ldr	r3, [pc, #88]	@ (800cab0 <vPortValidateInterruptPriority+0x78>)
 800ca56:	781b      	ldrb	r3, [r3, #0]
 800ca58:	7afa      	ldrb	r2, [r7, #11]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d20b      	bcs.n	800ca76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
 800ca72:	bf00      	nop
 800ca74:	e7fd      	b.n	800ca72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ca76:	4b0f      	ldr	r3, [pc, #60]	@ (800cab4 <vPortValidateInterruptPriority+0x7c>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ca7e:	4b0e      	ldr	r3, [pc, #56]	@ (800cab8 <vPortValidateInterruptPriority+0x80>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d90b      	bls.n	800ca9e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	603b      	str	r3, [r7, #0]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <vPortValidateInterruptPriority+0x62>
	}
 800ca9e:	bf00      	nop
 800caa0:	3714      	adds	r7, #20
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
 800caaa:	bf00      	nop
 800caac:	e000e3f0 	.word	0xe000e3f0
 800cab0:	2000116c 	.word	0x2000116c
 800cab4:	e000ed0c 	.word	0xe000ed0c
 800cab8:	20001170 	.word	0x20001170

0800cabc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b08a      	sub	sp, #40	@ 0x28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cac4:	2300      	movs	r3, #0
 800cac6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cac8:	f7fe fbec 	bl	800b2a4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cacc:	4b5c      	ldr	r3, [pc, #368]	@ (800cc40 <pvPortMalloc+0x184>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cad4:	f000 f924 	bl	800cd20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cad8:	4b5a      	ldr	r3, [pc, #360]	@ (800cc44 <pvPortMalloc+0x188>)
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4013      	ands	r3, r2
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	f040 8095 	bne.w	800cc10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d01e      	beq.n	800cb2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800caec:	2208      	movs	r2, #8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	4413      	add	r3, r2
 800caf2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f003 0307 	and.w	r3, r3, #7
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d015      	beq.n	800cb2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f023 0307 	bic.w	r3, r3, #7
 800cb04:	3308      	adds	r3, #8
 800cb06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f003 0307 	and.w	r3, r3, #7
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00b      	beq.n	800cb2a <pvPortMalloc+0x6e>
	__asm volatile
 800cb12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb16:	f383 8811 	msr	BASEPRI, r3
 800cb1a:	f3bf 8f6f 	isb	sy
 800cb1e:	f3bf 8f4f 	dsb	sy
 800cb22:	617b      	str	r3, [r7, #20]
}
 800cb24:	bf00      	nop
 800cb26:	bf00      	nop
 800cb28:	e7fd      	b.n	800cb26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d06f      	beq.n	800cc10 <pvPortMalloc+0x154>
 800cb30:	4b45      	ldr	r3, [pc, #276]	@ (800cc48 <pvPortMalloc+0x18c>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	687a      	ldr	r2, [r7, #4]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d86a      	bhi.n	800cc10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cb3a:	4b44      	ldr	r3, [pc, #272]	@ (800cc4c <pvPortMalloc+0x190>)
 800cb3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cb3e:	4b43      	ldr	r3, [pc, #268]	@ (800cc4c <pvPortMalloc+0x190>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb44:	e004      	b.n	800cb50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cb46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	687a      	ldr	r2, [r7, #4]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d903      	bls.n	800cb62 <pvPortMalloc+0xa6>
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1f1      	bne.n	800cb46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cb62:	4b37      	ldr	r3, [pc, #220]	@ (800cc40 <pvPortMalloc+0x184>)
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	d051      	beq.n	800cc10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2208      	movs	r2, #8
 800cb72:	4413      	add	r3, r2
 800cb74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	6a3b      	ldr	r3, [r7, #32]
 800cb7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cb7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	1ad2      	subs	r2, r2, r3
 800cb86:	2308      	movs	r3, #8
 800cb88:	005b      	lsls	r3, r3, #1
 800cb8a:	429a      	cmp	r2, r3
 800cb8c:	d920      	bls.n	800cbd0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cb8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	4413      	add	r3, r2
 800cb94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	f003 0307 	and.w	r3, r3, #7
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d00b      	beq.n	800cbb8 <pvPortMalloc+0xfc>
	__asm volatile
 800cba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cba4:	f383 8811 	msr	BASEPRI, r3
 800cba8:	f3bf 8f6f 	isb	sy
 800cbac:	f3bf 8f4f 	dsb	sy
 800cbb0:	613b      	str	r3, [r7, #16]
}
 800cbb2:	bf00      	nop
 800cbb4:	bf00      	nop
 800cbb6:	e7fd      	b.n	800cbb4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	1ad2      	subs	r2, r2, r3
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cbca:	69b8      	ldr	r0, [r7, #24]
 800cbcc:	f000 f90a 	bl	800cde4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cbd0:	4b1d      	ldr	r3, [pc, #116]	@ (800cc48 <pvPortMalloc+0x18c>)
 800cbd2:	681a      	ldr	r2, [r3, #0]
 800cbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	1ad3      	subs	r3, r2, r3
 800cbda:	4a1b      	ldr	r2, [pc, #108]	@ (800cc48 <pvPortMalloc+0x18c>)
 800cbdc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cbde:	4b1a      	ldr	r3, [pc, #104]	@ (800cc48 <pvPortMalloc+0x18c>)
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	4b1b      	ldr	r3, [pc, #108]	@ (800cc50 <pvPortMalloc+0x194>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d203      	bcs.n	800cbf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cbea:	4b17      	ldr	r3, [pc, #92]	@ (800cc48 <pvPortMalloc+0x18c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	4a18      	ldr	r2, [pc, #96]	@ (800cc50 <pvPortMalloc+0x194>)
 800cbf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	685a      	ldr	r2, [r3, #4]
 800cbf6:	4b13      	ldr	r3, [pc, #76]	@ (800cc44 <pvPortMalloc+0x188>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	431a      	orrs	r2, r3
 800cbfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbfe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc02:	2200      	movs	r2, #0
 800cc04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cc06:	4b13      	ldr	r3, [pc, #76]	@ (800cc54 <pvPortMalloc+0x198>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	4a11      	ldr	r2, [pc, #68]	@ (800cc54 <pvPortMalloc+0x198>)
 800cc0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cc10:	f7fe fb56 	bl	800b2c0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d00b      	beq.n	800cc36 <pvPortMalloc+0x17a>
	__asm volatile
 800cc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	60fb      	str	r3, [r7, #12]
}
 800cc30:	bf00      	nop
 800cc32:	bf00      	nop
 800cc34:	e7fd      	b.n	800cc32 <pvPortMalloc+0x176>
	return pvReturn;
 800cc36:	69fb      	ldr	r3, [r7, #28]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3728      	adds	r7, #40	@ 0x28
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	20004d7c 	.word	0x20004d7c
 800cc44:	20004d90 	.word	0x20004d90
 800cc48:	20004d80 	.word	0x20004d80
 800cc4c:	20004d74 	.word	0x20004d74
 800cc50:	20004d84 	.word	0x20004d84
 800cc54:	20004d88 	.word	0x20004d88

0800cc58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b086      	sub	sp, #24
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d04f      	beq.n	800cd0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cc6a:	2308      	movs	r3, #8
 800cc6c:	425b      	negs	r3, r3
 800cc6e:	697a      	ldr	r2, [r7, #20]
 800cc70:	4413      	add	r3, r2
 800cc72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cc74:	697b      	ldr	r3, [r7, #20]
 800cc76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	4b25      	ldr	r3, [pc, #148]	@ (800cd14 <vPortFree+0xbc>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4013      	ands	r3, r2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d10b      	bne.n	800cc9e <vPortFree+0x46>
	__asm volatile
 800cc86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc8a:	f383 8811 	msr	BASEPRI, r3
 800cc8e:	f3bf 8f6f 	isb	sy
 800cc92:	f3bf 8f4f 	dsb	sy
 800cc96:	60fb      	str	r3, [r7, #12]
}
 800cc98:	bf00      	nop
 800cc9a:	bf00      	nop
 800cc9c:	e7fd      	b.n	800cc9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d00b      	beq.n	800ccbe <vPortFree+0x66>
	__asm volatile
 800cca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	60bb      	str	r3, [r7, #8]
}
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	e7fd      	b.n	800ccba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	685a      	ldr	r2, [r3, #4]
 800ccc2:	4b14      	ldr	r3, [pc, #80]	@ (800cd14 <vPortFree+0xbc>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4013      	ands	r3, r2
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01e      	beq.n	800cd0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d11a      	bne.n	800cd0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	4b0e      	ldr	r3, [pc, #56]	@ (800cd14 <vPortFree+0xbc>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	43db      	mvns	r3, r3
 800ccde:	401a      	ands	r2, r3
 800cce0:	693b      	ldr	r3, [r7, #16]
 800cce2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cce4:	f7fe fade 	bl	800b2a4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	685a      	ldr	r2, [r3, #4]
 800ccec:	4b0a      	ldr	r3, [pc, #40]	@ (800cd18 <vPortFree+0xc0>)
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	4413      	add	r3, r2
 800ccf2:	4a09      	ldr	r2, [pc, #36]	@ (800cd18 <vPortFree+0xc0>)
 800ccf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ccf6:	6938      	ldr	r0, [r7, #16]
 800ccf8:	f000 f874 	bl	800cde4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ccfc:	4b07      	ldr	r3, [pc, #28]	@ (800cd1c <vPortFree+0xc4>)
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	3301      	adds	r3, #1
 800cd02:	4a06      	ldr	r2, [pc, #24]	@ (800cd1c <vPortFree+0xc4>)
 800cd04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cd06:	f7fe fadb 	bl	800b2c0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cd0a:	bf00      	nop
 800cd0c:	3718      	adds	r7, #24
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20004d90 	.word	0x20004d90
 800cd18:	20004d80 	.word	0x20004d80
 800cd1c:	20004d8c 	.word	0x20004d8c

0800cd20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cd20:	b480      	push	{r7}
 800cd22:	b085      	sub	sp, #20
 800cd24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cd26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cd2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cd2c:	4b27      	ldr	r3, [pc, #156]	@ (800cdcc <prvHeapInit+0xac>)
 800cd2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f003 0307 	and.w	r3, r3, #7
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d00c      	beq.n	800cd54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	3307      	adds	r3, #7
 800cd3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	f023 0307 	bic.w	r3, r3, #7
 800cd46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cd48:	68ba      	ldr	r2, [r7, #8]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1ad3      	subs	r3, r2, r3
 800cd4e:	4a1f      	ldr	r2, [pc, #124]	@ (800cdcc <prvHeapInit+0xac>)
 800cd50:	4413      	add	r3, r2
 800cd52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cd58:	4a1d      	ldr	r2, [pc, #116]	@ (800cdd0 <prvHeapInit+0xb0>)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cd5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cdd0 <prvHeapInit+0xb0>)
 800cd60:	2200      	movs	r2, #0
 800cd62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	68ba      	ldr	r2, [r7, #8]
 800cd68:	4413      	add	r3, r2
 800cd6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cd6c:	2208      	movs	r2, #8
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	1a9b      	subs	r3, r3, r2
 800cd72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f023 0307 	bic.w	r3, r3, #7
 800cd7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	4a15      	ldr	r2, [pc, #84]	@ (800cdd4 <prvHeapInit+0xb4>)
 800cd80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cd82:	4b14      	ldr	r3, [pc, #80]	@ (800cdd4 <prvHeapInit+0xb4>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	2200      	movs	r2, #0
 800cd88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cd8a:	4b12      	ldr	r3, [pc, #72]	@ (800cdd4 <prvHeapInit+0xb4>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	1ad2      	subs	r2, r2, r3
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cda0:	4b0c      	ldr	r3, [pc, #48]	@ (800cdd4 <prvHeapInit+0xb4>)
 800cda2:	681a      	ldr	r2, [r3, #0]
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	4a0a      	ldr	r2, [pc, #40]	@ (800cdd8 <prvHeapInit+0xb8>)
 800cdae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	4a09      	ldr	r2, [pc, #36]	@ (800cddc <prvHeapInit+0xbc>)
 800cdb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cdb8:	4b09      	ldr	r3, [pc, #36]	@ (800cde0 <prvHeapInit+0xc0>)
 800cdba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cdbe:	601a      	str	r2, [r3, #0]
}
 800cdc0:	bf00      	nop
 800cdc2:	3714      	adds	r7, #20
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	20001174 	.word	0x20001174
 800cdd0:	20004d74 	.word	0x20004d74
 800cdd4:	20004d7c 	.word	0x20004d7c
 800cdd8:	20004d84 	.word	0x20004d84
 800cddc:	20004d80 	.word	0x20004d80
 800cde0:	20004d90 	.word	0x20004d90

0800cde4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cde4:	b480      	push	{r7}
 800cde6:	b085      	sub	sp, #20
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cdec:	4b28      	ldr	r3, [pc, #160]	@ (800ce90 <prvInsertBlockIntoFreeList+0xac>)
 800cdee:	60fb      	str	r3, [r7, #12]
 800cdf0:	e002      	b.n	800cdf8 <prvInsertBlockIntoFreeList+0x14>
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	60fb      	str	r3, [r7, #12]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	687a      	ldr	r2, [r7, #4]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	d8f7      	bhi.n	800cdf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	68ba      	ldr	r2, [r7, #8]
 800ce0c:	4413      	add	r3, r2
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	429a      	cmp	r2, r3
 800ce12:	d108      	bne.n	800ce26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	685a      	ldr	r2, [r3, #4]
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	441a      	add	r2, r3
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	685b      	ldr	r3, [r3, #4]
 800ce2e:	68ba      	ldr	r2, [r7, #8]
 800ce30:	441a      	add	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d118      	bne.n	800ce6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	4b15      	ldr	r3, [pc, #84]	@ (800ce94 <prvInsertBlockIntoFreeList+0xb0>)
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d00d      	beq.n	800ce62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	685a      	ldr	r2, [r3, #4]
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	685b      	ldr	r3, [r3, #4]
 800ce50:	441a      	add	r2, r3
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	681a      	ldr	r2, [r3, #0]
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	601a      	str	r2, [r3, #0]
 800ce60:	e008      	b.n	800ce74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ce62:	4b0c      	ldr	r3, [pc, #48]	@ (800ce94 <prvInsertBlockIntoFreeList+0xb0>)
 800ce64:	681a      	ldr	r2, [r3, #0]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	601a      	str	r2, [r3, #0]
 800ce6a:	e003      	b.n	800ce74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ce74:	68fa      	ldr	r2, [r7, #12]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	429a      	cmp	r2, r3
 800ce7a:	d002      	beq.n	800ce82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce82:	bf00      	nop
 800ce84:	3714      	adds	r7, #20
 800ce86:	46bd      	mov	sp, r7
 800ce88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8c:	4770      	bx	lr
 800ce8e:	bf00      	nop
 800ce90:	20004d74 	.word	0x20004d74
 800ce94:	20004d7c 	.word	0x20004d7c

0800ce98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce98:	b580      	push	{r7, lr}
 800ce9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	4912      	ldr	r1, [pc, #72]	@ (800cee8 <MX_USB_DEVICE_Init+0x50>)
 800cea0:	4812      	ldr	r0, [pc, #72]	@ (800ceec <MX_USB_DEVICE_Init+0x54>)
 800cea2:	f7fb f92f 	bl	8008104 <USBD_Init>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ceac:	f7f4 f86c 	bl	8000f88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ceb0:	490f      	ldr	r1, [pc, #60]	@ (800cef0 <MX_USB_DEVICE_Init+0x58>)
 800ceb2:	480e      	ldr	r0, [pc, #56]	@ (800ceec <MX_USB_DEVICE_Init+0x54>)
 800ceb4:	f7fb f956 	bl	8008164 <USBD_RegisterClass>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d001      	beq.n	800cec2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cebe:	f7f4 f863 	bl	8000f88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800cec2:	490c      	ldr	r1, [pc, #48]	@ (800cef4 <MX_USB_DEVICE_Init+0x5c>)
 800cec4:	4809      	ldr	r0, [pc, #36]	@ (800ceec <MX_USB_DEVICE_Init+0x54>)
 800cec6:	f7fb f84d 	bl	8007f64 <USBD_CDC_RegisterInterface>
 800ceca:	4603      	mov	r3, r0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ced0:	f7f4 f85a 	bl	8000f88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ced4:	4805      	ldr	r0, [pc, #20]	@ (800ceec <MX_USB_DEVICE_Init+0x54>)
 800ced6:	f7fb f97b 	bl	80081d0 <USBD_Start>
 800ceda:	4603      	mov	r3, r0
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cee0:	f7f4 f852 	bl	8000f88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cee4:	bf00      	nop
 800cee6:	bd80      	pop	{r7, pc}
 800cee8:	200000b0 	.word	0x200000b0
 800ceec:	20004d94 	.word	0x20004d94
 800cef0:	20000018 	.word	0x20000018
 800cef4:	2000009c 	.word	0x2000009c

0800cef8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800cefc:	2200      	movs	r2, #0
 800cefe:	4905      	ldr	r1, [pc, #20]	@ (800cf14 <CDC_Init_HS+0x1c>)
 800cf00:	4805      	ldr	r0, [pc, #20]	@ (800cf18 <CDC_Init_HS+0x20>)
 800cf02:	f7fb f849 	bl	8007f98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800cf06:	4905      	ldr	r1, [pc, #20]	@ (800cf1c <CDC_Init_HS+0x24>)
 800cf08:	4803      	ldr	r0, [pc, #12]	@ (800cf18 <CDC_Init_HS+0x20>)
 800cf0a:	f7fb f867 	bl	8007fdc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cf0e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	20005870 	.word	0x20005870
 800cf18:	20004d94 	.word	0x20004d94
 800cf1c:	20005070 	.word	0x20005070

0800cf20 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800cf20:	b480      	push	{r7}
 800cf22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800cf24:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800cf26:	4618      	mov	r0, r3
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr

0800cf30 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cf30:	b480      	push	{r7}
 800cf32:	b083      	sub	sp, #12
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	4603      	mov	r3, r0
 800cf38:	6039      	str	r1, [r7, #0]
 800cf3a:	71fb      	strb	r3, [r7, #7]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	2b23      	cmp	r3, #35	@ 0x23
 800cf44:	d84a      	bhi.n	800cfdc <CDC_Control_HS+0xac>
 800cf46:	a201      	add	r2, pc, #4	@ (adr r2, 800cf4c <CDC_Control_HS+0x1c>)
 800cf48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf4c:	0800cfdd 	.word	0x0800cfdd
 800cf50:	0800cfdd 	.word	0x0800cfdd
 800cf54:	0800cfdd 	.word	0x0800cfdd
 800cf58:	0800cfdd 	.word	0x0800cfdd
 800cf5c:	0800cfdd 	.word	0x0800cfdd
 800cf60:	0800cfdd 	.word	0x0800cfdd
 800cf64:	0800cfdd 	.word	0x0800cfdd
 800cf68:	0800cfdd 	.word	0x0800cfdd
 800cf6c:	0800cfdd 	.word	0x0800cfdd
 800cf70:	0800cfdd 	.word	0x0800cfdd
 800cf74:	0800cfdd 	.word	0x0800cfdd
 800cf78:	0800cfdd 	.word	0x0800cfdd
 800cf7c:	0800cfdd 	.word	0x0800cfdd
 800cf80:	0800cfdd 	.word	0x0800cfdd
 800cf84:	0800cfdd 	.word	0x0800cfdd
 800cf88:	0800cfdd 	.word	0x0800cfdd
 800cf8c:	0800cfdd 	.word	0x0800cfdd
 800cf90:	0800cfdd 	.word	0x0800cfdd
 800cf94:	0800cfdd 	.word	0x0800cfdd
 800cf98:	0800cfdd 	.word	0x0800cfdd
 800cf9c:	0800cfdd 	.word	0x0800cfdd
 800cfa0:	0800cfdd 	.word	0x0800cfdd
 800cfa4:	0800cfdd 	.word	0x0800cfdd
 800cfa8:	0800cfdd 	.word	0x0800cfdd
 800cfac:	0800cfdd 	.word	0x0800cfdd
 800cfb0:	0800cfdd 	.word	0x0800cfdd
 800cfb4:	0800cfdd 	.word	0x0800cfdd
 800cfb8:	0800cfdd 	.word	0x0800cfdd
 800cfbc:	0800cfdd 	.word	0x0800cfdd
 800cfc0:	0800cfdd 	.word	0x0800cfdd
 800cfc4:	0800cfdd 	.word	0x0800cfdd
 800cfc8:	0800cfdd 	.word	0x0800cfdd
 800cfcc:	0800cfdd 	.word	0x0800cfdd
 800cfd0:	0800cfdd 	.word	0x0800cfdd
 800cfd4:	0800cfdd 	.word	0x0800cfdd
 800cfd8:	0800cfdd 	.word	0x0800cfdd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cfdc:	bf00      	nop
  }

  return (USBD_OK);
 800cfde:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr

0800cfec <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	4805      	ldr	r0, [pc, #20]	@ (800d010 <CDC_Receive_HS+0x24>)
 800cffa:	f7fa ffef 	bl	8007fdc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800cffe:	4804      	ldr	r0, [pc, #16]	@ (800d010 <CDC_Receive_HS+0x24>)
 800d000:	f7fb f84a 	bl	8008098 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d004:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}
 800d00e:	bf00      	nop
 800d010:	20004d94 	.word	0x20004d94

0800d014 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b084      	sub	sp, #16
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
 800d01c:	460b      	mov	r3, r1
 800d01e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d020:	2300      	movs	r3, #0
 800d022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d024:	4b0d      	ldr	r3, [pc, #52]	@ (800d05c <CDC_Transmit_HS+0x48>)
 800d026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d02a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d032:	2b00      	cmp	r3, #0
 800d034:	d001      	beq.n	800d03a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d036:	2301      	movs	r3, #1
 800d038:	e00b      	b.n	800d052 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d03a:	887b      	ldrh	r3, [r7, #2]
 800d03c:	461a      	mov	r2, r3
 800d03e:	6879      	ldr	r1, [r7, #4]
 800d040:	4806      	ldr	r0, [pc, #24]	@ (800d05c <CDC_Transmit_HS+0x48>)
 800d042:	f7fa ffa9 	bl	8007f98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d046:	4805      	ldr	r0, [pc, #20]	@ (800d05c <CDC_Transmit_HS+0x48>)
 800d048:	f7fa ffe6 	bl	8008018 <USBD_CDC_TransmitPacket>
 800d04c:	4603      	mov	r3, r0
 800d04e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d050:	7bfb      	ldrb	r3, [r7, #15]
}
 800d052:	4618      	mov	r0, r3
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	20004d94 	.word	0x20004d94

0800d060 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d060:	b480      	push	{r7}
 800d062:	b087      	sub	sp, #28
 800d064:	af00      	add	r7, sp, #0
 800d066:	60f8      	str	r0, [r7, #12]
 800d068:	60b9      	str	r1, [r7, #8]
 800d06a:	4613      	mov	r3, r2
 800d06c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d06e:	2300      	movs	r3, #0
 800d070:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d072:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d076:	4618      	mov	r0, r3
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr
	...

0800d084 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	6039      	str	r1, [r7, #0]
 800d08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	2212      	movs	r2, #18
 800d094:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d096:	4b03      	ldr	r3, [pc, #12]	@ (800d0a4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d098:	4618      	mov	r0, r3
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	200000cc 	.word	0x200000cc

0800d0a8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b083      	sub	sp, #12
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	6039      	str	r1, [r7, #0]
 800d0b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	2204      	movs	r2, #4
 800d0b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d0ba:	4b03      	ldr	r3, [pc, #12]	@ (800d0c8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	200000e0 	.word	0x200000e0

0800d0cc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	6039      	str	r1, [r7, #0]
 800d0d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0d8:	79fb      	ldrb	r3, [r7, #7]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d105      	bne.n	800d0ea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d0de:	683a      	ldr	r2, [r7, #0]
 800d0e0:	4907      	ldr	r1, [pc, #28]	@ (800d100 <USBD_HS_ProductStrDescriptor+0x34>)
 800d0e2:	4808      	ldr	r0, [pc, #32]	@ (800d104 <USBD_HS_ProductStrDescriptor+0x38>)
 800d0e4:	f7fc fa24 	bl	8009530 <USBD_GetString>
 800d0e8:	e004      	b.n	800d0f4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d0ea:	683a      	ldr	r2, [r7, #0]
 800d0ec:	4904      	ldr	r1, [pc, #16]	@ (800d100 <USBD_HS_ProductStrDescriptor+0x34>)
 800d0ee:	4805      	ldr	r0, [pc, #20]	@ (800d104 <USBD_HS_ProductStrDescriptor+0x38>)
 800d0f0:	f7fc fa1e 	bl	8009530 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0f4:	4b02      	ldr	r3, [pc, #8]	@ (800d100 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}
 800d0fe:	bf00      	nop
 800d100:	20006070 	.word	0x20006070
 800d104:	0800db48 	.word	0x0800db48

0800d108 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	4603      	mov	r3, r0
 800d110:	6039      	str	r1, [r7, #0]
 800d112:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d114:	683a      	ldr	r2, [r7, #0]
 800d116:	4904      	ldr	r1, [pc, #16]	@ (800d128 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d118:	4804      	ldr	r0, [pc, #16]	@ (800d12c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d11a:	f7fc fa09 	bl	8009530 <USBD_GetString>
  return USBD_StrDesc;
 800d11e:	4b02      	ldr	r3, [pc, #8]	@ (800d128 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d120:	4618      	mov	r0, r3
 800d122:	3708      	adds	r7, #8
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}
 800d128:	20006070 	.word	0x20006070
 800d12c:	0800db60 	.word	0x0800db60

0800d130 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	4603      	mov	r3, r0
 800d138:	6039      	str	r1, [r7, #0]
 800d13a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	221a      	movs	r2, #26
 800d140:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d142:	f000 f843 	bl	800d1cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d146:	4b02      	ldr	r3, [pc, #8]	@ (800d150 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	200000e4 	.word	0x200000e4

0800d154 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	4603      	mov	r3, r0
 800d15c:	6039      	str	r1, [r7, #0]
 800d15e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d105      	bne.n	800d172 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	4907      	ldr	r1, [pc, #28]	@ (800d188 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d16a:	4808      	ldr	r0, [pc, #32]	@ (800d18c <USBD_HS_ConfigStrDescriptor+0x38>)
 800d16c:	f7fc f9e0 	bl	8009530 <USBD_GetString>
 800d170:	e004      	b.n	800d17c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d172:	683a      	ldr	r2, [r7, #0]
 800d174:	4904      	ldr	r1, [pc, #16]	@ (800d188 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d176:	4805      	ldr	r0, [pc, #20]	@ (800d18c <USBD_HS_ConfigStrDescriptor+0x38>)
 800d178:	f7fc f9da 	bl	8009530 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d17c:	4b02      	ldr	r3, [pc, #8]	@ (800d188 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	20006070 	.word	0x20006070
 800d18c:	0800db74 	.word	0x0800db74

0800d190 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b082      	sub	sp, #8
 800d194:	af00      	add	r7, sp, #0
 800d196:	4603      	mov	r3, r0
 800d198:	6039      	str	r1, [r7, #0]
 800d19a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d19c:	79fb      	ldrb	r3, [r7, #7]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d105      	bne.n	800d1ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	4907      	ldr	r1, [pc, #28]	@ (800d1c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d1a6:	4808      	ldr	r0, [pc, #32]	@ (800d1c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d1a8:	f7fc f9c2 	bl	8009530 <USBD_GetString>
 800d1ac:	e004      	b.n	800d1b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	4904      	ldr	r1, [pc, #16]	@ (800d1c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d1b2:	4805      	ldr	r0, [pc, #20]	@ (800d1c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d1b4:	f7fc f9bc 	bl	8009530 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d1b8:	4b02      	ldr	r3, [pc, #8]	@ (800d1c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	3708      	adds	r7, #8
 800d1be:	46bd      	mov	sp, r7
 800d1c0:	bd80      	pop	{r7, pc}
 800d1c2:	bf00      	nop
 800d1c4:	20006070 	.word	0x20006070
 800d1c8:	0800db80 	.word	0x0800db80

0800d1cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1d2:	4b0f      	ldr	r3, [pc, #60]	@ (800d210 <Get_SerialNum+0x44>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1d8:	4b0e      	ldr	r3, [pc, #56]	@ (800d214 <Get_SerialNum+0x48>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d1de:	4b0e      	ldr	r3, [pc, #56]	@ (800d218 <Get_SerialNum+0x4c>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d1e4:	68fa      	ldr	r2, [r7, #12]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d009      	beq.n	800d206 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d1f2:	2208      	movs	r2, #8
 800d1f4:	4909      	ldr	r1, [pc, #36]	@ (800d21c <Get_SerialNum+0x50>)
 800d1f6:	68f8      	ldr	r0, [r7, #12]
 800d1f8:	f000 f814 	bl	800d224 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d1fc:	2204      	movs	r2, #4
 800d1fe:	4908      	ldr	r1, [pc, #32]	@ (800d220 <Get_SerialNum+0x54>)
 800d200:	68b8      	ldr	r0, [r7, #8]
 800d202:	f000 f80f 	bl	800d224 <IntToUnicode>
  }
}
 800d206:	bf00      	nop
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	1fff7a10 	.word	0x1fff7a10
 800d214:	1fff7a14 	.word	0x1fff7a14
 800d218:	1fff7a18 	.word	0x1fff7a18
 800d21c:	200000e6 	.word	0x200000e6
 800d220:	200000f6 	.word	0x200000f6

0800d224 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d224:	b480      	push	{r7}
 800d226:	b087      	sub	sp, #28
 800d228:	af00      	add	r7, sp, #0
 800d22a:	60f8      	str	r0, [r7, #12]
 800d22c:	60b9      	str	r1, [r7, #8]
 800d22e:	4613      	mov	r3, r2
 800d230:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d232:	2300      	movs	r3, #0
 800d234:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d236:	2300      	movs	r3, #0
 800d238:	75fb      	strb	r3, [r7, #23]
 800d23a:	e027      	b.n	800d28c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	0f1b      	lsrs	r3, r3, #28
 800d240:	2b09      	cmp	r3, #9
 800d242:	d80b      	bhi.n	800d25c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	0f1b      	lsrs	r3, r3, #28
 800d248:	b2da      	uxtb	r2, r3
 800d24a:	7dfb      	ldrb	r3, [r7, #23]
 800d24c:	005b      	lsls	r3, r3, #1
 800d24e:	4619      	mov	r1, r3
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	440b      	add	r3, r1
 800d254:	3230      	adds	r2, #48	@ 0x30
 800d256:	b2d2      	uxtb	r2, r2
 800d258:	701a      	strb	r2, [r3, #0]
 800d25a:	e00a      	b.n	800d272 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	0f1b      	lsrs	r3, r3, #28
 800d260:	b2da      	uxtb	r2, r3
 800d262:	7dfb      	ldrb	r3, [r7, #23]
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	4619      	mov	r1, r3
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	440b      	add	r3, r1
 800d26c:	3237      	adds	r2, #55	@ 0x37
 800d26e:	b2d2      	uxtb	r2, r2
 800d270:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	011b      	lsls	r3, r3, #4
 800d276:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d278:	7dfb      	ldrb	r3, [r7, #23]
 800d27a:	005b      	lsls	r3, r3, #1
 800d27c:	3301      	adds	r3, #1
 800d27e:	68ba      	ldr	r2, [r7, #8]
 800d280:	4413      	add	r3, r2
 800d282:	2200      	movs	r2, #0
 800d284:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	3301      	adds	r3, #1
 800d28a:	75fb      	strb	r3, [r7, #23]
 800d28c:	7dfa      	ldrb	r2, [r7, #23]
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	429a      	cmp	r2, r3
 800d292:	d3d3      	bcc.n	800d23c <IntToUnicode+0x18>
  }
}
 800d294:	bf00      	nop
 800d296:	bf00      	nop
 800d298:	371c      	adds	r7, #28
 800d29a:	46bd      	mov	sp, r7
 800d29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a0:	4770      	bx	lr
	...

0800d2a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08a      	sub	sp, #40	@ 0x28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2ac:	f107 0314 	add.w	r3, r7, #20
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	609a      	str	r2, [r3, #8]
 800d2b8:	60da      	str	r2, [r3, #12]
 800d2ba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a24      	ldr	r2, [pc, #144]	@ (800d354 <HAL_PCD_MspInit+0xb0>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d141      	bne.n	800d34a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	613b      	str	r3, [r7, #16]
 800d2ca:	4b23      	ldr	r3, [pc, #140]	@ (800d358 <HAL_PCD_MspInit+0xb4>)
 800d2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2ce:	4a22      	ldr	r2, [pc, #136]	@ (800d358 <HAL_PCD_MspInit+0xb4>)
 800d2d0:	f043 0302 	orr.w	r3, r3, #2
 800d2d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d2d6:	4b20      	ldr	r3, [pc, #128]	@ (800d358 <HAL_PCD_MspInit+0xb4>)
 800d2d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d2da:	f003 0302 	and.w	r3, r3, #2
 800d2de:	613b      	str	r3, [r7, #16]
 800d2e0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d2e2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800d2e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2e8:	2302      	movs	r3, #2
 800d2ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d2f4:	230c      	movs	r3, #12
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d2f8:	f107 0314 	add.w	r3, r7, #20
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	4817      	ldr	r0, [pc, #92]	@ (800d35c <HAL_PCD_MspInit+0xb8>)
 800d300:	f7f4 fe30 	bl	8001f64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d304:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d30a:	2300      	movs	r3, #0
 800d30c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d30e:	2300      	movs	r3, #0
 800d310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d312:	f107 0314 	add.w	r3, r7, #20
 800d316:	4619      	mov	r1, r3
 800d318:	4810      	ldr	r0, [pc, #64]	@ (800d35c <HAL_PCD_MspInit+0xb8>)
 800d31a:	f7f4 fe23 	bl	8001f64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d31e:	2300      	movs	r3, #0
 800d320:	60fb      	str	r3, [r7, #12]
 800d322:	4b0d      	ldr	r3, [pc, #52]	@ (800d358 <HAL_PCD_MspInit+0xb4>)
 800d324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d326:	4a0c      	ldr	r2, [pc, #48]	@ (800d358 <HAL_PCD_MspInit+0xb4>)
 800d328:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d32c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d32e:	4b0a      	ldr	r3, [pc, #40]	@ (800d358 <HAL_PCD_MspInit+0xb4>)
 800d330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d332:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d336:	60fb      	str	r3, [r7, #12]
 800d338:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d33a:	2200      	movs	r2, #0
 800d33c:	2105      	movs	r1, #5
 800d33e:	204d      	movs	r0, #77	@ 0x4d
 800d340:	f7f4 fbde 	bl	8001b00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d344:	204d      	movs	r0, #77	@ 0x4d
 800d346:	f7f4 fbf7 	bl	8001b38 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d34a:	bf00      	nop
 800d34c:	3728      	adds	r7, #40	@ 0x28
 800d34e:	46bd      	mov	sp, r7
 800d350:	bd80      	pop	{r7, pc}
 800d352:	bf00      	nop
 800d354:	40040000 	.word	0x40040000
 800d358:	40023800 	.word	0x40023800
 800d35c:	40020400 	.word	0x40020400

0800d360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d374:	4619      	mov	r1, r3
 800d376:	4610      	mov	r0, r2
 800d378:	f7fa ff77 	bl	800826a <USBD_LL_SetupStage>
}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d396:	78fa      	ldrb	r2, [r7, #3]
 800d398:	6879      	ldr	r1, [r7, #4]
 800d39a:	4613      	mov	r3, r2
 800d39c:	00db      	lsls	r3, r3, #3
 800d39e:	4413      	add	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	440b      	add	r3, r1
 800d3a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d3a8:	681a      	ldr	r2, [r3, #0]
 800d3aa:	78fb      	ldrb	r3, [r7, #3]
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	f7fa ffb1 	bl	8008314 <USBD_LL_DataOutStage>
}
 800d3b2:	bf00      	nop
 800d3b4:	3708      	adds	r7, #8
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b082      	sub	sp, #8
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	6078      	str	r0, [r7, #4]
 800d3c2:	460b      	mov	r3, r1
 800d3c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d3cc:	78fa      	ldrb	r2, [r7, #3]
 800d3ce:	6879      	ldr	r1, [r7, #4]
 800d3d0:	4613      	mov	r3, r2
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	4413      	add	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	440b      	add	r3, r1
 800d3da:	3320      	adds	r3, #32
 800d3dc:	681a      	ldr	r2, [r3, #0]
 800d3de:	78fb      	ldrb	r3, [r7, #3]
 800d3e0:	4619      	mov	r1, r3
 800d3e2:	f7fb f84a 	bl	800847a <USBD_LL_DataInStage>
}
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b082      	sub	sp, #8
 800d3f2:	af00      	add	r7, sp, #0
 800d3f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f7fb f984 	bl	800870a <USBD_LL_SOF>
}
 800d402:	bf00      	nop
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d40a:	b580      	push	{r7, lr}
 800d40c:	b084      	sub	sp, #16
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d412:	2301      	movs	r3, #1
 800d414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	79db      	ldrb	r3, [r3, #7]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d102      	bne.n	800d424 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]
 800d422:	e008      	b.n	800d436 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	79db      	ldrb	r3, [r3, #7]
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d102      	bne.n	800d432 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d42c:	2301      	movs	r3, #1
 800d42e:	73fb      	strb	r3, [r7, #15]
 800d430:	e001      	b.n	800d436 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d432:	f7f3 fda9 	bl	8000f88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d43c:	7bfa      	ldrb	r2, [r7, #15]
 800d43e:	4611      	mov	r1, r2
 800d440:	4618      	mov	r0, r3
 800d442:	f7fb f91e 	bl	8008682 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d44c:	4618      	mov	r0, r3
 800d44e:	f7fb f8c6 	bl	80085de <USBD_LL_Reset>
}
 800d452:	bf00      	nop
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b082      	sub	sp, #8
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d46a:	4618      	mov	r0, r3
 800d46c:	f7fb f919 	bl	80086a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	6812      	ldr	r2, [r2, #0]
 800d47e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d482:	f043 0301 	orr.w	r3, r3, #1
 800d486:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	7adb      	ldrb	r3, [r3, #11]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d005      	beq.n	800d49c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d490:	4b04      	ldr	r3, [pc, #16]	@ (800d4a4 <HAL_PCD_SuspendCallback+0x48>)
 800d492:	691b      	ldr	r3, [r3, #16]
 800d494:	4a03      	ldr	r2, [pc, #12]	@ (800d4a4 <HAL_PCD_SuspendCallback+0x48>)
 800d496:	f043 0306 	orr.w	r3, r3, #6
 800d49a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d49c:	bf00      	nop
 800d49e:	3708      	adds	r7, #8
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}
 800d4a4:	e000ed00 	.word	0xe000ed00

0800d4a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7fb f90f 	bl	80086da <USBD_LL_Resume>
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	460b      	mov	r3, r1
 800d4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4d6:	78fa      	ldrb	r2, [r7, #3]
 800d4d8:	4611      	mov	r1, r2
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fb f967 	bl	80087ae <USBD_LL_IsoOUTIncomplete>
}
 800d4e0:	bf00      	nop
 800d4e2:	3708      	adds	r7, #8
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b082      	sub	sp, #8
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	460b      	mov	r3, r1
 800d4f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d4fa:	78fa      	ldrb	r2, [r7, #3]
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	4618      	mov	r0, r3
 800d500:	f7fb f923 	bl	800874a <USBD_LL_IsoINIncomplete>
}
 800d504:	bf00      	nop
 800d506:	3708      	adds	r7, #8
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fb f979 	bl	8008812 <USBD_LL_DevConnected>
}
 800d520:	bf00      	nop
 800d522:	3708      	adds	r7, #8
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b082      	sub	sp, #8
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d536:	4618      	mov	r0, r3
 800d538:	f7fb f976 	bl	8008828 <USBD_LL_DevDisconnected>
}
 800d53c:	bf00      	nop
 800d53e:	3708      	adds	r7, #8
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d140      	bne.n	800d5d6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d554:	4a22      	ldr	r2, [pc, #136]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4a20      	ldr	r2, [pc, #128]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d560:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d564:	4b1e      	ldr	r3, [pc, #120]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d566:	4a1f      	ldr	r2, [pc, #124]	@ (800d5e4 <USBD_LL_Init+0xa0>)
 800d568:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800d56a:	4b1d      	ldr	r3, [pc, #116]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d56c:	2206      	movs	r2, #6
 800d56e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d570:	4b1b      	ldr	r3, [pc, #108]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d572:	2202      	movs	r2, #2
 800d574:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d576:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d578:	2200      	movs	r2, #0
 800d57a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d57c:	4b18      	ldr	r3, [pc, #96]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d57e:	2202      	movs	r2, #2
 800d580:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d582:	4b17      	ldr	r3, [pc, #92]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d584:	2200      	movs	r2, #0
 800d586:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d588:	4b15      	ldr	r3, [pc, #84]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d58a:	2200      	movs	r2, #0
 800d58c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d58e:	4b14      	ldr	r3, [pc, #80]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d590:	2200      	movs	r2, #0
 800d592:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800d594:	4b12      	ldr	r3, [pc, #72]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d596:	2201      	movs	r2, #1
 800d598:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d59a:	4b11      	ldr	r3, [pc, #68]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d59c:	2200      	movs	r2, #0
 800d59e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d5a0:	4b0f      	ldr	r3, [pc, #60]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d5a6:	480e      	ldr	r0, [pc, #56]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d5a8:	f7f5 fbfb 	bl	8002da2 <HAL_PCD_Init>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d5b2:	f7f3 fce9 	bl	8000f88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d5b6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d5ba:	4809      	ldr	r0, [pc, #36]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d5bc:	f7f6 fe27 	bl	800420e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d5c0:	2280      	movs	r2, #128	@ 0x80
 800d5c2:	2100      	movs	r1, #0
 800d5c4:	4806      	ldr	r0, [pc, #24]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d5c6:	f7f6 fddb 	bl	8004180 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d5ca:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800d5ce:	2101      	movs	r1, #1
 800d5d0:	4803      	ldr	r0, [pc, #12]	@ (800d5e0 <USBD_LL_Init+0x9c>)
 800d5d2:	f7f6 fdd5 	bl	8004180 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5d6:	2300      	movs	r3, #0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	20006270 	.word	0x20006270
 800d5e4:	40040000 	.word	0x40040000

0800d5e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7f5 fcde 	bl	8002fc0 <HAL_PCD_Start>
 800d604:	4603      	mov	r3, r0
 800d606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d608:	7bfb      	ldrb	r3, [r7, #15]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f000 f942 	bl	800d894 <USBD_Get_USB_Status>
 800d610:	4603      	mov	r3, r0
 800d612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d614:	7bbb      	ldrb	r3, [r7, #14]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b084      	sub	sp, #16
 800d622:	af00      	add	r7, sp, #0
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	4608      	mov	r0, r1
 800d628:	4611      	mov	r1, r2
 800d62a:	461a      	mov	r2, r3
 800d62c:	4603      	mov	r3, r0
 800d62e:	70fb      	strb	r3, [r7, #3]
 800d630:	460b      	mov	r3, r1
 800d632:	70bb      	strb	r3, [r7, #2]
 800d634:	4613      	mov	r3, r2
 800d636:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d638:	2300      	movs	r3, #0
 800d63a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d646:	78bb      	ldrb	r3, [r7, #2]
 800d648:	883a      	ldrh	r2, [r7, #0]
 800d64a:	78f9      	ldrb	r1, [r7, #3]
 800d64c:	f7f6 f9b2 	bl	80039b4 <HAL_PCD_EP_Open>
 800d650:	4603      	mov	r3, r0
 800d652:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 f91c 	bl	800d894 <USBD_Get_USB_Status>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d660:	7bbb      	ldrb	r3, [r7, #14]
}
 800d662:	4618      	mov	r0, r3
 800d664:	3710      	adds	r7, #16
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}

0800d66a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d66a:	b580      	push	{r7, lr}
 800d66c:	b084      	sub	sp, #16
 800d66e:	af00      	add	r7, sp, #0
 800d670:	6078      	str	r0, [r7, #4]
 800d672:	460b      	mov	r3, r1
 800d674:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d676:	2300      	movs	r3, #0
 800d678:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d684:	78fa      	ldrb	r2, [r7, #3]
 800d686:	4611      	mov	r1, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f7f6 f9fd 	bl	8003a88 <HAL_PCD_EP_Close>
 800d68e:	4603      	mov	r3, r0
 800d690:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	4618      	mov	r0, r3
 800d696:	f000 f8fd 	bl	800d894 <USBD_Get_USB_Status>
 800d69a:	4603      	mov	r3, r0
 800d69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
 800d6b0:	460b      	mov	r3, r1
 800d6b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d6c2:	78fa      	ldrb	r2, [r7, #3]
 800d6c4:	4611      	mov	r1, r2
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f6 fab5 	bl	8003c36 <HAL_PCD_EP_SetStall>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6d0:	7bfb      	ldrb	r3, [r7, #15]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 f8de 	bl	800d894 <USBD_Get_USB_Status>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3710      	adds	r7, #16
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}

0800d6e6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6e6:	b580      	push	{r7, lr}
 800d6e8:	b084      	sub	sp, #16
 800d6ea:	af00      	add	r7, sp, #0
 800d6ec:	6078      	str	r0, [r7, #4]
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d700:	78fa      	ldrb	r2, [r7, #3]
 800d702:	4611      	mov	r1, r2
 800d704:	4618      	mov	r0, r3
 800d706:	f7f6 faf9 	bl	8003cfc <HAL_PCD_EP_ClrStall>
 800d70a:	4603      	mov	r3, r0
 800d70c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d70e:	7bfb      	ldrb	r3, [r7, #15]
 800d710:	4618      	mov	r0, r3
 800d712:	f000 f8bf 	bl	800d894 <USBD_Get_USB_Status>
 800d716:	4603      	mov	r3, r0
 800d718:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d71a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d71c:	4618      	mov	r0, r3
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d724:	b480      	push	{r7}
 800d726:	b085      	sub	sp, #20
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	460b      	mov	r3, r1
 800d72e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d736:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	da0b      	bge.n	800d758 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d740:	78fb      	ldrb	r3, [r7, #3]
 800d742:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d746:	68f9      	ldr	r1, [r7, #12]
 800d748:	4613      	mov	r3, r2
 800d74a:	00db      	lsls	r3, r3, #3
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	440b      	add	r3, r1
 800d752:	3316      	adds	r3, #22
 800d754:	781b      	ldrb	r3, [r3, #0]
 800d756:	e00b      	b.n	800d770 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d758:	78fb      	ldrb	r3, [r7, #3]
 800d75a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d75e:	68f9      	ldr	r1, [r7, #12]
 800d760:	4613      	mov	r3, r2
 800d762:	00db      	lsls	r3, r3, #3
 800d764:	4413      	add	r3, r2
 800d766:	009b      	lsls	r3, r3, #2
 800d768:	440b      	add	r3, r1
 800d76a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d76e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d770:	4618      	mov	r0, r3
 800d772:	3714      	adds	r7, #20
 800d774:	46bd      	mov	sp, r7
 800d776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77a:	4770      	bx	lr

0800d77c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	460b      	mov	r3, r1
 800d786:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d796:	78fa      	ldrb	r2, [r7, #3]
 800d798:	4611      	mov	r1, r2
 800d79a:	4618      	mov	r0, r3
 800d79c:	f7f6 f8e6 	bl	800396c <HAL_PCD_SetAddress>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 f874 	bl	800d894 <USBD_Get_USB_Status>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b086      	sub	sp, #24
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	60f8      	str	r0, [r7, #12]
 800d7c2:	607a      	str	r2, [r7, #4]
 800d7c4:	603b      	str	r3, [r7, #0]
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d7d8:	7af9      	ldrb	r1, [r7, #11]
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	f7f6 f9f0 	bl	8003bc2 <HAL_PCD_EP_Transmit>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 f853 	bl	800d894 <USBD_Get_USB_Status>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7f2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3718      	adds	r7, #24
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	607a      	str	r2, [r7, #4]
 800d806:	603b      	str	r3, [r7, #0]
 800d808:	460b      	mov	r3, r1
 800d80a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d81a:	7af9      	ldrb	r1, [r7, #11]
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	f7f6 f97c 	bl	8003b1c <HAL_PCD_EP_Receive>
 800d824:	4603      	mov	r3, r0
 800d826:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d828:	7dfb      	ldrb	r3, [r7, #23]
 800d82a:	4618      	mov	r0, r3
 800d82c:	f000 f832 	bl	800d894 <USBD_Get_USB_Status>
 800d830:	4603      	mov	r3, r0
 800d832:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d834:	7dbb      	ldrb	r3, [r7, #22]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b082      	sub	sp, #8
 800d842:	af00      	add	r7, sp, #0
 800d844:	6078      	str	r0, [r7, #4]
 800d846:	460b      	mov	r3, r1
 800d848:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d850:	78fa      	ldrb	r2, [r7, #3]
 800d852:	4611      	mov	r1, r2
 800d854:	4618      	mov	r0, r3
 800d856:	f7f6 f99c 	bl	8003b92 <HAL_PCD_EP_GetRxCount>
 800d85a:	4603      	mov	r3, r0
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3708      	adds	r7, #8
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d864:	b480      	push	{r7}
 800d866:	b083      	sub	sp, #12
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d86c:	4b03      	ldr	r3, [pc, #12]	@ (800d87c <USBD_static_malloc+0x18>)
}
 800d86e:	4618      	mov	r0, r3
 800d870:	370c      	adds	r7, #12
 800d872:	46bd      	mov	sp, r7
 800d874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	20006754 	.word	0x20006754

0800d880 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d880:	b480      	push	{r7}
 800d882:	b083      	sub	sp, #12
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]

}
 800d888:	bf00      	nop
 800d88a:	370c      	adds	r7, #12
 800d88c:	46bd      	mov	sp, r7
 800d88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d892:	4770      	bx	lr

0800d894 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d894:	b480      	push	{r7}
 800d896:	b085      	sub	sp, #20
 800d898:	af00      	add	r7, sp, #0
 800d89a:	4603      	mov	r3, r0
 800d89c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d89e:	2300      	movs	r3, #0
 800d8a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8a2:	79fb      	ldrb	r3, [r7, #7]
 800d8a4:	2b03      	cmp	r3, #3
 800d8a6:	d817      	bhi.n	800d8d8 <USBD_Get_USB_Status+0x44>
 800d8a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d8b0 <USBD_Get_USB_Status+0x1c>)
 800d8aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8ae:	bf00      	nop
 800d8b0:	0800d8c1 	.word	0x0800d8c1
 800d8b4:	0800d8c7 	.word	0x0800d8c7
 800d8b8:	0800d8cd 	.word	0x0800d8cd
 800d8bc:	0800d8d3 	.word	0x0800d8d3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8c4:	e00b      	b.n	800d8de <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8c6:	2303      	movs	r3, #3
 800d8c8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ca:	e008      	b.n	800d8de <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8cc:	2301      	movs	r3, #1
 800d8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d0:	e005      	b.n	800d8de <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8d2:	2303      	movs	r3, #3
 800d8d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d8d6:	e002      	b.n	800d8de <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	73fb      	strb	r3, [r7, #15]
    break;
 800d8dc:	bf00      	nop
  }
  return usb_status;
 800d8de:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3714      	adds	r7, #20
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <memset>:
 800d8ec:	4402      	add	r2, r0
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	d100      	bne.n	800d8f6 <memset+0xa>
 800d8f4:	4770      	bx	lr
 800d8f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d8fa:	e7f9      	b.n	800d8f0 <memset+0x4>

0800d8fc <__libc_init_array>:
 800d8fc:	b570      	push	{r4, r5, r6, lr}
 800d8fe:	4d0d      	ldr	r5, [pc, #52]	@ (800d934 <__libc_init_array+0x38>)
 800d900:	4c0d      	ldr	r4, [pc, #52]	@ (800d938 <__libc_init_array+0x3c>)
 800d902:	1b64      	subs	r4, r4, r5
 800d904:	10a4      	asrs	r4, r4, #2
 800d906:	2600      	movs	r6, #0
 800d908:	42a6      	cmp	r6, r4
 800d90a:	d109      	bne.n	800d920 <__libc_init_array+0x24>
 800d90c:	4d0b      	ldr	r5, [pc, #44]	@ (800d93c <__libc_init_array+0x40>)
 800d90e:	4c0c      	ldr	r4, [pc, #48]	@ (800d940 <__libc_init_array+0x44>)
 800d910:	f000 f826 	bl	800d960 <_init>
 800d914:	1b64      	subs	r4, r4, r5
 800d916:	10a4      	asrs	r4, r4, #2
 800d918:	2600      	movs	r6, #0
 800d91a:	42a6      	cmp	r6, r4
 800d91c:	d105      	bne.n	800d92a <__libc_init_array+0x2e>
 800d91e:	bd70      	pop	{r4, r5, r6, pc}
 800d920:	f855 3b04 	ldr.w	r3, [r5], #4
 800d924:	4798      	blx	r3
 800d926:	3601      	adds	r6, #1
 800d928:	e7ee      	b.n	800d908 <__libc_init_array+0xc>
 800d92a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d92e:	4798      	blx	r3
 800d930:	3601      	adds	r6, #1
 800d932:	e7f2      	b.n	800d91a <__libc_init_array+0x1e>
 800d934:	0800dc70 	.word	0x0800dc70
 800d938:	0800dc70 	.word	0x0800dc70
 800d93c:	0800dc70 	.word	0x0800dc70
 800d940:	0800dc74 	.word	0x0800dc74

0800d944 <memcpy>:
 800d944:	440a      	add	r2, r1
 800d946:	4291      	cmp	r1, r2
 800d948:	f100 33ff 	add.w	r3, r0, #4294967295
 800d94c:	d100      	bne.n	800d950 <memcpy+0xc>
 800d94e:	4770      	bx	lr
 800d950:	b510      	push	{r4, lr}
 800d952:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d956:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d95a:	4291      	cmp	r1, r2
 800d95c:	d1f9      	bne.n	800d952 <memcpy+0xe>
 800d95e:	bd10      	pop	{r4, pc}

0800d960 <_init>:
 800d960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d962:	bf00      	nop
 800d964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d966:	bc08      	pop	{r3}
 800d968:	469e      	mov	lr, r3
 800d96a:	4770      	bx	lr

0800d96c <_fini>:
 800d96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96e:	bf00      	nop
 800d970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d972:	bc08      	pop	{r3}
 800d974:	469e      	mov	lr, r3
 800d976:	4770      	bx	lr
