
Home-Security-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b304  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800b4b4  0800b4b4  0000c4b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b554  0800b554  0000d100  2**0
                  CONTENTS
  4 .ARM          00000008  0800b554  0800b554  0000c554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b55c  0800b55c  0000d100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b55c  0800b55c  0000c55c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b560  0800b560  0000c560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800b564  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d100  2**0
                  CONTENTS
 10 .bss          0000a2b8  20000100  20000100  0000d100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a3b8  2000a3b8  0000d100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026a70  00000000  00000000  0000d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056c2  00000000  00000000  00033ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002250  00000000  00000000  00039268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a93  00000000  00000000  0003b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b79f  00000000  00000000  0003cf4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b092  00000000  00000000  000686ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3ea1  00000000  00000000  0009377c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0018761d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000091c0  00000000  00000000  00187660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00190820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b49c 	.word	0x0800b49c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800b49c 	.word	0x0800b49c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f4:	bf00      	nop
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr

080004fe <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80004fe:	b480      	push	{r7}
 8000500:	b083      	sub	sp, #12
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
 8000506:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a07      	ldr	r2, [pc, #28]	@ (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a06      	ldr	r2, [pc, #24]	@ (8000554 <vApplicationGetIdleTaskMemory+0x30>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	2000011c 	.word	0x2000011c
 8000554:	20000174 	.word	0x20000174

08000558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000558:	b5b0      	push	{r4, r5, r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055e:	f001 f8bd 	bl	80016dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000562:	f000 f82d 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000566:	f000 fad1 	bl	8000b0c <MX_GPIO_Init>
  MX_CRC_Init();
 800056a:	f000 f893 	bl	8000694 <MX_CRC_Init>
  MX_DMA2D_Init();
 800056e:	f000 f8a5 	bl	80006bc <MX_DMA2D_Init>
  MX_FMC_Init();
 8000572:	f000 fa7b 	bl	8000a6c <MX_FMC_Init>
  MX_I2C3_Init();
 8000576:	f000 f8d3 	bl	8000720 <MX_I2C3_Init>
  MX_LTDC_Init();
 800057a:	f000 f911 	bl	80007a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 800057e:	f000 f9c5 	bl	800090c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000582:	f000 f9f9 	bl	8000978 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000586:	f000 fa47 	bl	8000a18 <MX_USART1_UART_Init>
  MX_SPI4_Init();
 800058a:	f000 f989 	bl	80008a0 <MX_SPI4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800058e:	4b0a      	ldr	r3, [pc, #40]	@ (80005b8 <main+0x60>)
 8000590:	1d3c      	adds	r4, r7, #4
 8000592:	461d      	mov	r5, r3
 8000594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000598:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800059c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2100      	movs	r1, #0
 80005a4:	4618      	mov	r0, r3
 80005a6:	f008 ffa8 	bl	80094fa <osThreadCreate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a03      	ldr	r2, [pc, #12]	@ (80005bc <main+0x64>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005b0:	f008 ff9c 	bl	80094ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <main+0x5c>
 80005b8:	0800b4c0 	.word	0x0800b4c0
 80005bc:	2000062c 	.word	0x2000062c

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	@ 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f00a ff38 	bl	800b444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b28      	ldr	r3, [pc, #160]	@ (800068c <SystemClock_Config+0xcc>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ec:	4a27      	ldr	r2, [pc, #156]	@ (800068c <SystemClock_Config+0xcc>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <SystemClock_Config+0xcc>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b22      	ldr	r3, [pc, #136]	@ (8000690 <SystemClock_Config+0xd0>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800060c:	4a20      	ldr	r2, [pc, #128]	@ (8000690 <SystemClock_Config+0xd0>)
 800060e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000612:	6013      	str	r3, [r2, #0]
 8000614:	4b1e      	ldr	r3, [pc, #120]	@ (8000690 <SystemClock_Config+0xd0>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000620:	2301      	movs	r3, #1
 8000622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000624:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800062e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000632:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000634:	2304      	movs	r3, #4
 8000636:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000638:	2348      	movs	r3, #72	@ 0x48
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000640:	2303      	movs	r3, #3
 8000642:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0320 	add.w	r3, r7, #32
 8000648:	4618      	mov	r0, r3
 800064a:	f003 fcd7 	bl	8003ffc <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000654:	f000 fbac 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2302      	movs	r3, #2
 800065e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000664:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f003 ff39 	bl	80044ec <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000680:	f000 fb96 	bl	8000db0 <Error_Handler>
  }
}
 8000684:	bf00      	nop
 8000686:	3750      	adds	r7, #80	@ 0x50
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000698:	4b06      	ldr	r3, [pc, #24]	@ (80006b4 <MX_CRC_Init+0x20>)
 800069a:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <MX_CRC_Init+0x24>)
 800069c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800069e:	4805      	ldr	r0, [pc, #20]	@ (80006b4 <MX_CRC_Init+0x20>)
 80006a0:	f001 f964 	bl	800196c <HAL_CRC_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006aa:	f000 fb81 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ae:	bf00      	nop
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	20000374 	.word	0x20000374
 80006b8:	40023000 	.word	0x40023000

080006bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006c0:	4b15      	ldr	r3, [pc, #84]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006c2:	4a16      	ldr	r2, [pc, #88]	@ (800071c <MX_DMA2D_Init+0x60>)
 80006c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006c6:	4b14      	ldr	r3, [pc, #80]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006cc:	4b12      	ldr	r3, [pc, #72]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006d2:	4b11      	ldr	r3, [pc, #68]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006de:	4b0e      	ldr	r3, [pc, #56]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006f0:	4809      	ldr	r0, [pc, #36]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 80006f2:	f001 f957 	bl	80019a4 <HAL_DMA2D_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006fc:	f000 fb58 	bl	8000db0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000700:	2101      	movs	r1, #1
 8000702:	4805      	ldr	r0, [pc, #20]	@ (8000718 <MX_DMA2D_Init+0x5c>)
 8000704:	f001 faa8 	bl	8001c58 <HAL_DMA2D_ConfigLayer>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800070e:	f000 fb4f 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	2000037c 	.word	0x2000037c
 800071c:	4002b000 	.word	0x4002b000

08000720 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000724:	4b1b      	ldr	r3, [pc, #108]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	@ (8000798 <MX_I2C3_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800072a:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <MX_I2C3_Init+0x74>)
 800072c:	4a1b      	ldr	r2, [pc, #108]	@ (800079c <MX_I2C3_Init+0x7c>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <MX_I2C3_Init+0x74>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b13      	ldr	r3, [pc, #76]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800074a:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_I2C3_Init+0x74>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b10      	ldr	r3, [pc, #64]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <MX_I2C3_Init+0x74>)
 800075e:	f001 fcd3 	bl	8002108 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 fb22 	bl	8000db0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800076c:	2100      	movs	r1, #0
 800076e:	4809      	ldr	r0, [pc, #36]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000770:	f001 fe0e 	bl	8002390 <HAL_I2CEx_ConfigAnalogFilter>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800077a:	f000 fb19 	bl	8000db0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800077e:	2100      	movs	r1, #0
 8000780:	4804      	ldr	r0, [pc, #16]	@ (8000794 <MX_I2C3_Init+0x74>)
 8000782:	f001 fe41 	bl	8002408 <HAL_I2CEx_ConfigDigitalFilter>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800078c:	f000 fb10 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200003bc 	.word	0x200003bc
 8000798:	40005c00 	.word	0x40005c00
 800079c:	000186a0 	.word	0x000186a0

080007a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08e      	sub	sp, #56	@ 0x38
 80007a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2234      	movs	r2, #52	@ 0x34
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f00a fe49 	bl	800b444 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80007b2:	4b39      	ldr	r3, [pc, #228]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007b4:	4a39      	ldr	r2, [pc, #228]	@ (800089c <MX_LTDC_Init+0xfc>)
 80007b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007b8:	4b37      	ldr	r3, [pc, #220]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007be:	4b36      	ldr	r3, [pc, #216]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007c4:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007ca:	4b33      	ldr	r3, [pc, #204]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80007d0:	4b31      	ldr	r3, [pc, #196]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007d2:	2209      	movs	r2, #9
 80007d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80007d6:	4b30      	ldr	r3, [pc, #192]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007d8:	2201      	movs	r2, #1
 80007da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007de:	221d      	movs	r2, #29
 80007e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007ea:	f240 120d 	movw	r2, #269	@ 0x10d
 80007ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007f0:	4b29      	ldr	r3, [pc, #164]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007f2:	f240 1243 	movw	r2, #323	@ 0x143
 80007f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007f8:	4b27      	ldr	r3, [pc, #156]	@ (8000898 <MX_LTDC_Init+0xf8>)
 80007fa:	f240 1217 	movw	r2, #279	@ 0x117
 80007fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000800:	4b25      	ldr	r3, [pc, #148]	@ (8000898 <MX_LTDC_Init+0xf8>)
 8000802:	f240 1247 	movw	r2, #327	@ 0x147
 8000806:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000808:	4b23      	ldr	r3, [pc, #140]	@ (8000898 <MX_LTDC_Init+0xf8>)
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <MX_LTDC_Init+0xf8>)
 8000812:	2200      	movs	r2, #0
 8000814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000818:	4b1f      	ldr	r3, [pc, #124]	@ (8000898 <MX_LTDC_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000820:	481d      	ldr	r0, [pc, #116]	@ (8000898 <MX_LTDC_Init+0xf8>)
 8000822:	f001 fe31 	bl	8002488 <HAL_LTDC_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800082c:	f000 fac0 	bl	8000db0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000834:	23f0      	movs	r3, #240	@ 0xf0
 8000836:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800083c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000840:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000842:	2302      	movs	r3, #2
 8000844:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000846:	23ff      	movs	r3, #255	@ 0xff
 8000848:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800084e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000852:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000854:	2307      	movs	r3, #7
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000858:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800085c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 800085e:	23f0      	movs	r3, #240	@ 0xf0
 8000860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000862:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000866:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	@ (8000898 <MX_LTDC_Init+0xf8>)
 8000882:	f001 ff93 	bl	80027ac <HAL_LTDC_ConfigLayer>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 800088c:	f000 fa90 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3738      	adds	r7, #56	@ 0x38
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000410 	.word	0x20000410
 800089c:	40016800 	.word	0x40016800

080008a0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 80008a4:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008a6:	4a18      	ldr	r2, [pc, #96]	@ (8000908 <MX_SPI4_Init+0x68>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b16      	ldr	r3, [pc, #88]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008b0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008d0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008ec:	220a      	movs	r2, #10
 80008ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	@ (8000904 <MX_SPI4_Init+0x64>)
 80008f2:	f004 fa41 	bl	8004d78 <HAL_SPI_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 fa58 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	200004b8 	.word	0x200004b8
 8000908:	40013400 	.word	0x40013400

0800090c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000910:	4b17      	ldr	r3, [pc, #92]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000912:	4a18      	ldr	r2, [pc, #96]	@ (8000974 <MX_SPI5_Init+0x68>)
 8000914:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000916:	4b16      	ldr	r3, [pc, #88]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000918:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800091c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800091e:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092a:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <MX_SPI5_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000930:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000936:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000938:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800093c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000940:	2218      	movs	r2, #24
 8000942:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000944:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <MX_SPI5_Init+0x64>)
 800094c:	2200      	movs	r2, #0
 800094e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <MX_SPI5_Init+0x64>)
 8000958:	220a      	movs	r2, #10
 800095a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800095c:	4804      	ldr	r0, [pc, #16]	@ (8000970 <MX_SPI5_Init+0x64>)
 800095e:	f004 fa0b 	bl	8004d78 <HAL_SPI_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000968:	f000 fa22 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000510 	.word	0x20000510
 8000974:	40015000 	.word	0x40015000

08000978 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097e:	f107 0308 	add.w	r3, r7, #8
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000994:	4b1e      	ldr	r3, [pc, #120]	@ (8000a10 <MX_TIM1_Init+0x98>)
 8000996:	4a1f      	ldr	r2, [pc, #124]	@ (8000a14 <MX_TIM1_Init+0x9c>)
 8000998:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <MX_TIM1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b18      	ldr	r3, [pc, #96]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009b4:	4b16      	ldr	r3, [pc, #88]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009c0:	4813      	ldr	r0, [pc, #76]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009c2:	f004 fa62 	bl	8004e8a <HAL_TIM_Base_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009cc:	f000 f9f0 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009d6:	f107 0308 	add.w	r3, r7, #8
 80009da:	4619      	mov	r1, r3
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009de:	f004 fc03 	bl	80051e8 <HAL_TIM_ConfigClockSource>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80009e8:	f000 f9e2 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	4619      	mov	r1, r3
 80009f8:	4805      	ldr	r0, [pc, #20]	@ (8000a10 <MX_TIM1_Init+0x98>)
 80009fa:	f004 fe2b 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a04:	f000 f9d4 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000568 	.word	0x20000568
 8000a14:	40010000 	.word	0x40010000

08000a18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a1e:	4a12      	ldr	r2, [pc, #72]	@ (8000a68 <MX_USART1_UART_Init+0x50>)
 8000a20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a22:	4b10      	ldr	r3, [pc, #64]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a3e:	220c      	movs	r2, #12
 8000a40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	@ (8000a64 <MX_USART1_UART_Init+0x4c>)
 8000a50:	f004 fe90 	bl	8005774 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a5a:	f000 f9a9 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200005b0 	.word	0x200005b0
 8000a68:	40011000 	.word	0x40011000

08000a6c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b088      	sub	sp, #32
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
 8000a80:	615a      	str	r2, [r3, #20]
 8000a82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a84:	4b1f      	ldr	r3, [pc, #124]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000a86:	4a20      	ldr	r2, [pc, #128]	@ (8000b08 <MX_FMC_Init+0x9c>)
 8000a88:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a90:	4b1c      	ldr	r3, [pc, #112]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a96:	4b1b      	ldr	r3, [pc, #108]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000a98:	2204      	movs	r2, #4
 8000a9a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a9c:	4b19      	ldr	r3, [pc, #100]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000a9e:	2210      	movs	r2, #16
 8000aa0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000aa2:	4b18      	ldr	r3, [pc, #96]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000aa4:	2240      	movs	r2, #64	@ 0x40
 8000aa6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000aa8:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000aaa:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000aae:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ab6:	4b13      	ldr	r3, [pc, #76]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000ab8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000abc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000ac6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aca:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000acc:	2302      	movs	r3, #2
 8000ace:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ad0:	2307      	movs	r3, #7
 8000ad2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ad4:	2304      	movs	r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ad8:	2307      	movs	r3, #7
 8000ada:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000adc:	2303      	movs	r3, #3
 8000ade:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	4619      	mov	r1, r3
 8000aec:	4805      	ldr	r0, [pc, #20]	@ (8000b04 <MX_FMC_Init+0x98>)
 8000aee:	f004 f90f 	bl	8004d10 <HAL_SDRAM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000af8:	f000 f95a 	bl	8000db0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000afc:	bf00      	nop
 8000afe:	3720      	adds	r7, #32
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200005f8 	.word	0x200005f8
 8000b08:	a0000140 	.word	0xa0000140

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	@ 0x38
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	623b      	str	r3, [r7, #32]
 8000b26:	4b81      	ldr	r3, [pc, #516]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a80      	ldr	r2, [pc, #512]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b7e      	ldr	r3, [pc, #504]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	623b      	str	r3, [r7, #32]
 8000b3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
 8000b42:	4b7a      	ldr	r3, [pc, #488]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a79      	ldr	r2, [pc, #484]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b77      	ldr	r3, [pc, #476]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0304 	and.w	r3, r3, #4
 8000b56:	61fb      	str	r3, [r7, #28]
 8000b58:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	4b73      	ldr	r3, [pc, #460]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a72      	ldr	r2, [pc, #456]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b64:	f043 0320 	orr.w	r3, r3, #32
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b70      	ldr	r3, [pc, #448]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0320 	and.w	r3, r3, #32
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
 8000b7a:	4b6c      	ldr	r3, [pc, #432]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a6b      	ldr	r2, [pc, #428]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b69      	ldr	r3, [pc, #420]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8e:	617b      	str	r3, [r7, #20]
 8000b90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]
 8000b96:	4b65      	ldr	r3, [pc, #404]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a64      	ldr	r2, [pc, #400]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b62      	ldr	r3, [pc, #392]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	613b      	str	r3, [r7, #16]
 8000bac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
 8000bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a5d      	ldr	r2, [pc, #372]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	4b57      	ldr	r3, [pc, #348]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a56      	ldr	r2, [pc, #344]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bda:	4b54      	ldr	r3, [pc, #336]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	4b50      	ldr	r3, [pc, #320]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a4f      	ldr	r2, [pc, #316]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b4d      	ldr	r3, [pc, #308]	@ (8000d2c <MX_GPIO_Init+0x220>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0308 	and.w	r3, r3, #8
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2116      	movs	r1, #22
 8000c06:	484a      	ldr	r0, [pc, #296]	@ (8000d30 <MX_GPIO_Init+0x224>)
 8000c08:	f001 fa64 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2180      	movs	r1, #128	@ 0x80
 8000c10:	4848      	ldr	r0, [pc, #288]	@ (8000d34 <MX_GPIO_Init+0x228>)
 8000c12:	f001 fa5f 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c16:	2200      	movs	r2, #0
 8000c18:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c1c:	4846      	ldr	r0, [pc, #280]	@ (8000d38 <MX_GPIO_Init+0x22c>)
 8000c1e:	f001 fa59 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c28:	4844      	ldr	r0, [pc, #272]	@ (8000d3c <MX_GPIO_Init+0x230>)
 8000c2a:	f001 fa53 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c2e:	2316      	movs	r3, #22
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	483a      	ldr	r0, [pc, #232]	@ (8000d30 <MX_GPIO_Init+0x224>)
 8000c46:	f001 f899 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c4a:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c50:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4834      	ldr	r0, [pc, #208]	@ (8000d34 <MX_GPIO_Init+0x228>)
 8000c62:	f001 f88b 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c66:	2380      	movs	r3, #128	@ 0x80
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	482d      	ldr	r0, [pc, #180]	@ (8000d34 <MX_GPIO_Init+0x228>)
 8000c7e:	f001 f87d 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c82:	2320      	movs	r3, #32
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c94:	4619      	mov	r1, r3
 8000c96:	4826      	ldr	r0, [pc, #152]	@ (8000d30 <MX_GPIO_Init+0x224>)
 8000c98:	f001 f870 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c9c:	2304      	movs	r3, #4
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cac:	4619      	mov	r1, r3
 8000cae:	4824      	ldr	r0, [pc, #144]	@ (8000d40 <MX_GPIO_Init+0x234>)
 8000cb0:	f001 f864 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cb4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	481b      	ldr	r0, [pc, #108]	@ (8000d38 <MX_GPIO_Init+0x22c>)
 8000cca:	f001 f857 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cce:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4814      	ldr	r0, [pc, #80]	@ (8000d38 <MX_GPIO_Init+0x22c>)
 8000ce8:	f001 f848 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480b      	ldr	r0, [pc, #44]	@ (8000d30 <MX_GPIO_Init+0x224>)
 8000d02:	f001 f83b 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d06:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_GPIO_Init+0x230>)
 8000d20:	f001 f82c 	bl	8001d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d24:	bf00      	nop
 8000d26:	3738      	adds	r7, #56	@ 0x38
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020800 	.word	0x40020800
 8000d34:	40020000 	.word	0x40020000
 8000d38:	40020c00 	.word	0x40020c00
 8000d3c:	40021800 	.word	0x40021800
 8000d40:	40020400 	.word	0x40020400

08000d44 <CDC_Print>:

/* USER CODE BEGIN 4 */
void CDC_Print(const char *msg) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS((uint8_t*)msg, strlen(msg));
 8000d4c:	6878      	ldr	r0, [r7, #4]
 8000d4e:	f7ff fa4f 	bl	80001f0 <strlen>
 8000d52:	4603      	mov	r3, r0
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	4619      	mov	r1, r3
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f009 ff07 	bl	800ab6c <CDC_Transmit_HS>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
	MX_USB_DEVICE_Init();
 8000d70:	f009 fe3e 	bl	800a9f0 <MX_USB_DEVICE_Init>

	for(;;)
	{
		CDC_Print("Hello World!\r\n");
 8000d74:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <StartDefaultTask+0x20>)
 8000d76:	f7ff ffe5 	bl	8000d44 <CDC_Print>
		osDelay(1000);
 8000d7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d7e:	f008 fc08 	bl	8009592 <osDelay>
		CDC_Print("Hello World!\r\n");
 8000d82:	bf00      	nop
 8000d84:	e7f6      	b.n	8000d74 <StartDefaultTask+0xc>
 8000d86:	bf00      	nop
 8000d88:	0800b4dc 	.word	0x0800b4dc

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f000 fcbf 	bl	8001720 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40001000 	.word	0x40001000

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_MspInit+0x54>)
 8000dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dca:	4a11      	ldr	r2, [pc, #68]	@ (8000e10 <HAL_MspInit+0x54>)
 8000dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <HAL_MspInit+0x54>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	603b      	str	r3, [r7, #0]
 8000de2:	4b0b      	ldr	r3, [pc, #44]	@ (8000e10 <HAL_MspInit+0x54>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <HAL_MspInit+0x54>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dee:	4b08      	ldr	r3, [pc, #32]	@ (8000e10 <HAL_MspInit+0x54>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	f06f 0001 	mvn.w	r0, #1
 8000e02:	f000 fd89 	bl	8001918 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800

08000e14 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a0b      	ldr	r2, [pc, #44]	@ (8000e50 <HAL_CRC_MspInit+0x3c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10d      	bne.n	8000e42 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_CRC_MspInit+0x40>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a09      	ldr	r2, [pc, #36]	@ (8000e54 <HAL_CRC_MspInit+0x40>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <HAL_CRC_MspInit+0x40>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e42:	bf00      	nop
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023000 	.word	0x40023000
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea0 <HAL_DMA2D_MspInit+0x48>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d115      	bne.n	8000e96 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea4 <HAL_DMA2D_MspInit+0x4c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea4 <HAL_DMA2D_MspInit+0x4c>)
 8000e74:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_DMA2D_MspInit+0x4c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e82:	60fb      	str	r3, [r7, #12]
 8000e84:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2105      	movs	r1, #5
 8000e8a:	205a      	movs	r0, #90	@ 0x5a
 8000e8c:	f000 fd44 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e90:	205a      	movs	r0, #90	@ 0x5a
 8000e92:	f000 fd5d 	bl	8001950 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000e96:	bf00      	nop
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	4002b000 	.word	0x4002b000
 8000ea4:	40023800 	.word	0x40023800

08000ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a29      	ldr	r2, [pc, #164]	@ (8000f6c <HAL_I2C_MspInit+0xc4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d14b      	bne.n	8000f62 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b28      	ldr	r3, [pc, #160]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	4a27      	ldr	r2, [pc, #156]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eda:	4b25      	ldr	r3, [pc, #148]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eee:	4a20      	ldr	r2, [pc, #128]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000f02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f14:	2304      	movs	r3, #4
 8000f16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4815      	ldr	r0, [pc, #84]	@ (8000f74 <HAL_I2C_MspInit+0xcc>)
 8000f20:	f000 ff2c 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000f24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f36:	2304      	movs	r3, #4
 8000f38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480d      	ldr	r0, [pc, #52]	@ (8000f78 <HAL_I2C_MspInit+0xd0>)
 8000f42:	f000 ff1b 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b09      	ldr	r3, [pc, #36]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000f50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f56:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_I2C_MspInit+0xc8>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40005c00 	.word	0x40005c00
 8000f70:	40023800 	.word	0x40023800
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40020000 	.word	0x40020000

08000f7c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b09a      	sub	sp, #104	@ 0x68
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f98:	2230      	movs	r2, #48	@ 0x30
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00a fa51 	bl	800b444 <memset>
  if(hltdc->Instance==LTDC)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a85      	ldr	r2, [pc, #532]	@ (80011bc <HAL_LTDC_MspInit+0x240>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	f040 8102 	bne.w	80011b2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000fb2:	2332      	movs	r3, #50	@ 0x32
 8000fb4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f003 fce4 	bl	8004990 <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fce:	f7ff feef 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	623b      	str	r3, [r7, #32]
 8000fd6:	4b7a      	ldr	r3, [pc, #488]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a79      	ldr	r2, [pc, #484]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8000fdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b77      	ldr	r3, [pc, #476]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fea:	623b      	str	r3, [r7, #32]
 8000fec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61fb      	str	r3, [r7, #28]
 8000ff2:	4b73      	ldr	r3, [pc, #460]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	4a72      	ldr	r2, [pc, #456]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8000ff8:	f043 0320 	orr.w	r3, r3, #32
 8000ffc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffe:	4b70      	ldr	r3, [pc, #448]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	f003 0320 	and.w	r3, r3, #32
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	61bb      	str	r3, [r7, #24]
 800100e:	4b6c      	ldr	r3, [pc, #432]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a6b      	ldr	r2, [pc, #428]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b69      	ldr	r3, [pc, #420]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	61bb      	str	r3, [r7, #24]
 8001024:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	4b65      	ldr	r3, [pc, #404]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a64      	ldr	r2, [pc, #400]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001030:	f043 0302 	orr.w	r3, r3, #2
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b62      	ldr	r3, [pc, #392]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0302 	and.w	r3, r3, #2
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b5e      	ldr	r3, [pc, #376]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a5d      	ldr	r2, [pc, #372]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 800104c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b5b      	ldr	r3, [pc, #364]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b57      	ldr	r3, [pc, #348]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a56      	ldr	r2, [pc, #344]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b54      	ldr	r3, [pc, #336]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b50      	ldr	r3, [pc, #320]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a4f      	ldr	r2, [pc, #316]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 8001084:	f043 0308 	orr.w	r3, r3, #8
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b4d      	ldr	r3, [pc, #308]	@ (80011c0 <HAL_LTDC_MspInit+0x244>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001096:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800109a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109c:	2302      	movs	r3, #2
 800109e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a8:	230e      	movs	r3, #14
 80010aa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010b0:	4619      	mov	r1, r3
 80010b2:	4844      	ldr	r0, [pc, #272]	@ (80011c4 <HAL_LTDC_MspInit+0x248>)
 80010b4:	f000 fe62 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80010b8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80010bc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010be:	2302      	movs	r3, #2
 80010c0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c2:	2300      	movs	r3, #0
 80010c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010ca:	230e      	movs	r3, #14
 80010cc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010d2:	4619      	mov	r1, r3
 80010d4:	483c      	ldr	r0, [pc, #240]	@ (80011c8 <HAL_LTDC_MspInit+0x24c>)
 80010d6:	f000 fe51 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010da:	2303      	movs	r3, #3
 80010dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010ea:	2309      	movs	r3, #9
 80010ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010f2:	4619      	mov	r1, r3
 80010f4:	4835      	ldr	r0, [pc, #212]	@ (80011cc <HAL_LTDC_MspInit+0x250>)
 80010f6:	f000 fe41 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010fa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800110c:	230e      	movs	r3, #14
 800110e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001110:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001114:	4619      	mov	r1, r3
 8001116:	482d      	ldr	r0, [pc, #180]	@ (80011cc <HAL_LTDC_MspInit+0x250>)
 8001118:	f000 fe30 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800111c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001120:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800112e:	230e      	movs	r3, #14
 8001130:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001132:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001136:	4619      	mov	r1, r3
 8001138:	4825      	ldr	r0, [pc, #148]	@ (80011d0 <HAL_LTDC_MspInit+0x254>)
 800113a:	f000 fe1f 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800113e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001142:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114c:	2300      	movs	r3, #0
 800114e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001150:	230e      	movs	r3, #14
 8001152:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001158:	4619      	mov	r1, r3
 800115a:	481e      	ldr	r0, [pc, #120]	@ (80011d4 <HAL_LTDC_MspInit+0x258>)
 800115c:	f000 fe0e 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001160:	2348      	movs	r3, #72	@ 0x48
 8001162:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001170:	230e      	movs	r3, #14
 8001172:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001178:	4619      	mov	r1, r3
 800117a:	4817      	ldr	r0, [pc, #92]	@ (80011d8 <HAL_LTDC_MspInit+0x25c>)
 800117c:	f000 fdfe 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001180:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001184:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118e:	2300      	movs	r3, #0
 8001190:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001192:	2309      	movs	r3, #9
 8001194:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001196:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800119a:	4619      	mov	r1, r3
 800119c:	480c      	ldr	r0, [pc, #48]	@ (80011d0 <HAL_LTDC_MspInit+0x254>)
 800119e:	f000 fded 	bl	8001d7c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2105      	movs	r1, #5
 80011a6:	2058      	movs	r0, #88	@ 0x58
 80011a8:	f000 fbb6 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80011ac:	2058      	movs	r0, #88	@ 0x58
 80011ae:	f000 fbcf 	bl	8001950 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80011b2:	bf00      	nop
 80011b4:	3768      	adds	r7, #104	@ 0x68
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40016800 	.word	0x40016800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40021400 	.word	0x40021400
 80011c8:	40020000 	.word	0x40020000
 80011cc:	40020400 	.word	0x40020400
 80011d0:	40021800 	.word	0x40021800
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40020c00 	.word	0x40020c00

080011dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08c      	sub	sp, #48	@ 0x30
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 031c 	add.w	r3, r7, #28
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a32      	ldr	r2, [pc, #200]	@ (80012c4 <HAL_SPI_MspInit+0xe8>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12c      	bne.n	8001258 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	4b31      	ldr	r3, [pc, #196]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001206:	4a30      	ldr	r2, [pc, #192]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001208:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800120c:	6453      	str	r3, [r2, #68]	@ 0x44
 800120e:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001212:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	4b2a      	ldr	r3, [pc, #168]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a29      	ldr	r2, [pc, #164]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b27      	ldr	r3, [pc, #156]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001246:	2305      	movs	r3, #5
 8001248:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800124a:	f107 031c 	add.w	r3, r7, #28
 800124e:	4619      	mov	r1, r3
 8001250:	481e      	ldr	r0, [pc, #120]	@ (80012cc <HAL_SPI_MspInit+0xf0>)
 8001252:	f000 fd93 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001256:	e031      	b.n	80012bc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a1c      	ldr	r2, [pc, #112]	@ (80012d0 <HAL_SPI_MspInit+0xf4>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d12c      	bne.n	80012bc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	4b18      	ldr	r3, [pc, #96]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	4a17      	ldr	r2, [pc, #92]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 800126c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001270:	6453      	str	r3, [r2, #68]	@ 0x44
 8001272:	4b15      	ldr	r3, [pc, #84]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001276:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800127a:	613b      	str	r3, [r7, #16]
 800127c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001288:	f043 0320 	orr.w	r3, r3, #32
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_SPI_MspInit+0xec>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0320 	and.w	r3, r3, #32
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800129a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800129e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a4:	2300      	movs	r3, #0
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012ac:	2305      	movs	r3, #5
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <HAL_SPI_MspInit+0xf8>)
 80012b8:	f000 fd60 	bl	8001d7c <HAL_GPIO_Init>
}
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	@ 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40013400 	.word	0x40013400
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40021000 	.word	0x40021000
 80012d0:	40015000 	.word	0x40015000
 80012d4:	40021400 	.word	0x40021400

080012d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001314 <HAL_TIM_Base_MspInit+0x3c>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d10d      	bne.n	8001306 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001318 <HAL_TIM_Base_MspInit+0x40>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f2:	4a09      	ldr	r2, [pc, #36]	@ (8001318 <HAL_TIM_Base_MspInit+0x40>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <HAL_TIM_Base_MspInit+0x40>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40010000 	.word	0x40010000
 8001318:	40023800 	.word	0x40023800

0800131c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08a      	sub	sp, #40	@ 0x28
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
 8001330:	60da      	str	r2, [r3, #12]
 8001332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	@ (80013a0 <HAL_UART_MspInit+0x84>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d12c      	bne.n	8001398 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
 8001342:	4b18      	ldr	r3, [pc, #96]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001348:	f043 0310 	orr.w	r3, r3, #16
 800134c:	6453      	str	r3, [r2, #68]	@ 0x44
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	f003 0310 	and.w	r3, r3, #16
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	4a10      	ldr	r2, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	@ 0x30
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001376:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800137a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137c:	2302      	movs	r3, #2
 800137e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001388:	2307      	movs	r3, #7
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4805      	ldr	r0, [pc, #20]	@ (80013a8 <HAL_UART_MspInit+0x8c>)
 8001394:	f000 fcf2 	bl	8001d7c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001398:	bf00      	nop
 800139a:	3728      	adds	r7, #40	@ 0x28
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000

080013ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80013c0:	4b3b      	ldr	r3, [pc, #236]	@ (80014b0 <HAL_FMC_MspInit+0x104>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d16f      	bne.n	80014a8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <HAL_FMC_MspInit+0x104>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	603b      	str	r3, [r7, #0]
 80013d2:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <HAL_FMC_MspInit+0x108>)
 80013d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013d6:	4a37      	ldr	r2, [pc, #220]	@ (80014b4 <HAL_FMC_MspInit+0x108>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6393      	str	r3, [r2, #56]	@ 0x38
 80013de:	4b35      	ldr	r3, [pc, #212]	@ (80014b4 <HAL_FMC_MspInit+0x108>)
 80013e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	603b      	str	r3, [r7, #0]
 80013e8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80013ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80013ee:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f0:	2302      	movs	r3, #2
 80013f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f8:	2303      	movs	r3, #3
 80013fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013fc:	230c      	movs	r3, #12
 80013fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001400:	1d3b      	adds	r3, r7, #4
 8001402:	4619      	mov	r1, r3
 8001404:	482c      	ldr	r0, [pc, #176]	@ (80014b8 <HAL_FMC_MspInit+0x10c>)
 8001406:	f000 fcb9 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800140a:	2301      	movs	r3, #1
 800140c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140e:	2302      	movs	r3, #2
 8001410:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001416:	2303      	movs	r3, #3
 8001418:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800141a:	230c      	movs	r3, #12
 800141c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4826      	ldr	r0, [pc, #152]	@ (80014bc <HAL_FMC_MspInit+0x110>)
 8001424:	f000 fcaa 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001428:	f248 1333 	movw	r3, #33075	@ 0x8133
 800142c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	2302      	movs	r3, #2
 8001430:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001436:	2303      	movs	r3, #3
 8001438:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800143a:	230c      	movs	r3, #12
 800143c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	4619      	mov	r1, r3
 8001442:	481f      	ldr	r0, [pc, #124]	@ (80014c0 <HAL_FMC_MspInit+0x114>)
 8001444:	f000 fc9a 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001448:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800144c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800145a:	230c      	movs	r3, #12
 800145c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4818      	ldr	r0, [pc, #96]	@ (80014c4 <HAL_FMC_MspInit+0x118>)
 8001464:	f000 fc8a 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001468:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800146c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147a:	230c      	movs	r3, #12
 800147c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	4619      	mov	r1, r3
 8001482:	4811      	ldr	r0, [pc, #68]	@ (80014c8 <HAL_FMC_MspInit+0x11c>)
 8001484:	f000 fc7a 	bl	8001d7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001488:	2360      	movs	r3, #96	@ 0x60
 800148a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001494:	2303      	movs	r3, #3
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	230c      	movs	r3, #12
 800149a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	4619      	mov	r1, r3
 80014a0:	480a      	ldr	r0, [pc, #40]	@ (80014cc <HAL_FMC_MspInit+0x120>)
 80014a2:	f000 fc6b 	bl	8001d7c <HAL_GPIO_Init>
 80014a6:	e000      	b.n	80014aa <HAL_FMC_MspInit+0xfe>
    return;
 80014a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000630 	.word	0x20000630
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40021400 	.word	0x40021400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40021800 	.word	0x40021800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40020c00 	.word	0x40020c00
 80014cc:	40020400 	.word	0x40020400

080014d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014d8:	f7ff ff68 	bl	80013ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	@ 0x38
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80014ec:	2300      	movs	r3, #0
 80014ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	4b33      	ldr	r3, [pc, #204]	@ (80015c8 <HAL_InitTick+0xe4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fc:	4a32      	ldr	r2, [pc, #200]	@ (80015c8 <HAL_InitTick+0xe4>)
 80014fe:	f043 0310 	orr.w	r3, r3, #16
 8001502:	6413      	str	r3, [r2, #64]	@ 0x40
 8001504:	4b30      	ldr	r3, [pc, #192]	@ (80015c8 <HAL_InitTick+0xe4>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001508:	f003 0310 	and.w	r3, r3, #16
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f003 fa06 	bl	800492c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001520:	6a3b      	ldr	r3, [r7, #32]
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001526:	2b00      	cmp	r3, #0
 8001528:	d103      	bne.n	8001532 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800152a:	f003 f9d7 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 800152e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001530:	e004      	b.n	800153c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001532:	f003 f9d3 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8001536:	4603      	mov	r3, r0
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800153c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800153e:	4a23      	ldr	r2, [pc, #140]	@ (80015cc <HAL_InitTick+0xe8>)
 8001540:	fba2 2303 	umull	r2, r3, r2, r3
 8001544:	0c9b      	lsrs	r3, r3, #18
 8001546:	3b01      	subs	r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800154a:	4b21      	ldr	r3, [pc, #132]	@ (80015d0 <HAL_InitTick+0xec>)
 800154c:	4a21      	ldr	r2, [pc, #132]	@ (80015d4 <HAL_InitTick+0xf0>)
 800154e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001550:	4b1f      	ldr	r3, [pc, #124]	@ (80015d0 <HAL_InitTick+0xec>)
 8001552:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001556:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001558:	4a1d      	ldr	r2, [pc, #116]	@ (80015d0 <HAL_InitTick+0xec>)
 800155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800155c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800155e:	4b1c      	ldr	r3, [pc, #112]	@ (80015d0 <HAL_InitTick+0xec>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001564:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_InitTick+0xec>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_InitTick+0xec>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001570:	4817      	ldr	r0, [pc, #92]	@ (80015d0 <HAL_InitTick+0xec>)
 8001572:	f003 fc8a 	bl	8004e8a <HAL_TIM_Base_Init>
 8001576:	4603      	mov	r3, r0
 8001578:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800157c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001580:	2b00      	cmp	r3, #0
 8001582:	d11b      	bne.n	80015bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001584:	4812      	ldr	r0, [pc, #72]	@ (80015d0 <HAL_InitTick+0xec>)
 8001586:	f003 fccf 	bl	8004f28 <HAL_TIM_Base_Start_IT>
 800158a:	4603      	mov	r3, r0
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001590:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001594:	2b00      	cmp	r3, #0
 8001596:	d111      	bne.n	80015bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001598:	2036      	movs	r0, #54	@ 0x36
 800159a:	f000 f9d9 	bl	8001950 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d808      	bhi.n	80015b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	2036      	movs	r0, #54	@ 0x36
 80015aa:	f000 f9b5 	bl	8001918 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015ae:	4a0a      	ldr	r2, [pc, #40]	@ (80015d8 <HAL_InitTick+0xf4>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	e002      	b.n	80015bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3738      	adds	r7, #56	@ 0x38
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40023800 	.word	0x40023800
 80015cc:	431bde83 	.word	0x431bde83
 80015d0:	20000634 	.word	0x20000634
 80015d4:	40001000 	.word	0x40001000
 80015d8:	20000004 	.word	0x20000004

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <NMI_Handler+0x4>

080015e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <HardFault_Handler+0x4>

080015ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <MemManage_Handler+0x4>

080015f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <UsageFault_Handler+0x4>

08001604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001618:	4802      	ldr	r0, [pc, #8]	@ (8001624 <TIM6_DAC_IRQHandler+0x10>)
 800161a:	f003 fcf5 	bl	8005008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000634 	.word	0x20000634

08001628 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800162c:	4802      	ldr	r0, [pc, #8]	@ (8001638 <OTG_HS_IRQHandler+0x10>)
 800162e:	f001 fbd6 	bl	8002dde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20009cb4 	.word	0x20009cb4

0800163c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001640:	4802      	ldr	r0, [pc, #8]	@ (800164c <LTDC_IRQHandler+0x10>)
 8001642:	f000 fff1 	bl	8002628 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000410 	.word	0x20000410

08001650 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001654:	4802      	ldr	r0, [pc, #8]	@ (8001660 <DMA2D_IRQHandler+0x10>)
 8001656:	f000 f9ee 	bl	8001a36 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000037c 	.word	0x2000037c

08001664 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	@ (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800168c:	f7ff ffea 	bl	8001664 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001690:	480c      	ldr	r0, [pc, #48]	@ (80016c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001692:	490d      	ldr	r1, [pc, #52]	@ (80016c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001698:	e002      	b.n	80016a0 <LoopCopyDataInit>

0800169a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800169c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169e:	3304      	adds	r3, #4

080016a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a4:	d3f9      	bcc.n	800169a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a6:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016a8:	4c0a      	ldr	r4, [pc, #40]	@ (80016d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016ac:	e001      	b.n	80016b2 <LoopFillZerobss>

080016ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b0:	3204      	adds	r2, #4

080016b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b4:	d3fb      	bcc.n	80016ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f009 fecd 	bl	800b454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7fe ff4d 	bl	8000558 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80016cc:	0800b564 	.word	0x0800b564
  ldr r2, =_sbss
 80016d0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80016d4:	2000a3b8 	.word	0x2000a3b8

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>
	...

080016dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e0:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <HAL_Init+0x40>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0d      	ldr	r2, [pc, #52]	@ (800171c <HAL_Init+0x40>)
 80016e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016ec:	4b0b      	ldr	r3, [pc, #44]	@ (800171c <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <HAL_Init+0x40>)
 80016f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a07      	ldr	r2, [pc, #28]	@ (800171c <HAL_Init+0x40>)
 80016fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001702:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001704:	2003      	movs	r0, #3
 8001706:	f000 f8fc 	bl	8001902 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800170a:	2000      	movs	r0, #0
 800170c:	f7ff feea 	bl	80014e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001710:	f7ff fb54 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023c00 	.word	0x40023c00

08001720 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001724:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_IncTick+0x20>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_IncTick+0x24>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_IncTick+0x24>)
 8001732:	6013      	str	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000008 	.word	0x20000008
 8001744:	2000067c 	.word	0x2000067c

08001748 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return uwTick;
 800174c:	4b03      	ldr	r3, [pc, #12]	@ (800175c <HAL_GetTick+0x14>)
 800174e:	681b      	ldr	r3, [r3, #0]
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	2000067c 	.word	0x2000067c

08001760 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001768:	f7ff ffee 	bl	8001748 <HAL_GetTick>
 800176c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001778:	d005      	beq.n	8001786 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800177a:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <HAL_Delay+0x44>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001786:	bf00      	nop
 8001788:	f7ff ffde 	bl	8001748 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	429a      	cmp	r2, r3
 8001796:	d8f7      	bhi.n	8001788 <HAL_Delay+0x28>
  {
  }
}
 8001798:	bf00      	nop
 800179a:	bf00      	nop
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	60d3      	str	r3, [r2, #12]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	@ (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff ff4c 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001910:	bf00      	nop
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
 8001924:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800192a:	f7ff ff61 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 800192e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	6978      	ldr	r0, [r7, #20]
 8001936:	f7ff ffb1 	bl	800189c <NVIC_EncodePriority>
 800193a:	4602      	mov	r2, r0
 800193c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001940:	4611      	mov	r1, r2
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff ff80 	bl	8001848 <__NVIC_SetPriority>
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800195a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff54 	bl	800180c <__NVIC_EnableIRQ>
}
 8001964:	bf00      	nop
 8001966:	3708      	adds	r7, #8
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d101      	bne.n	800197e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00e      	b.n	800199c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	795b      	ldrb	r3, [r3, #5]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d105      	bne.n	8001994 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fa40 	bl	8000e14 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2201      	movs	r2, #1
 8001998:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e03b      	b.n	8001a2e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d106      	bne.n	80019d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fa44 	bl	8000e58 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f4:	f023 0107 	bic.w	r1, r3, #7
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001a0e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68d1      	ldr	r1, [r2, #12]
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	430b      	orrs	r3, r1
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d026      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d021      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a70:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2201      	movs	r2, #1
 8001a84:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	695b      	ldr	r3, [r3, #20]
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d026      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d021      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad6:	f043 0202 	orr.w	r2, r3, #2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d003      	beq.n	8001afe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d026      	beq.n	8001b56 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d021      	beq.n	8001b56 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2208      	movs	r2, #8
 8001b28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b2e:	f043 0204 	orr.w	r2, r3, #4
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2204      	movs	r2, #4
 8001b3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00e      	beq.n	8001b88 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2204      	movs	r2, #4
 8001b80:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 f853 	bl	8001c2e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d024      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d01f      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001baa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	691b      	ldr	r3, [r3, #16]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f003 0310 	and.w	r3, r3, #16
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01f      	beq.n	8001c26 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01a      	beq.n	8001c26 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2210      	movs	r2, #16
 8001c06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 f80e 	bl	8001c42 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
	...

08001c58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b087      	sub	sp, #28
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d101      	bne.n	8001c78 <HAL_DMA2D_ConfigLayer+0x20>
 8001c74:	2302      	movs	r3, #2
 8001c76:	e079      	b.n	8001d6c <HAL_DMA2D_ConfigLayer+0x114>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	3318      	adds	r3, #24
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	685a      	ldr	r2, [r3, #4]
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	041b      	lsls	r3, r3, #16
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ca2:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ca4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d003      	beq.n	8001cb6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	d107      	bne.n	8001cc6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	e005      	b.n	8001cd2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	061b      	lsls	r3, r3, #24
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d120      	bne.n	8001d1a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	ea02 0103 	and.w	r1, r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	430a      	orrs	r2, r1
 8001cee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d003      	beq.n	8001d0a <HAL_DMA2D_ConfigLayer+0xb2>
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d127      	bne.n	8001d5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	68da      	ldr	r2, [r3, #12]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d18:	e01f      	b.n	8001d5a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	69da      	ldr	r2, [r3, #28]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	ea02 0103 	and.w	r1, r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	697a      	ldr	r2, [r7, #20]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b0a      	cmp	r3, #10
 8001d42:	d003      	beq.n	8001d4c <HAL_DMA2D_ConfigLayer+0xf4>
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d106      	bne.n	8001d5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001d58:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	ff03000f 	.word	0xff03000f

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
 8001d96:	e177      	b.n	8002088 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d98:	2201      	movs	r2, #1
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	697a      	ldr	r2, [r7, #20]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	f040 8166 	bne.w	8002082 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d005      	beq.n	8001dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d130      	bne.n	8001e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	091b      	lsrs	r3, r3, #4
 8001e1a:	f003 0201 	and.w	r2, r3, #1
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d017      	beq.n	8001e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	2203      	movs	r2, #3
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	689a      	ldr	r2, [r3, #8]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d123      	bne.n	8001ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	08da      	lsrs	r2, r3, #3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3208      	adds	r2, #8
 8001e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	220f      	movs	r2, #15
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	08da      	lsrs	r2, r3, #3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	3208      	adds	r2, #8
 8001eba:	69b9      	ldr	r1, [r7, #24]
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	2203      	movs	r2, #3
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	f000 80c0 	beq.w	8002082 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	4b66      	ldr	r3, [pc, #408]	@ (80020a0 <HAL_GPIO_Init+0x324>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	4a65      	ldr	r2, [pc, #404]	@ (80020a0 <HAL_GPIO_Init+0x324>)
 8001f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f12:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <HAL_GPIO_Init+0x324>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1a:	60fb      	str	r3, [r7, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f1e:	4a61      	ldr	r2, [pc, #388]	@ (80020a4 <HAL_GPIO_Init+0x328>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	089b      	lsrs	r3, r3, #2
 8001f24:	3302      	adds	r3, #2
 8001f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	220f      	movs	r2, #15
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43db      	mvns	r3, r3
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	4013      	ands	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a58      	ldr	r2, [pc, #352]	@ (80020a8 <HAL_GPIO_Init+0x32c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d037      	beq.n	8001fba <HAL_GPIO_Init+0x23e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a57      	ldr	r2, [pc, #348]	@ (80020ac <HAL_GPIO_Init+0x330>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d031      	beq.n	8001fb6 <HAL_GPIO_Init+0x23a>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a56      	ldr	r2, [pc, #344]	@ (80020b0 <HAL_GPIO_Init+0x334>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02b      	beq.n	8001fb2 <HAL_GPIO_Init+0x236>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a55      	ldr	r2, [pc, #340]	@ (80020b4 <HAL_GPIO_Init+0x338>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d025      	beq.n	8001fae <HAL_GPIO_Init+0x232>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a54      	ldr	r2, [pc, #336]	@ (80020b8 <HAL_GPIO_Init+0x33c>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d01f      	beq.n	8001faa <HAL_GPIO_Init+0x22e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a53      	ldr	r2, [pc, #332]	@ (80020bc <HAL_GPIO_Init+0x340>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d019      	beq.n	8001fa6 <HAL_GPIO_Init+0x22a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a52      	ldr	r2, [pc, #328]	@ (80020c0 <HAL_GPIO_Init+0x344>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d013      	beq.n	8001fa2 <HAL_GPIO_Init+0x226>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a51      	ldr	r2, [pc, #324]	@ (80020c4 <HAL_GPIO_Init+0x348>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00d      	beq.n	8001f9e <HAL_GPIO_Init+0x222>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a50      	ldr	r2, [pc, #320]	@ (80020c8 <HAL_GPIO_Init+0x34c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <HAL_GPIO_Init+0x21e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80020cc <HAL_GPIO_Init+0x350>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d101      	bne.n	8001f96 <HAL_GPIO_Init+0x21a>
 8001f92:	2309      	movs	r3, #9
 8001f94:	e012      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001f96:	230a      	movs	r3, #10
 8001f98:	e010      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	e00e      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001f9e:	2307      	movs	r3, #7
 8001fa0:	e00c      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e00a      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fa6:	2305      	movs	r3, #5
 8001fa8:	e008      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001faa:	2304      	movs	r3, #4
 8001fac:	e006      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e004      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e002      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e000      	b.n	8001fbc <HAL_GPIO_Init+0x240>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	69fa      	ldr	r2, [r7, #28]
 8001fbe:	f002 0203 	and.w	r2, r2, #3
 8001fc2:	0092      	lsls	r2, r2, #2
 8001fc4:	4093      	lsls	r3, r2
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fcc:	4935      	ldr	r1, [pc, #212]	@ (80020a4 <HAL_GPIO_Init+0x328>)
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	3302      	adds	r3, #2
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fda:	4b3d      	ldr	r3, [pc, #244]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ffe:	4a34      	ldr	r2, [pc, #208]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002004:	4b32      	ldr	r3, [pc, #200]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	43db      	mvns	r3, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4013      	ands	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800201c:	2b00      	cmp	r3, #0
 800201e:	d003      	beq.n	8002028 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4313      	orrs	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002028:	4a29      	ldr	r2, [pc, #164]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800202e:	4b28      	ldr	r3, [pc, #160]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	43db      	mvns	r3, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4013      	ands	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002052:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002058:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800207c:	4a14      	ldr	r2, [pc, #80]	@ (80020d0 <HAL_GPIO_Init+0x354>)
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	3301      	adds	r3, #1
 8002086:	61fb      	str	r3, [r7, #28]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	2b0f      	cmp	r3, #15
 800208c:	f67f ae84 	bls.w	8001d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3724      	adds	r7, #36	@ 0x24
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40013800 	.word	0x40013800
 80020a8:	40020000 	.word	0x40020000
 80020ac:	40020400 	.word	0x40020400
 80020b0:	40020800 	.word	0x40020800
 80020b4:	40020c00 	.word	0x40020c00
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40021400 	.word	0x40021400
 80020c0:	40021800 	.word	0x40021800
 80020c4:	40021c00 	.word	0x40021c00
 80020c8:	40022000 	.word	0x40022000
 80020cc:	40022400 	.word	0x40022400
 80020d0:	40013c00 	.word	0x40013c00

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020f0:	e003      	b.n	80020fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020f2:	887b      	ldrh	r3, [r7, #2]
 80020f4:	041a      	lsls	r2, r3, #16
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	619a      	str	r2, [r3, #24]
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e12b      	b.n	8002372 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe feba 	bl	8000ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2224      	movs	r2, #36	@ 0x24
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0201 	bic.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800215a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800216a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800216c:	f002 fbb6 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 8002170:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	4a81      	ldr	r2, [pc, #516]	@ (800237c <HAL_I2C_Init+0x274>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d807      	bhi.n	800218c <HAL_I2C_Init+0x84>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a80      	ldr	r2, [pc, #512]	@ (8002380 <HAL_I2C_Init+0x278>)
 8002180:	4293      	cmp	r3, r2
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	e006      	b.n	800219a <HAL_I2C_Init+0x92>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4a7d      	ldr	r2, [pc, #500]	@ (8002384 <HAL_I2C_Init+0x27c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	bf94      	ite	ls
 8002194:	2301      	movls	r3, #1
 8002196:	2300      	movhi	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e0e7      	b.n	8002372 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a78      	ldr	r2, [pc, #480]	@ (8002388 <HAL_I2C_Init+0x280>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	0c9b      	lsrs	r3, r3, #18
 80021ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	4a6a      	ldr	r2, [pc, #424]	@ (800237c <HAL_I2C_Init+0x274>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d802      	bhi.n	80021dc <HAL_I2C_Init+0xd4>
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	3301      	adds	r3, #1
 80021da:	e009      	b.n	80021f0 <HAL_I2C_Init+0xe8>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021e2:	fb02 f303 	mul.w	r3, r2, r3
 80021e6:	4a69      	ldr	r2, [pc, #420]	@ (800238c <HAL_I2C_Init+0x284>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	3301      	adds	r3, #1
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	430b      	orrs	r3, r1
 80021f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002202:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	495c      	ldr	r1, [pc, #368]	@ (800237c <HAL_I2C_Init+0x274>)
 800220c:	428b      	cmp	r3, r1
 800220e:	d819      	bhi.n	8002244 <HAL_I2C_Init+0x13c>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e59      	subs	r1, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fbb1 f3f3 	udiv	r3, r1, r3
 800221e:	1c59      	adds	r1, r3, #1
 8002220:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002224:	400b      	ands	r3, r1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00a      	beq.n	8002240 <HAL_I2C_Init+0x138>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1e59      	subs	r1, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fbb1 f3f3 	udiv	r3, r1, r3
 8002238:	3301      	adds	r3, #1
 800223a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800223e:	e051      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 8002240:	2304      	movs	r3, #4
 8002242:	e04f      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d111      	bne.n	8002270 <HAL_I2C_Init+0x168>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1e58      	subs	r0, r3, #1
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6859      	ldr	r1, [r3, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	440b      	add	r3, r1
 800225a:	fbb0 f3f3 	udiv	r3, r0, r3
 800225e:	3301      	adds	r3, #1
 8002260:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf0c      	ite	eq
 8002268:	2301      	moveq	r3, #1
 800226a:	2300      	movne	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	e012      	b.n	8002296 <HAL_I2C_Init+0x18e>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1e58      	subs	r0, r3, #1
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	440b      	add	r3, r1
 800227e:	0099      	lsls	r1, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	fbb0 f3f3 	udiv	r3, r0, r3
 8002286:	3301      	adds	r3, #1
 8002288:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228c:	2b00      	cmp	r3, #0
 800228e:	bf0c      	ite	eq
 8002290:	2301      	moveq	r3, #1
 8002292:	2300      	movne	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <HAL_I2C_Init+0x196>
 800229a:	2301      	movs	r3, #1
 800229c:	e022      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10e      	bne.n	80022c4 <HAL_I2C_Init+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	1e58      	subs	r0, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6859      	ldr	r1, [r3, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	440b      	add	r3, r1
 80022b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022b8:	3301      	adds	r3, #1
 80022ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80022c2:	e00f      	b.n	80022e4 <HAL_I2C_Init+0x1dc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	1e58      	subs	r0, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6859      	ldr	r1, [r3, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	0099      	lsls	r1, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022da:	3301      	adds	r3, #1
 80022dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	6809      	ldr	r1, [r1, #0]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69da      	ldr	r2, [r3, #28]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002312:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6911      	ldr	r1, [r2, #16]
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68d2      	ldr	r2, [r2, #12]
 800231e:	4311      	orrs	r1, r2
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	430b      	orrs	r3, r1
 8002326:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2220      	movs	r2, #32
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	000186a0 	.word	0x000186a0
 8002380:	001e847f 	.word	0x001e847f
 8002384:	003d08ff 	.word	0x003d08ff
 8002388:	431bde83 	.word	0x431bde83
 800238c:	10624dd3 	.word	0x10624dd3

08002390 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d129      	bne.n	80023fa <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2224      	movs	r2, #36	@ 0x24
 80023aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0201 	bic.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0210 	bic.w	r2, r2, #16
 80023cc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f042 0201 	orr.w	r2, r2, #1
 80023ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e000      	b.n	80023fc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80023fa:	2302      	movs	r3, #2
  }
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr

08002408 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002412:	2300      	movs	r3, #0
 8002414:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	d12a      	bne.n	8002478 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2224      	movs	r2, #36	@ 0x24
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0201 	bic.w	r2, r2, #1
 8002438:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002440:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	f023 030f 	bic.w	r3, r3, #15
 8002448:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	b29a      	uxth	r2, r3
 800244e:	89fb      	ldrh	r3, [r7, #14]
 8002450:	4313      	orrs	r3, r2
 8002452:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	89fa      	ldrh	r2, [r7, #14]
 800245a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0201 	orr.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002474:	2300      	movs	r3, #0
 8002476:	e000      	b.n	800247a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002478:	2302      	movs	r3, #2
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e0bf      	b.n	800261a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fe fd64 	bl	8000f7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2202      	movs	r2, #2
 80024b8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	699a      	ldr	r2, [r3, #24]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80024ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6999      	ldr	r1, [r3, #24]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002624 <HAL_LTDC_Init+0x19c>)
 80024fc:	400b      	ands	r3, r1
 80024fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	695b      	ldr	r3, [r3, #20]
 8002504:	041b      	lsls	r3, r3, #16
 8002506:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699a      	ldr	r2, [r3, #24]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68d9      	ldr	r1, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <HAL_LTDC_Init+0x19c>)
 800252a:	400b      	ands	r3, r1
 800252c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	041b      	lsls	r3, r3, #16
 8002534:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68d9      	ldr	r1, [r3, #12]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6919      	ldr	r1, [r3, #16]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4b33      	ldr	r3, [pc, #204]	@ (8002624 <HAL_LTDC_Init+0x19c>)
 8002558:	400b      	ands	r3, r1
 800255a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6919      	ldr	r1, [r3, #16]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	431a      	orrs	r2, r3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6959      	ldr	r1, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b27      	ldr	r3, [pc, #156]	@ (8002624 <HAL_LTDC_Init+0x19c>)
 8002586:	400b      	ands	r3, r1
 8002588:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6959      	ldr	r1, [r3, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80025b8:	041b      	lsls	r3, r3, #16
 80025ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80025ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0206 	orr.w	r2, r2, #6
 80025f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	699a      	ldr	r2, [r3, #24]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	f000f800 	.word	0xf000f800

08002628 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002636:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800263e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d023      	beq.n	8002692 <HAL_LTDC_IRQHandler+0x6a>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01e      	beq.n	8002692 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2204      	movs	r2, #4
 800266a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2204      	movs	r2, #4
 8002680:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 f86f 	bl	8002770 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d023      	beq.n	80026e4 <HAL_LTDC_IRQHandler+0xbc>
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01e      	beq.n	80026e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0202 	bic.w	r2, r2, #2
 80026b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2202      	movs	r2, #2
 80026bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80026c4:	f043 0202 	orr.w	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f846 	bl	8002770 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01b      	beq.n	8002726 <HAL_LTDC_IRQHandler+0xfe>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d016      	beq.n	8002726 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2201      	movs	r2, #1
 800270e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f82f 	bl	8002784 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b00      	cmp	r3, #0
 800272e:	d01b      	beq.n	8002768 <HAL_LTDC_IRQHandler+0x140>
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0208 	bic.w	r2, r2, #8
 8002748:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2208      	movs	r2, #8
 8002750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f818 	bl	8002798 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80027ac:	b5b0      	push	{r4, r5, r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_LTDC_ConfigLayer+0x1a>
 80027c2:	2302      	movs	r3, #2
 80027c4:	e02c      	b.n	8002820 <HAL_LTDC_ConfigLayer+0x74>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2202      	movs	r2, #2
 80027d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2134      	movs	r1, #52	@ 0x34
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	4614      	mov	r4, r2
 80027ea:	461d      	mov	r5, r3
 80027ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 f811 	bl	8002828 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3710      	adds	r7, #16
 8002824:	46bd      	mov	sp, r7
 8002826:	bdb0      	pop	{r4, r5, r7, pc}

08002828 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002828:	b480      	push	{r7}
 800282a:	b089      	sub	sp, #36	@ 0x24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	0c1b      	lsrs	r3, r3, #16
 8002840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002844:	4413      	add	r3, r2
 8002846:	041b      	lsls	r3, r3, #16
 8002848:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	01db      	lsls	r3, r3, #7
 8002854:	4413      	add	r3, r2
 8002856:	3384      	adds	r3, #132	@ 0x84
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	6812      	ldr	r2, [r2, #0]
 800285e:	4611      	mov	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	01d2      	lsls	r2, r2, #7
 8002864:	440a      	add	r2, r1
 8002866:	3284      	adds	r2, #132	@ 0x84
 8002868:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800286c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	0c1b      	lsrs	r3, r3, #16
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800287e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002880:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	01db      	lsls	r3, r3, #7
 800288c:	440b      	add	r3, r1
 800288e:	3384      	adds	r3, #132	@ 0x84
 8002890:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002896:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a6:	4413      	add	r3, r2
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	4413      	add	r3, r2
 80028b8:	3384      	adds	r3, #132	@ 0x84
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	4611      	mov	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	01d2      	lsls	r2, r2, #7
 80028c6:	440a      	add	r2, r1
 80028c8:	3284      	adds	r2, #132	@ 0x84
 80028ca:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80028ce:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028de:	4413      	add	r3, r2
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4619      	mov	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	01db      	lsls	r3, r3, #7
 80028ec:	440b      	add	r3, r1
 80028ee:	3384      	adds	r3, #132	@ 0x84
 80028f0:	4619      	mov	r1, r3
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	01db      	lsls	r3, r3, #7
 8002902:	4413      	add	r3, r2
 8002904:	3384      	adds	r3, #132	@ 0x84
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	4611      	mov	r1, r2
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	01d2      	lsls	r2, r2, #7
 8002912:	440a      	add	r2, r1
 8002914:	3284      	adds	r2, #132	@ 0x84
 8002916:	f023 0307 	bic.w	r3, r3, #7
 800291a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	01db      	lsls	r3, r3, #7
 8002926:	4413      	add	r3, r2
 8002928:	3384      	adds	r3, #132	@ 0x84
 800292a:	461a      	mov	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002942:	041b      	lsls	r3, r3, #16
 8002944:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	061b      	lsls	r3, r3, #24
 800294c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	461a      	mov	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	01db      	lsls	r3, r3, #7
 8002958:	4413      	add	r3, r2
 800295a:	3384      	adds	r3, #132	@ 0x84
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	461a      	mov	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	01db      	lsls	r3, r3, #7
 8002968:	4413      	add	r3, r2
 800296a:	3384      	adds	r3, #132	@ 0x84
 800296c:	461a      	mov	r2, r3
 800296e:	2300      	movs	r3, #0
 8002970:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002978:	461a      	mov	r2, r3
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	431a      	orrs	r2, r3
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	431a      	orrs	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4619      	mov	r1, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	01db      	lsls	r3, r3, #7
 800298c:	440b      	add	r3, r1
 800298e:	3384      	adds	r3, #132	@ 0x84
 8002990:	4619      	mov	r1, r3
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	01db      	lsls	r3, r3, #7
 80029a2:	4413      	add	r3, r2
 80029a4:	3384      	adds	r3, #132	@ 0x84
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	4611      	mov	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	01d2      	lsls	r2, r2, #7
 80029b2:	440a      	add	r2, r1
 80029b4:	3284      	adds	r2, #132	@ 0x84
 80029b6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029ba:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	461a      	mov	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	01db      	lsls	r3, r3, #7
 80029c6:	4413      	add	r3, r2
 80029c8:	3384      	adds	r3, #132	@ 0x84
 80029ca:	461a      	mov	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	01db      	lsls	r3, r3, #7
 80029dc:	4413      	add	r3, r2
 80029de:	3384      	adds	r3, #132	@ 0x84
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4611      	mov	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	01d2      	lsls	r2, r2, #7
 80029ec:	440a      	add	r2, r1
 80029ee:	3284      	adds	r2, #132	@ 0x84
 80029f0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80029f4:	f023 0307 	bic.w	r3, r3, #7
 80029f8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	69da      	ldr	r2, [r3, #28]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	68f9      	ldr	r1, [r7, #12]
 8002a04:	6809      	ldr	r1, [r1, #0]
 8002a06:	4608      	mov	r0, r1
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	01c9      	lsls	r1, r1, #7
 8002a0c:	4401      	add	r1, r0
 8002a0e:	3184      	adds	r1, #132	@ 0x84
 8002a10:	4313      	orrs	r3, r2
 8002a12:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	01db      	lsls	r3, r3, #7
 8002a1e:	4413      	add	r3, r2
 8002a20:	3384      	adds	r3, #132	@ 0x84
 8002a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	01db      	lsls	r3, r3, #7
 8002a2e:	4413      	add	r3, r2
 8002a30:	3384      	adds	r3, #132	@ 0x84
 8002a32:	461a      	mov	r2, r3
 8002a34:	2300      	movs	r3, #0
 8002a36:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	01db      	lsls	r3, r3, #7
 8002a42:	4413      	add	r3, r2
 8002a44:	3384      	adds	r3, #132	@ 0x84
 8002a46:	461a      	mov	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d102      	bne.n	8002a5c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002a56:	2304      	movs	r3, #4
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	e01b      	b.n	8002a94 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d102      	bne.n	8002a6a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002a64:	2303      	movs	r3, #3
 8002a66:	61fb      	str	r3, [r7, #28]
 8002a68:	e014      	b.n	8002a94 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d00b      	beq.n	8002a8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d007      	beq.n	8002a8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d003      	beq.n	8002a8a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002a86:	2b07      	cmp	r3, #7
 8002a88:	d102      	bne.n	8002a90 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	e001      	b.n	8002a94 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002a90:	2301      	movs	r3, #1
 8002a92:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	01db      	lsls	r3, r3, #7
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3384      	adds	r3, #132	@ 0x84
 8002aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	01d2      	lsls	r2, r2, #7
 8002aae:	440a      	add	r2, r1
 8002ab0:	3284      	adds	r2, #132	@ 0x84
 8002ab2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002ab6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	6859      	ldr	r1, [r3, #4]
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	1acb      	subs	r3, r1, r3
 8002ace:	69f9      	ldr	r1, [r7, #28]
 8002ad0:	fb01 f303 	mul.w	r3, r1, r3
 8002ad4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	6809      	ldr	r1, [r1, #0]
 8002ada:	4608      	mov	r0, r1
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	01c9      	lsls	r1, r1, #7
 8002ae0:	4401      	add	r1, r0
 8002ae2:	3184      	adds	r1, #132	@ 0x84
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	461a      	mov	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	01db      	lsls	r3, r3, #7
 8002af2:	4413      	add	r3, r2
 8002af4:	3384      	adds	r3, #132	@ 0x84
 8002af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	6812      	ldr	r2, [r2, #0]
 8002afc:	4611      	mov	r1, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	01d2      	lsls	r2, r2, #7
 8002b02:	440a      	add	r2, r1
 8002b04:	3284      	adds	r2, #132	@ 0x84
 8002b06:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002b0a:	f023 0307 	bic.w	r3, r3, #7
 8002b0e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	01db      	lsls	r3, r3, #7
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3384      	adds	r3, #132	@ 0x84
 8002b1e:	461a      	mov	r2, r3
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	01db      	lsls	r3, r3, #7
 8002b30:	4413      	add	r3, r2
 8002b32:	3384      	adds	r3, #132	@ 0x84
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	6812      	ldr	r2, [r2, #0]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	01d2      	lsls	r2, r2, #7
 8002b40:	440a      	add	r2, r1
 8002b42:	3284      	adds	r2, #132	@ 0x84
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6013      	str	r3, [r2, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	3724      	adds	r7, #36	@ 0x24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr

08002b56 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af02      	add	r7, sp, #8
 8002b5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d101      	bne.n	8002b68 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e101      	b.n	8002d6c <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f008 f93a 	bl	800adfc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b96:	d102      	bne.n	8002b9e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f003 fa87 	bl	80060b6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6818      	ldr	r0, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7c1a      	ldrb	r2, [r3, #16]
 8002bb0:	f88d 2000 	strb.w	r2, [sp]
 8002bb4:	3304      	adds	r3, #4
 8002bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bb8:	f003 f966 	bl	8005e88 <USB_CoreInit>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d005      	beq.n	8002bce <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e0ce      	b.n	8002d6c <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f003 fa7f 	bl	80060d8 <USB_SetCurrentMode>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0bf      	b.n	8002d6c <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bec:	2300      	movs	r3, #0
 8002bee:	73fb      	strb	r3, [r7, #15]
 8002bf0:	e04a      	b.n	8002c88 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bf2:	7bfa      	ldrb	r2, [r7, #15]
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	3315      	adds	r3, #21
 8002c02:	2201      	movs	r2, #1
 8002c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c06:	7bfa      	ldrb	r2, [r7, #15]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	00db      	lsls	r3, r3, #3
 8002c0e:	4413      	add	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3314      	adds	r3, #20
 8002c16:	7bfa      	ldrb	r2, [r7, #15]
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
 8002c1e:	b298      	uxth	r0, r3
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	332e      	adds	r3, #46	@ 0x2e
 8002c2e:	4602      	mov	r2, r0
 8002c30:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c32:	7bfa      	ldrb	r2, [r7, #15]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	4413      	add	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3318      	adds	r3, #24
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	331c      	adds	r3, #28
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3320      	adds	r3, #32
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	6879      	ldr	r1, [r7, #4]
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3324      	adds	r3, #36	@ 0x24
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	3301      	adds	r3, #1
 8002c86:	73fb      	strb	r3, [r7, #15]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	791b      	ldrb	r3, [r3, #4]
 8002c8c:	7bfa      	ldrb	r2, [r7, #15]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d3af      	bcc.n	8002bf2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
 8002c96:	e044      	b.n	8002d22 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c98:	7bfa      	ldrb	r2, [r7, #15]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002cae:	7bfa      	ldrb	r2, [r7, #15]
 8002cb0:	6879      	ldr	r1, [r7, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002cc4:	7bfa      	ldrb	r2, [r7, #15]
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cda:	7bfa      	ldrb	r2, [r7, #15]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cf0:	7bfa      	ldrb	r2, [r7, #15]
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002d02:	2200      	movs	r2, #0
 8002d04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d06:	7bfa      	ldrb	r2, [r7, #15]
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	00db      	lsls	r3, r3, #3
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	791b      	ldrb	r3, [r3, #4]
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d3b5      	bcc.n	8002c98 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	7c1a      	ldrb	r2, [r3, #16]
 8002d34:	f88d 2000 	strb.w	r2, [sp]
 8002d38:	3304      	adds	r3, #4
 8002d3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d3c:	f003 fa18 	bl	8006170 <USB_DevInit>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d005      	beq.n	8002d52 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2202      	movs	r2, #2
 8002d4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e00c      	b.n	8002d6c <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f004 fa62 	bl	800722e <USB_DevDisconnect>

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_PCD_Start+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e022      	b.n	8002dd6 <HAL_PCD_Start+0x62>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d009      	beq.n	8002db8 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d105      	bne.n	8002db8 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 f969 	bl	8006094 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f004 fa10 	bl	80071ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002dde:	b590      	push	{r4, r7, lr}
 8002de0:	b08d      	sub	sp, #52	@ 0x34
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dec:	6a3b      	ldr	r3, [r7, #32]
 8002dee:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f004 face 	bl	8007396 <USB_GetMode>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	f040 848c 	bne.w	800371a <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f004 fa32 	bl	8007270 <USB_ReadInterrupts>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8482 	beq.w	8003718 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	0a1b      	lsrs	r3, r3, #8
 8002e1e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f004 fa1f 	bl	8007270 <USB_ReadInterrupts>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f003 0302 	and.w	r3, r3, #2
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d107      	bne.n	8002e4c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f002 0202 	and.w	r2, r2, #2
 8002e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 fa0d 	bl	8007270 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f003 0310 	and.w	r3, r3, #16
 8002e5c:	2b10      	cmp	r3, #16
 8002e5e:	d161      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	699a      	ldr	r2, [r3, #24]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0210 	bic.w	r2, r2, #16
 8002e6e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002e70:	6a3b      	ldr	r3, [r7, #32]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f003 020f 	and.w	r2, r3, #15
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	0c5b      	lsrs	r3, r3, #17
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d124      	bne.n	8002ee6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d035      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002eb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6a38      	ldr	r0, [r7, #32]
 8002ebc:	f004 f844 	bl	8006f48 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ecc:	441a      	add	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	695a      	ldr	r2, [r3, #20]
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ede:	441a      	add	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	615a      	str	r2, [r3, #20]
 8002ee4:	e016      	b.n	8002f14 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	0c5b      	lsrs	r3, r3, #17
 8002eea:	f003 030f 	and.w	r3, r3, #15
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d110      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ef8:	2208      	movs	r2, #8
 8002efa:	4619      	mov	r1, r3
 8002efc:	6a38      	ldr	r0, [r7, #32]
 8002efe:	f004 f823 	bl	8006f48 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	091b      	lsrs	r3, r3, #4
 8002f0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f0e:	441a      	add	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0210 	orr.w	r2, r2, #16
 8002f22:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f004 f9a1 	bl	8007270 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f34:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f38:	f040 80a7 	bne.w	800308a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f004 f9a6 	bl	8007296 <USB_ReadDevAllOutEpInterrupt>
 8002f4a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002f4c:	e099      	b.n	8003082 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f000 808e 	beq.w	8003076 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f004 f9ca 	bl	80072fe <USB_ReadDevOutEPInterrupt>
 8002f6a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00c      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f78:	015a      	lsls	r2, r3, #5
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f82:	461a      	mov	r2, r3
 8002f84:	2301      	movs	r3, #1
 8002f86:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fea4 	bl	8003cd8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2308      	movs	r3, #8
 8002faa:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 ff7a 	bl	8003ea8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f003 0310 	and.w	r3, r3, #16
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d008      	beq.n	8002fd0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc0:	015a      	lsls	r2, r3, #5
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fca:	461a      	mov	r2, r3
 8002fcc:	2310      	movs	r3, #16
 8002fce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d030      	beq.n	800303c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b80      	cmp	r3, #128	@ 0x80
 8002fe4:	d109      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ff4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ff8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	4413      	add	r3, r2
 800300c:	3304      	adds	r3, #4
 800300e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	78db      	ldrb	r3, [r3, #3]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d108      	bne.n	800302a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	2200      	movs	r2, #0
 800301c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800301e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f007 fff9 	bl	800b01c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800302a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302c:	015a      	lsls	r2, r3, #5
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	4413      	add	r3, r2
 8003032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003036:	461a      	mov	r2, r3
 8003038:	2302      	movs	r3, #2
 800303a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d008      	beq.n	8003058 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003052:	461a      	mov	r2, r3
 8003054:	2320      	movs	r3, #32
 8003056:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d009      	beq.n	8003076 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800306e:	461a      	mov	r2, r3
 8003070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003074:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003078:	3301      	adds	r3, #1
 800307a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800307c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800307e:	085b      	lsrs	r3, r3, #1
 8003080:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	f47f af62 	bne.w	8002f4e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4618      	mov	r0, r3
 8003090:	f004 f8ee 	bl	8007270 <USB_ReadInterrupts>
 8003094:	4603      	mov	r3, r0
 8003096:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800309a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800309e:	f040 80db 	bne.w	8003258 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f004 f90f 	bl	80072ca <USB_ReadDevAllInEpInterrupt>
 80030ac:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80030b2:	e0cd      	b.n	8003250 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80c2 	beq.w	8003244 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030c6:	b2d2      	uxtb	r2, r2
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f004 f935 	bl	800733a <USB_ReadDevInEPInterrupt>
 80030d0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d057      	beq.n	800318c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030de:	f003 030f 	and.w	r3, r3, #15
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69f9      	ldr	r1, [r7, #28]
 80030f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030fc:	4013      	ands	r3, r2
 80030fe:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003102:	015a      	lsls	r2, r3, #5
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	4413      	add	r3, r2
 8003108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800310c:	461a      	mov	r2, r3
 800310e:	2301      	movs	r3, #1
 8003110:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	799b      	ldrb	r3, [r3, #6]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d132      	bne.n	8003180 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3320      	adds	r3, #32
 800312a:	6819      	ldr	r1, [r3, #0]
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	331c      	adds	r3, #28
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4419      	add	r1, r3
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003144:	4613      	mov	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	4403      	add	r3, r0
 800314e:	3320      	adds	r3, #32
 8003150:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d113      	bne.n	8003180 <HAL_PCD_IRQHandler+0x3a2>
 8003158:	6879      	ldr	r1, [r7, #4]
 800315a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3324      	adds	r3, #36	@ 0x24
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003178:	461a      	mov	r2, r3
 800317a:	2101      	movs	r1, #1
 800317c:	f004 f93c 	bl	80073f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003182:	b2db      	uxtb	r3, r3
 8003184:	4619      	mov	r1, r3
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f007 fec3 	bl	800af12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f003 0308 	and.w	r3, r3, #8
 8003192:	2b00      	cmp	r3, #0
 8003194:	d008      	beq.n	80031a8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031a2:	461a      	mov	r2, r3
 80031a4:	2308      	movs	r3, #8
 80031a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d008      	beq.n	80031c4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	015a      	lsls	r2, r3, #5
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	4413      	add	r3, r2
 80031ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031be:	461a      	mov	r2, r3
 80031c0:	2310      	movs	r3, #16
 80031c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	015a      	lsls	r2, r3, #5
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80031da:	461a      	mov	r2, r3
 80031dc:	2340      	movs	r3, #64	@ 0x40
 80031de:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d023      	beq.n	8003232 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80031ea:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ec:	6a38      	ldr	r0, [r7, #32]
 80031ee:	f003 f923 	bl	8006438 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80031f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f4:	4613      	mov	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	3310      	adds	r3, #16
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4413      	add	r3, r2
 8003202:	3304      	adds	r3, #4
 8003204:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	78db      	ldrb	r3, [r3, #3]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d108      	bne.n	8003220 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003216:	b2db      	uxtb	r3, r3
 8003218:	4619      	mov	r1, r3
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f007 ff10 	bl	800b040 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800322c:	461a      	mov	r2, r3
 800322e:	2302      	movs	r3, #2
 8003230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800323c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fcbd 	bl	8003bbe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003246:	3301      	adds	r3, #1
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800324a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003252:	2b00      	cmp	r3, #0
 8003254:	f47f af2e 	bne.w	80030b4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f004 f807 	bl	8007270 <USB_ReadInterrupts>
 8003262:	4603      	mov	r3, r0
 8003264:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003268:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800326c:	d122      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	69fa      	ldr	r2, [r7, #28]
 8003278:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003288:	2b01      	cmp	r3, #1
 800328a:	d108      	bne.n	800329e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003294:	2100      	movs	r1, #0
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fea4 	bl	8003fe4 <HAL_PCDEx_LPM_Callback>
 800329c:	e002      	b.n	80032a4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f007 feae 	bl	800b000 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	695a      	ldr	r2, [r3, #20]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80032b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f003 ffd9 	bl	8007270 <USB_ReadInterrupts>
 80032be:	4603      	mov	r3, r0
 80032c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c8:	d112      	bne.n	80032f0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d102      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f007 fe6a 	bl	800afb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80032ee:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f003 ffbb 	bl	8007270 <USB_ReadInterrupts>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003300:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003304:	f040 80b7 	bne.w	8003476 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003316:	f023 0301 	bic.w	r3, r3, #1
 800331a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2110      	movs	r1, #16
 8003322:	4618      	mov	r0, r3
 8003324:	f003 f888 	bl	8006438 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003328:	2300      	movs	r3, #0
 800332a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800332c:	e046      	b.n	80033bc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800332e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	4413      	add	r3, r2
 8003336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800333a:	461a      	mov	r2, r3
 800333c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003340:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	015a      	lsls	r2, r3, #5
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	4413      	add	r3, r2
 800334a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003352:	0151      	lsls	r1, r2, #5
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	440a      	add	r2, r1
 8003358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800335c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003360:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003374:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003386:	0151      	lsls	r1, r2, #5
 8003388:	69fa      	ldr	r2, [r7, #28]
 800338a:	440a      	add	r2, r1
 800338c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003390:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003394:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003396:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	4413      	add	r3, r2
 800339e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033a6:	0151      	lsls	r1, r2, #5
 80033a8:	69fa      	ldr	r2, [r7, #28]
 80033aa:	440a      	add	r2, r1
 80033ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80033b0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80033b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033b8:	3301      	adds	r3, #1
 80033ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	791b      	ldrb	r3, [r3, #4]
 80033c0:	461a      	mov	r2, r3
 80033c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d3b2      	bcc.n	800332e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033d6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80033da:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	7bdb      	ldrb	r3, [r3, #15]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d016      	beq.n	8003412 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033f4:	f043 030b 	orr.w	r3, r3, #11
 80033f8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003404:	69fa      	ldr	r2, [r7, #28]
 8003406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800340a:	f043 030b 	orr.w	r3, r3, #11
 800340e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003410:	e015      	b.n	800343e <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003420:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003424:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003428:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	69fa      	ldr	r2, [r7, #28]
 8003434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003438:	f043 030b 	orr.w	r3, r3, #11
 800343c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800344c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003450:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003460:	461a      	mov	r2, r3
 8003462:	f003 ffc9 	bl	80073f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	695a      	ldr	r2, [r3, #20]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003474:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f003 fef8 	bl	8007270 <USB_ReadInterrupts>
 8003480:	4603      	mov	r3, r0
 8003482:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800348a:	d123      	bne.n	80034d4 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f003 ff8e 	bl	80073b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 f845 	bl	800652a <USB_GetDevSpeed>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681c      	ldr	r4, [r3, #0]
 80034ac:	f001 fa0a 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 80034b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80034b6:	461a      	mov	r2, r3
 80034b8:	4620      	mov	r0, r4
 80034ba:	f002 fd49 	bl	8005f50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f007 fd4f 	bl	800af62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695a      	ldr	r2, [r3, #20]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80034d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4618      	mov	r0, r3
 80034da:	f003 fec9 	bl	8007270 <USB_ReadInterrupts>
 80034de:	4603      	mov	r3, r0
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d10a      	bne.n	80034fe <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f007 fd2c 	bl	800af46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695a      	ldr	r2, [r3, #20]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 0208 	and.w	r2, r2, #8
 80034fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f003 feb4 	bl	8007270 <USB_ReadInterrupts>
 8003508:	4603      	mov	r3, r0
 800350a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800350e:	2b80      	cmp	r3, #128	@ 0x80
 8003510:	d123      	bne.n	800355a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800351e:	2301      	movs	r3, #1
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
 8003522:	e014      	b.n	800354e <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003528:	4613      	mov	r3, r2
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353e:	b2db      	uxtb	r3, r3
 8003540:	4619      	mov	r1, r3
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 fb0a 	bl	8003b5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	3301      	adds	r3, #1
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	791b      	ldrb	r3, [r3, #4]
 8003552:	461a      	mov	r2, r3
 8003554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003556:	4293      	cmp	r3, r2
 8003558:	d3e4      	bcc.n	8003524 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f003 fe86 	bl	8007270 <USB_ReadInterrupts>
 8003564:	4603      	mov	r3, r0
 8003566:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800356a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800356e:	d13c      	bne.n	80035ea <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003570:	2301      	movs	r3, #1
 8003572:	627b      	str	r3, [r7, #36]	@ 0x24
 8003574:	e02b      	b.n	80035ce <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	3318      	adds	r3, #24
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d115      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800359c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800359e:	2b00      	cmp	r3, #0
 80035a0:	da12      	bge.n	80035c8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035a6:	4613      	mov	r3, r2
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4413      	add	r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	3317      	adds	r3, #23
 80035b2:	2201      	movs	r2, #1
 80035b4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80035b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	4619      	mov	r1, r3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 faca 	bl	8003b5c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	3301      	adds	r3, #1
 80035cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	791b      	ldrb	r3, [r3, #4]
 80035d2:	461a      	mov	r2, r3
 80035d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d3cd      	bcc.n	8003576 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695a      	ldr	r2, [r3, #20]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80035e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f003 fe3e 	bl	8007270 <USB_ReadInterrupts>
 80035f4:	4603      	mov	r3, r0
 80035f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035fe:	d156      	bne.n	80036ae <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003600:	2301      	movs	r3, #1
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
 8003604:	e045      	b.n	8003692 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	015a      	lsls	r2, r3, #5
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	4413      	add	r3, r2
 800360e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003616:	6879      	ldr	r1, [r7, #4]
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	4613      	mov	r3, r2
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	4413      	add	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d12e      	bne.n	800368c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800362e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003630:	2b00      	cmp	r3, #0
 8003632:	da2b      	bge.n	800368c <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003640:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003644:	429a      	cmp	r2, r3
 8003646:	d121      	bne.n	800368c <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800365a:	2201      	movs	r2, #1
 800365c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800365e:	6a3b      	ldr	r3, [r7, #32]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10a      	bne.n	800368c <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003684:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003688:	6053      	str	r3, [r2, #4]
            break;
 800368a:	e008      	b.n	800369e <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	3301      	adds	r3, #1
 8003690:	627b      	str	r3, [r7, #36]	@ 0x24
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	791b      	ldrb	r3, [r3, #4]
 8003696:	461a      	mov	r2, r3
 8003698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369a:	4293      	cmp	r3, r2
 800369c:	d3b3      	bcc.n	8003606 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80036ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f003 fddc 	bl	8007270 <USB_ReadInterrupts>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80036be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036c2:	d10a      	bne.n	80036da <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f007 fccd 	bl	800b064 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80036d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f003 fdc6 	bl	8007270 <USB_ReadInterrupts>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d115      	bne.n	800371a <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f007 fcbd 	bl	800b080 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]
 8003716:	e000      	b.n	800371a <HAL_PCD_IRQHandler+0x93c>
      return;
 8003718:	bf00      	nop
    }
  }
}
 800371a:	3734      	adds	r7, #52	@ 0x34
 800371c:	46bd      	mov	sp, r7
 800371e:	bd90      	pop	{r4, r7, pc}

08003720 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003732:	2b01      	cmp	r3, #1
 8003734:	d101      	bne.n	800373a <HAL_PCD_SetAddress+0x1a>
 8003736:	2302      	movs	r3, #2
 8003738:	e012      	b.n	8003760 <HAL_PCD_SetAddress+0x40>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4611      	mov	r1, r2
 8003750:	4618      	mov	r0, r3
 8003752:	f003 fd25 	bl	80071a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	70fb      	strb	r3, [r7, #3]
 800377a:	460b      	mov	r3, r1
 800377c:	803b      	strh	r3, [r7, #0]
 800377e:	4613      	mov	r3, r2
 8003780:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003786:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800378a:	2b00      	cmp	r3, #0
 800378c:	da0f      	bge.n	80037ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	f003 020f 	and.w	r2, r3, #15
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	3310      	adds	r3, #16
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4413      	add	r3, r2
 80037a2:	3304      	adds	r3, #4
 80037a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2201      	movs	r2, #1
 80037aa:	705a      	strb	r2, [r3, #1]
 80037ac:	e00f      	b.n	80037ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	f003 020f 	and.w	r2, r3, #15
 80037b4:	4613      	mov	r3, r2
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	4413      	add	r3, r2
 80037c4:	3304      	adds	r3, #4
 80037c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80037da:	883b      	ldrh	r3, [r7, #0]
 80037dc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	78ba      	ldrb	r2, [r7, #2]
 80037e8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	785b      	ldrb	r3, [r3, #1]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	461a      	mov	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80037fc:	78bb      	ldrb	r3, [r7, #2]
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d102      	bne.n	8003808 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800380e:	2b01      	cmp	r3, #1
 8003810:	d101      	bne.n	8003816 <HAL_PCD_EP_Open+0xae>
 8003812:	2302      	movs	r3, #2
 8003814:	e00e      	b.n	8003834 <HAL_PCD_EP_Open+0xcc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68f9      	ldr	r1, [r7, #12]
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fea5 	bl	8006574 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003832:	7afb      	ldrb	r3, [r7, #11]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003848:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800384c:	2b00      	cmp	r3, #0
 800384e:	da0f      	bge.n	8003870 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	3310      	adds	r3, #16
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	3304      	adds	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2201      	movs	r2, #1
 800386c:	705a      	strb	r2, [r3, #1]
 800386e:	e00f      	b.n	8003890 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003870:	78fb      	ldrb	r3, [r7, #3]
 8003872:	f003 020f 	and.w	r2, r3, #15
 8003876:	4613      	mov	r3, r2
 8003878:	00db      	lsls	r3, r3, #3
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	3304      	adds	r3, #4
 8003888:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_PCD_EP_Close+0x6e>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e00e      	b.n	80038c8 <HAL_PCD_EP_Close+0x8c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68f9      	ldr	r1, [r7, #12]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f002 fee3 	bl	8006684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	460b      	mov	r3, r1
 80038de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	7afb      	ldrb	r3, [r7, #11]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2200      	movs	r2, #0
 800390a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	2200      	movs	r2, #0
 8003910:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003912:	7afb      	ldrb	r3, [r7, #11]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	b2da      	uxtb	r2, r3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	799b      	ldrb	r3, [r3, #6]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d102      	bne.n	800392c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6818      	ldr	r0, [r3, #0]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	799b      	ldrb	r3, [r3, #6]
 8003934:	461a      	mov	r2, r3
 8003936:	6979      	ldr	r1, [r7, #20]
 8003938:	f002 ff80 	bl	800683c <USB_EPStartXfer>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	460b      	mov	r3, r1
 8003950:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 020f 	and.w	r2, r3, #15
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	4413      	add	r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003968:	681b      	ldr	r3, [r3, #0]
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003976:	b580      	push	{r7, lr}
 8003978:	b086      	sub	sp, #24
 800397a:	af00      	add	r7, sp, #0
 800397c:	60f8      	str	r0, [r7, #12]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
 8003982:	460b      	mov	r3, r1
 8003984:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003986:	7afb      	ldrb	r3, [r7, #11]
 8003988:	f003 020f 	and.w	r2, r3, #15
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	3310      	adds	r3, #16
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	4413      	add	r3, r2
 800399a:	3304      	adds	r3, #4
 800399c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2201      	movs	r2, #1
 80039b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039b6:	7afb      	ldrb	r3, [r7, #11]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	799b      	ldrb	r3, [r3, #6]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d102      	bne.n	80039d0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	799b      	ldrb	r3, [r3, #6]
 80039d8:	461a      	mov	r2, r3
 80039da:	6979      	ldr	r1, [r7, #20]
 80039dc:	f002 ff2e 	bl	800683c <USB_EPStartXfer>

  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b084      	sub	sp, #16
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039f6:	78fb      	ldrb	r3, [r7, #3]
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	7912      	ldrb	r2, [r2, #4]
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d901      	bls.n	8003a08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e04f      	b.n	8003aa8 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da0f      	bge.n	8003a30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3310      	adds	r3, #16
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	705a      	strb	r2, [r3, #1]
 8003a2e:	e00d      	b.n	8003a4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003a30:	78fa      	ldrb	r2, [r7, #3]
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	f003 030f 	and.w	r3, r3, #15
 8003a58:	b2da      	uxtb	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_PCD_EP_SetStall+0x82>
 8003a68:	2302      	movs	r3, #2
 8003a6a:	e01d      	b.n	8003aa8 <HAL_PCD_EP_SetStall+0xbe>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68f9      	ldr	r1, [r7, #12]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f003 fabc 	bl	8006ff8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a80:	78fb      	ldrb	r3, [r7, #3]
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d109      	bne.n	8003a9e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	7999      	ldrb	r1, [r3, #6]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a98:	461a      	mov	r2, r3
 8003a9a:	f003 fcad 	bl	80073f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003aa6:	2300      	movs	r3, #0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	460b      	mov	r3, r1
 8003aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 030f 	and.w	r3, r3, #15
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	7912      	ldrb	r2, [r2, #4]
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e042      	b.n	8003b54 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	da0f      	bge.n	8003af6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 020f 	and.w	r2, r3, #15
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	3310      	adds	r3, #16
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2201      	movs	r2, #1
 8003af2:	705a      	strb	r2, [r3, #1]
 8003af4:	e00f      	b.n	8003b16 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003af6:	78fb      	ldrb	r3, [r7, #3]
 8003af8:	f003 020f 	and.w	r2, r3, #15
 8003afc:	4613      	mov	r3, r2
 8003afe:	00db      	lsls	r3, r3, #3
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3304      	adds	r3, #4
 8003b0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d101      	bne.n	8003b36 <HAL_PCD_EP_ClrStall+0x86>
 8003b32:	2302      	movs	r3, #2
 8003b34:	e00e      	b.n	8003b54 <HAL_PCD_EP_ClrStall+0xa4>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68f9      	ldr	r1, [r7, #12]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f003 fac5 	bl	80070d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	da0c      	bge.n	8003b8a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 020f 	and.w	r2, r3, #15
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	3310      	adds	r3, #16
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	4413      	add	r3, r2
 8003b84:	3304      	adds	r3, #4
 8003b86:	60fb      	str	r3, [r7, #12]
 8003b88:	e00c      	b.n	8003ba4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	f003 020f 	and.w	r2, r3, #15
 8003b90:	4613      	mov	r3, r2
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4413      	add	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 f8e4 	bl	8006d78 <USB_EPStopXfer>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003bb4:	7afb      	ldrb	r3, [r7, #11]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b08a      	sub	sp, #40	@ 0x28
 8003bc2:	af02      	add	r7, sp, #8
 8003bc4:	6078      	str	r0, [r7, #4]
 8003bc6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	3310      	adds	r3, #16
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4413      	add	r3, r2
 8003be2:	3304      	adds	r3, #4
 8003be4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	695a      	ldr	r2, [r3, #20]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d901      	bls.n	8003bf6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e06b      	b.n	8003cce <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d902      	bls.n	8003c12 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3303      	adds	r3, #3
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c1a:	e02a      	b.n	8003c72 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	69fa      	ldr	r2, [r7, #28]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d902      	bls.n	8003c38 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3303      	adds	r3, #3
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68d9      	ldr	r1, [r3, #12]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c50:	9300      	str	r3, [sp, #0]
 8003c52:	4603      	mov	r3, r0
 8003c54:	6978      	ldr	r0, [r7, #20]
 8003c56:	f003 f939 	bl	8006ecc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	68da      	ldr	r2, [r3, #12]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	441a      	add	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	441a      	add	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d809      	bhi.n	8003c9c <PCD_WriteEmptyTxFifo+0xde>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	695a      	ldr	r2, [r3, #20]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d203      	bcs.n	8003c9c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d1bf      	bne.n	8003c1c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d811      	bhi.n	8003ccc <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	2201      	movs	r2, #1
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	43db      	mvns	r3, r3
 8003cc2:	6939      	ldr	r1, [r7, #16]
 8003cc4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003cc8:	4013      	ands	r3, r2
 8003cca:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3720      	adds	r7, #32
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b088      	sub	sp, #32
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	333c      	adds	r3, #60	@ 0x3c
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	799b      	ldrb	r3, [r3, #6]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d17b      	bne.n	8003e06 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f003 0308 	and.w	r3, r3, #8
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d015      	beq.n	8003d44 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	4a61      	ldr	r2, [pc, #388]	@ (8003ea0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	f240 80b9 	bls.w	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80b3 	beq.w	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d40:	6093      	str	r3, [r2, #8]
 8003d42:	e0a7      	b.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d009      	beq.n	8003d62 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	2320      	movs	r3, #32
 8003d5e:	6093      	str	r3, [r2, #8]
 8003d60:	e098      	b.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f040 8093 	bne.w	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d90f      	bls.n	8003d96 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00a      	beq.n	8003d96 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d92:	6093      	str	r3, [r2, #8]
 8003d94:	e07e      	b.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4413      	add	r3, r2
 8003da8:	3304      	adds	r3, #4
 8003daa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1a      	ldr	r2, [r3, #32]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	0159      	lsls	r1, r3, #5
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	440b      	add	r3, r1
 8003db8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dc2:	1ad2      	subs	r2, r2, r3
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d114      	bne.n	8003df8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003de0:	461a      	mov	r2, r3
 8003de2:	2101      	movs	r1, #1
 8003de4:	f003 fb08 	bl	80073f8 <USB_EP0_OutStart>
 8003de8:	e006      	b.n	8003df8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	68da      	ldr	r2, [r3, #12]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	441a      	add	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f007 f86c 	bl	800aedc <HAL_PCD_DataOutStageCallback>
 8003e04:	e046      	b.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d124      	bne.n	8003e58 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	e032      	b.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	2320      	movs	r3, #32
 8003e48:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	4619      	mov	r1, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f007 f843 	bl	800aedc <HAL_PCD_DataOutStageCallback>
 8003e56:	e01d      	b.n	8003e94 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d114      	bne.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d108      	bne.n	8003e88 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6818      	ldr	r0, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003e80:	461a      	mov	r2, r3
 8003e82:	2100      	movs	r1, #0
 8003e84:	f003 fab8 	bl	80073f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f007 f824 	bl	800aedc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3720      	adds	r7, #32
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	4f54300a 	.word	0x4f54300a
 8003ea4:	4f54310a 	.word	0x4f54310a

08003ea8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	333c      	adds	r3, #60	@ 0x3c
 8003ec0:	3304      	adds	r3, #4
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	015a      	lsls	r2, r3, #5
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	4413      	add	r3, r2
 8003ece:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d90e      	bls.n	8003efc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d009      	beq.n	8003efc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	015a      	lsls	r2, r3, #5
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	4413      	add	r3, r2
 8003ef0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003efa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f006 ffdb 	bl	800aeb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a0a      	ldr	r2, [pc, #40]	@ (8003f30 <PCD_EP_OutSetupPacket_int+0x88>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d90c      	bls.n	8003f24 <PCD_EP_OutSetupPacket_int+0x7c>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	799b      	ldrb	r3, [r3, #6]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d108      	bne.n	8003f24 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	2101      	movs	r1, #1
 8003f20:	f003 fa6a 	bl	80073f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003f24:	2300      	movs	r3, #0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	4f54300a 	.word	0x4f54300a

08003f34 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	70fb      	strb	r3, [r7, #3]
 8003f40:	4613      	mov	r3, r2
 8003f42:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d107      	bne.n	8003f62 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f52:	883b      	ldrh	r3, [r7, #0]
 8003f54:	0419      	lsls	r1, r3, #16
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f60:	e028      	b.n	8003fb4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f68:	0c1b      	lsrs	r3, r3, #16
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f70:	2300      	movs	r3, #0
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e00d      	b.n	8003f92 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	3340      	adds	r3, #64	@ 0x40
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	0c1b      	lsrs	r3, r3, #16
 8003f86:	68ba      	ldr	r2, [r7, #8]
 8003f88:	4413      	add	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
 8003f92:	7bfa      	ldrb	r2, [r7, #15]
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	3b01      	subs	r3, #1
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d3ec      	bcc.n	8003f76 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f9c:	883b      	ldrh	r3, [r7, #0]
 8003f9e:	0418      	lsls	r0, r3, #16
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	78fb      	ldrb	r3, [r7, #3]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	4302      	orrs	r2, r0
 8003fac:	3340      	adds	r3, #64	@ 0x40
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	440b      	add	r3, r1
 8003fb2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	887a      	ldrh	r2, [r7, #2]
 8003fd4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fd6:	2300      	movs	r3, #0
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e267      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d075      	beq.n	8004106 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800401a:	4b88      	ldr	r3, [pc, #544]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b04      	cmp	r3, #4
 8004024:	d00c      	beq.n	8004040 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004026:	4b85      	ldr	r3, [pc, #532]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800402e:	2b08      	cmp	r3, #8
 8004030:	d112      	bne.n	8004058 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004032:	4b82      	ldr	r3, [pc, #520]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800403e:	d10b      	bne.n	8004058 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004040:	4b7e      	ldr	r3, [pc, #504]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004048:	2b00      	cmp	r3, #0
 800404a:	d05b      	beq.n	8004104 <HAL_RCC_OscConfig+0x108>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d157      	bne.n	8004104 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e242      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004060:	d106      	bne.n	8004070 <HAL_RCC_OscConfig+0x74>
 8004062:	4b76      	ldr	r3, [pc, #472]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a75      	ldr	r2, [pc, #468]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800406c:	6013      	str	r3, [r2, #0]
 800406e:	e01d      	b.n	80040ac <HAL_RCC_OscConfig+0xb0>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004078:	d10c      	bne.n	8004094 <HAL_RCC_OscConfig+0x98>
 800407a:	4b70      	ldr	r3, [pc, #448]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a6f      	ldr	r2, [pc, #444]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	4b6d      	ldr	r3, [pc, #436]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6c      	ldr	r2, [pc, #432]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e00b      	b.n	80040ac <HAL_RCC_OscConfig+0xb0>
 8004094:	4b69      	ldr	r3, [pc, #420]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a68      	ldr	r2, [pc, #416]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800409a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800409e:	6013      	str	r3, [r2, #0]
 80040a0:	4b66      	ldr	r3, [pc, #408]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a65      	ldr	r2, [pc, #404]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d013      	beq.n	80040dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b4:	f7fd fb48 	bl	8001748 <HAL_GetTick>
 80040b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ba:	e008      	b.n	80040ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040bc:	f7fd fb44 	bl	8001748 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	2b64      	cmp	r3, #100	@ 0x64
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e207      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	4b5b      	ldr	r3, [pc, #364]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d0f0      	beq.n	80040bc <HAL_RCC_OscConfig+0xc0>
 80040da:	e014      	b.n	8004106 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040dc:	f7fd fb34 	bl	8001748 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e4:	f7fd fb30 	bl	8001748 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b64      	cmp	r3, #100	@ 0x64
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e1f3      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	4b51      	ldr	r3, [pc, #324]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d1f0      	bne.n	80040e4 <HAL_RCC_OscConfig+0xe8>
 8004102:	e000      	b.n	8004106 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d063      	beq.n	80041da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004112:	4b4a      	ldr	r3, [pc, #296]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411e:	4b47      	ldr	r3, [pc, #284]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004126:	2b08      	cmp	r3, #8
 8004128:	d11c      	bne.n	8004164 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800412a:	4b44      	ldr	r3, [pc, #272]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d116      	bne.n	8004164 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	4b41      	ldr	r3, [pc, #260]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <HAL_RCC_OscConfig+0x152>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e1c7      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414e:	4b3b      	ldr	r3, [pc, #236]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	4937      	ldr	r1, [pc, #220]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800415e:	4313      	orrs	r3, r2
 8004160:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004162:	e03a      	b.n	80041da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800416c:	4b34      	ldr	r3, [pc, #208]	@ (8004240 <HAL_RCC_OscConfig+0x244>)
 800416e:	2201      	movs	r2, #1
 8004170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd fae9 	bl	8001748 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417a:	f7fd fae5 	bl	8001748 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e1a8      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	4b2b      	ldr	r3, [pc, #172]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d0f0      	beq.n	800417a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004198:	4b28      	ldr	r3, [pc, #160]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4925      	ldr	r1, [pc, #148]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	600b      	str	r3, [r1, #0]
 80041ac:	e015      	b.n	80041da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b24      	ldr	r3, [pc, #144]	@ (8004240 <HAL_RCC_OscConfig+0x244>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fac8 	bl	8001748 <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041bc:	f7fd fac4 	bl	8001748 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e187      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	4b1b      	ldr	r3, [pc, #108]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1f0      	bne.n	80041bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d036      	beq.n	8004254 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ee:	4b15      	ldr	r3, [pc, #84]	@ (8004244 <HAL_RCC_OscConfig+0x248>)
 80041f0:	2201      	movs	r2, #1
 80041f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fd faa8 	bl	8001748 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fc:	f7fd faa4 	bl	8001748 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e167      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	4b0b      	ldr	r3, [pc, #44]	@ (800423c <HAL_RCC_OscConfig+0x240>)
 8004210:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x200>
 800421a:	e01b      	b.n	8004254 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800421c:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_RCC_OscConfig+0x248>)
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004222:	f7fd fa91 	bl	8001748 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004228:	e00e      	b.n	8004248 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800422a:	f7fd fa8d 	bl	8001748 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d907      	bls.n	8004248 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e150      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
 800423c:	40023800 	.word	0x40023800
 8004240:	42470000 	.word	0x42470000
 8004244:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	4b88      	ldr	r3, [pc, #544]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800424a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d1ea      	bne.n	800422a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8097 	beq.w	8004390 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004266:	4b81      	ldr	r3, [pc, #516]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10f      	bne.n	8004292 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004272:	2300      	movs	r3, #0
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	4b7d      	ldr	r3, [pc, #500]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	4a7c      	ldr	r2, [pc, #496]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004280:	6413      	str	r3, [r2, #64]	@ 0x40
 8004282:	4b7a      	ldr	r3, [pc, #488]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428a:	60bb      	str	r3, [r7, #8]
 800428c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800428e:	2301      	movs	r3, #1
 8004290:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004292:	4b77      	ldr	r3, [pc, #476]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429a:	2b00      	cmp	r3, #0
 800429c:	d118      	bne.n	80042d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800429e:	4b74      	ldr	r3, [pc, #464]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a73      	ldr	r2, [pc, #460]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 80042a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042aa:	f7fd fa4d 	bl	8001748 <HAL_GetTick>
 80042ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b0:	e008      	b.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b2:	f7fd fa49 	bl	8001748 <HAL_GetTick>
 80042b6:	4602      	mov	r2, r0
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	1ad3      	subs	r3, r2, r3
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d901      	bls.n	80042c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e10c      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c4:	4b6a      	ldr	r3, [pc, #424]	@ (8004470 <HAL_RCC_OscConfig+0x474>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d0f0      	beq.n	80042b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d106      	bne.n	80042e6 <HAL_RCC_OscConfig+0x2ea>
 80042d8:	4b64      	ldr	r3, [pc, #400]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042dc:	4a63      	ldr	r2, [pc, #396]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e4:	e01c      	b.n	8004320 <HAL_RCC_OscConfig+0x324>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	2b05      	cmp	r3, #5
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0x30c>
 80042ee:	4b5f      	ldr	r3, [pc, #380]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042f2:	4a5e      	ldr	r2, [pc, #376]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042f4:	f043 0304 	orr.w	r3, r3, #4
 80042f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042fa:	4b5c      	ldr	r3, [pc, #368]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80042fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fe:	4a5b      	ldr	r2, [pc, #364]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6713      	str	r3, [r2, #112]	@ 0x70
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0x324>
 8004308:	4b58      	ldr	r3, [pc, #352]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430c:	4a57      	ldr	r2, [pc, #348]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800430e:	f023 0301 	bic.w	r3, r3, #1
 8004312:	6713      	str	r3, [r2, #112]	@ 0x70
 8004314:	4b55      	ldr	r3, [pc, #340]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004318:	4a54      	ldr	r2, [pc, #336]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d015      	beq.n	8004354 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004328:	f7fd fa0e 	bl	8001748 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fd fa0a 	bl	8001748 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0cb      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	4b49      	ldr	r3, [pc, #292]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0ee      	beq.n	8004330 <HAL_RCC_OscConfig+0x334>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004354:	f7fd f9f8 	bl	8001748 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800435a:	e00a      	b.n	8004372 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800435c:	f7fd f9f4 	bl	8001748 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800436a:	4293      	cmp	r3, r2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e0b5      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	4b3e      	ldr	r3, [pc, #248]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1ee      	bne.n	800435c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004384:	4b39      	ldr	r3, [pc, #228]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004388:	4a38      	ldr	r2, [pc, #224]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800438a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800438e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 80a1 	beq.w	80044dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800439a:	4b34      	ldr	r3, [pc, #208]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 030c 	and.w	r3, r3, #12
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d05c      	beq.n	8004460 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d141      	bne.n	8004432 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <HAL_RCC_OscConfig+0x478>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fd f9c8 	bl	8001748 <HAL_GetTick>
 80043b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ba:	e008      	b.n	80043ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043bc:	f7fd f9c4 	bl	8001748 <HAL_GetTick>
 80043c0:	4602      	mov	r2, r0
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d901      	bls.n	80043ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ca:	2303      	movs	r3, #3
 80043cc:	e087      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ce:	4b27      	ldr	r3, [pc, #156]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1f0      	bne.n	80043bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	431a      	orrs	r2, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e8:	019b      	lsls	r3, r3, #6
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f0:	085b      	lsrs	r3, r3, #1
 80043f2:	3b01      	subs	r3, #1
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	431a      	orrs	r2, r3
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fc:	061b      	lsls	r3, r3, #24
 80043fe:	491b      	ldr	r1, [pc, #108]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004400:	4313      	orrs	r3, r2
 8004402:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004404:	4b1b      	ldr	r3, [pc, #108]	@ (8004474 <HAL_RCC_OscConfig+0x478>)
 8004406:	2201      	movs	r2, #1
 8004408:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440a:	f7fd f99d 	bl	8001748 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004412:	f7fd f999 	bl	8001748 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e05c      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004424:	4b11      	ldr	r3, [pc, #68]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x416>
 8004430:	e054      	b.n	80044dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b10      	ldr	r3, [pc, #64]	@ (8004474 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fd f986 	bl	8001748 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004440:	f7fd f982 	bl	8001748 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e045      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b06      	ldr	r3, [pc, #24]	@ (800446c <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x444>
 800445e:	e03d      	b.n	80044dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d107      	bne.n	8004478 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e038      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
 800446c:	40023800 	.word	0x40023800
 8004470:	40007000 	.word	0x40007000
 8004474:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004478:	4b1b      	ldr	r3, [pc, #108]	@ (80044e8 <HAL_RCC_OscConfig+0x4ec>)
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d028      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d121      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	429a      	cmp	r2, r3
 80044a0:	d11a      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044a8:	4013      	ands	r3, r2
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d111      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044be:	085b      	lsrs	r3, r3, #1
 80044c0:	3b01      	subs	r3, #1
 80044c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d107      	bne.n	80044d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40023800 	.word	0x40023800

080044ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e0cc      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004500:	4b68      	ldr	r3, [pc, #416]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 030f 	and.w	r3, r3, #15
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d90c      	bls.n	8004528 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800450e:	4b65      	ldr	r3, [pc, #404]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	b2d2      	uxtb	r2, r2
 8004514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004516:	4b63      	ldr	r3, [pc, #396]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d001      	beq.n	8004528 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e0b8      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d020      	beq.n	8004576 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004540:	4b59      	ldr	r3, [pc, #356]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a58      	ldr	r2, [pc, #352]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800454a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004558:	4b53      	ldr	r3, [pc, #332]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a52      	ldr	r2, [pc, #328]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004562:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004564:	4b50      	ldr	r3, [pc, #320]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	494d      	ldr	r1, [pc, #308]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	4313      	orrs	r3, r2
 8004574:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d044      	beq.n	800460c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d107      	bne.n	800459a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458a:	4b47      	ldr	r3, [pc, #284]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d119      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e07f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d003      	beq.n	80045aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045a6:	2b03      	cmp	r3, #3
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045aa:	4b3f      	ldr	r3, [pc, #252]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d109      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e06f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ba:	4b3b      	ldr	r3, [pc, #236]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e067      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ca:	4b37      	ldr	r3, [pc, #220]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	4934      	ldr	r1, [pc, #208]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045dc:	f7fd f8b4 	bl	8001748 <HAL_GetTick>
 80045e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	e00a      	b.n	80045fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e4:	f7fd f8b0 	bl	8001748 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e04f      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	4b2b      	ldr	r3, [pc, #172]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 020c 	and.w	r2, r3, #12
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	429a      	cmp	r2, r3
 800460a:	d1eb      	bne.n	80045e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800460c:	4b25      	ldr	r3, [pc, #148]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 030f 	and.w	r3, r3, #15
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d20c      	bcs.n	8004634 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b22      	ldr	r3, [pc, #136]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004622:	4b20      	ldr	r3, [pc, #128]	@ (80046a4 <HAL_RCC_ClockConfig+0x1b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 030f 	and.w	r3, r3, #15
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d001      	beq.n	8004634 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e032      	b.n	800469a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0304 	and.w	r3, r3, #4
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004640:	4b19      	ldr	r3, [pc, #100]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4916      	ldr	r1, [pc, #88]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	4313      	orrs	r3, r2
 8004650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0308 	and.w	r3, r3, #8
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800465e:	4b12      	ldr	r3, [pc, #72]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	490e      	ldr	r1, [pc, #56]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004672:	f000 f821 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8004676:	4602      	mov	r2, r0
 8004678:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <HAL_RCC_ClockConfig+0x1bc>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 030f 	and.w	r3, r3, #15
 8004682:	490a      	ldr	r1, [pc, #40]	@ (80046ac <HAL_RCC_ClockConfig+0x1c0>)
 8004684:	5ccb      	ldrb	r3, [r1, r3]
 8004686:	fa22 f303 	lsr.w	r3, r2, r3
 800468a:	4a09      	ldr	r2, [pc, #36]	@ (80046b0 <HAL_RCC_ClockConfig+0x1c4>)
 800468c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800468e:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <HAL_RCC_ClockConfig+0x1c8>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4618      	mov	r0, r3
 8004694:	f7fc ff26 	bl	80014e4 <HAL_InitTick>

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023c00 	.word	0x40023c00
 80046a8:	40023800 	.word	0x40023800
 80046ac:	0800b53c 	.word	0x0800b53c
 80046b0:	20000000 	.word	0x20000000
 80046b4:	20000004 	.word	0x20000004

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046bc:	b094      	sub	sp, #80	@ 0x50
 80046be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d0:	4b79      	ldr	r3, [pc, #484]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 030c 	and.w	r3, r3, #12
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d00d      	beq.n	80046f8 <HAL_RCC_GetSysClockFreq+0x40>
 80046dc:	2b08      	cmp	r3, #8
 80046de:	f200 80e1 	bhi.w	80048a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d002      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x34>
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	d003      	beq.n	80046f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046ea:	e0db      	b.n	80048a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ec:	4b73      	ldr	r3, [pc, #460]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x204>)
 80046ee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f0:	e0db      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f2:	4b73      	ldr	r3, [pc, #460]	@ (80048c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80046f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046f6:	e0d8      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f8:	4b6f      	ldr	r3, [pc, #444]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004700:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004702:	4b6d      	ldr	r3, [pc, #436]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d063      	beq.n	80047d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b6a      	ldr	r3, [pc, #424]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	2200      	movs	r2, #0
 8004716:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004718:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800471a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800471c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004720:	633b      	str	r3, [r7, #48]	@ 0x30
 8004722:	2300      	movs	r3, #0
 8004724:	637b      	str	r3, [r7, #52]	@ 0x34
 8004726:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	f04f 0000 	mov.w	r0, #0
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	0159      	lsls	r1, r3, #5
 8004738:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473c:	0150      	lsls	r0, r2, #5
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4621      	mov	r1, r4
 8004744:	1a51      	subs	r1, r2, r1
 8004746:	6139      	str	r1, [r7, #16]
 8004748:	4629      	mov	r1, r5
 800474a:	eb63 0301 	sbc.w	r3, r3, r1
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	f04f 0200 	mov.w	r2, #0
 8004754:	f04f 0300 	mov.w	r3, #0
 8004758:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800475c:	4659      	mov	r1, fp
 800475e:	018b      	lsls	r3, r1, #6
 8004760:	4651      	mov	r1, sl
 8004762:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004766:	4651      	mov	r1, sl
 8004768:	018a      	lsls	r2, r1, #6
 800476a:	4651      	mov	r1, sl
 800476c:	ebb2 0801 	subs.w	r8, r2, r1
 8004770:	4659      	mov	r1, fp
 8004772:	eb63 0901 	sbc.w	r9, r3, r1
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004782:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004786:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800478a:	4690      	mov	r8, r2
 800478c:	4699      	mov	r9, r3
 800478e:	4623      	mov	r3, r4
 8004790:	eb18 0303 	adds.w	r3, r8, r3
 8004794:	60bb      	str	r3, [r7, #8]
 8004796:	462b      	mov	r3, r5
 8004798:	eb49 0303 	adc.w	r3, r9, r3
 800479c:	60fb      	str	r3, [r7, #12]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047aa:	4629      	mov	r1, r5
 80047ac:	024b      	lsls	r3, r1, #9
 80047ae:	4621      	mov	r1, r4
 80047b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047b4:	4621      	mov	r1, r4
 80047b6:	024a      	lsls	r2, r1, #9
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047be:	2200      	movs	r2, #0
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047c8:	f7fb fd1a 	bl	8000200 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4613      	mov	r3, r2
 80047d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047d4:	e058      	b.n	8004888 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047d6:	4b38      	ldr	r3, [pc, #224]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	099b      	lsrs	r3, r3, #6
 80047dc:	2200      	movs	r2, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	4611      	mov	r1, r2
 80047e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047e6:	623b      	str	r3, [r7, #32]
 80047e8:	2300      	movs	r3, #0
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80047ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047f0:	4642      	mov	r2, r8
 80047f2:	464b      	mov	r3, r9
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f04f 0100 	mov.w	r1, #0
 80047fc:	0159      	lsls	r1, r3, #5
 80047fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004802:	0150      	lsls	r0, r2, #5
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4641      	mov	r1, r8
 800480a:	ebb2 0a01 	subs.w	sl, r2, r1
 800480e:	4649      	mov	r1, r9
 8004810:	eb63 0b01 	sbc.w	fp, r3, r1
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004820:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004824:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004828:	ebb2 040a 	subs.w	r4, r2, sl
 800482c:	eb63 050b 	sbc.w	r5, r3, fp
 8004830:	f04f 0200 	mov.w	r2, #0
 8004834:	f04f 0300 	mov.w	r3, #0
 8004838:	00eb      	lsls	r3, r5, #3
 800483a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800483e:	00e2      	lsls	r2, r4, #3
 8004840:	4614      	mov	r4, r2
 8004842:	461d      	mov	r5, r3
 8004844:	4643      	mov	r3, r8
 8004846:	18e3      	adds	r3, r4, r3
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	464b      	mov	r3, r9
 800484c:	eb45 0303 	adc.w	r3, r5, r3
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800485e:	4629      	mov	r1, r5
 8004860:	028b      	lsls	r3, r1, #10
 8004862:	4621      	mov	r1, r4
 8004864:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004868:	4621      	mov	r1, r4
 800486a:	028a      	lsls	r2, r1, #10
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004872:	2200      	movs	r2, #0
 8004874:	61bb      	str	r3, [r7, #24]
 8004876:	61fa      	str	r2, [r7, #28]
 8004878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800487c:	f7fb fcc0 	bl	8000200 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004888:	4b0b      	ldr	r3, [pc, #44]	@ (80048b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	0c1b      	lsrs	r3, r3, #16
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	3301      	adds	r3, #1
 8004894:	005b      	lsls	r3, r3, #1
 8004896:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004898:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800489a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a2:	e002      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048a4:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCC_GetSysClockFreq+0x204>)
 80048a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80048a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3750      	adds	r7, #80	@ 0x50
 80048b0:	46bd      	mov	sp, r7
 80048b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b6:	bf00      	nop
 80048b8:	40023800 	.word	0x40023800
 80048bc:	00f42400 	.word	0x00f42400
 80048c0:	007a1200 	.word	0x007a1200

080048c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c4:	b480      	push	{r7}
 80048c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c8:	4b03      	ldr	r3, [pc, #12]	@ (80048d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000000 	.word	0x20000000

080048dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048e0:	f7ff fff0 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 80048e4:	4602      	mov	r2, r0
 80048e6:	4b05      	ldr	r3, [pc, #20]	@ (80048fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	0a9b      	lsrs	r3, r3, #10
 80048ec:	f003 0307 	and.w	r3, r3, #7
 80048f0:	4903      	ldr	r1, [pc, #12]	@ (8004900 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f2:	5ccb      	ldrb	r3, [r1, r3]
 80048f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	40023800 	.word	0x40023800
 8004900:	0800b54c 	.word	0x0800b54c

08004904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004908:	f7ff ffdc 	bl	80048c4 <HAL_RCC_GetHCLKFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	4b05      	ldr	r3, [pc, #20]	@ (8004924 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	0b5b      	lsrs	r3, r3, #13
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	4903      	ldr	r1, [pc, #12]	@ (8004928 <HAL_RCC_GetPCLK2Freq+0x24>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40023800 	.word	0x40023800
 8004928:	0800b54c 	.word	0x0800b54c

0800492c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	220f      	movs	r2, #15
 800493a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800493c:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0203 	and.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004948:	4b0f      	ldr	r3, [pc, #60]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004954:	4b0c      	ldr	r3, [pc, #48]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800496e:	4b07      	ldr	r3, [pc, #28]	@ (800498c <HAL_RCC_GetClockConfig+0x60>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 020f 	and.w	r2, r3, #15
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	40023c00 	.word	0x40023c00

08004990 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004998:	2300      	movs	r3, #0
 800499a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d105      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d075      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80049c4:	4b91      	ldr	r3, [pc, #580]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80049ca:	f7fc febd 	bl	8001748 <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049d2:	f7fc feb9 	bl	8001748 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e189      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80049e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1f0      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	071b      	lsls	r3, r3, #28
 8004a08:	4981      	ldr	r1, [pc, #516]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01f      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a22:	0f1b      	lsrs	r3, r3, #28
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	019a      	lsls	r2, r3, #6
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	061b      	lsls	r3, r3, #24
 8004a36:	431a      	orrs	r2, r3
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	071b      	lsls	r3, r3, #28
 8004a3c:	4974      	ldr	r1, [pc, #464]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a44:	4b72      	ldr	r3, [pc, #456]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004a4a:	f023 021f 	bic.w	r2, r3, #31
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	496e      	ldr	r1, [pc, #440]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00d      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	019a      	lsls	r2, r3, #6
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	061b      	lsls	r3, r3, #24
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	071b      	lsls	r3, r3, #28
 8004a7c:	4964      	ldr	r1, [pc, #400]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004a84:	4b61      	ldr	r3, [pc, #388]	@ (8004c0c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a8a:	f7fc fe5d 	bl	8001748 <HAL_GetTick>
 8004a8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a92:	f7fc fe59 	bl	8001748 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e129      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d105      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d079      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ac8:	4b52      	ldr	r3, [pc, #328]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ace:	f7fc fe3b 	bl	8001748 <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ad6:	f7fc fe37 	bl	8001748 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e107      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004ae8:	4b49      	ldr	r3, [pc, #292]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004af0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af4:	d0ef      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0304 	and.w	r3, r3, #4
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d020      	beq.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b02:	4b43      	ldr	r3, [pc, #268]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b08:	0f1b      	lsrs	r3, r3, #28
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	691b      	ldr	r3, [r3, #16]
 8004b14:	019a      	lsls	r2, r3, #6
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	061b      	lsls	r3, r3, #24
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	071b      	lsls	r3, r3, #28
 8004b22:	493b      	ldr	r1, [pc, #236]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b2a:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b30:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	021b      	lsls	r3, r3, #8
 8004b3c:	4934      	ldr	r1, [pc, #208]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01e      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b50:	4b2f      	ldr	r3, [pc, #188]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b56:	0e1b      	lsrs	r3, r3, #24
 8004b58:	f003 030f 	and.w	r3, r3, #15
 8004b5c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	019a      	lsls	r2, r3, #6
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	071b      	lsls	r3, r3, #28
 8004b70:	4927      	ldr	r1, [pc, #156]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b78:	4b25      	ldr	r3, [pc, #148]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	4922      	ldr	r1, [pc, #136]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b8e:	4b21      	ldr	r3, [pc, #132]	@ (8004c14 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b90:	2201      	movs	r2, #1
 8004b92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b94:	f7fc fdd8 	bl	8001748 <HAL_GetTick>
 8004b98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004b9c:	f7fc fdd4 	bl	8001748 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0a4      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bae:	4b18      	ldr	r3, [pc, #96]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bb6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004bba:	d1ef      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0320 	and.w	r3, r3, #32
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	f000 808b 	beq.w	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	4b10      	ldr	r3, [pc, #64]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	4a0f      	ldr	r2, [pc, #60]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bda:	4b0d      	ldr	r3, [pc, #52]	@ (8004c10 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004be6:	4b0c      	ldr	r3, [pc, #48]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a0b      	ldr	r2, [pc, #44]	@ (8004c18 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bf2:	f7fc fda9 	bl	8001748 <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004bf8:	e010      	b.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bfa:	f7fc fda5 	bl	8001748 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d909      	bls.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e075      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c0c:	42470068 	.word	0x42470068
 8004c10:	40023800 	.word	0x40023800
 8004c14:	42470070 	.word	0x42470070
 8004c18:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1c:	4b38      	ldr	r3, [pc, #224]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d0e8      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c28:	4b36      	ldr	r3, [pc, #216]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c30:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d02f      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d028      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c46:	4b2f      	ldr	r3, [pc, #188]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c4e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c50:	4b2d      	ldr	r3, [pc, #180]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c52:	2201      	movs	r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c56:	4b2c      	ldr	r3, [pc, #176]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c5c:	4a29      	ldr	r2, [pc, #164]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c62:	4b28      	ldr	r3, [pc, #160]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d114      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c6e:	f7fc fd6b 	bl	8001748 <HAL_GetTick>
 8004c72:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fc fd67 	bl	8001748 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e035      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ee      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ca4:	d10d      	bne.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004ca6:	4b17      	ldr	r3, [pc, #92]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cba:	4912      	ldr	r1, [pc, #72]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	e005      	b.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004cc2:	4b10      	ldr	r3, [pc, #64]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cc8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ccc:	6093      	str	r3, [r2, #8]
 8004cce:	4b0d      	ldr	r3, [pc, #52]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cda:	490a      	ldr	r1, [pc, #40]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d004      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004cf2:	4b06      	ldr	r3, [pc, #24]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004cf4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004cf6:	2300      	movs	r3, #0
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40007000 	.word	0x40007000
 8004d04:	40023800 	.word	0x40023800
 8004d08:	42470e40 	.word	0x42470e40
 8004d0c:	424711e0 	.word	0x424711e0

08004d10 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e025      	b.n	8004d70 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d106      	bne.n	8004d3e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fc fbc9 	bl	80014d0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	4619      	mov	r1, r3
 8004d50:	4610      	mov	r0, r2
 8004d52:	f000 ffd3 	bl	8005cfc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	f001 f828 	bl	8005db6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e07b      	b.n	8004e82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d108      	bne.n	8004da4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004d9a:	d009      	beq.n	8004db0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	61da      	str	r2, [r3, #28]
 8004da2:	e005      	b.n	8004db0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2200      	movs	r2, #0
 8004dae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fc fa06 	bl	80011dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004de6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004df8:	431a      	orrs	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	f003 0302 	and.w	r3, r3, #2
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a1b      	ldr	r3, [r3, #32]
 8004e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e34:	ea42 0103 	orr.w	r1, r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	0c1b      	lsrs	r3, r3, #16
 8004e4e:	f003 0104 	and.w	r1, r3, #4
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e56:	f003 0210 	and.w	r2, r3, #16
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69da      	ldr	r2, [r3, #28]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004e70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b082      	sub	sp, #8
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e041      	b.n	8004f20 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fc fa11 	bl	80012d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2202      	movs	r2, #2
 8004eba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3304      	adds	r3, #4
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 fa7d 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2201      	movs	r2, #1
 8004eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2201      	movs	r2, #1
 8004efa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2201      	movs	r2, #1
 8004f12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2201      	movs	r2, #1
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e04e      	b.n	8004fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a23      	ldr	r2, [pc, #140]	@ (8004fec <HAL_TIM_Base_Start_IT+0xc4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d022      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f6a:	d01d      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1f      	ldr	r2, [pc, #124]	@ (8004ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d018      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d013      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00e      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d009      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a19      	ldr	r2, [pc, #100]	@ (8005000 <HAL_TIM_Base_Start_IT+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d004      	beq.n	8004fa8 <HAL_TIM_Base_Start_IT+0x80>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a18      	ldr	r2, [pc, #96]	@ (8005004 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d111      	bne.n	8004fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b06      	cmp	r3, #6
 8004fb8:	d010      	beq.n	8004fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0201 	orr.w	r2, r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	e007      	b.n	8004fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f042 0201 	orr.w	r2, r2, #1
 8004fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3714      	adds	r7, #20
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	40010000 	.word	0x40010000
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40010400 	.word	0x40010400
 8005000:	40014000 	.word	0x40014000
 8005004:	40001800 	.word	0x40001800

08005008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d020      	beq.n	800506c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01b      	beq.n	800506c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0202 	mvn.w	r2, #2
 800503c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f999 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f98b 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f99c 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0304 	and.w	r3, r3, #4
 8005072:	2b00      	cmp	r3, #0
 8005074:	d020      	beq.n	80050b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d01b      	beq.n	80050b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0204 	mvn.w	r2, #4
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2202      	movs	r2, #2
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f973 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f965 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f976 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d020      	beq.n	8005104 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d01b      	beq.n	8005104 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f06f 0208 	mvn.w	r2, #8
 80050d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2204      	movs	r2, #4
 80050da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f94d 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 80050f0:	e005      	b.n	80050fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f93f 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f000 f950 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d020      	beq.n	8005150 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d01b      	beq.n	8005150 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0210 	mvn.w	r2, #16
 8005120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2208      	movs	r2, #8
 8005126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f927 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 800513c:	e005      	b.n	800514a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f919 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f92a 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0301 	and.w	r3, r3, #1
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00c      	beq.n	8005174 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b00      	cmp	r3, #0
 8005162:	d007      	beq.n	8005174 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0201 	mvn.w	r2, #1
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fb fe0c 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00c      	beq.n	8005198 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d007      	beq.n	8005198 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fae4 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f8fb 	bl	80053b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0220 	mvn.w	r2, #32
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fab6 	bl	800574c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e0:	bf00      	nop
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d101      	bne.n	8005204 <HAL_TIM_ConfigClockSource+0x1c>
 8005200:	2302      	movs	r3, #2
 8005202:	e0b4      	b.n	800536e <HAL_TIM_ConfigClockSource+0x186>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800522a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd4>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524a:	f000 8086 	beq.w	800535a <HAL_TIM_ConfigClockSource+0x172>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005254:	2b70      	cmp	r3, #112	@ 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xa6>
 8005258:	2b70      	cmp	r3, #112	@ 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800525c:	2b60      	cmp	r3, #96	@ 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x11a>
 8005260:	2b60      	cmp	r3, #96	@ 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005264:	2b50      	cmp	r3, #80	@ 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xfa>
 8005268:	2b50      	cmp	r3, #80	@ 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x13a>
 8005270:	2b40      	cmp	r3, #64	@ 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005274:	2b30      	cmp	r3, #48	@ 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005278:	2b30      	cmp	r3, #48	@ 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800529e:	f000 f9b9 	bl	8005614 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80052b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04f      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052cc:	f000 f9a2 	bl	8005614 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 f916 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	@ 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f96f 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005300:	e02c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	461a      	mov	r2, r3
 8005310:	f000 f935 	bl	800557e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	@ 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f95f 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005320:	e01c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	461a      	mov	r2, r3
 8005330:	f000 f8f6 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	@ 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f94f 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005340:	e00c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 f946 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005352:	e003      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e000      	b.n	800535c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800535a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a46      	ldr	r2, [pc, #280]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d013      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053e6:	d00f      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a43      	ldr	r2, [pc, #268]	@ (80054f8 <TIM_Base_SetConfig+0x130>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00b      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a42      	ldr	r2, [pc, #264]	@ (80054fc <TIM_Base_SetConfig+0x134>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d007      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a41      	ldr	r2, [pc, #260]	@ (8005500 <TIM_Base_SetConfig+0x138>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d003      	beq.n	8005408 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a40      	ldr	r2, [pc, #256]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d108      	bne.n	800541a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800540e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d02b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d027      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a32      	ldr	r2, [pc, #200]	@ (80054f8 <TIM_Base_SetConfig+0x130>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d023      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a31      	ldr	r2, [pc, #196]	@ (80054fc <TIM_Base_SetConfig+0x134>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d01f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a30      	ldr	r2, [pc, #192]	@ (8005500 <TIM_Base_SetConfig+0x138>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d01b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2f      	ldr	r2, [pc, #188]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d017      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2e      	ldr	r2, [pc, #184]	@ (8005508 <TIM_Base_SetConfig+0x140>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2d      	ldr	r2, [pc, #180]	@ (800550c <TIM_Base_SetConfig+0x144>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00f      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a2c      	ldr	r2, [pc, #176]	@ (8005510 <TIM_Base_SetConfig+0x148>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d00b      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a2b      	ldr	r2, [pc, #172]	@ (8005514 <TIM_Base_SetConfig+0x14c>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d007      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a2a      	ldr	r2, [pc, #168]	@ (8005518 <TIM_Base_SetConfig+0x150>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d003      	beq.n	800547a <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a29      	ldr	r2, [pc, #164]	@ (800551c <TIM_Base_SetConfig+0x154>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d108      	bne.n	800548c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a10      	ldr	r2, [pc, #64]	@ (80054f4 <TIM_Base_SetConfig+0x12c>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_Base_SetConfig+0xf8>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a12      	ldr	r2, [pc, #72]	@ (8005504 <TIM_Base_SetConfig+0x13c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d103      	bne.n	80054c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	691a      	ldr	r2, [r3, #16]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d105      	bne.n	80054e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	f023 0201 	bic.w	r2, r3, #1
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	611a      	str	r2, [r3, #16]
  }
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40001800 	.word	0x40001800
 8005518:	40001c00 	.word	0x40001c00
 800551c:	40002000 	.word	0x40002000

08005520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0201 	bic.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f023 0210 	bic.w	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	031b      	lsls	r3, r3, #12
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e05a      	b.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	@ (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b8:	d01d      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	@ (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	@ (800573c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a18      	ldr	r2, [pc, #96]	@ (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a15      	ldr	r2, [pc, #84]	@ (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10c      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80056fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40010400 	.word	0x40010400
 8005744:	40014000 	.word	0x40014000
 8005748:	40001800 	.word	0x40001800

0800574c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e042      	b.n	800580c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fb fdbe 	bl	800131c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	@ 0x24
 80057a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68da      	ldr	r2, [r3, #12]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f82b 	bl	8005814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	691a      	ldr	r2, [r3, #16]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	695a      	ldr	r2, [r3, #20]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68da      	ldr	r2, [r3, #12]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2220      	movs	r2, #32
 80057f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800580a:	2300      	movs	r3, #0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005818:	b0c0      	sub	sp, #256	@ 0x100
 800581a:	af00      	add	r7, sp, #0
 800581c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005830:	68d9      	ldr	r1, [r3, #12]
 8005832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	ea40 0301 	orr.w	r3, r0, r1
 800583c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	431a      	orrs	r2, r3
 800584c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	431a      	orrs	r2, r3
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	4313      	orrs	r3, r2
 800585c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68db      	ldr	r3, [r3, #12]
 8005868:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800586c:	f021 010c 	bic.w	r1, r1, #12
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800587a:	430b      	orrs	r3, r1
 800587c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800587e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800588e:	6999      	ldr	r1, [r3, #24]
 8005890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	ea40 0301 	orr.w	r3, r0, r1
 800589a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4b8f      	ldr	r3, [pc, #572]	@ (8005ae0 <UART_SetConfig+0x2cc>)
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d005      	beq.n	80058b4 <UART_SetConfig+0xa0>
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b8d      	ldr	r3, [pc, #564]	@ (8005ae4 <UART_SetConfig+0x2d0>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d104      	bne.n	80058be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b4:	f7ff f826 	bl	8004904 <HAL_RCC_GetPCLK2Freq>
 80058b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80058bc:	e003      	b.n	80058c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058be:	f7ff f80d 	bl	80048dc <HAL_RCC_GetPCLK1Freq>
 80058c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ca:	69db      	ldr	r3, [r3, #28]
 80058cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d0:	f040 810c 	bne.w	8005aec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058d8:	2200      	movs	r2, #0
 80058da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80058de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80058e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80058e6:	4622      	mov	r2, r4
 80058e8:	462b      	mov	r3, r5
 80058ea:	1891      	adds	r1, r2, r2
 80058ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80058ee:	415b      	adcs	r3, r3
 80058f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80058f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80058f6:	4621      	mov	r1, r4
 80058f8:	eb12 0801 	adds.w	r8, r2, r1
 80058fc:	4629      	mov	r1, r5
 80058fe:	eb43 0901 	adc.w	r9, r3, r1
 8005902:	f04f 0200 	mov.w	r2, #0
 8005906:	f04f 0300 	mov.w	r3, #0
 800590a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800590e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005912:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005916:	4690      	mov	r8, r2
 8005918:	4699      	mov	r9, r3
 800591a:	4623      	mov	r3, r4
 800591c:	eb18 0303 	adds.w	r3, r8, r3
 8005920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005924:	462b      	mov	r3, r5
 8005926:	eb49 0303 	adc.w	r3, r9, r3
 800592a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800592e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800593a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800593e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005942:	460b      	mov	r3, r1
 8005944:	18db      	adds	r3, r3, r3
 8005946:	653b      	str	r3, [r7, #80]	@ 0x50
 8005948:	4613      	mov	r3, r2
 800594a:	eb42 0303 	adc.w	r3, r2, r3
 800594e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005950:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005954:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005958:	f7fa fc52 	bl	8000200 <__aeabi_uldivmod>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4b61      	ldr	r3, [pc, #388]	@ (8005ae8 <UART_SetConfig+0x2d4>)
 8005962:	fba3 2302 	umull	r2, r3, r3, r2
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	011c      	lsls	r4, r3, #4
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800596e:	2200      	movs	r2, #0
 8005970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005974:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005978:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800597c:	4642      	mov	r2, r8
 800597e:	464b      	mov	r3, r9
 8005980:	1891      	adds	r1, r2, r2
 8005982:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005984:	415b      	adcs	r3, r3
 8005986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005988:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800598c:	4641      	mov	r1, r8
 800598e:	eb12 0a01 	adds.w	sl, r2, r1
 8005992:	4649      	mov	r1, r9
 8005994:	eb43 0b01 	adc.w	fp, r3, r1
 8005998:	f04f 0200 	mov.w	r2, #0
 800599c:	f04f 0300 	mov.w	r3, #0
 80059a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ac:	4692      	mov	sl, r2
 80059ae:	469b      	mov	fp, r3
 80059b0:	4643      	mov	r3, r8
 80059b2:	eb1a 0303 	adds.w	r3, sl, r3
 80059b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059ba:	464b      	mov	r3, r9
 80059bc:	eb4b 0303 	adc.w	r3, fp, r3
 80059c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80059c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80059d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80059d8:	460b      	mov	r3, r1
 80059da:	18db      	adds	r3, r3, r3
 80059dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80059de:	4613      	mov	r3, r2
 80059e0:	eb42 0303 	adc.w	r3, r2, r3
 80059e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80059e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80059ee:	f7fa fc07 	bl	8000200 <__aeabi_uldivmod>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4611      	mov	r1, r2
 80059f8:	4b3b      	ldr	r3, [pc, #236]	@ (8005ae8 <UART_SetConfig+0x2d4>)
 80059fa:	fba3 2301 	umull	r2, r3, r3, r1
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	2264      	movs	r2, #100	@ 0x64
 8005a02:	fb02 f303 	mul.w	r3, r2, r3
 8005a06:	1acb      	subs	r3, r1, r3
 8005a08:	00db      	lsls	r3, r3, #3
 8005a0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a0e:	4b36      	ldr	r3, [pc, #216]	@ (8005ae8 <UART_SetConfig+0x2d4>)
 8005a10:	fba3 2302 	umull	r2, r3, r3, r2
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	005b      	lsls	r3, r3, #1
 8005a18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005a1c:	441c      	add	r4, r3
 8005a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a22:	2200      	movs	r2, #0
 8005a24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005a2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005a30:	4642      	mov	r2, r8
 8005a32:	464b      	mov	r3, r9
 8005a34:	1891      	adds	r1, r2, r2
 8005a36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005a38:	415b      	adcs	r3, r3
 8005a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005a40:	4641      	mov	r1, r8
 8005a42:	1851      	adds	r1, r2, r1
 8005a44:	6339      	str	r1, [r7, #48]	@ 0x30
 8005a46:	4649      	mov	r1, r9
 8005a48:	414b      	adcs	r3, r1
 8005a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a4c:	f04f 0200 	mov.w	r2, #0
 8005a50:	f04f 0300 	mov.w	r3, #0
 8005a54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005a58:	4659      	mov	r1, fp
 8005a5a:	00cb      	lsls	r3, r1, #3
 8005a5c:	4651      	mov	r1, sl
 8005a5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a62:	4651      	mov	r1, sl
 8005a64:	00ca      	lsls	r2, r1, #3
 8005a66:	4610      	mov	r0, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	189b      	adds	r3, r3, r2
 8005a70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005a74:	464b      	mov	r3, r9
 8005a76:	460a      	mov	r2, r1
 8005a78:	eb42 0303 	adc.w	r3, r2, r3
 8005a7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005a8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005a90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005a94:	460b      	mov	r3, r1
 8005a96:	18db      	adds	r3, r3, r3
 8005a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005aa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005aa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005aaa:	f7fa fba9 	bl	8000200 <__aeabi_uldivmod>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ae8 <UART_SetConfig+0x2d4>)
 8005ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2164      	movs	r1, #100	@ 0x64
 8005abc:	fb01 f303 	mul.w	r3, r1, r3
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	3332      	adds	r3, #50	@ 0x32
 8005ac6:	4a08      	ldr	r2, [pc, #32]	@ (8005ae8 <UART_SetConfig+0x2d4>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	f003 0207 	and.w	r2, r3, #7
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4422      	add	r2, r4
 8005ada:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005adc:	e106      	b.n	8005cec <UART_SetConfig+0x4d8>
 8005ade:	bf00      	nop
 8005ae0:	40011000 	.word	0x40011000
 8005ae4:	40011400 	.word	0x40011400
 8005ae8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005af0:	2200      	movs	r2, #0
 8005af2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005af6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005afa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005afe:	4642      	mov	r2, r8
 8005b00:	464b      	mov	r3, r9
 8005b02:	1891      	adds	r1, r2, r2
 8005b04:	6239      	str	r1, [r7, #32]
 8005b06:	415b      	adcs	r3, r3
 8005b08:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b0e:	4641      	mov	r1, r8
 8005b10:	1854      	adds	r4, r2, r1
 8005b12:	4649      	mov	r1, r9
 8005b14:	eb43 0501 	adc.w	r5, r3, r1
 8005b18:	f04f 0200 	mov.w	r2, #0
 8005b1c:	f04f 0300 	mov.w	r3, #0
 8005b20:	00eb      	lsls	r3, r5, #3
 8005b22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b26:	00e2      	lsls	r2, r4, #3
 8005b28:	4614      	mov	r4, r2
 8005b2a:	461d      	mov	r5, r3
 8005b2c:	4643      	mov	r3, r8
 8005b2e:	18e3      	adds	r3, r4, r3
 8005b30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b34:	464b      	mov	r3, r9
 8005b36:	eb45 0303 	adc.w	r3, r5, r3
 8005b3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b4e:	f04f 0200 	mov.w	r2, #0
 8005b52:	f04f 0300 	mov.w	r3, #0
 8005b56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005b5a:	4629      	mov	r1, r5
 8005b5c:	008b      	lsls	r3, r1, #2
 8005b5e:	4621      	mov	r1, r4
 8005b60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b64:	4621      	mov	r1, r4
 8005b66:	008a      	lsls	r2, r1, #2
 8005b68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005b6c:	f7fa fb48 	bl	8000200 <__aeabi_uldivmod>
 8005b70:	4602      	mov	r2, r0
 8005b72:	460b      	mov	r3, r1
 8005b74:	4b60      	ldr	r3, [pc, #384]	@ (8005cf8 <UART_SetConfig+0x4e4>)
 8005b76:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	011c      	lsls	r4, r3, #4
 8005b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b82:	2200      	movs	r2, #0
 8005b84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005b88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	1891      	adds	r1, r2, r2
 8005b96:	61b9      	str	r1, [r7, #24]
 8005b98:	415b      	adcs	r3, r3
 8005b9a:	61fb      	str	r3, [r7, #28]
 8005b9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	1851      	adds	r1, r2, r1
 8005ba4:	6139      	str	r1, [r7, #16]
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	414b      	adcs	r3, r1
 8005baa:	617b      	str	r3, [r7, #20]
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bb8:	4659      	mov	r1, fp
 8005bba:	00cb      	lsls	r3, r1, #3
 8005bbc:	4651      	mov	r1, sl
 8005bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc2:	4651      	mov	r1, sl
 8005bc4:	00ca      	lsls	r2, r1, #3
 8005bc6:	4610      	mov	r0, r2
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4603      	mov	r3, r0
 8005bcc:	4642      	mov	r2, r8
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005bd4:	464b      	mov	r3, r9
 8005bd6:	460a      	mov	r2, r1
 8005bd8:	eb42 0303 	adc.w	r3, r2, r3
 8005bdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005bea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	008b      	lsls	r3, r1, #2
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c02:	4641      	mov	r1, r8
 8005c04:	008a      	lsls	r2, r1, #2
 8005c06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c0a:	f7fa faf9 	bl	8000200 <__aeabi_uldivmod>
 8005c0e:	4602      	mov	r2, r0
 8005c10:	460b      	mov	r3, r1
 8005c12:	4611      	mov	r1, r2
 8005c14:	4b38      	ldr	r3, [pc, #224]	@ (8005cf8 <UART_SetConfig+0x4e4>)
 8005c16:	fba3 2301 	umull	r2, r3, r3, r1
 8005c1a:	095b      	lsrs	r3, r3, #5
 8005c1c:	2264      	movs	r2, #100	@ 0x64
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	1acb      	subs	r3, r1, r3
 8005c24:	011b      	lsls	r3, r3, #4
 8005c26:	3332      	adds	r3, #50	@ 0x32
 8005c28:	4a33      	ldr	r2, [pc, #204]	@ (8005cf8 <UART_SetConfig+0x4e4>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c34:	441c      	add	r4, r3
 8005c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005c40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	1891      	adds	r1, r2, r2
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	415b      	adcs	r3, r3
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c54:	4641      	mov	r1, r8
 8005c56:	1851      	adds	r1, r2, r1
 8005c58:	6039      	str	r1, [r7, #0]
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	414b      	adcs	r3, r1
 8005c5e:	607b      	str	r3, [r7, #4]
 8005c60:	f04f 0200 	mov.w	r2, #0
 8005c64:	f04f 0300 	mov.w	r3, #0
 8005c68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	00cb      	lsls	r3, r1, #3
 8005c70:	4651      	mov	r1, sl
 8005c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c76:	4651      	mov	r1, sl
 8005c78:	00ca      	lsls	r2, r1, #3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4642      	mov	r2, r8
 8005c82:	189b      	adds	r3, r3, r2
 8005c84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005c86:	464b      	mov	r3, r9
 8005c88:	460a      	mov	r2, r1
 8005c8a:	eb42 0303 	adc.w	r3, r2, r3
 8005c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005c9c:	f04f 0200 	mov.w	r2, #0
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005ca8:	4649      	mov	r1, r9
 8005caa:	008b      	lsls	r3, r1, #2
 8005cac:	4641      	mov	r1, r8
 8005cae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb2:	4641      	mov	r1, r8
 8005cb4:	008a      	lsls	r2, r1, #2
 8005cb6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005cba:	f7fa faa1 	bl	8000200 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <UART_SetConfig+0x4e4>)
 8005cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	2164      	movs	r1, #100	@ 0x64
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	3332      	adds	r3, #50	@ 0x32
 8005cd6:	4a08      	ldr	r2, [pc, #32]	@ (8005cf8 <UART_SetConfig+0x4e4>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4422      	add	r2, r4
 8005cea:	609a      	str	r2, [r3, #8]
}
 8005cec:	bf00      	nop
 8005cee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cf8:	51eb851f 	.word	0x51eb851f

08005cfc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d123      	bne.n	8005d56 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	6851      	ldr	r1, [r2, #4]
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	6892      	ldr	r2, [r2, #8]
 8005d22:	4311      	orrs	r1, r2
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68d2      	ldr	r2, [r2, #12]
 8005d28:	4311      	orrs	r1, r2
 8005d2a:	683a      	ldr	r2, [r7, #0]
 8005d2c:	6912      	ldr	r2, [r2, #16]
 8005d2e:	4311      	orrs	r1, r2
 8005d30:	683a      	ldr	r2, [r7, #0]
 8005d32:	6952      	ldr	r2, [r2, #20]
 8005d34:	4311      	orrs	r1, r2
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	6992      	ldr	r2, [r2, #24]
 8005d3a:	4311      	orrs	r1, r2
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	69d2      	ldr	r2, [r2, #28]
 8005d40:	4311      	orrs	r1, r2
 8005d42:	683a      	ldr	r2, [r7, #0]
 8005d44:	6a12      	ldr	r2, [r2, #32]
 8005d46:	4311      	orrs	r1, r2
 8005d48:	683a      	ldr	r2, [r7, #0]
 8005d4a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005d4c:	430a      	orrs	r2, r1
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e028      	b.n	8005da8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	69d9      	ldr	r1, [r3, #28]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	4319      	orrs	r1, r3
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d6c:	430b      	orrs	r3, r1
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005d7c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d80:	683a      	ldr	r2, [r7, #0]
 8005d82:	6851      	ldr	r1, [r2, #4]
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	6892      	ldr	r2, [r2, #8]
 8005d88:	4311      	orrs	r1, r2
 8005d8a:	683a      	ldr	r2, [r7, #0]
 8005d8c:	68d2      	ldr	r2, [r2, #12]
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	6912      	ldr	r2, [r2, #16]
 8005d94:	4311      	orrs	r1, r2
 8005d96:	683a      	ldr	r2, [r7, #0]
 8005d98:	6952      	ldr	r2, [r2, #20]
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	6992      	ldr	r2, [r2, #24]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	431a      	orrs	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	370c      	adds	r7, #12
 8005dae:	46bd      	mov	sp, r7
 8005db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db4:	4770      	bx	lr

08005db6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005db6:	b480      	push	{r7}
 8005db8:	b085      	sub	sp, #20
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d128      	bne.n	8005e1a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	1e59      	subs	r1, r3, #1
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	4319      	orrs	r1, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	4319      	orrs	r1, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	031b      	lsls	r3, r3, #12
 8005df2:	4319      	orrs	r1, r3
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	4319      	orrs	r1, r3
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	051b      	lsls	r3, r3, #20
 8005e06:	4319      	orrs	r1, r3
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	430b      	orrs	r3, r1
 8005e12:	431a      	orrs	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	609a      	str	r2, [r3, #8]
 8005e18:	e02f      	b.n	8005e7a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e22:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	68d2      	ldr	r2, [r2, #12]
 8005e2a:	3a01      	subs	r2, #1
 8005e2c:	0311      	lsls	r1, r2, #12
 8005e2e:	68ba      	ldr	r2, [r7, #8]
 8005e30:	6952      	ldr	r2, [r2, #20]
 8005e32:	3a01      	subs	r2, #1
 8005e34:	0512      	lsls	r2, r2, #20
 8005e36:	430a      	orrs	r2, r1
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	1e59      	subs	r1, r3, #1
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	3b01      	subs	r3, #1
 8005e52:	011b      	lsls	r3, r3, #4
 8005e54:	4319      	orrs	r1, r3
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	021b      	lsls	r3, r3, #8
 8005e5e:	4319      	orrs	r1, r3
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	041b      	lsls	r3, r3, #16
 8005e68:	4319      	orrs	r1, r3
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	699b      	ldr	r3, [r3, #24]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	061b      	lsls	r3, r3, #24
 8005e72:	430b      	orrs	r3, r1
 8005e74:	431a      	orrs	r2, r3
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3714      	adds	r7, #20
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e88:	b084      	sub	sp, #16
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b084      	sub	sp, #16
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	f107 001c 	add.w	r0, r7, #28
 8005e96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e9a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d123      	bne.n	8005eea <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d105      	bne.n	8005ede <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f001 fae8 	bl	80074b4 <USB_CoreReset>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	73fb      	strb	r3, [r7, #15]
 8005ee8:	e01b      	b.n	8005f22 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 fadc 	bl	80074b4 <USB_CoreReset>
 8005efc:	4603      	mov	r3, r0
 8005efe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f00:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d106      	bne.n	8005f16 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f14:	e005      	b.n	8005f22 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f22:	7fbb      	ldrb	r3, [r7, #30]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d10b      	bne.n	8005f40 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f043 0206 	orr.w	r2, r3, #6
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3710      	adds	r7, #16
 8005f46:	46bd      	mov	sp, r7
 8005f48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f4c:	b004      	add	sp, #16
 8005f4e:	4770      	bx	lr

08005f50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d165      	bne.n	8006030 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	4a41      	ldr	r2, [pc, #260]	@ (800606c <USB_SetTurnaroundTime+0x11c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d906      	bls.n	8005f7a <USB_SetTurnaroundTime+0x2a>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	4a40      	ldr	r2, [pc, #256]	@ (8006070 <USB_SetTurnaroundTime+0x120>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d202      	bcs.n	8005f7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f74:	230f      	movs	r3, #15
 8005f76:	617b      	str	r3, [r7, #20]
 8005f78:	e062      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8006070 <USB_SetTurnaroundTime+0x120>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d306      	bcc.n	8005f90 <USB_SetTurnaroundTime+0x40>
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	4a3b      	ldr	r2, [pc, #236]	@ (8006074 <USB_SetTurnaroundTime+0x124>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d202      	bcs.n	8005f90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f8a:	230e      	movs	r3, #14
 8005f8c:	617b      	str	r3, [r7, #20]
 8005f8e:	e057      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	4a38      	ldr	r2, [pc, #224]	@ (8006074 <USB_SetTurnaroundTime+0x124>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d306      	bcc.n	8005fa6 <USB_SetTurnaroundTime+0x56>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4a37      	ldr	r2, [pc, #220]	@ (8006078 <USB_SetTurnaroundTime+0x128>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d202      	bcs.n	8005fa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fa0:	230d      	movs	r3, #13
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e04c      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	4a33      	ldr	r2, [pc, #204]	@ (8006078 <USB_SetTurnaroundTime+0x128>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d306      	bcc.n	8005fbc <USB_SetTurnaroundTime+0x6c>
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4a32      	ldr	r2, [pc, #200]	@ (800607c <USB_SetTurnaroundTime+0x12c>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d802      	bhi.n	8005fbc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fb6:	230c      	movs	r3, #12
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	e041      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800607c <USB_SetTurnaroundTime+0x12c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d906      	bls.n	8005fd2 <USB_SetTurnaroundTime+0x82>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8006080 <USB_SetTurnaroundTime+0x130>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d802      	bhi.n	8005fd2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fcc:	230b      	movs	r3, #11
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	e036      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	4a2a      	ldr	r2, [pc, #168]	@ (8006080 <USB_SetTurnaroundTime+0x130>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d906      	bls.n	8005fe8 <USB_SetTurnaroundTime+0x98>
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	4a29      	ldr	r2, [pc, #164]	@ (8006084 <USB_SetTurnaroundTime+0x134>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d802      	bhi.n	8005fe8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005fe2:	230a      	movs	r3, #10
 8005fe4:	617b      	str	r3, [r7, #20]
 8005fe6:	e02b      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	4a26      	ldr	r2, [pc, #152]	@ (8006084 <USB_SetTurnaroundTime+0x134>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d906      	bls.n	8005ffe <USB_SetTurnaroundTime+0xae>
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4a25      	ldr	r2, [pc, #148]	@ (8006088 <USB_SetTurnaroundTime+0x138>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d202      	bcs.n	8005ffe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005ff8:	2309      	movs	r3, #9
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e020      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	4a21      	ldr	r2, [pc, #132]	@ (8006088 <USB_SetTurnaroundTime+0x138>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d306      	bcc.n	8006014 <USB_SetTurnaroundTime+0xc4>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	4a20      	ldr	r2, [pc, #128]	@ (800608c <USB_SetTurnaroundTime+0x13c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d802      	bhi.n	8006014 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800600e:	2308      	movs	r3, #8
 8006010:	617b      	str	r3, [r7, #20]
 8006012:	e015      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	4a1d      	ldr	r2, [pc, #116]	@ (800608c <USB_SetTurnaroundTime+0x13c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d906      	bls.n	800602a <USB_SetTurnaroundTime+0xda>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4a1c      	ldr	r2, [pc, #112]	@ (8006090 <USB_SetTurnaroundTime+0x140>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d202      	bcs.n	800602a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006024:	2307      	movs	r3, #7
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e00a      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800602a:	2306      	movs	r3, #6
 800602c:	617b      	str	r3, [r7, #20]
 800602e:	e007      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006030:	79fb      	ldrb	r3, [r7, #7]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006036:	2309      	movs	r3, #9
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e001      	b.n	8006040 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800603c:	2309      	movs	r3, #9
 800603e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68da      	ldr	r2, [r3, #12]
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	029b      	lsls	r3, r3, #10
 8006054:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006058:	431a      	orrs	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	371c      	adds	r7, #28
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	00d8acbf 	.word	0x00d8acbf
 8006070:	00e4e1c0 	.word	0x00e4e1c0
 8006074:	00f42400 	.word	0x00f42400
 8006078:	01067380 	.word	0x01067380
 800607c:	011a499f 	.word	0x011a499f
 8006080:	01312cff 	.word	0x01312cff
 8006084:	014ca43f 	.word	0x014ca43f
 8006088:	016e3600 	.word	0x016e3600
 800608c:	01a6ab1f 	.word	0x01a6ab1f
 8006090:	01e84800 	.word	0x01e84800

08006094 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f023 0201 	bic.w	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060f4:	78fb      	ldrb	r3, [r7, #3]
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d115      	bne.n	8006126 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006106:	200a      	movs	r0, #10
 8006108:	f7fb fb2a 	bl	8001760 <HAL_Delay>
      ms += 10U;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	330a      	adds	r3, #10
 8006110:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 f93f 	bl	8007396 <USB_GetMode>
 8006118:	4603      	mov	r3, r0
 800611a:	2b01      	cmp	r3, #1
 800611c:	d01e      	beq.n	800615c <USB_SetCurrentMode+0x84>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2bc7      	cmp	r3, #199	@ 0xc7
 8006122:	d9f0      	bls.n	8006106 <USB_SetCurrentMode+0x2e>
 8006124:	e01a      	b.n	800615c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d115      	bne.n	8006158 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006138:	200a      	movs	r0, #10
 800613a:	f7fb fb11 	bl	8001760 <HAL_Delay>
      ms += 10U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	330a      	adds	r3, #10
 8006142:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 f926 	bl	8007396 <USB_GetMode>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <USB_SetCurrentMode+0x84>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2bc7      	cmp	r3, #199	@ 0xc7
 8006154:	d9f0      	bls.n	8006138 <USB_SetCurrentMode+0x60>
 8006156:	e001      	b.n	800615c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e005      	b.n	8006168 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006160:	d101      	bne.n	8006166 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e000      	b.n	8006168 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006166:	2300      	movs	r3, #0
}
 8006168:	4618      	mov	r0, r3
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006170:	b084      	sub	sp, #16
 8006172:	b580      	push	{r7, lr}
 8006174:	b086      	sub	sp, #24
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
 800617a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800617e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800618a:	2300      	movs	r3, #0
 800618c:	613b      	str	r3, [r7, #16]
 800618e:	e009      	b.n	80061a4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	3340      	adds	r3, #64	@ 0x40
 8006196:	009b      	lsls	r3, r3, #2
 8006198:	4413      	add	r3, r2
 800619a:	2200      	movs	r2, #0
 800619c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	3301      	adds	r3, #1
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	2b0e      	cmp	r3, #14
 80061a8:	d9f2      	bls.n	8006190 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d11c      	bne.n	80061ec <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061c0:	f043 0302 	orr.w	r3, r3, #2
 80061c4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ca:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80061ea:	e00b      	b.n	8006204 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800620a:	461a      	mov	r2, r3
 800620c:	2300      	movs	r3, #0
 800620e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006210:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006214:	2b01      	cmp	r3, #1
 8006216:	d10d      	bne.n	8006234 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006220:	2100      	movs	r1, #0
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f968 	bl	80064f8 <USB_SetDevSpeed>
 8006228:	e008      	b.n	800623c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800622a:	2101      	movs	r1, #1
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f963 	bl	80064f8 <USB_SetDevSpeed>
 8006232:	e003      	b.n	800623c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006234:	2103      	movs	r1, #3
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f95e 	bl	80064f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800623c:	2110      	movs	r1, #16
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8fa 	bl	8006438 <USB_FlushTxFifo>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d001      	beq.n	800624e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f924 	bl	800649c <USB_FlushRxFifo>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006264:	461a      	mov	r2, r3
 8006266:	2300      	movs	r3, #0
 8006268:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006270:	461a      	mov	r2, r3
 8006272:	2300      	movs	r3, #0
 8006274:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627c:	461a      	mov	r2, r3
 800627e:	2300      	movs	r3, #0
 8006280:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	e043      	b.n	8006310 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	015a      	lsls	r2, r3, #5
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800629a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800629e:	d118      	bne.n	80062d2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d10a      	bne.n	80062bc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b2:	461a      	mov	r2, r3
 80062b4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062b8:	6013      	str	r3, [r2, #0]
 80062ba:	e013      	b.n	80062e4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	015a      	lsls	r2, r3, #5
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	4413      	add	r3, r2
 80062c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062ce:	6013      	str	r3, [r2, #0]
 80062d0:	e008      	b.n	80062e4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062de:	461a      	mov	r2, r3
 80062e0:	2300      	movs	r3, #0
 80062e2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	461a      	mov	r2, r3
 80062f2:	2300      	movs	r3, #0
 80062f4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006302:	461a      	mov	r2, r3
 8006304:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006308:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	3301      	adds	r3, #1
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006314:	461a      	mov	r2, r3
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4293      	cmp	r3, r2
 800631a:	d3b5      	bcc.n	8006288 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800631c:	2300      	movs	r3, #0
 800631e:	613b      	str	r3, [r7, #16]
 8006320:	e043      	b.n	80063aa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	015a      	lsls	r2, r3, #5
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006338:	d118      	bne.n	800636c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	4413      	add	r3, r2
 8006348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800634c:	461a      	mov	r2, r3
 800634e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006352:	6013      	str	r3, [r2, #0]
 8006354:	e013      	b.n	800637e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	015a      	lsls	r2, r3, #5
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	4413      	add	r3, r2
 800635e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006362:	461a      	mov	r2, r3
 8006364:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e008      	b.n	800637e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	015a      	lsls	r2, r3, #5
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4413      	add	r3, r2
 8006374:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006378:	461a      	mov	r2, r3
 800637a:	2300      	movs	r3, #0
 800637c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638a:	461a      	mov	r2, r3
 800638c:	2300      	movs	r3, #0
 800638e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	461a      	mov	r2, r3
 800639e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3301      	adds	r3, #1
 80063a8:	613b      	str	r3, [r7, #16]
 80063aa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ae:	461a      	mov	r2, r3
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d3b5      	bcc.n	8006322 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063c8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063d6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d105      	bne.n	80063ec <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	f043 0210 	orr.w	r2, r3, #16
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	699a      	ldr	r2, [r3, #24]
 80063f0:	4b10      	ldr	r3, [pc, #64]	@ (8006434 <USB_DevInit+0x2c4>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063f8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d005      	beq.n	800640c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	f043 0208 	orr.w	r2, r3, #8
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800640c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800641c:	f043 0304 	orr.w	r3, r3, #4
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006430:	b004      	add	sp, #16
 8006432:	4770      	bx	lr
 8006434:	803c3800 	.word	0x803c3800

08006438 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006442:	2300      	movs	r3, #0
 8006444:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3301      	adds	r3, #1
 800644a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006452:	d901      	bls.n	8006458 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e01b      	b.n	8006490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	daf2      	bge.n	8006446 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	019b      	lsls	r3, r3, #6
 8006468:	f043 0220 	orr.w	r2, r3, #32
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	3301      	adds	r3, #1
 8006474:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800647c:	d901      	bls.n	8006482 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e006      	b.n	8006490 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	f003 0320 	and.w	r3, r3, #32
 800648a:	2b20      	cmp	r3, #32
 800648c:	d0f0      	beq.n	8006470 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3714      	adds	r7, #20
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b4:	d901      	bls.n	80064ba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e018      	b.n	80064ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	daf2      	bge.n	80064a8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2210      	movs	r2, #16
 80064ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	3301      	adds	r3, #1
 80064d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064d8:	d901      	bls.n	80064de <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e006      	b.n	80064ec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	691b      	ldr	r3, [r3, #16]
 80064e2:	f003 0310 	and.w	r3, r3, #16
 80064e6:	2b10      	cmp	r3, #16
 80064e8:	d0f0      	beq.n	80064cc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	460b      	mov	r3, r1
 8006502:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	68f9      	ldr	r1, [r7, #12]
 8006514:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006518:	4313      	orrs	r3, r2
 800651a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800652a:	b480      	push	{r7}
 800652c:	b087      	sub	sp, #28
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0306 	and.w	r3, r3, #6
 8006542:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d102      	bne.n	8006550 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]
 800654e:	e00a      	b.n	8006566 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2b02      	cmp	r3, #2
 8006554:	d002      	beq.n	800655c <USB_GetDevSpeed+0x32>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2b06      	cmp	r3, #6
 800655a:	d102      	bne.n	8006562 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800655c:	2302      	movs	r3, #2
 800655e:	75fb      	strb	r3, [r7, #23]
 8006560:	e001      	b.n	8006566 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006562:	230f      	movs	r3, #15
 8006564:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006566:	7dfb      	ldrb	r3, [r7, #23]
}
 8006568:	4618      	mov	r0, r3
 800656a:	371c      	adds	r7, #28
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d13a      	bne.n	8006606 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006596:	69da      	ldr	r2, [r3, #28]
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	2101      	movs	r1, #1
 80065a2:	fa01 f303 	lsl.w	r3, r1, r3
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	68f9      	ldr	r1, [r7, #12]
 80065aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065ae:	4313      	orrs	r3, r2
 80065b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	015a      	lsls	r2, r3, #5
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	4413      	add	r3, r2
 80065ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d155      	bne.n	8006674 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	791b      	ldrb	r3, [r3, #4]
 80065e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	059b      	lsls	r3, r3, #22
 80065ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065ec:	4313      	orrs	r3, r2
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	0151      	lsls	r1, r2, #5
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	440a      	add	r2, r1
 80065f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006602:	6013      	str	r3, [r2, #0]
 8006604:	e036      	b.n	8006674 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660c:	69da      	ldr	r2, [r3, #28]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	2101      	movs	r1, #1
 8006618:	fa01 f303 	lsl.w	r3, r1, r3
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006624:	4313      	orrs	r3, r2
 8006626:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	015a      	lsls	r2, r3, #5
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	4413      	add	r3, r2
 8006630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d11a      	bne.n	8006674 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	015a      	lsls	r2, r3, #5
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	4413      	add	r3, r2
 8006646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	791b      	ldrb	r3, [r3, #4]
 8006658:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800665a:	430b      	orrs	r3, r1
 800665c:	4313      	orrs	r3, r2
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800666a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800666e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006672:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006684:	b480      	push	{r7}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d161      	bne.n	8006764 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	015a      	lsls	r2, r3, #5
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066b6:	d11f      	bne.n	80066f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	015a      	lsls	r2, r3, #5
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	0151      	lsls	r1, r2, #5
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	440a      	add	r2, r1
 80066ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066d2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	015a      	lsls	r2, r3, #5
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	4413      	add	r3, r2
 80066e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	0151      	lsls	r1, r2, #5
 80066ea:	68fa      	ldr	r2, [r7, #12]
 80066ec:	440a      	add	r2, r1
 80066ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80066f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f303 	lsl.w	r3, r1, r3
 800670e:	b29b      	uxth	r3, r3
 8006710:	43db      	mvns	r3, r3
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006718:	4013      	ands	r3, r2
 800671a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006722:	69da      	ldr	r2, [r3, #28]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	f003 030f 	and.w	r3, r3, #15
 800672c:	2101      	movs	r1, #1
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	b29b      	uxth	r3, r3
 8006734:	43db      	mvns	r3, r3
 8006736:	68f9      	ldr	r1, [r7, #12]
 8006738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800673c:	4013      	ands	r3, r2
 800673e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	0159      	lsls	r1, r3, #5
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	440b      	add	r3, r1
 8006756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675a:	4619      	mov	r1, r3
 800675c:	4b35      	ldr	r3, [pc, #212]	@ (8006834 <USB_DeactivateEndpoint+0x1b0>)
 800675e:	4013      	ands	r3, r2
 8006760:	600b      	str	r3, [r1, #0]
 8006762:	e060      	b.n	8006826 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	015a      	lsls	r2, r3, #5
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4413      	add	r3, r2
 800676c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800677a:	d11f      	bne.n	80067bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	015a      	lsls	r2, r3, #5
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4413      	add	r3, r2
 8006784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	0151      	lsls	r1, r2, #5
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	440a      	add	r2, r1
 8006792:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006796:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800679a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067b6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	f003 030f 	and.w	r3, r3, #15
 80067cc:	2101      	movs	r1, #1
 80067ce:	fa01 f303 	lsl.w	r3, r1, r3
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	43db      	mvns	r3, r3
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067dc:	4013      	ands	r3, r2
 80067de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067e6:	69da      	ldr	r2, [r3, #28]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	f003 030f 	and.w	r3, r3, #15
 80067f0:	2101      	movs	r1, #1
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	041b      	lsls	r3, r3, #16
 80067f8:	43db      	mvns	r3, r3
 80067fa:	68f9      	ldr	r1, [r7, #12]
 80067fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006800:	4013      	ands	r3, r2
 8006802:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	0159      	lsls	r1, r3, #5
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	440b      	add	r3, r1
 800681a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800681e:	4619      	mov	r1, r3
 8006820:	4b05      	ldr	r3, [pc, #20]	@ (8006838 <USB_DeactivateEndpoint+0x1b4>)
 8006822:	4013      	ands	r3, r2
 8006824:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006826:	2300      	movs	r3, #0
}
 8006828:	4618      	mov	r0, r3
 800682a:	3714      	adds	r7, #20
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	ec337800 	.word	0xec337800
 8006838:	eff37800 	.word	0xeff37800

0800683c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b08a      	sub	sp, #40	@ 0x28
 8006840:	af02      	add	r7, sp, #8
 8006842:	60f8      	str	r0, [r7, #12]
 8006844:	60b9      	str	r1, [r7, #8]
 8006846:	4613      	mov	r3, r2
 8006848:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	2b01      	cmp	r3, #1
 800685a:	f040 817f 	bne.w	8006b5c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d132      	bne.n	80068cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	69fa      	ldr	r2, [r7, #28]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006880:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006884:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006888:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	015a      	lsls	r2, r3, #5
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	4413      	add	r3, r2
 8006892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	69ba      	ldr	r2, [r7, #24]
 800689a:	0151      	lsls	r1, r2, #5
 800689c:	69fa      	ldr	r2, [r7, #28]
 800689e:	440a      	add	r2, r1
 80068a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	69ba      	ldr	r2, [r7, #24]
 80068ba:	0151      	lsls	r1, r2, #5
 80068bc:	69fa      	ldr	r2, [r7, #28]
 80068be:	440a      	add	r2, r1
 80068c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068c4:	0cdb      	lsrs	r3, r3, #19
 80068c6:	04db      	lsls	r3, r3, #19
 80068c8:	6113      	str	r3, [r2, #16]
 80068ca:	e097      	b.n	80069fc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068e6:	0cdb      	lsrs	r3, r3, #19
 80068e8:	04db      	lsls	r3, r3, #19
 80068ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006906:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800690a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800690e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d11a      	bne.n	800694c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	691a      	ldr	r2, [r3, #16]
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	d903      	bls.n	800692a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	689a      	ldr	r2, [r3, #8]
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	0151      	lsls	r1, r2, #5
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	440a      	add	r2, r1
 8006940:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006944:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006948:	6113      	str	r3, [r2, #16]
 800694a:	e044      	b.n	80069d6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	691a      	ldr	r2, [r3, #16]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4413      	add	r3, r2
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	04d9      	lsls	r1, r3, #19
 8006974:	4ba4      	ldr	r3, [pc, #656]	@ (8006c08 <USB_EPStartXfer+0x3cc>)
 8006976:	400b      	ands	r3, r1
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	0148      	lsls	r0, r1, #5
 800697c:	69f9      	ldr	r1, [r7, #28]
 800697e:	4401      	add	r1, r0
 8006980:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	791b      	ldrb	r3, [r3, #4]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d122      	bne.n	80069d6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	015a      	lsls	r2, r3, #5
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	4413      	add	r3, r2
 8006998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699c:	691b      	ldr	r3, [r3, #16]
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	0151      	lsls	r1, r2, #5
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	440a      	add	r2, r1
 80069a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069aa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80069ae:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	015a      	lsls	r2, r3, #5
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	4413      	add	r3, r2
 80069b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069bc:	691a      	ldr	r2, [r3, #16]
 80069be:	8afb      	ldrh	r3, [r7, #22]
 80069c0:	075b      	lsls	r3, r3, #29
 80069c2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80069c6:	69b9      	ldr	r1, [r7, #24]
 80069c8:	0148      	lsls	r0, r1, #5
 80069ca:	69f9      	ldr	r1, [r7, #28]
 80069cc:	4401      	add	r1, r0
 80069ce:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069d2:	4313      	orrs	r3, r2
 80069d4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	015a      	lsls	r2, r3, #5
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	4413      	add	r3, r2
 80069de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069e2:	691a      	ldr	r2, [r3, #16]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ec:	69b9      	ldr	r1, [r7, #24]
 80069ee:	0148      	lsls	r0, r1, #5
 80069f0:	69f9      	ldr	r1, [r7, #28]
 80069f2:	4401      	add	r1, r0
 80069f4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069f8:	4313      	orrs	r3, r2
 80069fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069fc:	79fb      	ldrb	r3, [r7, #7]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d14b      	bne.n	8006a9a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	69db      	ldr	r3, [r3, #28]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d009      	beq.n	8006a1e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a16:	461a      	mov	r2, r3
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	791b      	ldrb	r3, [r3, #4]
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d128      	bne.n	8006a78 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d110      	bne.n	8006a58 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	69fb      	ldr	r3, [r7, #28]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	69fa      	ldr	r2, [r7, #28]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a54:	6013      	str	r3, [r2, #0]
 8006a56:	e00f      	b.n	8006a78 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	015a      	lsls	r2, r3, #5
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	0151      	lsls	r1, r2, #5
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	440a      	add	r2, r1
 8006a6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a76:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	69ba      	ldr	r2, [r7, #24]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	69fa      	ldr	r2, [r7, #28]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006a96:	6013      	str	r3, [r2, #0]
 8006a98:	e166      	b.n	8006d68 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ab4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ab8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	791b      	ldrb	r3, [r3, #4]
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d015      	beq.n	8006aee <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 814e 	beq.w	8006d68 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	f003 030f 	and.w	r3, r3, #15
 8006adc:	2101      	movs	r1, #1
 8006ade:	fa01 f303 	lsl.w	r3, r1, r3
 8006ae2:	69f9      	ldr	r1, [r7, #28]
 8006ae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	634b      	str	r3, [r1, #52]	@ 0x34
 8006aec:	e13c      	b.n	8006d68 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d110      	bne.n	8006b20 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	015a      	lsls	r2, r3, #5
 8006b02:	69fb      	ldr	r3, [r7, #28]
 8006b04:	4413      	add	r3, r2
 8006b06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	0151      	lsls	r1, r2, #5
 8006b10:	69fa      	ldr	r2, [r7, #28]
 8006b12:	440a      	add	r2, r1
 8006b14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b18:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	e00f      	b.n	8006b40 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	0151      	lsls	r1, r2, #5
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	440a      	add	r2, r1
 8006b36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b3e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68d9      	ldr	r1, [r3, #12]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	781a      	ldrb	r2, [r3, #0]
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	b298      	uxth	r0, r3
 8006b4e:	79fb      	ldrb	r3, [r7, #7]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f9b9 	bl	8006ecc <USB_WritePacket>
 8006b5a:	e105      	b.n	8006d68 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	015a      	lsls	r2, r3, #5
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	4413      	add	r3, r2
 8006b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	0151      	lsls	r1, r2, #5
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	440a      	add	r2, r1
 8006b72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b76:	0cdb      	lsrs	r3, r3, #19
 8006b78:	04db      	lsls	r3, r3, #19
 8006b7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	015a      	lsls	r2, r3, #5
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	4413      	add	r3, r2
 8006b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	0151      	lsls	r1, r2, #5
 8006b8e:	69fa      	ldr	r2, [r7, #28]
 8006b90:	440a      	add	r2, r1
 8006b92:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b9e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d132      	bne.n	8006c0c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	689a      	ldr	r2, [r3, #8]
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	015a      	lsls	r2, r3, #5
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bca:	691a      	ldr	r2, [r3, #16]
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bd4:	69b9      	ldr	r1, [r7, #24]
 8006bd6:	0148      	lsls	r0, r1, #5
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	4401      	add	r1, r0
 8006bdc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006be0:	4313      	orrs	r3, r2
 8006be2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	015a      	lsls	r2, r3, #5
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	4413      	add	r3, r2
 8006bec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	0151      	lsls	r1, r2, #5
 8006bf6:	69fa      	ldr	r2, [r7, #28]
 8006bf8:	440a      	add	r2, r1
 8006bfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bfe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c02:	6113      	str	r3, [r2, #16]
 8006c04:	e062      	b.n	8006ccc <USB_EPStartXfer+0x490>
 8006c06:	bf00      	nop
 8006c08:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d123      	bne.n	8006c5c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2a:	69b9      	ldr	r1, [r7, #24]
 8006c2c:	0148      	lsls	r0, r1, #5
 8006c2e:	69f9      	ldr	r1, [r7, #28]
 8006c30:	4401      	add	r1, r0
 8006c32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c36:	4313      	orrs	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	69ba      	ldr	r2, [r7, #24]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c54:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c58:	6113      	str	r3, [r2, #16]
 8006c5a:	e037      	b.n	8006ccc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	691a      	ldr	r2, [r3, #16]
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	4413      	add	r3, r2
 8006c66:	1e5a      	subs	r2, r3, #1
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c70:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	8afa      	ldrh	r2, [r7, #22]
 8006c78:	fb03 f202 	mul.w	r2, r3, r2
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	8afb      	ldrh	r3, [r7, #22]
 8006c90:	04d9      	lsls	r1, r3, #19
 8006c92:	4b38      	ldr	r3, [pc, #224]	@ (8006d74 <USB_EPStartXfer+0x538>)
 8006c94:	400b      	ands	r3, r1
 8006c96:	69b9      	ldr	r1, [r7, #24]
 8006c98:	0148      	lsls	r0, r1, #5
 8006c9a:	69f9      	ldr	r1, [r7, #28]
 8006c9c:	4401      	add	r1, r0
 8006c9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cb2:	691a      	ldr	r2, [r3, #16]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cbc:	69b9      	ldr	r1, [r7, #24]
 8006cbe:	0148      	lsls	r0, r1, #5
 8006cc0:	69f9      	ldr	r1, [r7, #28]
 8006cc2:	4401      	add	r1, r0
 8006cc4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d10d      	bne.n	8006cee <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68d9      	ldr	r1, [r3, #12]
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cea:	460a      	mov	r2, r1
 8006cec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	791b      	ldrb	r3, [r3, #4]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d128      	bne.n	8006d48 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d110      	bne.n	8006d28 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d20:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d24:	6013      	str	r3, [r2, #0]
 8006d26:	e00f      	b.n	8006d48 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	0151      	lsls	r1, r2, #5
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	440a      	add	r2, r1
 8006d3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d46:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	015a      	lsls	r2, r3, #5
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	4413      	add	r3, r2
 8006d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	69fa      	ldr	r2, [r7, #28]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d62:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	1ff80000 	.word	0x1ff80000

08006d78 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d86:	2300      	movs	r3, #0
 8006d88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d14a      	bne.n	8006e2c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	781b      	ldrb	r3, [r3, #0]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006daa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dae:	f040 8086 	bne.w	8006ebe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	7812      	ldrb	r2, [r2, #0]
 8006dc6:	0151      	lsls	r1, r2, #5
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	440a      	add	r2, r1
 8006dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006dd4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	0151      	lsls	r1, r2, #5
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	440a      	add	r2, r1
 8006df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006df8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	3301      	adds	r3, #1
 8006dfe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d902      	bls.n	8006e10 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e0e:	e056      	b.n	8006ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e28:	d0e7      	beq.n	8006dfa <USB_EPStopXfer+0x82>
 8006e2a:	e048      	b.n	8006ebe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e44:	d13b      	bne.n	8006ebe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	015a      	lsls	r2, r3, #5
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4413      	add	r3, r2
 8006e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	683a      	ldr	r2, [r7, #0]
 8006e58:	7812      	ldrb	r2, [r2, #0]
 8006e5a:	0151      	lsls	r1, r2, #5
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	440a      	add	r2, r1
 8006e60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e64:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e68:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	7812      	ldrb	r2, [r2, #0]
 8006e7e:	0151      	lsls	r1, r2, #5
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	440a      	add	r2, r1
 8006e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e8c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d902      	bls.n	8006ea4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ea2:	e00c      	b.n	8006ebe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	781b      	ldrb	r3, [r3, #0]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006eb8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ebc:	d0e7      	beq.n	8006e8e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	371c      	adds	r7, #28
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b089      	sub	sp, #36	@ 0x24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	4611      	mov	r1, r2
 8006ed8:	461a      	mov	r2, r3
 8006eda:	460b      	mov	r3, r1
 8006edc:	71fb      	strb	r3, [r7, #7]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006eea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d123      	bne.n	8006f3a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ef2:	88bb      	ldrh	r3, [r7, #4]
 8006ef4:	3303      	adds	r3, #3
 8006ef6:	089b      	lsrs	r3, r3, #2
 8006ef8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006efa:	2300      	movs	r3, #0
 8006efc:	61bb      	str	r3, [r7, #24]
 8006efe:	e018      	b.n	8006f32 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f00:	79fb      	ldrb	r3, [r7, #7]
 8006f02:	031a      	lsls	r2, r3, #12
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	3301      	adds	r3, #1
 8006f18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d3e2      	bcc.n	8006f00 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3724      	adds	r7, #36	@ 0x24
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b08b      	sub	sp, #44	@ 0x2c
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	089b      	lsrs	r3, r3, #2
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	f003 0303 	and.w	r3, r3, #3
 8006f6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	623b      	str	r3, [r7, #32]
 8006f72:	e014      	b.n	8006f9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f82:	3301      	adds	r3, #1
 8006f84:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	3301      	adds	r3, #1
 8006f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8e:	3301      	adds	r3, #1
 8006f90:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	3301      	adds	r3, #1
 8006f96:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	623b      	str	r3, [r7, #32]
 8006f9e:	6a3a      	ldr	r2, [r7, #32]
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d3e6      	bcc.n	8006f74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fa6:	8bfb      	ldrh	r3, [r7, #30]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01e      	beq.n	8006fea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fac:	2300      	movs	r3, #0
 8006fae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f107 0310 	add.w	r3, r7, #16
 8006fbc:	6812      	ldr	r2, [r2, #0]
 8006fbe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8006fcc:	b2da      	uxtb	r2, r3
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	701a      	strb	r2, [r3, #0]
      i++;
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	3301      	adds	r3, #1
 8006fdc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fde:	8bfb      	ldrh	r3, [r7, #30]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fe4:	8bfb      	ldrh	r3, [r7, #30]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1ea      	bne.n	8006fc0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	372c      	adds	r7, #44	@ 0x2c
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b085      	sub	sp, #20
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	785b      	ldrb	r3, [r3, #1]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d12c      	bne.n	800706e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	db12      	blt.n	800704c <USB_EPSetStall+0x54>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00f      	beq.n	800704c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	0151      	lsls	r1, r2, #5
 800703e:	68fa      	ldr	r2, [r7, #12]
 8007040:	440a      	add	r2, r1
 8007042:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007046:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800704a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	440a      	add	r2, r1
 8007062:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007066:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	e02b      	b.n	80070c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	2b00      	cmp	r3, #0
 800707e:	db12      	blt.n	80070a6 <USB_EPSetStall+0xae>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00f      	beq.n	80070a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68ba      	ldr	r2, [r7, #8]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	68ba      	ldr	r2, [r7, #8]
 80070b6:	0151      	lsls	r1, r2, #5
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	440a      	add	r2, r1
 80070bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	785b      	ldrb	r3, [r3, #1]
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d128      	bne.n	8007142 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	0151      	lsls	r1, r2, #5
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	440a      	add	r2, r1
 8007106:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800710a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800710e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	791b      	ldrb	r3, [r3, #4]
 8007114:	2b03      	cmp	r3, #3
 8007116:	d003      	beq.n	8007120 <USB_EPClearStall+0x4c>
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	2b02      	cmp	r3, #2
 800711e:	d138      	bne.n	8007192 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e027      	b.n	8007192 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	0151      	lsls	r1, r2, #5
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	440a      	add	r2, r1
 8007158:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800715c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007160:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	791b      	ldrb	r3, [r3, #4]
 8007166:	2b03      	cmp	r3, #3
 8007168:	d003      	beq.n	8007172 <USB_EPClearStall+0x9e>
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d10f      	bne.n	8007192 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007190:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3714      	adds	r7, #20
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b085      	sub	sp, #20
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	460b      	mov	r3, r1
 80071aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071be:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80071d4:	68f9      	ldr	r1, [r7, #12]
 80071d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071da:	4313      	orrs	r3, r2
 80071dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007206:	f023 0303 	bic.w	r3, r3, #3
 800720a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	68fa      	ldr	r2, [r7, #12]
 8007216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800721a:	f023 0302 	bic.w	r3, r3, #2
 800721e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr

0800722e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	68fa      	ldr	r2, [r7, #12]
 8007244:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007248:	f023 0303 	bic.w	r3, r3, #3
 800724c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	695b      	ldr	r3, [r3, #20]
 800727c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4013      	ands	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007288:	68fb      	ldr	r3, [r7, #12]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	4013      	ands	r3, r2
 80072b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	0c1b      	lsrs	r3, r3, #16
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072ca:	b480      	push	{r7}
 80072cc:	b085      	sub	sp, #20
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	4013      	ands	r3, r2
 80072ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	b29b      	uxth	r3, r3
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80072fe:	b480      	push	{r7}
 8007300:	b085      	sub	sp, #20
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	460b      	mov	r3, r1
 8007308:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	015a      	lsls	r2, r3, #5
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007324:	695b      	ldr	r3, [r3, #20]
 8007326:	68ba      	ldr	r2, [r7, #8]
 8007328:	4013      	ands	r3, r2
 800732a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800732c:	68bb      	ldr	r3, [r7, #8]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3714      	adds	r7, #20
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800733a:	b480      	push	{r7}
 800733c:	b087      	sub	sp, #28
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	460b      	mov	r3, r1
 8007344:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800735a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800735c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	f003 030f 	and.w	r3, r3, #15
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	fa22 f303 	lsr.w	r3, r2, r3
 800736a:	01db      	lsls	r3, r3, #7
 800736c:	b2db      	uxtb	r3, r3
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	4313      	orrs	r3, r2
 8007372:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	015a      	lsls	r2, r3, #5
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	4413      	add	r3, r2
 800737c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4013      	ands	r3, r2
 8007386:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007388:	68bb      	ldr	r3, [r7, #8]
}
 800738a:	4618      	mov	r0, r3
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	695b      	ldr	r3, [r3, #20]
 80073a2:	f003 0301 	and.w	r3, r3, #1
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073cc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80073d0:	f023 0307 	bic.w	r3, r3, #7
 80073d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	460b      	mov	r3, r1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	333c      	adds	r3, #60	@ 0x3c
 800740e:	3304      	adds	r3, #4
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	4a26      	ldr	r2, [pc, #152]	@ (80074b0 <USB_EP0_OutStart+0xb8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d90a      	bls.n	8007432 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007428:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800742c:	d101      	bne.n	8007432 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e037      	b.n	80074a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007438:	461a      	mov	r2, r3
 800743a:	2300      	movs	r3, #0
 800743c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800744c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007450:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007460:	f043 0318 	orr.w	r3, r3, #24
 8007464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007474:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007478:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d10f      	bne.n	80074a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007486:	461a      	mov	r2, r3
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800749a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800749e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	371c      	adds	r7, #28
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	4f54300a 	.word	0x4f54300a

080074b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b085      	sub	sp, #20
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074bc:	2300      	movs	r3, #0
 80074be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074cc:	d901      	bls.n	80074d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e01b      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	daf2      	bge.n	80074c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	f043 0201 	orr.w	r2, r3, #1
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f6:	d901      	bls.n	80074fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e006      	b.n	800750a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	691b      	ldr	r3, [r3, #16]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b01      	cmp	r3, #1
 8007506:	d0f0      	beq.n	80074ea <USB_CoreReset+0x36>

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3714      	adds	r7, #20
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr
	...

08007518 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	460b      	mov	r3, r1
 8007522:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007524:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007528:	f003 ff48 	bl	800b3bc <USBD_static_malloc>
 800752c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d109      	bne.n	8007548 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	32b0      	adds	r2, #176	@ 0xb0
 800753e:	2100      	movs	r1, #0
 8007540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007544:	2302      	movs	r3, #2
 8007546:	e0d4      	b.n	80076f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007548:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800754c:	2100      	movs	r1, #0
 800754e:	68f8      	ldr	r0, [r7, #12]
 8007550:	f003 ff78 	bl	800b444 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	32b0      	adds	r2, #176	@ 0xb0
 800755e:	68f9      	ldr	r1, [r7, #12]
 8007560:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	32b0      	adds	r2, #176	@ 0xb0
 800756e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	7c1b      	ldrb	r3, [r3, #16]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d138      	bne.n	80075f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007580:	4b5e      	ldr	r3, [pc, #376]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 8007582:	7819      	ldrb	r1, [r3, #0]
 8007584:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007588:	2202      	movs	r2, #2
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f003 fdf3 	bl	800b176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007590:	4b5a      	ldr	r3, [pc, #360]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3324      	adds	r3, #36	@ 0x24
 80075a6:	2201      	movs	r2, #1
 80075a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075aa:	4b55      	ldr	r3, [pc, #340]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80075ac:	7819      	ldrb	r1, [r3, #0]
 80075ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075b2:	2202      	movs	r2, #2
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f003 fdde 	bl	800b176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075ba:	4b51      	ldr	r3, [pc, #324]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	f003 020f 	and.w	r2, r3, #15
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4613      	mov	r3, r2
 80075c6:	009b      	lsls	r3, r3, #2
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075d2:	2201      	movs	r2, #1
 80075d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80075d6:	4b4b      	ldr	r3, [pc, #300]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	f003 020f 	and.w	r2, r3, #15
 80075de:	6879      	ldr	r1, [r7, #4]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	3326      	adds	r3, #38	@ 0x26
 80075ec:	2210      	movs	r2, #16
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e035      	b.n	800765e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80075f2:	4b42      	ldr	r3, [pc, #264]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 80075f4:	7819      	ldrb	r1, [r3, #0]
 80075f6:	2340      	movs	r3, #64	@ 0x40
 80075f8:	2202      	movs	r2, #2
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f003 fdbb 	bl	800b176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007600:	4b3e      	ldr	r3, [pc, #248]	@ (80076fc <USBD_CDC_Init+0x1e4>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	f003 020f 	and.w	r2, r3, #15
 8007608:	6879      	ldr	r1, [r7, #4]
 800760a:	4613      	mov	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4413      	add	r3, r2
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	440b      	add	r3, r1
 8007614:	3324      	adds	r3, #36	@ 0x24
 8007616:	2201      	movs	r2, #1
 8007618:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800761a:	4b39      	ldr	r3, [pc, #228]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 800761c:	7819      	ldrb	r1, [r3, #0]
 800761e:	2340      	movs	r3, #64	@ 0x40
 8007620:	2202      	movs	r2, #2
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f003 fda7 	bl	800b176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007628:	4b35      	ldr	r3, [pc, #212]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	f003 020f 	and.w	r2, r3, #15
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4613      	mov	r3, r2
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	440b      	add	r3, r1
 800763c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007640:	2201      	movs	r2, #1
 8007642:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007644:	4b2f      	ldr	r3, [pc, #188]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	3326      	adds	r3, #38	@ 0x26
 800765a:	2210      	movs	r2, #16
 800765c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800765e:	4b29      	ldr	r3, [pc, #164]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 8007660:	7819      	ldrb	r1, [r3, #0]
 8007662:	2308      	movs	r3, #8
 8007664:	2203      	movs	r2, #3
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f003 fd85 	bl	800b176 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800766c:	4b25      	ldr	r3, [pc, #148]	@ (8007704 <USBD_CDC_Init+0x1ec>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	f003 020f 	and.w	r2, r3, #15
 8007674:	6879      	ldr	r1, [r7, #4]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	440b      	add	r3, r1
 8007680:	3324      	adds	r3, #36	@ 0x24
 8007682:	2201      	movs	r2, #1
 8007684:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2200      	movs	r2, #0
 800768a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	33b0      	adds	r3, #176	@ 0xb0
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80076bc:	2302      	movs	r3, #2
 80076be:	e018      	b.n	80076f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7c1b      	ldrb	r3, [r3, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076c8:	4b0d      	ldr	r3, [pc, #52]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80076ca:	7819      	ldrb	r1, [r3, #0]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f003 fe3c 	bl	800b354 <USBD_LL_PrepareReceive>
 80076dc:	e008      	b.n	80076f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <USBD_CDC_Init+0x1e8>)
 80076e0:	7819      	ldrb	r1, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80076e8:	2340      	movs	r3, #64	@ 0x40
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f003 fe32 	bl	800b354 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80076f0:	2300      	movs	r3, #0
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
 80076fa:	bf00      	nop
 80076fc:	20000093 	.word	0x20000093
 8007700:	20000094 	.word	0x20000094
 8007704:	20000095 	.word	0x20000095

08007708 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	460b      	mov	r3, r1
 8007712:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007714:	4b3a      	ldr	r3, [pc, #232]	@ (8007800 <USBD_CDC_DeInit+0xf8>)
 8007716:	781b      	ldrb	r3, [r3, #0]
 8007718:	4619      	mov	r1, r3
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f003 fd51 	bl	800b1c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007720:	4b37      	ldr	r3, [pc, #220]	@ (8007800 <USBD_CDC_DeInit+0xf8>)
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	f003 020f 	and.w	r2, r3, #15
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	4613      	mov	r3, r2
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	4413      	add	r3, r2
 8007730:	009b      	lsls	r3, r3, #2
 8007732:	440b      	add	r3, r1
 8007734:	3324      	adds	r3, #36	@ 0x24
 8007736:	2200      	movs	r2, #0
 8007738:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800773a:	4b32      	ldr	r3, [pc, #200]	@ (8007804 <USBD_CDC_DeInit+0xfc>)
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f003 fd3e 	bl	800b1c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007746:	4b2f      	ldr	r3, [pc, #188]	@ (8007804 <USBD_CDC_DeInit+0xfc>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f003 020f 	and.w	r2, r3, #15
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4613      	mov	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	4413      	add	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	440b      	add	r3, r1
 800775a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800775e:	2200      	movs	r2, #0
 8007760:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007762:	4b29      	ldr	r3, [pc, #164]	@ (8007808 <USBD_CDC_DeInit+0x100>)
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f003 fd2a 	bl	800b1c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800776e:	4b26      	ldr	r3, [pc, #152]	@ (8007808 <USBD_CDC_DeInit+0x100>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	f003 020f 	and.w	r2, r3, #15
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	4613      	mov	r3, r2
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	440b      	add	r3, r1
 8007782:	3324      	adds	r3, #36	@ 0x24
 8007784:	2200      	movs	r2, #0
 8007786:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007788:	4b1f      	ldr	r3, [pc, #124]	@ (8007808 <USBD_CDC_DeInit+0x100>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	f003 020f 	and.w	r2, r3, #15
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	3326      	adds	r3, #38	@ 0x26
 800779e:	2200      	movs	r2, #0
 80077a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	32b0      	adds	r2, #176	@ 0xb0
 80077ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01f      	beq.n	80077f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	33b0      	adds	r3, #176	@ 0xb0
 80077be:	009b      	lsls	r3, r3, #2
 80077c0:	4413      	add	r3, r2
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	@ 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	4618      	mov	r0, r3
 80077d8:	f003 fdfe 	bl	800b3d8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	32b0      	adds	r2, #176	@ 0xb0
 80077e6:	2100      	movs	r1, #0
 80077e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	20000093 	.word	0x20000093
 8007804:	20000094 	.word	0x20000094
 8007808:	20000095 	.word	0x20000095

0800780c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b086      	sub	sp, #24
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	32b0      	adds	r2, #176	@ 0xb0
 8007820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007824:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007826:	2300      	movs	r3, #0
 8007828:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800782a:	2300      	movs	r3, #0
 800782c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007838:	2303      	movs	r3, #3
 800783a:	e0bf      	b.n	80079bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007844:	2b00      	cmp	r3, #0
 8007846:	d050      	beq.n	80078ea <USBD_CDC_Setup+0xde>
 8007848:	2b20      	cmp	r3, #32
 800784a:	f040 80af 	bne.w	80079ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	88db      	ldrh	r3, [r3, #6]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d03a      	beq.n	80078cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	b25b      	sxtb	r3, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	da1b      	bge.n	8007898 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	33b0      	adds	r3, #176	@ 0xb0
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007876:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007878:	683a      	ldr	r2, [r7, #0]
 800787a:	88d2      	ldrh	r2, [r2, #6]
 800787c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b07      	cmp	r3, #7
 8007884:	bf28      	it	cs
 8007886:	2307      	movcs	r3, #7
 8007888:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	89fa      	ldrh	r2, [r7, #14]
 800788e:	4619      	mov	r1, r3
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 fd93 	bl	80093bc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007896:	e090      	b.n	80079ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	785a      	ldrb	r2, [r3, #1]
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	88db      	ldrh	r3, [r3, #6]
 80078a6:	2b3f      	cmp	r3, #63	@ 0x3f
 80078a8:	d803      	bhi.n	80078b2 <USBD_CDC_Setup+0xa6>
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	88db      	ldrh	r3, [r3, #6]
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	e000      	b.n	80078b4 <USBD_CDC_Setup+0xa8>
 80078b2:	2240      	movs	r2, #64	@ 0x40
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80078ba:	6939      	ldr	r1, [r7, #16]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80078c2:	461a      	mov	r2, r3
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f001 fda5 	bl	8009414 <USBD_CtlPrepareRx>
      break;
 80078ca:	e076      	b.n	80079ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	33b0      	adds	r3, #176	@ 0xb0
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	683a      	ldr	r2, [r7, #0]
 80078e0:	7850      	ldrb	r0, [r2, #1]
 80078e2:	2200      	movs	r2, #0
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	4798      	blx	r3
      break;
 80078e8:	e067      	b.n	80079ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	2b0b      	cmp	r3, #11
 80078f0:	d851      	bhi.n	8007996 <USBD_CDC_Setup+0x18a>
 80078f2:	a201      	add	r2, pc, #4	@ (adr r2, 80078f8 <USBD_CDC_Setup+0xec>)
 80078f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f8:	08007929 	.word	0x08007929
 80078fc:	080079a5 	.word	0x080079a5
 8007900:	08007997 	.word	0x08007997
 8007904:	08007997 	.word	0x08007997
 8007908:	08007997 	.word	0x08007997
 800790c:	08007997 	.word	0x08007997
 8007910:	08007997 	.word	0x08007997
 8007914:	08007997 	.word	0x08007997
 8007918:	08007997 	.word	0x08007997
 800791c:	08007997 	.word	0x08007997
 8007920:	08007953 	.word	0x08007953
 8007924:	0800797d 	.word	0x0800797d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b03      	cmp	r3, #3
 8007932:	d107      	bne.n	8007944 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007934:	f107 030a 	add.w	r3, r7, #10
 8007938:	2202      	movs	r2, #2
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f001 fd3d 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007942:	e032      	b.n	80079aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f001 fcbb 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800794c:	2303      	movs	r3, #3
 800794e:	75fb      	strb	r3, [r7, #23]
          break;
 8007950:	e02b      	b.n	80079aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b03      	cmp	r3, #3
 800795c:	d107      	bne.n	800796e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800795e:	f107 030d 	add.w	r3, r7, #13
 8007962:	2201      	movs	r2, #1
 8007964:	4619      	mov	r1, r3
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f001 fd28 	bl	80093bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800796c:	e01d      	b.n	80079aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f001 fca6 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	75fb      	strb	r3, [r7, #23]
          break;
 800797a:	e016      	b.n	80079aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007982:	b2db      	uxtb	r3, r3
 8007984:	2b03      	cmp	r3, #3
 8007986:	d00f      	beq.n	80079a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007988:	6839      	ldr	r1, [r7, #0]
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f001 fc99 	bl	80092c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007990:	2303      	movs	r3, #3
 8007992:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007994:	e008      	b.n	80079a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007996:	6839      	ldr	r1, [r7, #0]
 8007998:	6878      	ldr	r0, [r7, #4]
 800799a:	f001 fc92 	bl	80092c2 <USBD_CtlError>
          ret = USBD_FAIL;
 800799e:	2303      	movs	r3, #3
 80079a0:	75fb      	strb	r3, [r7, #23]
          break;
 80079a2:	e002      	b.n	80079aa <USBD_CDC_Setup+0x19e>
          break;
 80079a4:	bf00      	nop
 80079a6:	e008      	b.n	80079ba <USBD_CDC_Setup+0x1ae>
          break;
 80079a8:	bf00      	nop
      }
      break;
 80079aa:	e006      	b.n	80079ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80079ac:	6839      	ldr	r1, [r7, #0]
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fc87 	bl	80092c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80079b4:	2303      	movs	r3, #3
 80079b6:	75fb      	strb	r3, [r7, #23]
      break;
 80079b8:	bf00      	nop
  }

  return (uint8_t)ret;
 80079ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	32b0      	adds	r2, #176	@ 0xb0
 80079e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80079ea:	2303      	movs	r3, #3
 80079ec:	e065      	b.n	8007aba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	32b0      	adds	r2, #176	@ 0xb0
 80079f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80079fe:	78fb      	ldrb	r3, [r7, #3]
 8007a00:	f003 020f 	and.w	r2, r3, #15
 8007a04:	6879      	ldr	r1, [r7, #4]
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	3318      	adds	r3, #24
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d02f      	beq.n	8007a78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	f003 020f 	and.w	r2, r3, #15
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	3318      	adds	r3, #24
 8007a2c:	681a      	ldr	r2, [r3, #0]
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 010f 	and.w	r1, r3, #15
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	460b      	mov	r3, r1
 8007a38:	00db      	lsls	r3, r3, #3
 8007a3a:	440b      	add	r3, r1
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4403      	add	r3, r0
 8007a40:	331c      	adds	r3, #28
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a48:	fb01 f303 	mul.w	r3, r1, r3
 8007a4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d112      	bne.n	8007a78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	f003 020f 	and.w	r2, r3, #15
 8007a58:	6879      	ldr	r1, [r7, #4]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4413      	add	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	440b      	add	r3, r1
 8007a64:	3318      	adds	r3, #24
 8007a66:	2200      	movs	r2, #0
 8007a68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a6a:	78f9      	ldrb	r1, [r7, #3]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f003 fc4e 	bl	800b312 <USBD_LL_Transmit>
 8007a76:	e01f      	b.n	8007ab8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	33b0      	adds	r3, #176	@ 0xb0
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d010      	beq.n	8007ab8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	33b0      	adds	r3, #176	@ 0xb0
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	68ba      	ldr	r2, [r7, #8]
 8007aaa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ab8:	2300      	movs	r3, #0
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	460b      	mov	r3, r1
 8007acc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	32b0      	adds	r2, #176	@ 0xb0
 8007ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007adc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	32b0      	adds	r2, #176	@ 0xb0
 8007ae8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d101      	bne.n	8007af4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007af0:	2303      	movs	r3, #3
 8007af2:	e01a      	b.n	8007b2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f003 fc4c 	bl	800b396 <USBD_LL_GetRxDataSize>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b0c:	687a      	ldr	r2, [r7, #4]
 8007b0e:	33b0      	adds	r3, #176	@ 0xb0
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007b1e:	68fa      	ldr	r2, [r7, #12]
 8007b20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007b24:	4611      	mov	r1, r2
 8007b26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	32b0      	adds	r2, #176	@ 0xb0
 8007b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d101      	bne.n	8007b54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e024      	b.n	8007b9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	33b0      	adds	r3, #176	@ 0xb0
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d019      	beq.n	8007b9c <USBD_CDC_EP0_RxReady+0x6a>
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007b6e:	2bff      	cmp	r3, #255	@ 0xff
 8007b70:	d014      	beq.n	8007b9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	33b0      	adds	r3, #176	@ 0xb0
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007b8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007b92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	22ff      	movs	r2, #255	@ 0xff
 8007b98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
	...

08007ba8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bb0:	2182      	movs	r1, #130	@ 0x82
 8007bb2:	4818      	ldr	r0, [pc, #96]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bb4:	f000 fd4f 	bl	8008656 <USBD_GetEpDesc>
 8007bb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bba:	2101      	movs	r1, #1
 8007bbc:	4815      	ldr	r0, [pc, #84]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bbe:	f000 fd4a 	bl	8008656 <USBD_GetEpDesc>
 8007bc2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bc4:	2181      	movs	r1, #129	@ 0x81
 8007bc6:	4813      	ldr	r0, [pc, #76]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bc8:	f000 fd45 	bl	8008656 <USBD_GetEpDesc>
 8007bcc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d002      	beq.n	8007bda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	2210      	movs	r2, #16
 8007bd8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d006      	beq.n	8007bee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007be8:	711a      	strb	r2, [r3, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bfc:	711a      	strb	r2, [r3, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2243      	movs	r2, #67	@ 0x43
 8007c06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c08:	4b02      	ldr	r3, [pc, #8]	@ (8007c14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20000050 	.word	0x20000050

08007c18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b086      	sub	sp, #24
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c20:	2182      	movs	r1, #130	@ 0x82
 8007c22:	4818      	ldr	r0, [pc, #96]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c24:	f000 fd17 	bl	8008656 <USBD_GetEpDesc>
 8007c28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	4815      	ldr	r0, [pc, #84]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c2e:	f000 fd12 	bl	8008656 <USBD_GetEpDesc>
 8007c32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c34:	2181      	movs	r1, #129	@ 0x81
 8007c36:	4813      	ldr	r0, [pc, #76]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c38:	f000 fd0d 	bl	8008656 <USBD_GetEpDesc>
 8007c3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2210      	movs	r2, #16
 8007c48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d006      	beq.n	8007c5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	2200      	movs	r2, #0
 8007c54:	711a      	strb	r2, [r3, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f042 0202 	orr.w	r2, r2, #2
 8007c5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d006      	beq.n	8007c72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	711a      	strb	r2, [r3, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	f042 0202 	orr.w	r2, r2, #2
 8007c70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2243      	movs	r2, #67	@ 0x43
 8007c76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c78:	4b02      	ldr	r3, [pc, #8]	@ (8007c84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3718      	adds	r7, #24
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}
 8007c82:	bf00      	nop
 8007c84:	20000050 	.word	0x20000050

08007c88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c90:	2182      	movs	r1, #130	@ 0x82
 8007c92:	4818      	ldr	r0, [pc, #96]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c94:	f000 fcdf 	bl	8008656 <USBD_GetEpDesc>
 8007c98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	4815      	ldr	r0, [pc, #84]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007c9e:	f000 fcda 	bl	8008656 <USBD_GetEpDesc>
 8007ca2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ca4:	2181      	movs	r1, #129	@ 0x81
 8007ca6:	4813      	ldr	r0, [pc, #76]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007ca8:	f000 fcd5 	bl	8008656 <USBD_GetEpDesc>
 8007cac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d002      	beq.n	8007cba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	2210      	movs	r2, #16
 8007cb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cba:	693b      	ldr	r3, [r7, #16]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d006      	beq.n	8007cce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cc8:	711a      	strb	r2, [r3, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cdc:	711a      	strb	r2, [r3, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2243      	movs	r2, #67	@ 0x43
 8007ce6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ce8:	4b02      	ldr	r3, [pc, #8]	@ (8007cf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3718      	adds	r7, #24
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	20000050 	.word	0x20000050

08007cf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b083      	sub	sp, #12
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	220a      	movs	r2, #10
 8007d04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d06:	4b03      	ldr	r3, [pc, #12]	@ (8007d14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	2000000c 	.word	0x2000000c

08007d18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e009      	b.n	8007d40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	33b0      	adds	r3, #176	@ 0xb0
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	32b0      	adds	r2, #176	@ 0xb0
 8007d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d101      	bne.n	8007d72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d6e:	2303      	movs	r3, #3
 8007d70:	e008      	b.n	8007d84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	32b0      	adds	r2, #176	@ 0xb0
 8007da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d101      	bne.n	8007db4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e004      	b.n	8007dbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007dbc:	2300      	movs	r3, #0
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
	...

08007dcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b084      	sub	sp, #16
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	32b0      	adds	r2, #176	@ 0xb0
 8007dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007de4:	2301      	movs	r3, #1
 8007de6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e025      	b.n	8007e3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d11f      	bne.n	8007e3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007e04:	4b10      	ldr	r3, [pc, #64]	@ (8007e48 <USBD_CDC_TransmitPacket+0x7c>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	f003 020f 	and.w	r2, r3, #15
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4613      	mov	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	009b      	lsls	r3, r3, #2
 8007e1c:	4403      	add	r3, r0
 8007e1e:	3318      	adds	r3, #24
 8007e20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007e22:	4b09      	ldr	r3, [pc, #36]	@ (8007e48 <USBD_CDC_TransmitPacket+0x7c>)
 8007e24:	7819      	ldrb	r1, [r3, #0]
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f003 fa6d 	bl	800b312 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000093 	.word	0x20000093

08007e4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	32b0      	adds	r2, #176	@ 0xb0
 8007e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32b0      	adds	r2, #176	@ 0xb0
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d101      	bne.n	8007e7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e018      	b.n	8007eac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7c1b      	ldrb	r3, [r3, #16]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e82:	4b0c      	ldr	r3, [pc, #48]	@ (8007eb4 <USBD_CDC_ReceivePacket+0x68>)
 8007e84:	7819      	ldrb	r1, [r3, #0]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f003 fa5f 	bl	800b354 <USBD_LL_PrepareReceive>
 8007e96:	e008      	b.n	8007eaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e98:	4b06      	ldr	r3, [pc, #24]	@ (8007eb4 <USBD_CDC_ReceivePacket+0x68>)
 8007e9a:	7819      	ldrb	r1, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ea2:	2340      	movs	r3, #64	@ 0x40
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f003 fa55 	bl	800b354 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000094 	.word	0x20000094

08007eb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007ecc:	2303      	movs	r3, #3
 8007ece:	e01f      	b.n	8007f10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	79fa      	ldrb	r2, [r7, #7]
 8007f02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f003 f8c9 	bl	800b09c <USBD_LL_Init>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3718      	adds	r7, #24
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b084      	sub	sp, #16
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f22:	2300      	movs	r3, #0
 8007f24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d101      	bne.n	8007f30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e025      	b.n	8007f7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	683a      	ldr	r2, [r7, #0]
 8007f34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	32ae      	adds	r2, #174	@ 0xae
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00f      	beq.n	8007f6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	32ae      	adds	r2, #174	@ 0xae
 8007f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f5c:	f107 020e 	add.w	r2, r7, #14
 8007f60:	4610      	mov	r0, r2
 8007f62:	4798      	blx	r3
 8007f64:	4602      	mov	r2, r0
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f003 f8d7 	bl	800b140 <USBD_LL_Start>
 8007f92:	4603      	mov	r3, r0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b083      	sub	sp, #12
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fa4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	370c      	adds	r7, #12
 8007faa:	46bd      	mov	sp, r7
 8007fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb0:	4770      	bx	lr

08007fb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb2:	b580      	push	{r7, lr}
 8007fb4:	b084      	sub	sp, #16
 8007fb6:	af00      	add	r7, sp, #0
 8007fb8:	6078      	str	r0, [r7, #4]
 8007fba:	460b      	mov	r3, r1
 8007fbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d009      	beq.n	8007fe0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	4798      	blx	r3
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3710      	adds	r7, #16
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	78fa      	ldrb	r2, [r7, #3]
 8008004:	4611      	mov	r1, r2
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	4798      	blx	r3
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008010:	2303      	movs	r3, #3
 8008012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008014:	7bfb      	ldrb	r3, [r7, #15]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800802e:	6839      	ldr	r1, [r7, #0]
 8008030:	4618      	mov	r0, r3
 8008032:	f001 f90c 	bl	800924e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	2201      	movs	r2, #1
 800803a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008044:	461a      	mov	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008052:	f003 031f 	and.w	r3, r3, #31
 8008056:	2b02      	cmp	r3, #2
 8008058:	d01a      	beq.n	8008090 <USBD_LL_SetupStage+0x72>
 800805a:	2b02      	cmp	r3, #2
 800805c:	d822      	bhi.n	80080a4 <USBD_LL_SetupStage+0x86>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d002      	beq.n	8008068 <USBD_LL_SetupStage+0x4a>
 8008062:	2b01      	cmp	r3, #1
 8008064:	d00a      	beq.n	800807c <USBD_LL_SetupStage+0x5e>
 8008066:	e01d      	b.n	80080a4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800806e:	4619      	mov	r1, r3
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fb63 	bl	800873c <USBD_StdDevReq>
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
      break;
 800807a:	e020      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fbcb 	bl	8008820 <USBD_StdItfReq>
 800808a:	4603      	mov	r3, r0
 800808c:	73fb      	strb	r3, [r7, #15]
      break;
 800808e:	e016      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f000 fc2d 	bl	80088f8 <USBD_StdEPReq>
 800809e:	4603      	mov	r3, r0
 80080a0:	73fb      	strb	r3, [r7, #15]
      break;
 80080a2:	e00c      	b.n	80080be <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080aa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	4619      	mov	r1, r3
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f003 f8a4 	bl	800b200 <USBD_LL_StallEP>
 80080b8:	4603      	mov	r3, r0
 80080ba:	73fb      	strb	r3, [r7, #15]
      break;
 80080bc:	bf00      	nop
  }

  return ret;
 80080be:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3710      	adds	r7, #16
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b086      	sub	sp, #24
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	460b      	mov	r3, r1
 80080d2:	607a      	str	r2, [r7, #4]
 80080d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80080d6:	2300      	movs	r3, #0
 80080d8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80080da:	7afb      	ldrb	r3, [r7, #11]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d16e      	bne.n	80081be <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80080e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	f040 8098 	bne.w	8008224 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d913      	bls.n	8008128 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	1ad2      	subs	r2, r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4293      	cmp	r3, r2
 8008118:	bf28      	it	cs
 800811a:	4613      	movcs	r3, r2
 800811c:	461a      	mov	r2, r3
 800811e:	6879      	ldr	r1, [r7, #4]
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 f994 	bl	800944e <USBD_CtlContinueRx>
 8008126:	e07d      	b.n	8008224 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800812e:	f003 031f 	and.w	r3, r3, #31
 8008132:	2b02      	cmp	r3, #2
 8008134:	d014      	beq.n	8008160 <USBD_LL_DataOutStage+0x98>
 8008136:	2b02      	cmp	r3, #2
 8008138:	d81d      	bhi.n	8008176 <USBD_LL_DataOutStage+0xae>
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <USBD_LL_DataOutStage+0x7c>
 800813e:	2b01      	cmp	r3, #1
 8008140:	d003      	beq.n	800814a <USBD_LL_DataOutStage+0x82>
 8008142:	e018      	b.n	8008176 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008144:	2300      	movs	r3, #0
 8008146:	75bb      	strb	r3, [r7, #22]
            break;
 8008148:	e018      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008150:	b2db      	uxtb	r3, r3
 8008152:	4619      	mov	r1, r3
 8008154:	68f8      	ldr	r0, [r7, #12]
 8008156:	f000 fa64 	bl	8008622 <USBD_CoreFindIF>
 800815a:	4603      	mov	r3, r0
 800815c:	75bb      	strb	r3, [r7, #22]
            break;
 800815e:	e00d      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008166:	b2db      	uxtb	r3, r3
 8008168:	4619      	mov	r1, r3
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fa66 	bl	800863c <USBD_CoreFindEP>
 8008170:	4603      	mov	r3, r0
 8008172:	75bb      	strb	r3, [r7, #22]
            break;
 8008174:	e002      	b.n	800817c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008176:	2300      	movs	r3, #0
 8008178:	75bb      	strb	r3, [r7, #22]
            break;
 800817a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800817c:	7dbb      	ldrb	r3, [r7, #22]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d119      	bne.n	80081b6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d113      	bne.n	80081b6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800818e:	7dba      	ldrb	r2, [r7, #22]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	32ae      	adds	r2, #174	@ 0xae
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00b      	beq.n	80081b6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800819e:	7dba      	ldrb	r2, [r7, #22]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80081a6:	7dba      	ldrb	r2, [r7, #22]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	32ae      	adds	r2, #174	@ 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	f001 f95a 	bl	8009470 <USBD_CtlSendStatus>
 80081bc:	e032      	b.n	8008224 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80081be:	7afb      	ldrb	r3, [r7, #11]
 80081c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	4619      	mov	r1, r3
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 fa37 	bl	800863c <USBD_CoreFindEP>
 80081ce:	4603      	mov	r3, r0
 80081d0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d2:	7dbb      	ldrb	r3, [r7, #22]
 80081d4:	2bff      	cmp	r3, #255	@ 0xff
 80081d6:	d025      	beq.n	8008224 <USBD_LL_DataOutStage+0x15c>
 80081d8:	7dbb      	ldrb	r3, [r7, #22]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d122      	bne.n	8008224 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b03      	cmp	r3, #3
 80081e8:	d117      	bne.n	800821a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80081ea:	7dba      	ldrb	r2, [r7, #22]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	32ae      	adds	r2, #174	@ 0xae
 80081f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f4:	699b      	ldr	r3, [r3, #24]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00f      	beq.n	800821a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80081fa:	7dba      	ldrb	r2, [r7, #22]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008202:	7dba      	ldrb	r2, [r7, #22]
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	32ae      	adds	r2, #174	@ 0xae
 8008208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	7afa      	ldrb	r2, [r7, #11]
 8008210:	4611      	mov	r1, r2
 8008212:	68f8      	ldr	r0, [r7, #12]
 8008214:	4798      	blx	r3
 8008216:	4603      	mov	r3, r0
 8008218:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800821a:	7dfb      	ldrb	r3, [r7, #23]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d001      	beq.n	8008224 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	e000      	b.n	8008226 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	3718      	adds	r7, #24
 800822a:	46bd      	mov	sp, r7
 800822c:	bd80      	pop	{r7, pc}

0800822e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800822e:	b580      	push	{r7, lr}
 8008230:	b086      	sub	sp, #24
 8008232:	af00      	add	r7, sp, #0
 8008234:	60f8      	str	r0, [r7, #12]
 8008236:	460b      	mov	r3, r1
 8008238:	607a      	str	r2, [r7, #4]
 800823a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800823c:	7afb      	ldrb	r3, [r7, #11]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d16f      	bne.n	8008322 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3314      	adds	r3, #20
 8008246:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800824e:	2b02      	cmp	r3, #2
 8008250:	d15a      	bne.n	8008308 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	429a      	cmp	r2, r3
 800825c:	d914      	bls.n	8008288 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	689a      	ldr	r2, [r3, #8]
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	68db      	ldr	r3, [r3, #12]
 8008266:	1ad2      	subs	r2, r2, r3
 8008268:	693b      	ldr	r3, [r7, #16]
 800826a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	461a      	mov	r2, r3
 8008272:	6879      	ldr	r1, [r7, #4]
 8008274:	68f8      	ldr	r0, [r7, #12]
 8008276:	f001 f8bc 	bl	80093f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800827a:	2300      	movs	r3, #0
 800827c:	2200      	movs	r2, #0
 800827e:	2100      	movs	r1, #0
 8008280:	68f8      	ldr	r0, [r7, #12]
 8008282:	f003 f867 	bl	800b354 <USBD_LL_PrepareReceive>
 8008286:	e03f      	b.n	8008308 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	429a      	cmp	r2, r3
 8008292:	d11c      	bne.n	80082ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800829c:	429a      	cmp	r2, r3
 800829e:	d316      	bcc.n	80082ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d20f      	bcs.n	80082ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80082ae:	2200      	movs	r2, #0
 80082b0:	2100      	movs	r1, #0
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f001 f89d 	bl	80093f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082c0:	2300      	movs	r3, #0
 80082c2:	2200      	movs	r2, #0
 80082c4:	2100      	movs	r1, #0
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f003 f844 	bl	800b354 <USBD_LL_PrepareReceive>
 80082cc:	e01c      	b.n	8008308 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d10f      	bne.n	80082fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68f8      	ldr	r0, [r7, #12]
 80082f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082fa:	2180      	movs	r1, #128	@ 0x80
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f002 ff7f 	bl	800b200 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f001 f8c7 	bl	8009496 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03a      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f7ff fe42 	bl	8007f9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008320:	e032      	b.n	8008388 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008322:	7afb      	ldrb	r3, [r7, #11]
 8008324:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008328:	b2db      	uxtb	r3, r3
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 f985 	bl	800863c <USBD_CoreFindEP>
 8008332:	4603      	mov	r3, r0
 8008334:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008336:	7dfb      	ldrb	r3, [r7, #23]
 8008338:	2bff      	cmp	r3, #255	@ 0xff
 800833a:	d025      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
 800833c:	7dfb      	ldrb	r3, [r7, #23]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d122      	bne.n	8008388 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b03      	cmp	r3, #3
 800834c:	d11c      	bne.n	8008388 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800834e:	7dfa      	ldrb	r2, [r7, #23]
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	32ae      	adds	r2, #174	@ 0xae
 8008354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d014      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800835e:	7dfa      	ldrb	r2, [r7, #23]
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008366:	7dfa      	ldrb	r2, [r7, #23]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	32ae      	adds	r2, #174	@ 0xae
 800836c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008370:	695b      	ldr	r3, [r3, #20]
 8008372:	7afa      	ldrb	r2, [r7, #11]
 8008374:	4611      	mov	r1, r2
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	4798      	blx	r3
 800837a:	4603      	mov	r3, r0
 800837c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800837e:	7dbb      	ldrb	r3, [r7, #22]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008384:	7dbb      	ldrb	r3, [r7, #22]
 8008386:	e000      	b.n	800838a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3718      	adds	r7, #24
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2200      	movs	r2, #0
 80083aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d014      	beq.n	80083f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00e      	beq.n	80083f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	6852      	ldr	r2, [r2, #4]
 80083e6:	b2d2      	uxtb	r2, r2
 80083e8:	4611      	mov	r1, r2
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	4798      	blx	r3
 80083ee:	4603      	mov	r3, r0
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d001      	beq.n	80083f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083f4:	2303      	movs	r3, #3
 80083f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083f8:	2340      	movs	r3, #64	@ 0x40
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f002 feb9 	bl	800b176 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2240      	movs	r2, #64	@ 0x40
 8008410:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008414:	2340      	movs	r3, #64	@ 0x40
 8008416:	2200      	movs	r2, #0
 8008418:	2180      	movs	r1, #128	@ 0x80
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f002 feab 	bl	800b176 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2240      	movs	r2, #64	@ 0x40
 800842a:	621a      	str	r2, [r3, #32]

  return ret;
 800842c:	7bfb      	ldrb	r3, [r7, #15]
}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}

08008436 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008436:	b480      	push	{r7}
 8008438:	b083      	sub	sp, #12
 800843a:	af00      	add	r7, sp, #0
 800843c:	6078      	str	r0, [r7, #4]
 800843e:	460b      	mov	r3, r1
 8008440:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	78fa      	ldrb	r2, [r7, #3]
 8008446:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	370c      	adds	r7, #12
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008456:	b480      	push	{r7}
 8008458:	b083      	sub	sp, #12
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b04      	cmp	r3, #4
 8008468:	d006      	beq.n	8008478 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008470:	b2da      	uxtb	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2204      	movs	r2, #4
 800847c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	370c      	adds	r7, #12
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800848e:	b480      	push	{r7}
 8008490:	b083      	sub	sp, #12
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800849c:	b2db      	uxtb	r3, r3
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d106      	bne.n	80084b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	370c      	adds	r7, #12
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	2b03      	cmp	r3, #3
 80084d0:	d110      	bne.n	80084f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d00b      	beq.n	80084f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e2:	69db      	ldr	r3, [r3, #28]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d005      	beq.n	80084f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ee:	69db      	ldr	r3, [r3, #28]
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084f4:	2300      	movs	r3, #0
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3708      	adds	r7, #8
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}

080084fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b082      	sub	sp, #8
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
 8008506:	460b      	mov	r3, r1
 8008508:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32ae      	adds	r2, #174	@ 0xae
 8008514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800851c:	2303      	movs	r3, #3
 800851e:	e01c      	b.n	800855a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b03      	cmp	r3, #3
 800852a:	d115      	bne.n	8008558 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	32ae      	adds	r2, #174	@ 0xae
 8008536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853a:	6a1b      	ldr	r3, [r3, #32]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32ae      	adds	r2, #174	@ 0xae
 800854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	78fa      	ldrb	r2, [r7, #3]
 8008552:	4611      	mov	r1, r2
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b082      	sub	sp, #8
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	32ae      	adds	r2, #174	@ 0xae
 8008578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008580:	2303      	movs	r3, #3
 8008582:	e01c      	b.n	80085be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b03      	cmp	r3, #3
 800858e:	d115      	bne.n	80085bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	32ae      	adds	r2, #174	@ 0xae
 800859a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800859e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	32ae      	adds	r2, #174	@ 0xae
 80085ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b4:	78fa      	ldrb	r2, [r7, #3]
 80085b6:	4611      	mov	r1, r2
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3708      	adds	r7, #8
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80085c6:	b480      	push	{r7}
 80085c8:	b083      	sub	sp, #12
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085ce:	2300      	movs	r3, #0
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80085e4:	2300      	movs	r3, #0
 80085e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d00e      	beq.n	8008618 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	6852      	ldr	r2, [r2, #4]
 8008606:	b2d2      	uxtb	r2, r2
 8008608:	4611      	mov	r1, r2
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	4798      	blx	r3
 800860e:	4603      	mov	r3, r0
 8008610:	2b00      	cmp	r3, #0
 8008612:	d001      	beq.n	8008618 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008614:	2303      	movs	r3, #3
 8008616:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008618:	7bfb      	ldrb	r3, [r7, #15]
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}

08008622 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	460b      	mov	r3, r1
 800862c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800862e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008630:	4618      	mov	r0, r3
 8008632:	370c      	adds	r7, #12
 8008634:	46bd      	mov	sp, r7
 8008636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863a:	4770      	bx	lr

0800863c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	460b      	mov	r3, r1
 8008646:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008648:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800864a:	4618      	mov	r0, r3
 800864c:	370c      	adds	r7, #12
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b086      	sub	sp, #24
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	460b      	mov	r3, r1
 8008660:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	885b      	ldrh	r3, [r3, #2]
 8008672:	b29b      	uxth	r3, r3
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	7812      	ldrb	r2, [r2, #0]
 8008678:	4293      	cmp	r3, r2
 800867a:	d91f      	bls.n	80086bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008682:	e013      	b.n	80086ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008684:	f107 030a 	add.w	r3, r7, #10
 8008688:	4619      	mov	r1, r3
 800868a:	6978      	ldr	r0, [r7, #20]
 800868c:	f000 f81b 	bl	80086c6 <USBD_GetNextDesc>
 8008690:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	785b      	ldrb	r3, [r3, #1]
 8008696:	2b05      	cmp	r3, #5
 8008698:	d108      	bne.n	80086ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	789b      	ldrb	r3, [r3, #2]
 80086a2:	78fa      	ldrb	r2, [r7, #3]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d008      	beq.n	80086ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	885b      	ldrh	r3, [r3, #2]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	897b      	ldrh	r3, [r7, #10]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d8e5      	bhi.n	8008684 <USBD_GetEpDesc+0x2e>
 80086b8:	e000      	b.n	80086bc <USBD_GetEpDesc+0x66>
          break;
 80086ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80086bc:	693b      	ldr	r3, [r7, #16]
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086c6:	b480      	push	{r7}
 80086c8:	b085      	sub	sp, #20
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	7812      	ldrb	r2, [r2, #0]
 80086dc:	4413      	add	r3, r2
 80086de:	b29a      	uxth	r2, r3
 80086e0:	683b      	ldr	r3, [r7, #0]
 80086e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	781b      	ldrb	r3, [r3, #0]
 80086e8:	461a      	mov	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086f0:	68fb      	ldr	r3, [r7, #12]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3714      	adds	r7, #20
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr

080086fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086fe:	b480      	push	{r7}
 8008700:	b087      	sub	sp, #28
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	3301      	adds	r3, #1
 8008714:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800871c:	8a3b      	ldrh	r3, [r7, #16]
 800871e:	021b      	lsls	r3, r3, #8
 8008720:	b21a      	sxth	r2, r3
 8008722:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008726:	4313      	orrs	r3, r2
 8008728:	b21b      	sxth	r3, r3
 800872a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800872c:	89fb      	ldrh	r3, [r7, #14]
}
 800872e:	4618      	mov	r0, r3
 8008730:	371c      	adds	r7, #28
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr
	...

0800873c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008746:	2300      	movs	r3, #0
 8008748:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008752:	2b40      	cmp	r3, #64	@ 0x40
 8008754:	d005      	beq.n	8008762 <USBD_StdDevReq+0x26>
 8008756:	2b40      	cmp	r3, #64	@ 0x40
 8008758:	d857      	bhi.n	800880a <USBD_StdDevReq+0xce>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00f      	beq.n	800877e <USBD_StdDevReq+0x42>
 800875e:	2b20      	cmp	r3, #32
 8008760:	d153      	bne.n	800880a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	32ae      	adds	r2, #174	@ 0xae
 800876c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	6839      	ldr	r1, [r7, #0]
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
      break;
 800877c:	e04a      	b.n	8008814 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	785b      	ldrb	r3, [r3, #1]
 8008782:	2b09      	cmp	r3, #9
 8008784:	d83b      	bhi.n	80087fe <USBD_StdDevReq+0xc2>
 8008786:	a201      	add	r2, pc, #4	@ (adr r2, 800878c <USBD_StdDevReq+0x50>)
 8008788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800878c:	080087e1 	.word	0x080087e1
 8008790:	080087f5 	.word	0x080087f5
 8008794:	080087ff 	.word	0x080087ff
 8008798:	080087eb 	.word	0x080087eb
 800879c:	080087ff 	.word	0x080087ff
 80087a0:	080087bf 	.word	0x080087bf
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087ff 	.word	0x080087ff
 80087ac:	080087d7 	.word	0x080087d7
 80087b0:	080087c9 	.word	0x080087c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80087b4:	6839      	ldr	r1, [r7, #0]
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fa3c 	bl	8008c34 <USBD_GetDescriptor>
          break;
 80087bc:	e024      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fba1 	bl	8008f08 <USBD_SetAddress>
          break;
 80087c6:	e01f      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f000 fbe0 	bl	8008f90 <USBD_SetConfig>
 80087d0:	4603      	mov	r3, r0
 80087d2:	73fb      	strb	r3, [r7, #15]
          break;
 80087d4:	e018      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80087d6:	6839      	ldr	r1, [r7, #0]
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fc83 	bl	80090e4 <USBD_GetConfig>
          break;
 80087de:	e013      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80087e0:	6839      	ldr	r1, [r7, #0]
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fcb4 	bl	8009150 <USBD_GetStatus>
          break;
 80087e8:	e00e      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fce3 	bl	80091b8 <USBD_SetFeature>
          break;
 80087f2:	e009      	b.n	8008808 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fd07 	bl	800920a <USBD_ClrFeature>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fd5e 	bl	80092c2 <USBD_CtlError>
          break;
 8008806:	bf00      	nop
      }
      break;
 8008808:	e004      	b.n	8008814 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800880a:	6839      	ldr	r1, [r7, #0]
 800880c:	6878      	ldr	r0, [r7, #4]
 800880e:	f000 fd58 	bl	80092c2 <USBD_CtlError>
      break;
 8008812:	bf00      	nop
  }

  return ret;
 8008814:	7bfb      	ldrb	r3, [r7, #15]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop

08008820 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	781b      	ldrb	r3, [r3, #0]
 8008832:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008836:	2b40      	cmp	r3, #64	@ 0x40
 8008838:	d005      	beq.n	8008846 <USBD_StdItfReq+0x26>
 800883a:	2b40      	cmp	r3, #64	@ 0x40
 800883c:	d852      	bhi.n	80088e4 <USBD_StdItfReq+0xc4>
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <USBD_StdItfReq+0x26>
 8008842:	2b20      	cmp	r3, #32
 8008844:	d14e      	bne.n	80088e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800884c:	b2db      	uxtb	r3, r3
 800884e:	3b01      	subs	r3, #1
 8008850:	2b02      	cmp	r3, #2
 8008852:	d840      	bhi.n	80088d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	889b      	ldrh	r3, [r3, #4]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b01      	cmp	r3, #1
 800885c:	d836      	bhi.n	80088cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	889b      	ldrh	r3, [r3, #4]
 8008862:	b2db      	uxtb	r3, r3
 8008864:	4619      	mov	r1, r3
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f7ff fedb 	bl	8008622 <USBD_CoreFindIF>
 800886c:	4603      	mov	r3, r0
 800886e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2bff      	cmp	r3, #255	@ 0xff
 8008874:	d01d      	beq.n	80088b2 <USBD_StdItfReq+0x92>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11a      	bne.n	80088b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800887c:	7bba      	ldrb	r2, [r7, #14]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	32ae      	adds	r2, #174	@ 0xae
 8008882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00f      	beq.n	80088ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800888c:	7bba      	ldrb	r2, [r7, #14]
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008894:	7bba      	ldrb	r2, [r7, #14]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	32ae      	adds	r2, #174	@ 0xae
 800889a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	6839      	ldr	r1, [r7, #0]
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	4798      	blx	r3
 80088a6:	4603      	mov	r3, r0
 80088a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088aa:	e004      	b.n	80088b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80088b0:	e001      	b.n	80088b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80088b2:	2303      	movs	r3, #3
 80088b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d110      	bne.n	80088e0 <USBD_StdItfReq+0xc0>
 80088be:	7bfb      	ldrb	r3, [r7, #15]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f000 fdd3 	bl	8009470 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80088ca:	e009      	b.n	80088e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80088cc:	6839      	ldr	r1, [r7, #0]
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fcf7 	bl	80092c2 <USBD_CtlError>
          break;
 80088d4:	e004      	b.n	80088e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fcf2 	bl	80092c2 <USBD_CtlError>
          break;
 80088de:	e000      	b.n	80088e2 <USBD_StdItfReq+0xc2>
          break;
 80088e0:	bf00      	nop
      }
      break;
 80088e2:	e004      	b.n	80088ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80088e4:	6839      	ldr	r1, [r7, #0]
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fceb 	bl	80092c2 <USBD_CtlError>
      break;
 80088ec:	bf00      	nop
  }

  return ret;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008902:	2300      	movs	r3, #0
 8008904:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	889b      	ldrh	r3, [r3, #4]
 800890a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008914:	2b40      	cmp	r3, #64	@ 0x40
 8008916:	d007      	beq.n	8008928 <USBD_StdEPReq+0x30>
 8008918:	2b40      	cmp	r3, #64	@ 0x40
 800891a:	f200 817f 	bhi.w	8008c1c <USBD_StdEPReq+0x324>
 800891e:	2b00      	cmp	r3, #0
 8008920:	d02a      	beq.n	8008978 <USBD_StdEPReq+0x80>
 8008922:	2b20      	cmp	r3, #32
 8008924:	f040 817a 	bne.w	8008c1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008928:	7bbb      	ldrb	r3, [r7, #14]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fe85 	bl	800863c <USBD_CoreFindEP>
 8008932:	4603      	mov	r3, r0
 8008934:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008936:	7b7b      	ldrb	r3, [r7, #13]
 8008938:	2bff      	cmp	r3, #255	@ 0xff
 800893a:	f000 8174 	beq.w	8008c26 <USBD_StdEPReq+0x32e>
 800893e:	7b7b      	ldrb	r3, [r7, #13]
 8008940:	2b00      	cmp	r3, #0
 8008942:	f040 8170 	bne.w	8008c26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008946:	7b7a      	ldrb	r2, [r7, #13]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800894e:	7b7a      	ldrb	r2, [r7, #13]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	32ae      	adds	r2, #174	@ 0xae
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8163 	beq.w	8008c26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008960:	7b7a      	ldrb	r2, [r7, #13]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	32ae      	adds	r2, #174	@ 0xae
 8008966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	4798      	blx	r3
 8008972:	4603      	mov	r3, r0
 8008974:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008976:	e156      	b.n	8008c26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b03      	cmp	r3, #3
 800897e:	d008      	beq.n	8008992 <USBD_StdEPReq+0x9a>
 8008980:	2b03      	cmp	r3, #3
 8008982:	f300 8145 	bgt.w	8008c10 <USBD_StdEPReq+0x318>
 8008986:	2b00      	cmp	r3, #0
 8008988:	f000 809b 	beq.w	8008ac2 <USBD_StdEPReq+0x1ca>
 800898c:	2b01      	cmp	r3, #1
 800898e:	d03c      	beq.n	8008a0a <USBD_StdEPReq+0x112>
 8008990:	e13e      	b.n	8008c10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b02      	cmp	r3, #2
 800899c:	d002      	beq.n	80089a4 <USBD_StdEPReq+0xac>
 800899e:	2b03      	cmp	r3, #3
 80089a0:	d016      	beq.n	80089d0 <USBD_StdEPReq+0xd8>
 80089a2:	e02c      	b.n	80089fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00d      	beq.n	80089c6 <USBD_StdEPReq+0xce>
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b80      	cmp	r3, #128	@ 0x80
 80089ae:	d00a      	beq.n	80089c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089b0:	7bbb      	ldrb	r3, [r7, #14]
 80089b2:	4619      	mov	r1, r3
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f002 fc23 	bl	800b200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089ba:	2180      	movs	r1, #128	@ 0x80
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f002 fc1f 	bl	800b200 <USBD_LL_StallEP>
 80089c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089c4:	e020      	b.n	8008a08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc7a 	bl	80092c2 <USBD_CtlError>
              break;
 80089ce:	e01b      	b.n	8008a08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	885b      	ldrh	r3, [r3, #2]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d10e      	bne.n	80089f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d00b      	beq.n	80089f6 <USBD_StdEPReq+0xfe>
 80089de:	7bbb      	ldrb	r3, [r7, #14]
 80089e0:	2b80      	cmp	r3, #128	@ 0x80
 80089e2:	d008      	beq.n	80089f6 <USBD_StdEPReq+0xfe>
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	88db      	ldrh	r3, [r3, #6]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d104      	bne.n	80089f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	4619      	mov	r1, r3
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f002 fc05 	bl	800b200 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fd3a 	bl	8009470 <USBD_CtlSendStatus>

              break;
 80089fc:	e004      	b.n	8008a08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089fe:	6839      	ldr	r1, [r7, #0]
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fc5e 	bl	80092c2 <USBD_CtlError>
              break;
 8008a06:	bf00      	nop
          }
          break;
 8008a08:	e107      	b.n	8008c1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	2b02      	cmp	r3, #2
 8008a14:	d002      	beq.n	8008a1c <USBD_StdEPReq+0x124>
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d016      	beq.n	8008a48 <USBD_StdEPReq+0x150>
 8008a1a:	e04b      	b.n	8008ab4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a1c:	7bbb      	ldrb	r3, [r7, #14]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00d      	beq.n	8008a3e <USBD_StdEPReq+0x146>
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b80      	cmp	r3, #128	@ 0x80
 8008a26:	d00a      	beq.n	8008a3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f002 fbe7 	bl	800b200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a32:	2180      	movs	r1, #128	@ 0x80
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f002 fbe3 	bl	800b200 <USBD_LL_StallEP>
 8008a3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008a3c:	e040      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008a3e:	6839      	ldr	r1, [r7, #0]
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fc3e 	bl	80092c2 <USBD_CtlError>
              break;
 8008a46:	e03b      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	885b      	ldrh	r3, [r3, #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d136      	bne.n	8008abe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d004      	beq.n	8008a64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a5a:	7bbb      	ldrb	r3, [r7, #14]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 fbed 	bl	800b23e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fd03 	bl	8009470 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a6a:	7bbb      	ldrb	r3, [r7, #14]
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff fde4 	bl	800863c <USBD_CoreFindEP>
 8008a74:	4603      	mov	r3, r0
 8008a76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a78:	7b7b      	ldrb	r3, [r7, #13]
 8008a7a:	2bff      	cmp	r3, #255	@ 0xff
 8008a7c:	d01f      	beq.n	8008abe <USBD_StdEPReq+0x1c6>
 8008a7e:	7b7b      	ldrb	r3, [r7, #13]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d11c      	bne.n	8008abe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a84:	7b7a      	ldrb	r2, [r7, #13]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a8c:	7b7a      	ldrb	r2, [r7, #13]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	32ae      	adds	r2, #174	@ 0xae
 8008a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d010      	beq.n	8008abe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a9c:	7b7a      	ldrb	r2, [r7, #13]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	32ae      	adds	r2, #174	@ 0xae
 8008aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	4798      	blx	r3
 8008aae:	4603      	mov	r3, r0
 8008ab0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ab2:	e004      	b.n	8008abe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fc03 	bl	80092c2 <USBD_CtlError>
              break;
 8008abc:	e000      	b.n	8008ac0 <USBD_StdEPReq+0x1c8>
              break;
 8008abe:	bf00      	nop
          }
          break;
 8008ac0:	e0ab      	b.n	8008c1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ac8:	b2db      	uxtb	r3, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d002      	beq.n	8008ad4 <USBD_StdEPReq+0x1dc>
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d032      	beq.n	8008b38 <USBD_StdEPReq+0x240>
 8008ad2:	e097      	b.n	8008c04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ad4:	7bbb      	ldrb	r3, [r7, #14]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d007      	beq.n	8008aea <USBD_StdEPReq+0x1f2>
 8008ada:	7bbb      	ldrb	r3, [r7, #14]
 8008adc:	2b80      	cmp	r3, #128	@ 0x80
 8008ade:	d004      	beq.n	8008aea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fbed 	bl	80092c2 <USBD_CtlError>
                break;
 8008ae8:	e091      	b.n	8008c0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da0b      	bge.n	8008b0a <USBD_StdEPReq+0x212>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	3310      	adds	r3, #16
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	3304      	adds	r3, #4
 8008b08:	e00b      	b.n	8008b22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b0a:	7bbb      	ldrb	r3, [r7, #14]
 8008b0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b10:	4613      	mov	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4413      	add	r3, r2
 8008b20:	3304      	adds	r3, #4
 8008b22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2200      	movs	r2, #0
 8008b28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	4619      	mov	r1, r3
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc43 	bl	80093bc <USBD_CtlSendData>
              break;
 8008b36:	e06a      	b.n	8008c0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008b38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da11      	bge.n	8008b64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008b40:	7bbb      	ldrb	r3, [r7, #14]
 8008b42:	f003 020f 	and.w	r2, r3, #15
 8008b46:	6879      	ldr	r1, [r7, #4]
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	440b      	add	r3, r1
 8008b52:	3324      	adds	r3, #36	@ 0x24
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d117      	bne.n	8008b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fbb0 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b62:	e054      	b.n	8008c0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b64:	7bbb      	ldrb	r3, [r7, #14]
 8008b66:	f003 020f 	and.w	r2, r3, #15
 8008b6a:	6879      	ldr	r1, [r7, #4]
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b7a:	881b      	ldrh	r3, [r3, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d104      	bne.n	8008b8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b80:	6839      	ldr	r1, [r7, #0]
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fb9d 	bl	80092c2 <USBD_CtlError>
                  break;
 8008b88:	e041      	b.n	8008c0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	da0b      	bge.n	8008baa <USBD_StdEPReq+0x2b2>
 8008b92:	7bbb      	ldrb	r3, [r7, #14]
 8008b94:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b98:	4613      	mov	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	4413      	add	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	3310      	adds	r3, #16
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	e00b      	b.n	8008bc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	3304      	adds	r3, #4
 8008bc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d002      	beq.n	8008bd0 <USBD_StdEPReq+0x2d8>
 8008bca:	7bbb      	ldrb	r3, [r7, #14]
 8008bcc:	2b80      	cmp	r3, #128	@ 0x80
 8008bce:	d103      	bne.n	8008bd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	e00e      	b.n	8008bf6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008bd8:	7bbb      	ldrb	r3, [r7, #14]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f002 fb4d 	bl	800b27c <USBD_LL_IsStallEP>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d003      	beq.n	8008bf0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	2201      	movs	r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	2202      	movs	r2, #2
 8008bfa:	4619      	mov	r1, r3
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fbdd 	bl	80093bc <USBD_CtlSendData>
              break;
 8008c02:	e004      	b.n	8008c0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008c04:	6839      	ldr	r1, [r7, #0]
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fb5b 	bl	80092c2 <USBD_CtlError>
              break;
 8008c0c:	bf00      	nop
          }
          break;
 8008c0e:	e004      	b.n	8008c1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f000 fb55 	bl	80092c2 <USBD_CtlError>
          break;
 8008c18:	bf00      	nop
      }
      break;
 8008c1a:	e005      	b.n	8008c28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008c1c:	6839      	ldr	r1, [r7, #0]
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fb4f 	bl	80092c2 <USBD_CtlError>
      break;
 8008c24:	e000      	b.n	8008c28 <USBD_StdEPReq+0x330>
      break;
 8008c26:	bf00      	nop
  }

  return ret;
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008c42:	2300      	movs	r3, #0
 8008c44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008c46:	2300      	movs	r3, #0
 8008c48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	885b      	ldrh	r3, [r3, #2]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	3b01      	subs	r3, #1
 8008c54:	2b06      	cmp	r3, #6
 8008c56:	f200 8128 	bhi.w	8008eaa <USBD_GetDescriptor+0x276>
 8008c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c60 <USBD_GetDescriptor+0x2c>)
 8008c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c60:	08008c7d 	.word	0x08008c7d
 8008c64:	08008c95 	.word	0x08008c95
 8008c68:	08008cd5 	.word	0x08008cd5
 8008c6c:	08008eab 	.word	0x08008eab
 8008c70:	08008eab 	.word	0x08008eab
 8008c74:	08008e4b 	.word	0x08008e4b
 8008c78:	08008e77 	.word	0x08008e77
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	7c12      	ldrb	r2, [r2, #16]
 8008c88:	f107 0108 	add.w	r1, r7, #8
 8008c8c:	4610      	mov	r0, r2
 8008c8e:	4798      	blx	r3
 8008c90:	60f8      	str	r0, [r7, #12]
      break;
 8008c92:	e112      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7c1b      	ldrb	r3, [r3, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10d      	bne.n	8008cb8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	f107 0208 	add.w	r2, r7, #8
 8008ca8:	4610      	mov	r0, r2
 8008caa:	4798      	blx	r3
 8008cac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008cb6:	e100      	b.n	8008eba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cc0:	f107 0208 	add.w	r2, r7, #8
 8008cc4:	4610      	mov	r0, r2
 8008cc6:	4798      	blx	r3
 8008cc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	2202      	movs	r2, #2
 8008cd0:	701a      	strb	r2, [r3, #0]
      break;
 8008cd2:	e0f2      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	885b      	ldrh	r3, [r3, #2]
 8008cd8:	b2db      	uxtb	r3, r3
 8008cda:	2b05      	cmp	r3, #5
 8008cdc:	f200 80ac 	bhi.w	8008e38 <USBD_GetDescriptor+0x204>
 8008ce0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ce8 <USBD_GetDescriptor+0xb4>)
 8008ce2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ce6:	bf00      	nop
 8008ce8:	08008d01 	.word	0x08008d01
 8008cec:	08008d35 	.word	0x08008d35
 8008cf0:	08008d69 	.word	0x08008d69
 8008cf4:	08008d9d 	.word	0x08008d9d
 8008cf8:	08008dd1 	.word	0x08008dd1
 8008cfc:	08008e05 	.word	0x08008e05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d00b      	beq.n	8008d24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7c12      	ldrb	r2, [r2, #16]
 8008d18:	f107 0108 	add.w	r1, r7, #8
 8008d1c:	4610      	mov	r0, r2
 8008d1e:	4798      	blx	r3
 8008d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d22:	e091      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 facb 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d2c:	7afb      	ldrb	r3, [r7, #11]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	72fb      	strb	r3, [r7, #11]
          break;
 8008d32:	e089      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00b      	beq.n	8008d58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	7c12      	ldrb	r2, [r2, #16]
 8008d4c:	f107 0108 	add.w	r1, r7, #8
 8008d50:	4610      	mov	r0, r2
 8008d52:	4798      	blx	r3
 8008d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d56:	e077      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d58:	6839      	ldr	r1, [r7, #0]
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 fab1 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d60:	7afb      	ldrb	r3, [r7, #11]
 8008d62:	3301      	adds	r3, #1
 8008d64:	72fb      	strb	r3, [r7, #11]
          break;
 8008d66:	e06f      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00b      	beq.n	8008d8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7c12      	ldrb	r2, [r2, #16]
 8008d80:	f107 0108 	add.w	r1, r7, #8
 8008d84:	4610      	mov	r0, r2
 8008d86:	4798      	blx	r3
 8008d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d8a:	e05d      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 fa97 	bl	80092c2 <USBD_CtlError>
            err++;
 8008d94:	7afb      	ldrb	r3, [r7, #11]
 8008d96:	3301      	adds	r3, #1
 8008d98:	72fb      	strb	r3, [r7, #11]
          break;
 8008d9a:	e055      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008da2:	691b      	ldr	r3, [r3, #16]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	7c12      	ldrb	r2, [r2, #16]
 8008db4:	f107 0108 	add.w	r1, r7, #8
 8008db8:	4610      	mov	r0, r2
 8008dba:	4798      	blx	r3
 8008dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dbe:	e043      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dc0:	6839      	ldr	r1, [r7, #0]
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fa7d 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dc8:	7afb      	ldrb	r3, [r7, #11]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8008dce:	e03b      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dd6:	695b      	ldr	r3, [r3, #20]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00b      	beq.n	8008df4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008de2:	695b      	ldr	r3, [r3, #20]
 8008de4:	687a      	ldr	r2, [r7, #4]
 8008de6:	7c12      	ldrb	r2, [r2, #16]
 8008de8:	f107 0108 	add.w	r1, r7, #8
 8008dec:	4610      	mov	r0, r2
 8008dee:	4798      	blx	r3
 8008df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008df2:	e029      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008df4:	6839      	ldr	r1, [r7, #0]
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa63 	bl	80092c2 <USBD_CtlError>
            err++;
 8008dfc:	7afb      	ldrb	r3, [r7, #11]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	72fb      	strb	r3, [r7, #11]
          break;
 8008e02:	e021      	b.n	8008e48 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d00b      	beq.n	8008e28 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e16:	699b      	ldr	r3, [r3, #24]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	7c12      	ldrb	r2, [r2, #16]
 8008e1c:	f107 0108 	add.w	r1, r7, #8
 8008e20:	4610      	mov	r0, r2
 8008e22:	4798      	blx	r3
 8008e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008e26:	e00f      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008e28:	6839      	ldr	r1, [r7, #0]
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fa49 	bl	80092c2 <USBD_CtlError>
            err++;
 8008e30:	7afb      	ldrb	r3, [r7, #11]
 8008e32:	3301      	adds	r3, #1
 8008e34:	72fb      	strb	r3, [r7, #11]
          break;
 8008e36:	e007      	b.n	8008e48 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008e38:	6839      	ldr	r1, [r7, #0]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f000 fa41 	bl	80092c2 <USBD_CtlError>
          err++;
 8008e40:	7afb      	ldrb	r3, [r7, #11]
 8008e42:	3301      	adds	r3, #1
 8008e44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008e46:	bf00      	nop
      }
      break;
 8008e48:	e037      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	7c1b      	ldrb	r3, [r3, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d109      	bne.n	8008e66 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e5a:	f107 0208 	add.w	r2, r7, #8
 8008e5e:	4610      	mov	r0, r2
 8008e60:	4798      	blx	r3
 8008e62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e64:	e029      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa2a 	bl	80092c2 <USBD_CtlError>
        err++;
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	3301      	adds	r3, #1
 8008e72:	72fb      	strb	r3, [r7, #11]
      break;
 8008e74:	e021      	b.n	8008eba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	7c1b      	ldrb	r3, [r3, #16]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d10d      	bne.n	8008e9a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e86:	f107 0208 	add.w	r2, r7, #8
 8008e8a:	4610      	mov	r0, r2
 8008e8c:	4798      	blx	r3
 8008e8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	3301      	adds	r3, #1
 8008e94:	2207      	movs	r2, #7
 8008e96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e98:	e00f      	b.n	8008eba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fa10 	bl	80092c2 <USBD_CtlError>
        err++;
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ea8:	e007      	b.n	8008eba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008eaa:	6839      	ldr	r1, [r7, #0]
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fa08 	bl	80092c2 <USBD_CtlError>
      err++;
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb8:	bf00      	nop
  }

  if (err != 0U)
 8008eba:	7afb      	ldrb	r3, [r7, #11]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11e      	bne.n	8008efe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	88db      	ldrh	r3, [r3, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d016      	beq.n	8008ef6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ec8:	893b      	ldrh	r3, [r7, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d00e      	beq.n	8008eec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	88da      	ldrh	r2, [r3, #6]
 8008ed2:	893b      	ldrh	r3, [r7, #8]
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	bf28      	it	cs
 8008ed8:	4613      	movcs	r3, r2
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	68f9      	ldr	r1, [r7, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f000 fa69 	bl	80093bc <USBD_CtlSendData>
 8008eea:	e009      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008eec:	6839      	ldr	r1, [r7, #0]
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f000 f9e7 	bl	80092c2 <USBD_CtlError>
 8008ef4:	e004      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 faba 	bl	8009470 <USBD_CtlSendStatus>
 8008efc:	e000      	b.n	8008f00 <USBD_GetDescriptor+0x2cc>
    return;
 8008efe:	bf00      	nop
  }
}
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop

08008f08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b084      	sub	sp, #16
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	889b      	ldrh	r3, [r3, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d131      	bne.n	8008f7e <USBD_SetAddress+0x76>
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	88db      	ldrh	r3, [r3, #6]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d12d      	bne.n	8008f7e <USBD_SetAddress+0x76>
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	885b      	ldrh	r3, [r3, #2]
 8008f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8008f28:	d829      	bhi.n	8008f7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	885b      	ldrh	r3, [r3, #2]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008f34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	2b03      	cmp	r3, #3
 8008f40:	d104      	bne.n	8008f4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 f9bc 	bl	80092c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f4a:	e01d      	b.n	8008f88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	7bfa      	ldrb	r2, [r7, #15]
 8008f50:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
 8008f56:	4619      	mov	r1, r3
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f002 f9bb 	bl	800b2d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f000 fa86 	bl	8009470 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d004      	beq.n	8008f74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f72:	e009      	b.n	8008f88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f7c:	e004      	b.n	8008f88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f99e 	bl	80092c2 <USBD_CtlError>
  }
}
 8008f86:	bf00      	nop
 8008f88:	bf00      	nop
 8008f8a:	3710      	adds	r7, #16
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	885b      	ldrh	r3, [r3, #2]
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d905      	bls.n	8008fbc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f985 	bl	80092c2 <USBD_CtlError>
    return USBD_FAIL;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e08c      	b.n	80090d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d002      	beq.n	8008fce <USBD_SetConfig+0x3e>
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d029      	beq.n	8009020 <USBD_SetConfig+0x90>
 8008fcc:	e075      	b.n	80090ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008fce:	4b44      	ldr	r3, [pc, #272]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d020      	beq.n	8009018 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008fd6:	4b42      	ldr	r3, [pc, #264]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	461a      	mov	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80090e0 <USBD_SetConfig+0x150>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7fe ffe3 	bl	8007fb2 <USBD_SetClassConfig>
 8008fec:	4603      	mov	r3, r0
 8008fee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008ff0:	7bfb      	ldrb	r3, [r7, #15]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d008      	beq.n	8009008 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008ff6:	6839      	ldr	r1, [r7, #0]
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f962 	bl	80092c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009006:	e065      	b.n	80090d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fa31 	bl	8009470 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	2203      	movs	r2, #3
 8009012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009016:	e05d      	b.n	80090d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa29 	bl	8009470 <USBD_CtlSendStatus>
      break;
 800901e:	e059      	b.n	80090d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009020:	4b2f      	ldr	r3, [pc, #188]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d112      	bne.n	800904e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009030:	4b2b      	ldr	r3, [pc, #172]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	461a      	mov	r2, r3
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800903a:	4b29      	ldr	r3, [pc, #164]	@ (80090e0 <USBD_SetConfig+0x150>)
 800903c:	781b      	ldrb	r3, [r3, #0]
 800903e:	4619      	mov	r1, r3
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f7fe ffd2 	bl	8007fea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa12 	bl	8009470 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800904c:	e042      	b.n	80090d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800904e:	4b24      	ldr	r3, [pc, #144]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d02a      	beq.n	80090b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	b2db      	uxtb	r3, r3
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f7fe ffc0 	bl	8007fea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800906a:	4b1d      	ldr	r3, [pc, #116]	@ (80090e0 <USBD_SetConfig+0x150>)
 800906c:	781b      	ldrb	r3, [r3, #0]
 800906e:	461a      	mov	r2, r3
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009074:	4b1a      	ldr	r3, [pc, #104]	@ (80090e0 <USBD_SetConfig+0x150>)
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	4619      	mov	r1, r3
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f7fe ff99 	bl	8007fb2 <USBD_SetClassConfig>
 8009080:	4603      	mov	r3, r0
 8009082:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009084:	7bfb      	ldrb	r3, [r7, #15]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00f      	beq.n	80090aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 f918 	bl	80092c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	b2db      	uxtb	r3, r3
 8009098:	4619      	mov	r1, r3
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f7fe ffa5 	bl	8007fea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2202      	movs	r2, #2
 80090a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80090a8:	e014      	b.n	80090d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f000 f9e0 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090b0:	e010      	b.n	80090d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f9dc 	bl	8009470 <USBD_CtlSendStatus>
      break;
 80090b8:	e00c      	b.n	80090d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f900 	bl	80092c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090c2:	4b07      	ldr	r3, [pc, #28]	@ (80090e0 <USBD_SetConfig+0x150>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7fe ff8e 	bl	8007fea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80090ce:	2303      	movs	r3, #3
 80090d0:	73fb      	strb	r3, [r7, #15]
      break;
 80090d2:	bf00      	nop
  }

  return ret;
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20000680 	.word	0x20000680

080090e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b082      	sub	sp, #8
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	88db      	ldrh	r3, [r3, #6]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d004      	beq.n	8009100 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090f6:	6839      	ldr	r1, [r7, #0]
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 f8e2 	bl	80092c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090fe:	e023      	b.n	8009148 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009106:	b2db      	uxtb	r3, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	dc02      	bgt.n	8009112 <USBD_GetConfig+0x2e>
 800910c:	2b00      	cmp	r3, #0
 800910e:	dc03      	bgt.n	8009118 <USBD_GetConfig+0x34>
 8009110:	e015      	b.n	800913e <USBD_GetConfig+0x5a>
 8009112:	2b03      	cmp	r3, #3
 8009114:	d00b      	beq.n	800912e <USBD_GetConfig+0x4a>
 8009116:	e012      	b.n	800913e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3308      	adds	r3, #8
 8009122:	2201      	movs	r2, #1
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f948 	bl	80093bc <USBD_CtlSendData>
        break;
 800912c:	e00c      	b.n	8009148 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	3304      	adds	r3, #4
 8009132:	2201      	movs	r2, #1
 8009134:	4619      	mov	r1, r3
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f940 	bl	80093bc <USBD_CtlSendData>
        break;
 800913c:	e004      	b.n	8009148 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f8be 	bl	80092c2 <USBD_CtlError>
        break;
 8009146:	bf00      	nop
}
 8009148:	bf00      	nop
 800914a:	3708      	adds	r7, #8
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
 8009158:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009160:	b2db      	uxtb	r3, r3
 8009162:	3b01      	subs	r3, #1
 8009164:	2b02      	cmp	r3, #2
 8009166:	d81e      	bhi.n	80091a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	88db      	ldrh	r3, [r3, #6]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d004      	beq.n	800917a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f8a5 	bl	80092c2 <USBD_CtlError>
        break;
 8009178:	e01a      	b.n	80091b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d005      	beq.n	8009196 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	f043 0202 	orr.w	r2, r3, #2
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	330c      	adds	r3, #12
 800919a:	2202      	movs	r2, #2
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f90c 	bl	80093bc <USBD_CtlSendData>
      break;
 80091a4:	e004      	b.n	80091b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 f88a 	bl	80092c2 <USBD_CtlError>
      break;
 80091ae:	bf00      	nop
  }
}
 80091b0:	bf00      	nop
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	885b      	ldrh	r3, [r3, #2]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d107      	bne.n	80091da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2201      	movs	r2, #1
 80091ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f94c 	bl	8009470 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80091d8:	e013      	b.n	8009202 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	885b      	ldrh	r3, [r3, #2]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d10b      	bne.n	80091fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	889b      	ldrh	r3, [r3, #4]
 80091e6:	0a1b      	lsrs	r3, r3, #8
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	b2da      	uxtb	r2, r3
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f000 f93c 	bl	8009470 <USBD_CtlSendStatus>
}
 80091f8:	e003      	b.n	8009202 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80091fa:	6839      	ldr	r1, [r7, #0]
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 f860 	bl	80092c2 <USBD_CtlError>
}
 8009202:	bf00      	nop
 8009204:	3708      	adds	r7, #8
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}

0800920a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800920a:	b580      	push	{r7, lr}
 800920c:	b082      	sub	sp, #8
 800920e:	af00      	add	r7, sp, #0
 8009210:	6078      	str	r0, [r7, #4]
 8009212:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800921a:	b2db      	uxtb	r3, r3
 800921c:	3b01      	subs	r3, #1
 800921e:	2b02      	cmp	r3, #2
 8009220:	d80b      	bhi.n	800923a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	885b      	ldrh	r3, [r3, #2]
 8009226:	2b01      	cmp	r3, #1
 8009228:	d10c      	bne.n	8009244 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 f91c 	bl	8009470 <USBD_CtlSendStatus>
      }
      break;
 8009238:	e004      	b.n	8009244 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f840 	bl	80092c2 <USBD_CtlError>
      break;
 8009242:	e000      	b.n	8009246 <USBD_ClrFeature+0x3c>
      break;
 8009244:	bf00      	nop
  }
}
 8009246:	bf00      	nop
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b084      	sub	sp, #16
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	781a      	ldrb	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	781a      	ldrb	r2, [r3, #0]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	3301      	adds	r3, #1
 8009276:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009278:	68f8      	ldr	r0, [r7, #12]
 800927a:	f7ff fa40 	bl	80086fe <SWAPBYTE>
 800927e:	4603      	mov	r3, r0
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	3301      	adds	r3, #1
 800928a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	3301      	adds	r3, #1
 8009290:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f7ff fa33 	bl	80086fe <SWAPBYTE>
 8009298:	4603      	mov	r3, r0
 800929a:	461a      	mov	r2, r3
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	3301      	adds	r3, #1
 80092a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	3301      	adds	r3, #1
 80092aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f7ff fa26 	bl	80086fe <SWAPBYTE>
 80092b2:	4603      	mov	r3, r0
 80092b4:	461a      	mov	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	80da      	strh	r2, [r3, #6]
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}

080092c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	b082      	sub	sp, #8
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
 80092ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80092cc:	2180      	movs	r1, #128	@ 0x80
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f001 ff96 	bl	800b200 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80092d4:	2100      	movs	r1, #0
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f001 ff92 	bl	800b200 <USBD_LL_StallEP>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b086      	sub	sp, #24
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	60f8      	str	r0, [r7, #12]
 80092ec:	60b9      	str	r1, [r7, #8]
 80092ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d042      	beq.n	8009380 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80092fe:	6938      	ldr	r0, [r7, #16]
 8009300:	f000 f842 	bl	8009388 <USBD_GetLen>
 8009304:	4603      	mov	r3, r0
 8009306:	3301      	adds	r3, #1
 8009308:	005b      	lsls	r3, r3, #1
 800930a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800930e:	d808      	bhi.n	8009322 <USBD_GetString+0x3e>
 8009310:	6938      	ldr	r0, [r7, #16]
 8009312:	f000 f839 	bl	8009388 <USBD_GetLen>
 8009316:	4603      	mov	r3, r0
 8009318:	3301      	adds	r3, #1
 800931a:	b29b      	uxth	r3, r3
 800931c:	005b      	lsls	r3, r3, #1
 800931e:	b29a      	uxth	r2, r3
 8009320:	e001      	b.n	8009326 <USBD_GetString+0x42>
 8009322:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800932a:	7dfb      	ldrb	r3, [r7, #23]
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	4413      	add	r3, r2
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	7812      	ldrb	r2, [r2, #0]
 8009334:	701a      	strb	r2, [r3, #0]
  idx++;
 8009336:	7dfb      	ldrb	r3, [r7, #23]
 8009338:	3301      	adds	r3, #1
 800933a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800933c:	7dfb      	ldrb	r3, [r7, #23]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4413      	add	r3, r2
 8009342:	2203      	movs	r2, #3
 8009344:	701a      	strb	r2, [r3, #0]
  idx++;
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	3301      	adds	r3, #1
 800934a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800934c:	e013      	b.n	8009376 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800934e:	7dfb      	ldrb	r3, [r7, #23]
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	4413      	add	r3, r2
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	7812      	ldrb	r2, [r2, #0]
 8009358:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	3301      	adds	r3, #1
 800935e:	613b      	str	r3, [r7, #16]
    idx++;
 8009360:	7dfb      	ldrb	r3, [r7, #23]
 8009362:	3301      	adds	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009366:	7dfb      	ldrb	r3, [r7, #23]
 8009368:	68ba      	ldr	r2, [r7, #8]
 800936a:	4413      	add	r3, r2
 800936c:	2200      	movs	r2, #0
 800936e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009370:	7dfb      	ldrb	r3, [r7, #23]
 8009372:	3301      	adds	r3, #1
 8009374:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d1e7      	bne.n	800934e <USBD_GetString+0x6a>
 800937e:	e000      	b.n	8009382 <USBD_GetString+0x9e>
    return;
 8009380:	bf00      	nop
  }
}
 8009382:	3718      	adds	r7, #24
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009390:	2300      	movs	r3, #0
 8009392:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009398:	e005      	b.n	80093a6 <USBD_GetLen+0x1e>
  {
    len++;
 800939a:	7bfb      	ldrb	r3, [r7, #15]
 800939c:	3301      	adds	r3, #1
 800939e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	781b      	ldrb	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1f5      	bne.n	800939a <USBD_GetLen+0x12>
  }

  return len;
 80093ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr

080093bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	2202      	movs	r2, #2
 80093cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	2100      	movs	r1, #0
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f001 ff95 	bl	800b312 <USBD_LL_Transmit>

  return USBD_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f001 ff84 	bl	800b312 <USBD_LL_Transmit>

  return USBD_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2203      	movs	r2, #3
 8009424:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	2100      	movs	r1, #0
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f001 ff88 	bl	800b354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3710      	adds	r7, #16
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b084      	sub	sp, #16
 8009452:	af00      	add	r7, sp, #0
 8009454:	60f8      	str	r0, [r7, #12]
 8009456:	60b9      	str	r1, [r7, #8]
 8009458:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	68ba      	ldr	r2, [r7, #8]
 800945e:	2100      	movs	r1, #0
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f001 ff77 	bl	800b354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3710      	adds	r7, #16
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b082      	sub	sp, #8
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2204      	movs	r2, #4
 800947c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009480:	2300      	movs	r3, #0
 8009482:	2200      	movs	r2, #0
 8009484:	2100      	movs	r1, #0
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f001 ff43 	bl	800b312 <USBD_LL_Transmit>

  return USBD_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	3708      	adds	r7, #8
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}

08009496 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b082      	sub	sp, #8
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2205      	movs	r2, #5
 80094a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094a6:	2300      	movs	r3, #0
 80094a8:	2200      	movs	r2, #0
 80094aa:	2100      	movs	r1, #0
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 ff51 	bl	800b354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3708      	adds	r7, #8
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	4603      	mov	r3, r0
 80094c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80094ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80094ce:	2b84      	cmp	r3, #132	@ 0x84
 80094d0:	d005      	beq.n	80094de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80094d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	4413      	add	r3, r2
 80094da:	3303      	adds	r3, #3
 80094dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80094de:	68fb      	ldr	r3, [r7, #12]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3714      	adds	r7, #20
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr

080094ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80094f0:	f000 faf0 	bl	8009ad4 <vTaskStartScheduler>
  
  return osOK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	bd80      	pop	{r7, pc}

080094fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80094fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094fc:	b089      	sub	sp, #36	@ 0x24
 80094fe:	af04      	add	r7, sp, #16
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	695b      	ldr	r3, [r3, #20]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d020      	beq.n	800954e <osThreadCreate+0x54>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	699b      	ldr	r3, [r3, #24]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d01c      	beq.n	800954e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	685c      	ldr	r4, [r3, #4]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691e      	ldr	r6, [r3, #16]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009526:	4618      	mov	r0, r3
 8009528:	f7ff ffc8 	bl	80094bc <makeFreeRtosPriority>
 800952c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	695b      	ldr	r3, [r3, #20]
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009536:	9202      	str	r2, [sp, #8]
 8009538:	9301      	str	r3, [sp, #4]
 800953a:	9100      	str	r1, [sp, #0]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	4632      	mov	r2, r6
 8009540:	4629      	mov	r1, r5
 8009542:	4620      	mov	r0, r4
 8009544:	f000 f8ed 	bl	8009722 <xTaskCreateStatic>
 8009548:	4603      	mov	r3, r0
 800954a:	60fb      	str	r3, [r7, #12]
 800954c:	e01c      	b.n	8009588 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685c      	ldr	r4, [r3, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800955a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009562:	4618      	mov	r0, r3
 8009564:	f7ff ffaa 	bl	80094bc <makeFreeRtosPriority>
 8009568:	4602      	mov	r2, r0
 800956a:	f107 030c 	add.w	r3, r7, #12
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	9200      	str	r2, [sp, #0]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	4632      	mov	r2, r6
 8009576:	4629      	mov	r1, r5
 8009578:	4620      	mov	r0, r4
 800957a:	f000 f932 	bl	80097e2 <xTaskCreate>
 800957e:	4603      	mov	r3, r0
 8009580:	2b01      	cmp	r3, #1
 8009582:	d001      	beq.n	8009588 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009584:	2300      	movs	r3, #0
 8009586:	e000      	b.n	800958a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009588:	68fb      	ldr	r3, [r7, #12]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009592 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009592:	b580      	push	{r7, lr}
 8009594:	b084      	sub	sp, #16
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <osDelay+0x16>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	e000      	b.n	80095aa <osDelay+0x18>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 fa5c 	bl	8009a68 <vTaskDelay>
  
  return osOK;
 80095b0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3710      	adds	r7, #16
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f103 0208 	add.w	r2, r3, #8
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f04f 32ff 	mov.w	r2, #4294967295
 80095d2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f103 0208 	add.w	r2, r3, #8
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	f103 0208 	add.w	r2, r3, #8
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095ee:	bf00      	nop
 80095f0:	370c      	adds	r7, #12
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095fa:	b480      	push	{r7}
 80095fc:	b083      	sub	sp, #12
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689a      	ldr	r2, [r3, #8]
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	683a      	ldr	r2, [r7, #0]
 8009638:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	683a      	ldr	r2, [r7, #0]
 800963e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009640:	683b      	ldr	r3, [r7, #0]
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]
}
 8009650:	bf00      	nop
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d103      	bne.n	800967c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	691b      	ldr	r3, [r3, #16]
 8009678:	60fb      	str	r3, [r7, #12]
 800967a:	e00c      	b.n	8009696 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	3308      	adds	r3, #8
 8009680:	60fb      	str	r3, [r7, #12]
 8009682:	e002      	b.n	800968a <vListInsert+0x2e>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	60fb      	str	r3, [r7, #12]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68ba      	ldr	r2, [r7, #8]
 8009692:	429a      	cmp	r2, r3
 8009694:	d2f6      	bcs.n	8009684 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	685a      	ldr	r2, [r3, #4]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	68fa      	ldr	r2, [r7, #12]
 80096aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	683a      	ldr	r2, [r7, #0]
 80096b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	1c5a      	adds	r2, r3, #1
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	601a      	str	r2, [r3, #0]
}
 80096c2:	bf00      	nop
 80096c4:	3714      	adds	r7, #20
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80096ce:	b480      	push	{r7}
 80096d0:	b085      	sub	sp, #20
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	685b      	ldr	r3, [r3, #4]
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	6892      	ldr	r2, [r2, #8]
 80096e4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	687a      	ldr	r2, [r7, #4]
 80096ec:	6852      	ldr	r2, [r2, #4]
 80096ee:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d103      	bne.n	8009702 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689a      	ldr	r2, [r3, #8]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2200      	movs	r2, #0
 8009706:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009722:	b580      	push	{r7, lr}
 8009724:	b08e      	sub	sp, #56	@ 0x38
 8009726:	af04      	add	r7, sp, #16
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
 800972e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10b      	bne.n	800974e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800974e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009750:	2b00      	cmp	r3, #0
 8009752:	d10b      	bne.n	800976c <xTaskCreateStatic+0x4a>
	__asm volatile
 8009754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	61fb      	str	r3, [r7, #28]
}
 8009766:	bf00      	nop
 8009768:	bf00      	nop
 800976a:	e7fd      	b.n	8009768 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800976c:	2358      	movs	r3, #88	@ 0x58
 800976e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	2b58      	cmp	r3, #88	@ 0x58
 8009774:	d00b      	beq.n	800978e <xTaskCreateStatic+0x6c>
	__asm volatile
 8009776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800977a:	f383 8811 	msr	BASEPRI, r3
 800977e:	f3bf 8f6f 	isb	sy
 8009782:	f3bf 8f4f 	dsb	sy
 8009786:	61bb      	str	r3, [r7, #24]
}
 8009788:	bf00      	nop
 800978a:	bf00      	nop
 800978c:	e7fd      	b.n	800978a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800978e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009792:	2b00      	cmp	r3, #0
 8009794:	d01e      	beq.n	80097d4 <xTaskCreateStatic+0xb2>
 8009796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01b      	beq.n	80097d4 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800979c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800979e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80097a4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	2202      	movs	r2, #2
 80097aa:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097ae:	2300      	movs	r3, #0
 80097b0:	9303      	str	r3, [sp, #12]
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	9302      	str	r3, [sp, #8]
 80097b6:	f107 0314 	add.w	r3, r7, #20
 80097ba:	9301      	str	r3, [sp, #4]
 80097bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	68b9      	ldr	r1, [r7, #8]
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 f850 	bl	800986c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80097ce:	f000 f8e1 	bl	8009994 <prvAddNewTaskToReadyList>
 80097d2:	e001      	b.n	80097d8 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80097d8:	697b      	ldr	r3, [r7, #20]
	}
 80097da:	4618      	mov	r0, r3
 80097dc:	3728      	adds	r7, #40	@ 0x28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}

080097e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b08c      	sub	sp, #48	@ 0x30
 80097e6:	af04      	add	r7, sp, #16
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	603b      	str	r3, [r7, #0]
 80097ee:	4613      	mov	r3, r2
 80097f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80097f2:	88fb      	ldrh	r3, [r7, #6]
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f000 ff06 	bl	800a608 <pvPortMalloc>
 80097fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00e      	beq.n	8009822 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009804:	2058      	movs	r0, #88	@ 0x58
 8009806:	f000 feff 	bl	800a608 <pvPortMalloc>
 800980a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d003      	beq.n	800981a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009812:	69fb      	ldr	r3, [r7, #28]
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	631a      	str	r2, [r3, #48]	@ 0x30
 8009818:	e005      	b.n	8009826 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800981a:	6978      	ldr	r0, [r7, #20]
 800981c:	f000 ffc8 	bl	800a7b0 <vPortFree>
 8009820:	e001      	b.n	8009826 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009822:	2300      	movs	r3, #0
 8009824:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d017      	beq.n	800985c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	2200      	movs	r2, #0
 8009830:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009834:	88fa      	ldrh	r2, [r7, #6]
 8009836:	2300      	movs	r3, #0
 8009838:	9303      	str	r3, [sp, #12]
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	9302      	str	r3, [sp, #8]
 800983e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f80e 	bl	800986c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009850:	69f8      	ldr	r0, [r7, #28]
 8009852:	f000 f89f 	bl	8009994 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009856:	2301      	movs	r3, #1
 8009858:	61bb      	str	r3, [r7, #24]
 800985a:	e002      	b.n	8009862 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800985c:	f04f 33ff 	mov.w	r3, #4294967295
 8009860:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009862:	69bb      	ldr	r3, [r7, #24]
	}
 8009864:	4618      	mov	r0, r3
 8009866:	3720      	adds	r7, #32
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af00      	add	r7, sp, #0
 8009872:	60f8      	str	r0, [r7, #12]
 8009874:	60b9      	str	r1, [r7, #8]
 8009876:	607a      	str	r2, [r7, #4]
 8009878:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800987a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800987c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	461a      	mov	r2, r3
 8009884:	21a5      	movs	r1, #165	@ 0xa5
 8009886:	f001 fddd 	bl	800b444 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800988a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800988c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009894:	3b01      	subs	r3, #1
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	4413      	add	r3, r2
 800989a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800989c:	69bb      	ldr	r3, [r7, #24]
 800989e:	f023 0307 	bic.w	r3, r3, #7
 80098a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098a4:	69bb      	ldr	r3, [r7, #24]
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00b      	beq.n	80098c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	617b      	str	r3, [r7, #20]
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	e7fd      	b.n	80098c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d01f      	beq.n	800990c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098cc:	2300      	movs	r3, #0
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e012      	b.n	80098f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4413      	add	r3, r2
 80098d8:	7819      	ldrb	r1, [r3, #0]
 80098da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	4413      	add	r3, r2
 80098e0:	3334      	adds	r3, #52	@ 0x34
 80098e2:	460a      	mov	r2, r1
 80098e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80098e6:	68ba      	ldr	r2, [r7, #8]
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	4413      	add	r3, r2
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d006      	beq.n	8009900 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	3301      	adds	r3, #1
 80098f6:	61fb      	str	r3, [r7, #28]
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	2b0f      	cmp	r3, #15
 80098fc:	d9e9      	bls.n	80098d2 <prvInitialiseNewTask+0x66>
 80098fe:	e000      	b.n	8009902 <prvInitialiseNewTask+0x96>
			{
				break;
 8009900:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009904:	2200      	movs	r2, #0
 8009906:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800990a:	e003      	b.n	8009914 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800990c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009916:	2b06      	cmp	r3, #6
 8009918:	d901      	bls.n	800991e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800991a:	2306      	movs	r3, #6
 800991c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009922:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009926:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009928:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800992a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800992c:	2200      	movs	r2, #0
 800992e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7ff fe60 	bl	80095fa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800993a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800993c:	3318      	adds	r3, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff fe5b 	bl	80095fa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009948:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800994a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800994c:	f1c3 0207 	rsb	r2, r3, #7
 8009950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009952:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009958:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	2200      	movs	r2, #0
 800995e:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	68f9      	ldr	r1, [r7, #12]
 8009972:	69b8      	ldr	r0, [r7, #24]
 8009974:	f000 fc36 	bl	800a1e4 <pxPortInitialiseStack>
 8009978:	4602      	mov	r2, r0
 800997a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800997c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800997e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009980:	2b00      	cmp	r3, #0
 8009982:	d002      	beq.n	800998a <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009986:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009988:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800998a:	bf00      	nop
 800998c:	3720      	adds	r7, #32
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
	...

08009994 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800999c:	f000 fd54 	bl	800a448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099a0:	4b2a      	ldr	r3, [pc, #168]	@ (8009a4c <prvAddNewTaskToReadyList+0xb8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	3301      	adds	r3, #1
 80099a6:	4a29      	ldr	r2, [pc, #164]	@ (8009a4c <prvAddNewTaskToReadyList+0xb8>)
 80099a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099aa:	4b29      	ldr	r3, [pc, #164]	@ (8009a50 <prvAddNewTaskToReadyList+0xbc>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d109      	bne.n	80099c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099b2:	4a27      	ldr	r2, [pc, #156]	@ (8009a50 <prvAddNewTaskToReadyList+0xbc>)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099b8:	4b24      	ldr	r3, [pc, #144]	@ (8009a4c <prvAddNewTaskToReadyList+0xb8>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d110      	bne.n	80099e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099c0:	f000 faec 	bl	8009f9c <prvInitialiseTaskLists>
 80099c4:	e00d      	b.n	80099e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099c6:	4b23      	ldr	r3, [pc, #140]	@ (8009a54 <prvAddNewTaskToReadyList+0xc0>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d109      	bne.n	80099e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099ce:	4b20      	ldr	r3, [pc, #128]	@ (8009a50 <prvAddNewTaskToReadyList+0xbc>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d8:	429a      	cmp	r2, r3
 80099da:	d802      	bhi.n	80099e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80099dc:	4a1c      	ldr	r2, [pc, #112]	@ (8009a50 <prvAddNewTaskToReadyList+0xbc>)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80099e2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a58 <prvAddNewTaskToReadyList+0xc4>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3301      	adds	r3, #1
 80099e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009a58 <prvAddNewTaskToReadyList+0xc4>)
 80099ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099f0:	2201      	movs	r2, #1
 80099f2:	409a      	lsls	r2, r3
 80099f4:	4b19      	ldr	r3, [pc, #100]	@ (8009a5c <prvAddNewTaskToReadyList+0xc8>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	4a18      	ldr	r2, [pc, #96]	@ (8009a5c <prvAddNewTaskToReadyList+0xc8>)
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a02:	4613      	mov	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4a15      	ldr	r2, [pc, #84]	@ (8009a60 <prvAddNewTaskToReadyList+0xcc>)
 8009a0c:	441a      	add	r2, r3
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	3304      	adds	r3, #4
 8009a12:	4619      	mov	r1, r3
 8009a14:	4610      	mov	r0, r2
 8009a16:	f7ff fdfd 	bl	8009614 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a1a:	f000 fd47 	bl	800a4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a54 <prvAddNewTaskToReadyList+0xc0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00e      	beq.n	8009a44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a26:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <prvAddNewTaskToReadyList+0xbc>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d207      	bcs.n	8009a44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a34:	4b0b      	ldr	r3, [pc, #44]	@ (8009a64 <prvAddNewTaskToReadyList+0xd0>)
 8009a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a3a:	601a      	str	r2, [r3, #0]
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	20000784 	.word	0x20000784
 8009a50:	20000684 	.word	0x20000684
 8009a54:	20000790 	.word	0x20000790
 8009a58:	200007a0 	.word	0x200007a0
 8009a5c:	2000078c 	.word	0x2000078c
 8009a60:	20000688 	.word	0x20000688
 8009a64:	e000ed04 	.word	0xe000ed04

08009a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a70:	2300      	movs	r3, #0
 8009a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d018      	beq.n	8009aac <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a7a:	4b14      	ldr	r3, [pc, #80]	@ (8009acc <vTaskDelay+0x64>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d00b      	beq.n	8009a9a <vTaskDelay+0x32>
	__asm volatile
 8009a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	60bb      	str	r3, [r7, #8]
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	e7fd      	b.n	8009a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a9a:	f000 f87d 	bl	8009b98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 fb39 	bl	800a118 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009aa6:	f000 f885 	bl	8009bb4 <xTaskResumeAll>
 8009aaa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d107      	bne.n	8009ac2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009ab2:	4b07      	ldr	r3, [pc, #28]	@ (8009ad0 <vTaskDelay+0x68>)
 8009ab4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	f3bf 8f4f 	dsb	sy
 8009abe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ac2:	bf00      	nop
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200007ac 	.word	0x200007ac
 8009ad0:	e000ed04 	.word	0xe000ed04

08009ad4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	@ 0x28
 8009ad8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009ae2:	463a      	mov	r2, r7
 8009ae4:	1d39      	adds	r1, r7, #4
 8009ae6:	f107 0308 	add.w	r3, r7, #8
 8009aea:	4618      	mov	r0, r3
 8009aec:	f7f6 fd1a 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	9202      	str	r2, [sp, #8]
 8009af8:	9301      	str	r3, [sp, #4]
 8009afa:	2300      	movs	r3, #0
 8009afc:	9300      	str	r3, [sp, #0]
 8009afe:	2300      	movs	r3, #0
 8009b00:	460a      	mov	r2, r1
 8009b02:	491f      	ldr	r1, [pc, #124]	@ (8009b80 <vTaskStartScheduler+0xac>)
 8009b04:	481f      	ldr	r0, [pc, #124]	@ (8009b84 <vTaskStartScheduler+0xb0>)
 8009b06:	f7ff fe0c 	bl	8009722 <xTaskCreateStatic>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	4a1e      	ldr	r2, [pc, #120]	@ (8009b88 <vTaskStartScheduler+0xb4>)
 8009b0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b10:	4b1d      	ldr	r3, [pc, #116]	@ (8009b88 <vTaskStartScheduler+0xb4>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d002      	beq.n	8009b1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	617b      	str	r3, [r7, #20]
 8009b1c:	e001      	b.n	8009b22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d116      	bne.n	8009b56 <vTaskStartScheduler+0x82>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b2c:	f383 8811 	msr	BASEPRI, r3
 8009b30:	f3bf 8f6f 	isb	sy
 8009b34:	f3bf 8f4f 	dsb	sy
 8009b38:	613b      	str	r3, [r7, #16]
}
 8009b3a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b3c:	4b13      	ldr	r3, [pc, #76]	@ (8009b8c <vTaskStartScheduler+0xb8>)
 8009b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b42:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b44:	4b12      	ldr	r3, [pc, #72]	@ (8009b90 <vTaskStartScheduler+0xbc>)
 8009b46:	2201      	movs	r2, #1
 8009b48:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b4a:	4b12      	ldr	r3, [pc, #72]	@ (8009b94 <vTaskStartScheduler+0xc0>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b50:	f000 fbd6 	bl	800a300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b54:	e00f      	b.n	8009b76 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b5c:	d10b      	bne.n	8009b76 <vTaskStartScheduler+0xa2>
	__asm volatile
 8009b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b62:	f383 8811 	msr	BASEPRI, r3
 8009b66:	f3bf 8f6f 	isb	sy
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	60fb      	str	r3, [r7, #12]
}
 8009b70:	bf00      	nop
 8009b72:	bf00      	nop
 8009b74:	e7fd      	b.n	8009b72 <vTaskStartScheduler+0x9e>
}
 8009b76:	bf00      	nop
 8009b78:	3718      	adds	r7, #24
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	0800b4ec 	.word	0x0800b4ec
 8009b84:	08009f69 	.word	0x08009f69
 8009b88:	200007a8 	.word	0x200007a8
 8009b8c:	200007a4 	.word	0x200007a4
 8009b90:	20000790 	.word	0x20000790
 8009b94:	20000788 	.word	0x20000788

08009b98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b98:	b480      	push	{r7}
 8009b9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b9c:	4b04      	ldr	r3, [pc, #16]	@ (8009bb0 <vTaskSuspendAll+0x18>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	4a03      	ldr	r2, [pc, #12]	@ (8009bb0 <vTaskSuspendAll+0x18>)
 8009ba4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ba6:	bf00      	nop
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bae:	4770      	bx	lr
 8009bb0:	200007ac 	.word	0x200007ac

08009bb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009bc2:	4b42      	ldr	r3, [pc, #264]	@ (8009ccc <xTaskResumeAll+0x118>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10b      	bne.n	8009be2 <xTaskResumeAll+0x2e>
	__asm volatile
 8009bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bce:	f383 8811 	msr	BASEPRI, r3
 8009bd2:	f3bf 8f6f 	isb	sy
 8009bd6:	f3bf 8f4f 	dsb	sy
 8009bda:	603b      	str	r3, [r7, #0]
}
 8009bdc:	bf00      	nop
 8009bde:	bf00      	nop
 8009be0:	e7fd      	b.n	8009bde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009be2:	f000 fc31 	bl	800a448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009be6:	4b39      	ldr	r3, [pc, #228]	@ (8009ccc <xTaskResumeAll+0x118>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	3b01      	subs	r3, #1
 8009bec:	4a37      	ldr	r2, [pc, #220]	@ (8009ccc <xTaskResumeAll+0x118>)
 8009bee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bf0:	4b36      	ldr	r3, [pc, #216]	@ (8009ccc <xTaskResumeAll+0x118>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d161      	bne.n	8009cbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009bf8:	4b35      	ldr	r3, [pc, #212]	@ (8009cd0 <xTaskResumeAll+0x11c>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d05d      	beq.n	8009cbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c00:	e02e      	b.n	8009c60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c02:	4b34      	ldr	r3, [pc, #208]	@ (8009cd4 <xTaskResumeAll+0x120>)
 8009c04:	68db      	ldr	r3, [r3, #12]
 8009c06:	68db      	ldr	r3, [r3, #12]
 8009c08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3318      	adds	r3, #24
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff fd5d 	bl	80096ce <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	3304      	adds	r3, #4
 8009c18:	4618      	mov	r0, r3
 8009c1a:	f7ff fd58 	bl	80096ce <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c22:	2201      	movs	r2, #1
 8009c24:	409a      	lsls	r2, r3
 8009c26:	4b2c      	ldr	r3, [pc, #176]	@ (8009cd8 <xTaskResumeAll+0x124>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4313      	orrs	r3, r2
 8009c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8009cd8 <xTaskResumeAll+0x124>)
 8009c2e:	6013      	str	r3, [r2, #0]
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c34:	4613      	mov	r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	4413      	add	r3, r2
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4a27      	ldr	r2, [pc, #156]	@ (8009cdc <xTaskResumeAll+0x128>)
 8009c3e:	441a      	add	r2, r3
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3304      	adds	r3, #4
 8009c44:	4619      	mov	r1, r3
 8009c46:	4610      	mov	r0, r2
 8009c48:	f7ff fce4 	bl	8009614 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c50:	4b23      	ldr	r3, [pc, #140]	@ (8009ce0 <xTaskResumeAll+0x12c>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d302      	bcc.n	8009c60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c5a:	4b22      	ldr	r3, [pc, #136]	@ (8009ce4 <xTaskResumeAll+0x130>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c60:	4b1c      	ldr	r3, [pc, #112]	@ (8009cd4 <xTaskResumeAll+0x120>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d1cc      	bne.n	8009c02 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d001      	beq.n	8009c72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c6e:	f000 fa33 	bl	800a0d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c72:	4b1d      	ldr	r3, [pc, #116]	@ (8009ce8 <xTaskResumeAll+0x134>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d010      	beq.n	8009ca0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c7e:	f000 f837 	bl	8009cf0 <xTaskIncrementTick>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d002      	beq.n	8009c8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c88:	4b16      	ldr	r3, [pc, #88]	@ (8009ce4 <xTaskResumeAll+0x130>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	3b01      	subs	r3, #1
 8009c92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1f1      	bne.n	8009c7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009c9a:	4b13      	ldr	r3, [pc, #76]	@ (8009ce8 <xTaskResumeAll+0x134>)
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ca0:	4b10      	ldr	r3, [pc, #64]	@ (8009ce4 <xTaskResumeAll+0x130>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d009      	beq.n	8009cbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cac:	4b0f      	ldr	r3, [pc, #60]	@ (8009cec <xTaskResumeAll+0x138>)
 8009cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cb2:	601a      	str	r2, [r3, #0]
 8009cb4:	f3bf 8f4f 	dsb	sy
 8009cb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cbc:	f000 fbf6 	bl	800a4ac <vPortExitCritical>

	return xAlreadyYielded;
 8009cc0:	68bb      	ldr	r3, [r7, #8]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3710      	adds	r7, #16
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	200007ac 	.word	0x200007ac
 8009cd0:	20000784 	.word	0x20000784
 8009cd4:	20000744 	.word	0x20000744
 8009cd8:	2000078c 	.word	0x2000078c
 8009cdc:	20000688 	.word	0x20000688
 8009ce0:	20000684 	.word	0x20000684
 8009ce4:	20000798 	.word	0x20000798
 8009ce8:	20000794 	.word	0x20000794
 8009cec:	e000ed04 	.word	0xe000ed04

08009cf0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8009e38 <xTaskIncrementTick+0x148>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f040 808f 	bne.w	8009e22 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d04:	4b4d      	ldr	r3, [pc, #308]	@ (8009e3c <xTaskIncrementTick+0x14c>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8009e3c <xTaskIncrementTick+0x14c>)
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d121      	bne.n	8009d5c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d18:	4b49      	ldr	r3, [pc, #292]	@ (8009e40 <xTaskIncrementTick+0x150>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00b      	beq.n	8009d3a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d26:	f383 8811 	msr	BASEPRI, r3
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	f3bf 8f4f 	dsb	sy
 8009d32:	603b      	str	r3, [r7, #0]
}
 8009d34:	bf00      	nop
 8009d36:	bf00      	nop
 8009d38:	e7fd      	b.n	8009d36 <xTaskIncrementTick+0x46>
 8009d3a:	4b41      	ldr	r3, [pc, #260]	@ (8009e40 <xTaskIncrementTick+0x150>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	60fb      	str	r3, [r7, #12]
 8009d40:	4b40      	ldr	r3, [pc, #256]	@ (8009e44 <xTaskIncrementTick+0x154>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a3e      	ldr	r2, [pc, #248]	@ (8009e40 <xTaskIncrementTick+0x150>)
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	4a3e      	ldr	r2, [pc, #248]	@ (8009e44 <xTaskIncrementTick+0x154>)
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	6013      	str	r3, [r2, #0]
 8009d4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009e48 <xTaskIncrementTick+0x158>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	3301      	adds	r3, #1
 8009d54:	4a3c      	ldr	r2, [pc, #240]	@ (8009e48 <xTaskIncrementTick+0x158>)
 8009d56:	6013      	str	r3, [r2, #0]
 8009d58:	f000 f9be 	bl	800a0d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d5c:	4b3b      	ldr	r3, [pc, #236]	@ (8009e4c <xTaskIncrementTick+0x15c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	693a      	ldr	r2, [r7, #16]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d348      	bcc.n	8009df8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d66:	4b36      	ldr	r3, [pc, #216]	@ (8009e40 <xTaskIncrementTick+0x150>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d104      	bne.n	8009d7a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d70:	4b36      	ldr	r3, [pc, #216]	@ (8009e4c <xTaskIncrementTick+0x15c>)
 8009d72:	f04f 32ff 	mov.w	r2, #4294967295
 8009d76:	601a      	str	r2, [r3, #0]
					break;
 8009d78:	e03e      	b.n	8009df8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d7a:	4b31      	ldr	r3, [pc, #196]	@ (8009e40 <xTaskIncrementTick+0x150>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68db      	ldr	r3, [r3, #12]
 8009d80:	68db      	ldr	r3, [r3, #12]
 8009d82:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	429a      	cmp	r2, r3
 8009d90:	d203      	bcs.n	8009d9a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d92:	4a2e      	ldr	r2, [pc, #184]	@ (8009e4c <xTaskIncrementTick+0x15c>)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d98:	e02e      	b.n	8009df8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f7ff fc95 	bl	80096ce <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d004      	beq.n	8009db6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3318      	adds	r3, #24
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7ff fc8c 	bl	80096ce <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dba:	2201      	movs	r2, #1
 8009dbc:	409a      	lsls	r2, r3
 8009dbe:	4b24      	ldr	r3, [pc, #144]	@ (8009e50 <xTaskIncrementTick+0x160>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	4a22      	ldr	r2, [pc, #136]	@ (8009e50 <xTaskIncrementTick+0x160>)
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dcc:	4613      	mov	r3, r2
 8009dce:	009b      	lsls	r3, r3, #2
 8009dd0:	4413      	add	r3, r2
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8009e54 <xTaskIncrementTick+0x164>)
 8009dd6:	441a      	add	r2, r3
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	3304      	adds	r3, #4
 8009ddc:	4619      	mov	r1, r3
 8009dde:	4610      	mov	r0, r2
 8009de0:	f7ff fc18 	bl	8009614 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009de8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e58 <xTaskIncrementTick+0x168>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d3b9      	bcc.n	8009d66 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009df2:	2301      	movs	r3, #1
 8009df4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009df6:	e7b6      	b.n	8009d66 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009df8:	4b17      	ldr	r3, [pc, #92]	@ (8009e58 <xTaskIncrementTick+0x168>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dfe:	4915      	ldr	r1, [pc, #84]	@ (8009e54 <xTaskIncrementTick+0x164>)
 8009e00:	4613      	mov	r3, r2
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	009b      	lsls	r3, r3, #2
 8009e08:	440b      	add	r3, r1
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d901      	bls.n	8009e14 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009e10:	2301      	movs	r3, #1
 8009e12:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e14:	4b11      	ldr	r3, [pc, #68]	@ (8009e5c <xTaskIncrementTick+0x16c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d007      	beq.n	8009e2c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	617b      	str	r3, [r7, #20]
 8009e20:	e004      	b.n	8009e2c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e22:	4b0f      	ldr	r3, [pc, #60]	@ (8009e60 <xTaskIncrementTick+0x170>)
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	3301      	adds	r3, #1
 8009e28:	4a0d      	ldr	r2, [pc, #52]	@ (8009e60 <xTaskIncrementTick+0x170>)
 8009e2a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e2c:	697b      	ldr	r3, [r7, #20]
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3718      	adds	r7, #24
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	200007ac 	.word	0x200007ac
 8009e3c:	20000788 	.word	0x20000788
 8009e40:	2000073c 	.word	0x2000073c
 8009e44:	20000740 	.word	0x20000740
 8009e48:	2000079c 	.word	0x2000079c
 8009e4c:	200007a4 	.word	0x200007a4
 8009e50:	2000078c 	.word	0x2000078c
 8009e54:	20000688 	.word	0x20000688
 8009e58:	20000684 	.word	0x20000684
 8009e5c:	20000798 	.word	0x20000798
 8009e60:	20000794 	.word	0x20000794

08009e64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b088      	sub	sp, #32
 8009e68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e6a:	4b3a      	ldr	r3, [pc, #232]	@ (8009f54 <vTaskSwitchContext+0xf0>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d003      	beq.n	8009e7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e72:	4b39      	ldr	r3, [pc, #228]	@ (8009f58 <vTaskSwitchContext+0xf4>)
 8009e74:	2201      	movs	r2, #1
 8009e76:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e78:	e067      	b.n	8009f4a <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 8009e7a:	4b37      	ldr	r3, [pc, #220]	@ (8009f58 <vTaskSwitchContext+0xf4>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8009e80:	4b36      	ldr	r3, [pc, #216]	@ (8009f5c <vTaskSwitchContext+0xf8>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e86:	61fb      	str	r3, [r7, #28]
 8009e88:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8009e8c:	61bb      	str	r3, [r7, #24]
 8009e8e:	69fb      	ldr	r3, [r7, #28]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d111      	bne.n	8009ebc <vTaskSwitchContext+0x58>
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	3304      	adds	r3, #4
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	69ba      	ldr	r2, [r7, #24]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d10b      	bne.n	8009ebc <vTaskSwitchContext+0x58>
 8009ea4:	69fb      	ldr	r3, [r7, #28]
 8009ea6:	3308      	adds	r3, #8
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69ba      	ldr	r2, [r7, #24]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d105      	bne.n	8009ebc <vTaskSwitchContext+0x58>
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	330c      	adds	r3, #12
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d008      	beq.n	8009ece <vTaskSwitchContext+0x6a>
 8009ebc:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <vTaskSwitchContext+0xf8>)
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	4b26      	ldr	r3, [pc, #152]	@ (8009f5c <vTaskSwitchContext+0xf8>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3334      	adds	r3, #52	@ 0x34
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	4610      	mov	r0, r2
 8009eca:	f7f6 fb18 	bl	80004fe <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ece:	4b24      	ldr	r3, [pc, #144]	@ (8009f60 <vTaskSwitchContext+0xfc>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	fab3 f383 	clz	r3, r3
 8009eda:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009edc:	7afb      	ldrb	r3, [r7, #11]
 8009ede:	f1c3 031f 	rsb	r3, r3, #31
 8009ee2:	617b      	str	r3, [r7, #20]
 8009ee4:	491f      	ldr	r1, [pc, #124]	@ (8009f64 <vTaskSwitchContext+0x100>)
 8009ee6:	697a      	ldr	r2, [r7, #20]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	440b      	add	r3, r1
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10b      	bne.n	8009f10 <vTaskSwitchContext+0xac>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	607b      	str	r3, [r7, #4]
}
 8009f0a:	bf00      	nop
 8009f0c:	bf00      	nop
 8009f0e:	e7fd      	b.n	8009f0c <vTaskSwitchContext+0xa8>
 8009f10:	697a      	ldr	r2, [r7, #20]
 8009f12:	4613      	mov	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4413      	add	r3, r2
 8009f18:	009b      	lsls	r3, r3, #2
 8009f1a:	4a12      	ldr	r2, [pc, #72]	@ (8009f64 <vTaskSwitchContext+0x100>)
 8009f1c:	4413      	add	r3, r2
 8009f1e:	613b      	str	r3, [r7, #16]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	693b      	ldr	r3, [r7, #16]
 8009f28:	605a      	str	r2, [r3, #4]
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	3308      	adds	r3, #8
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d104      	bne.n	8009f40 <vTaskSwitchContext+0xdc>
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	605a      	str	r2, [r3, #4]
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	68db      	ldr	r3, [r3, #12]
 8009f46:	4a05      	ldr	r2, [pc, #20]	@ (8009f5c <vTaskSwitchContext+0xf8>)
 8009f48:	6013      	str	r3, [r2, #0]
}
 8009f4a:	bf00      	nop
 8009f4c:	3720      	adds	r7, #32
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	200007ac 	.word	0x200007ac
 8009f58:	20000798 	.word	0x20000798
 8009f5c:	20000684 	.word	0x20000684
 8009f60:	2000078c 	.word	0x2000078c
 8009f64:	20000688 	.word	0x20000688

08009f68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009f70:	f000 f854 	bl	800a01c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009f74:	4b07      	ldr	r3, [pc, #28]	@ (8009f94 <prvIdleTask+0x2c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b01      	cmp	r3, #1
 8009f7a:	d907      	bls.n	8009f8c <prvIdleTask+0x24>
			{
				taskYIELD();
 8009f7c:	4b06      	ldr	r3, [pc, #24]	@ (8009f98 <prvIdleTask+0x30>)
 8009f7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f82:	601a      	str	r2, [r3, #0]
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8009f8c:	f7f6 fab0 	bl	80004f0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8009f90:	e7ee      	b.n	8009f70 <prvIdleTask+0x8>
 8009f92:	bf00      	nop
 8009f94:	20000688 	.word	0x20000688
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b082      	sub	sp, #8
 8009fa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	607b      	str	r3, [r7, #4]
 8009fa6:	e00c      	b.n	8009fc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	4a12      	ldr	r2, [pc, #72]	@ (8009ffc <prvInitialiseTaskLists+0x60>)
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7ff faff 	bl	80095ba <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	607b      	str	r3, [r7, #4]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b06      	cmp	r3, #6
 8009fc6:	d9ef      	bls.n	8009fa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009fc8:	480d      	ldr	r0, [pc, #52]	@ (800a000 <prvInitialiseTaskLists+0x64>)
 8009fca:	f7ff faf6 	bl	80095ba <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009fce:	480d      	ldr	r0, [pc, #52]	@ (800a004 <prvInitialiseTaskLists+0x68>)
 8009fd0:	f7ff faf3 	bl	80095ba <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009fd4:	480c      	ldr	r0, [pc, #48]	@ (800a008 <prvInitialiseTaskLists+0x6c>)
 8009fd6:	f7ff faf0 	bl	80095ba <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009fda:	480c      	ldr	r0, [pc, #48]	@ (800a00c <prvInitialiseTaskLists+0x70>)
 8009fdc:	f7ff faed 	bl	80095ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009fe0:	480b      	ldr	r0, [pc, #44]	@ (800a010 <prvInitialiseTaskLists+0x74>)
 8009fe2:	f7ff faea 	bl	80095ba <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009fe6:	4b0b      	ldr	r3, [pc, #44]	@ (800a014 <prvInitialiseTaskLists+0x78>)
 8009fe8:	4a05      	ldr	r2, [pc, #20]	@ (800a000 <prvInitialiseTaskLists+0x64>)
 8009fea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009fec:	4b0a      	ldr	r3, [pc, #40]	@ (800a018 <prvInitialiseTaskLists+0x7c>)
 8009fee:	4a05      	ldr	r2, [pc, #20]	@ (800a004 <prvInitialiseTaskLists+0x68>)
 8009ff0:	601a      	str	r2, [r3, #0]
}
 8009ff2:	bf00      	nop
 8009ff4:	3708      	adds	r7, #8
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}
 8009ffa:	bf00      	nop
 8009ffc:	20000688 	.word	0x20000688
 800a000:	20000714 	.word	0x20000714
 800a004:	20000728 	.word	0x20000728
 800a008:	20000744 	.word	0x20000744
 800a00c:	20000758 	.word	0x20000758
 800a010:	20000770 	.word	0x20000770
 800a014:	2000073c 	.word	0x2000073c
 800a018:	20000740 	.word	0x20000740

0800a01c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a022:	e019      	b.n	800a058 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a024:	f000 fa10 	bl	800a448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a028:	4b10      	ldr	r3, [pc, #64]	@ (800a06c <prvCheckTasksWaitingTermination+0x50>)
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	3304      	adds	r3, #4
 800a034:	4618      	mov	r0, r3
 800a036:	f7ff fb4a 	bl	80096ce <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a03a:	4b0d      	ldr	r3, [pc, #52]	@ (800a070 <prvCheckTasksWaitingTermination+0x54>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	3b01      	subs	r3, #1
 800a040:	4a0b      	ldr	r2, [pc, #44]	@ (800a070 <prvCheckTasksWaitingTermination+0x54>)
 800a042:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a044:	4b0b      	ldr	r3, [pc, #44]	@ (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	3b01      	subs	r3, #1
 800a04a:	4a0a      	ldr	r2, [pc, #40]	@ (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a04c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a04e:	f000 fa2d 	bl	800a4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f810 	bl	800a078 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a058:	4b06      	ldr	r3, [pc, #24]	@ (800a074 <prvCheckTasksWaitingTermination+0x58>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1e1      	bne.n	800a024 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a060:	bf00      	nop
 800a062:	bf00      	nop
 800a064:	3708      	adds	r7, #8
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	20000758 	.word	0x20000758
 800a070:	20000784 	.word	0x20000784
 800a074:	2000076c 	.word	0x2000076c

0800a078 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b084      	sub	sp, #16
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a086:	2b00      	cmp	r3, #0
 800a088:	d108      	bne.n	800a09c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fb8e 	bl	800a7b0 <vPortFree>
				vPortFree( pxTCB );
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fb8b 	bl	800a7b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a09a:	e019      	b.n	800a0d0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d103      	bne.n	800a0ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fb82 	bl	800a7b0 <vPortFree>
	}
 800a0ac:	e010      	b.n	800a0d0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d00b      	beq.n	800a0d0 <prvDeleteTCB+0x58>
	__asm volatile
 800a0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0bc:	f383 8811 	msr	BASEPRI, r3
 800a0c0:	f3bf 8f6f 	isb	sy
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	60fb      	str	r3, [r7, #12]
}
 800a0ca:	bf00      	nop
 800a0cc:	bf00      	nop
 800a0ce:	e7fd      	b.n	800a0cc <prvDeleteTCB+0x54>
	}
 800a0d0:	bf00      	nop
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a0de:	4b0c      	ldr	r3, [pc, #48]	@ (800a110 <prvResetNextTaskUnblockTime+0x38>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a0e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a114 <prvResetNextTaskUnblockTime+0x3c>)
 800a0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a0f0:	e008      	b.n	800a104 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f2:	4b07      	ldr	r3, [pc, #28]	@ (800a110 <prvResetNextTaskUnblockTime+0x38>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4a04      	ldr	r2, [pc, #16]	@ (800a114 <prvResetNextTaskUnblockTime+0x3c>)
 800a102:	6013      	str	r3, [r2, #0]
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	2000073c 	.word	0x2000073c
 800a114:	200007a4 	.word	0x200007a4

0800a118 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a122:	4b29      	ldr	r3, [pc, #164]	@ (800a1c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a128:	4b28      	ldr	r3, [pc, #160]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff facd 	bl	80096ce <uxListRemove>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10b      	bne.n	800a152 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a13a:	4b24      	ldr	r3, [pc, #144]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a140:	2201      	movs	r2, #1
 800a142:	fa02 f303 	lsl.w	r3, r2, r3
 800a146:	43da      	mvns	r2, r3
 800a148:	4b21      	ldr	r3, [pc, #132]	@ (800a1d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	4013      	ands	r3, r2
 800a14e:	4a20      	ldr	r2, [pc, #128]	@ (800a1d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a150:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a158:	d10a      	bne.n	800a170 <prvAddCurrentTaskToDelayedList+0x58>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d007      	beq.n	800a170 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a160:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	3304      	adds	r3, #4
 800a166:	4619      	mov	r1, r3
 800a168:	481a      	ldr	r0, [pc, #104]	@ (800a1d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a16a:	f7ff fa53 	bl	8009614 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a16e:	e026      	b.n	800a1be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4413      	add	r3, r2
 800a176:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a178:	4b14      	ldr	r3, [pc, #80]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	429a      	cmp	r2, r3
 800a186:	d209      	bcs.n	800a19c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a188:	4b13      	ldr	r3, [pc, #76]	@ (800a1d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	4b0f      	ldr	r3, [pc, #60]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3304      	adds	r3, #4
 800a192:	4619      	mov	r1, r3
 800a194:	4610      	mov	r0, r2
 800a196:	f7ff fa61 	bl	800965c <vListInsert>
}
 800a19a:	e010      	b.n	800a1be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a19c:	4b0f      	ldr	r3, [pc, #60]	@ (800a1dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a1cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	3304      	adds	r3, #4
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	4610      	mov	r0, r2
 800a1aa:	f7ff fa57 	bl	800965c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a1ae:	4b0c      	ldr	r3, [pc, #48]	@ (800a1e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d202      	bcs.n	800a1be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a1b8:	4a09      	ldr	r2, [pc, #36]	@ (800a1e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6013      	str	r3, [r2, #0]
}
 800a1be:	bf00      	nop
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20000788 	.word	0x20000788
 800a1cc:	20000684 	.word	0x20000684
 800a1d0:	2000078c 	.word	0x2000078c
 800a1d4:	20000770 	.word	0x20000770
 800a1d8:	20000740 	.word	0x20000740
 800a1dc:	2000073c 	.word	0x2000073c
 800a1e0:	200007a4 	.word	0x200007a4

0800a1e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3b04      	subs	r3, #4
 800a1f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3b04      	subs	r3, #4
 800a202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f023 0201 	bic.w	r2, r3, #1
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	3b04      	subs	r3, #4
 800a212:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a214:	4a0c      	ldr	r2, [pc, #48]	@ (800a248 <pxPortInitialiseStack+0x64>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	3b14      	subs	r3, #20
 800a21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	3b04      	subs	r3, #4
 800a22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f06f 0202 	mvn.w	r2, #2
 800a232:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3b20      	subs	r3, #32
 800a238:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a23a:	68fb      	ldr	r3, [r7, #12]
}
 800a23c:	4618      	mov	r0, r3
 800a23e:	3714      	adds	r7, #20
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	0800a24d 	.word	0x0800a24d

0800a24c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a252:	2300      	movs	r3, #0
 800a254:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a256:	4b13      	ldr	r3, [pc, #76]	@ (800a2a4 <prvTaskExitError+0x58>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a25e:	d00b      	beq.n	800a278 <prvTaskExitError+0x2c>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	60fb      	str	r3, [r7, #12]
}
 800a272:	bf00      	nop
 800a274:	bf00      	nop
 800a276:	e7fd      	b.n	800a274 <prvTaskExitError+0x28>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	60bb      	str	r3, [r7, #8]
}
 800a28a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a28c:	bf00      	nop
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d0fc      	beq.n	800a28e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	3714      	adds	r7, #20
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr
 800a2a2:	bf00      	nop
 800a2a4:	20000098 	.word	0x20000098
	...

0800a2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a2b0:	4b07      	ldr	r3, [pc, #28]	@ (800a2d0 <pxCurrentTCBConst2>)
 800a2b2:	6819      	ldr	r1, [r3, #0]
 800a2b4:	6808      	ldr	r0, [r1, #0]
 800a2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2ba:	f380 8809 	msr	PSP, r0
 800a2be:	f3bf 8f6f 	isb	sy
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8811 	msr	BASEPRI, r0
 800a2ca:	4770      	bx	lr
 800a2cc:	f3af 8000 	nop.w

0800a2d0 <pxCurrentTCBConst2>:
 800a2d0:	20000684 	.word	0x20000684
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2d4:	bf00      	nop
 800a2d6:	bf00      	nop

0800a2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2d8:	4808      	ldr	r0, [pc, #32]	@ (800a2fc <prvPortStartFirstTask+0x24>)
 800a2da:	6800      	ldr	r0, [r0, #0]
 800a2dc:	6800      	ldr	r0, [r0, #0]
 800a2de:	f380 8808 	msr	MSP, r0
 800a2e2:	f04f 0000 	mov.w	r0, #0
 800a2e6:	f380 8814 	msr	CONTROL, r0
 800a2ea:	b662      	cpsie	i
 800a2ec:	b661      	cpsie	f
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	f3bf 8f6f 	isb	sy
 800a2f6:	df00      	svc	0
 800a2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2fa:	bf00      	nop
 800a2fc:	e000ed08 	.word	0xe000ed08

0800a300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a300:	b580      	push	{r7, lr}
 800a302:	b086      	sub	sp, #24
 800a304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a306:	4b47      	ldr	r3, [pc, #284]	@ (800a424 <xPortStartScheduler+0x124>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a47      	ldr	r2, [pc, #284]	@ (800a428 <xPortStartScheduler+0x128>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d10b      	bne.n	800a328 <xPortStartScheduler+0x28>
	__asm volatile
 800a310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a314:	f383 8811 	msr	BASEPRI, r3
 800a318:	f3bf 8f6f 	isb	sy
 800a31c:	f3bf 8f4f 	dsb	sy
 800a320:	613b      	str	r3, [r7, #16]
}
 800a322:	bf00      	nop
 800a324:	bf00      	nop
 800a326:	e7fd      	b.n	800a324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a328:	4b3e      	ldr	r3, [pc, #248]	@ (800a424 <xPortStartScheduler+0x124>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a3f      	ldr	r2, [pc, #252]	@ (800a42c <xPortStartScheduler+0x12c>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d10b      	bne.n	800a34a <xPortStartScheduler+0x4a>
	__asm volatile
 800a332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	60fb      	str	r3, [r7, #12]
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop
 800a348:	e7fd      	b.n	800a346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a34a:	4b39      	ldr	r3, [pc, #228]	@ (800a430 <xPortStartScheduler+0x130>)
 800a34c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	b2db      	uxtb	r3, r3
 800a354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a356:	697b      	ldr	r3, [r7, #20]
 800a358:	22ff      	movs	r2, #255	@ 0xff
 800a35a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	b2db      	uxtb	r3, r3
 800a362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	4b31      	ldr	r3, [pc, #196]	@ (800a434 <xPortStartScheduler+0x134>)
 800a370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a372:	4b31      	ldr	r3, [pc, #196]	@ (800a438 <xPortStartScheduler+0x138>)
 800a374:	2207      	movs	r2, #7
 800a376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a378:	e009      	b.n	800a38e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a37a:	4b2f      	ldr	r3, [pc, #188]	@ (800a438 <xPortStartScheduler+0x138>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	3b01      	subs	r3, #1
 800a380:	4a2d      	ldr	r2, [pc, #180]	@ (800a438 <xPortStartScheduler+0x138>)
 800a382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	b2db      	uxtb	r3, r3
 800a388:	005b      	lsls	r3, r3, #1
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	b2db      	uxtb	r3, r3
 800a392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a396:	2b80      	cmp	r3, #128	@ 0x80
 800a398:	d0ef      	beq.n	800a37a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a39a:	4b27      	ldr	r3, [pc, #156]	@ (800a438 <xPortStartScheduler+0x138>)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	f1c3 0307 	rsb	r3, r3, #7
 800a3a2:	2b04      	cmp	r3, #4
 800a3a4:	d00b      	beq.n	800a3be <xPortStartScheduler+0xbe>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	60bb      	str	r3, [r7, #8]
}
 800a3b8:	bf00      	nop
 800a3ba:	bf00      	nop
 800a3bc:	e7fd      	b.n	800a3ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a3be:	4b1e      	ldr	r3, [pc, #120]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3d0:	4a19      	ldr	r2, [pc, #100]	@ (800a438 <xPortStartScheduler+0x138>)
 800a3d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	b2da      	uxtb	r2, r3
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3dc:	4b17      	ldr	r3, [pc, #92]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a16      	ldr	r2, [pc, #88]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3e8:	4b14      	ldr	r3, [pc, #80]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a13      	ldr	r2, [pc, #76]	@ (800a43c <xPortStartScheduler+0x13c>)
 800a3ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3f4:	f000 f8da 	bl	800a5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3f8:	4b11      	ldr	r3, [pc, #68]	@ (800a440 <xPortStartScheduler+0x140>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3fe:	f000 f8f9 	bl	800a5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a402:	4b10      	ldr	r3, [pc, #64]	@ (800a444 <xPortStartScheduler+0x144>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a0f      	ldr	r2, [pc, #60]	@ (800a444 <xPortStartScheduler+0x144>)
 800a408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a40c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a40e:	f7ff ff63 	bl	800a2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a412:	f7ff fd27 	bl	8009e64 <vTaskSwitchContext>
	prvTaskExitError();
 800a416:	f7ff ff19 	bl	800a24c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a41a:	2300      	movs	r3, #0
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3718      	adds	r7, #24
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	e000ed00 	.word	0xe000ed00
 800a428:	410fc271 	.word	0x410fc271
 800a42c:	410fc270 	.word	0x410fc270
 800a430:	e000e400 	.word	0xe000e400
 800a434:	200007b0 	.word	0x200007b0
 800a438:	200007b4 	.word	0x200007b4
 800a43c:	e000ed20 	.word	0xe000ed20
 800a440:	20000098 	.word	0x20000098
 800a444:	e000ef34 	.word	0xe000ef34

0800a448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	607b      	str	r3, [r7, #4]
}
 800a460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a462:	4b10      	ldr	r3, [pc, #64]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3301      	adds	r3, #1
 800a468:	4a0e      	ldr	r2, [pc, #56]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a46c:	4b0d      	ldr	r3, [pc, #52]	@ (800a4a4 <vPortEnterCritical+0x5c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d110      	bne.n	800a496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a474:	4b0c      	ldr	r3, [pc, #48]	@ (800a4a8 <vPortEnterCritical+0x60>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <vPortEnterCritical+0x4e>
	__asm volatile
 800a47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	603b      	str	r3, [r7, #0]
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	e7fd      	b.n	800a492 <vPortEnterCritical+0x4a>
	}
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr
 800a4a2:	bf00      	nop
 800a4a4:	20000098 	.word	0x20000098
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a4b2:	4b12      	ldr	r3, [pc, #72]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d10b      	bne.n	800a4d2 <vPortExitCritical+0x26>
	__asm volatile
 800a4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	607b      	str	r3, [r7, #4]
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	e7fd      	b.n	800a4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	4a08      	ldr	r2, [pc, #32]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4dc:	4b07      	ldr	r3, [pc, #28]	@ (800a4fc <vPortExitCritical+0x50>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d105      	bne.n	800a4f0 <vPortExitCritical+0x44>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	20000098 	.word	0x20000098

0800a500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a500:	f3ef 8009 	mrs	r0, PSP
 800a504:	f3bf 8f6f 	isb	sy
 800a508:	4b15      	ldr	r3, [pc, #84]	@ (800a560 <pxCurrentTCBConst>)
 800a50a:	681a      	ldr	r2, [r3, #0]
 800a50c:	f01e 0f10 	tst.w	lr, #16
 800a510:	bf08      	it	eq
 800a512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a51a:	6010      	str	r0, [r2, #0]
 800a51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a524:	f380 8811 	msr	BASEPRI, r0
 800a528:	f3bf 8f4f 	dsb	sy
 800a52c:	f3bf 8f6f 	isb	sy
 800a530:	f7ff fc98 	bl	8009e64 <vTaskSwitchContext>
 800a534:	f04f 0000 	mov.w	r0, #0
 800a538:	f380 8811 	msr	BASEPRI, r0
 800a53c:	bc09      	pop	{r0, r3}
 800a53e:	6819      	ldr	r1, [r3, #0]
 800a540:	6808      	ldr	r0, [r1, #0]
 800a542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a546:	f01e 0f10 	tst.w	lr, #16
 800a54a:	bf08      	it	eq
 800a54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a550:	f380 8809 	msr	PSP, r0
 800a554:	f3bf 8f6f 	isb	sy
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	f3af 8000 	nop.w

0800a560 <pxCurrentTCBConst>:
 800a560:	20000684 	.word	0x20000684
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop

0800a568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
	__asm volatile
 800a56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a572:	f383 8811 	msr	BASEPRI, r3
 800a576:	f3bf 8f6f 	isb	sy
 800a57a:	f3bf 8f4f 	dsb	sy
 800a57e:	607b      	str	r3, [r7, #4]
}
 800a580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a582:	f7ff fbb5 	bl	8009cf0 <xTaskIncrementTick>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d003      	beq.n	800a594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a58c:	4b06      	ldr	r3, [pc, #24]	@ (800a5a8 <SysTick_Handler+0x40>)
 800a58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	2300      	movs	r3, #0
 800a596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f383 8811 	msr	BASEPRI, r3
}
 800a59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e4 <vPortSetupTimerInterrupt+0x38>)
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <vPortSetupTimerInterrupt+0x3c>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5ec <vPortSetupTimerInterrupt+0x40>)
 800a5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c6:	099b      	lsrs	r3, r3, #6
 800a5c8:	4a09      	ldr	r2, [pc, #36]	@ (800a5f0 <vPortSetupTimerInterrupt+0x44>)
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ce:	4b04      	ldr	r3, [pc, #16]	@ (800a5e0 <vPortSetupTimerInterrupt+0x34>)
 800a5d0:	2207      	movs	r2, #7
 800a5d2:	601a      	str	r2, [r3, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5dc:	4770      	bx	lr
 800a5de:	bf00      	nop
 800a5e0:	e000e010 	.word	0xe000e010
 800a5e4:	e000e018 	.word	0xe000e018
 800a5e8:	20000000 	.word	0x20000000
 800a5ec:	10624dd3 	.word	0x10624dd3
 800a5f0:	e000e014 	.word	0xe000e014

0800a5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a604 <vPortEnableVFP+0x10>
 800a5f8:	6801      	ldr	r1, [r0, #0]
 800a5fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5fe:	6001      	str	r1, [r0, #0]
 800a600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a602:	bf00      	nop
 800a604:	e000ed88 	.word	0xe000ed88

0800a608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b08a      	sub	sp, #40	@ 0x28
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a610:	2300      	movs	r3, #0
 800a612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a614:	f7ff fac0 	bl	8009b98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a618:	4b5f      	ldr	r3, [pc, #380]	@ (800a798 <pvPortMalloc+0x190>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a620:	f000 f92a 	bl	800a878 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a624:	4b5d      	ldr	r3, [pc, #372]	@ (800a79c <pvPortMalloc+0x194>)
 800a626:	681a      	ldr	r2, [r3, #0]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4013      	ands	r3, r2
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	f040 8095 	bne.w	800a75c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d01e      	beq.n	800a676 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a638:	2208      	movs	r2, #8
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	4413      	add	r3, r2
 800a63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f003 0307 	and.w	r3, r3, #7
 800a646:	2b00      	cmp	r3, #0
 800a648:	d015      	beq.n	800a676 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f023 0307 	bic.w	r3, r3, #7
 800a650:	3308      	adds	r3, #8
 800a652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d00b      	beq.n	800a676 <pvPortMalloc+0x6e>
	__asm volatile
 800a65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	617b      	str	r3, [r7, #20]
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	e7fd      	b.n	800a672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d06f      	beq.n	800a75c <pvPortMalloc+0x154>
 800a67c:	4b48      	ldr	r3, [pc, #288]	@ (800a7a0 <pvPortMalloc+0x198>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	429a      	cmp	r2, r3
 800a684:	d86a      	bhi.n	800a75c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a686:	4b47      	ldr	r3, [pc, #284]	@ (800a7a4 <pvPortMalloc+0x19c>)
 800a688:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a68a:	4b46      	ldr	r3, [pc, #280]	@ (800a7a4 <pvPortMalloc+0x19c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a690:	e004      	b.n	800a69c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a694:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d903      	bls.n	800a6ae <pvPortMalloc+0xa6>
 800a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d1f1      	bne.n	800a692 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a6ae:	4b3a      	ldr	r3, [pc, #232]	@ (800a798 <pvPortMalloc+0x190>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d051      	beq.n	800a75c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a6b8:	6a3b      	ldr	r3, [r7, #32]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2208      	movs	r2, #8
 800a6be:	4413      	add	r3, r2
 800a6c0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	6a3b      	ldr	r3, [r7, #32]
 800a6c8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6cc:	685a      	ldr	r2, [r3, #4]
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	1ad2      	subs	r2, r2, r3
 800a6d2:	2308      	movs	r3, #8
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d920      	bls.n	800a71c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a6da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	4413      	add	r3, r2
 800a6e0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00b      	beq.n	800a704 <pvPortMalloc+0xfc>
	__asm volatile
 800a6ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6f0:	f383 8811 	msr	BASEPRI, r3
 800a6f4:	f3bf 8f6f 	isb	sy
 800a6f8:	f3bf 8f4f 	dsb	sy
 800a6fc:	613b      	str	r3, [r7, #16]
}
 800a6fe:	bf00      	nop
 800a700:	bf00      	nop
 800a702:	e7fd      	b.n	800a700 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a706:	685a      	ldr	r2, [r3, #4]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	1ad2      	subs	r2, r2, r3
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a716:	69b8      	ldr	r0, [r7, #24]
 800a718:	f000 f910 	bl	800a93c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a71c:	4b20      	ldr	r3, [pc, #128]	@ (800a7a0 <pvPortMalloc+0x198>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	4a1e      	ldr	r2, [pc, #120]	@ (800a7a0 <pvPortMalloc+0x198>)
 800a728:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a72a:	4b1d      	ldr	r3, [pc, #116]	@ (800a7a0 <pvPortMalloc+0x198>)
 800a72c:	681a      	ldr	r2, [r3, #0]
 800a72e:	4b1e      	ldr	r3, [pc, #120]	@ (800a7a8 <pvPortMalloc+0x1a0>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	429a      	cmp	r2, r3
 800a734:	d203      	bcs.n	800a73e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a736:	4b1a      	ldr	r3, [pc, #104]	@ (800a7a0 <pvPortMalloc+0x198>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7a8 <pvPortMalloc+0x1a0>)
 800a73c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a73e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	4b16      	ldr	r3, [pc, #88]	@ (800a79c <pvPortMalloc+0x194>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	431a      	orrs	r2, r3
 800a748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a752:	4b16      	ldr	r3, [pc, #88]	@ (800a7ac <pvPortMalloc+0x1a4>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3301      	adds	r3, #1
 800a758:	4a14      	ldr	r2, [pc, #80]	@ (800a7ac <pvPortMalloc+0x1a4>)
 800a75a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a75c:	f7ff fa2a 	bl	8009bb4 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d101      	bne.n	800a76a <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800a766:	f7f5 fed5 	bl	8000514 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00b      	beq.n	800a78c <pvPortMalloc+0x184>
	__asm volatile
 800a774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a778:	f383 8811 	msr	BASEPRI, r3
 800a77c:	f3bf 8f6f 	isb	sy
 800a780:	f3bf 8f4f 	dsb	sy
 800a784:	60fb      	str	r3, [r7, #12]
}
 800a786:	bf00      	nop
 800a788:	bf00      	nop
 800a78a:	e7fd      	b.n	800a788 <pvPortMalloc+0x180>
	return pvReturn;
 800a78c:	69fb      	ldr	r3, [r7, #28]
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3728      	adds	r7, #40	@ 0x28
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	200087c0 	.word	0x200087c0
 800a79c:	200087d4 	.word	0x200087d4
 800a7a0:	200087c4 	.word	0x200087c4
 800a7a4:	200087b8 	.word	0x200087b8
 800a7a8:	200087c8 	.word	0x200087c8
 800a7ac:	200087cc 	.word	0x200087cc

0800a7b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d04f      	beq.n	800a862 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a7c2:	2308      	movs	r3, #8
 800a7c4:	425b      	negs	r3, r3
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	4b25      	ldr	r3, [pc, #148]	@ (800a86c <vPortFree+0xbc>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	4013      	ands	r3, r2
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d10b      	bne.n	800a7f6 <vPortFree+0x46>
	__asm volatile
 800a7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7e2:	f383 8811 	msr	BASEPRI, r3
 800a7e6:	f3bf 8f6f 	isb	sy
 800a7ea:	f3bf 8f4f 	dsb	sy
 800a7ee:	60fb      	str	r3, [r7, #12]
}
 800a7f0:	bf00      	nop
 800a7f2:	bf00      	nop
 800a7f4:	e7fd      	b.n	800a7f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d00b      	beq.n	800a816 <vPortFree+0x66>
	__asm volatile
 800a7fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a802:	f383 8811 	msr	BASEPRI, r3
 800a806:	f3bf 8f6f 	isb	sy
 800a80a:	f3bf 8f4f 	dsb	sy
 800a80e:	60bb      	str	r3, [r7, #8]
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	e7fd      	b.n	800a812 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	4b14      	ldr	r3, [pc, #80]	@ (800a86c <vPortFree+0xbc>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4013      	ands	r3, r2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d01e      	beq.n	800a862 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d11a      	bne.n	800a862 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	4b0e      	ldr	r3, [pc, #56]	@ (800a86c <vPortFree+0xbc>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	43db      	mvns	r3, r3
 800a836:	401a      	ands	r2, r3
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a83c:	f7ff f9ac 	bl	8009b98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	4b0a      	ldr	r3, [pc, #40]	@ (800a870 <vPortFree+0xc0>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4413      	add	r3, r2
 800a84a:	4a09      	ldr	r2, [pc, #36]	@ (800a870 <vPortFree+0xc0>)
 800a84c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a84e:	6938      	ldr	r0, [r7, #16]
 800a850:	f000 f874 	bl	800a93c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a854:	4b07      	ldr	r3, [pc, #28]	@ (800a874 <vPortFree+0xc4>)
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	3301      	adds	r3, #1
 800a85a:	4a06      	ldr	r2, [pc, #24]	@ (800a874 <vPortFree+0xc4>)
 800a85c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a85e:	f7ff f9a9 	bl	8009bb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a862:	bf00      	nop
 800a864:	3718      	adds	r7, #24
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop
 800a86c:	200087d4 	.word	0x200087d4
 800a870:	200087c4 	.word	0x200087c4
 800a874:	200087d0 	.word	0x200087d0

0800a878 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a87e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a882:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a884:	4b27      	ldr	r3, [pc, #156]	@ (800a924 <prvHeapInit+0xac>)
 800a886:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f003 0307 	and.w	r3, r3, #7
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00c      	beq.n	800a8ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	3307      	adds	r3, #7
 800a896:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f023 0307 	bic.w	r3, r3, #7
 800a89e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	1ad3      	subs	r3, r2, r3
 800a8a6:	4a1f      	ldr	r2, [pc, #124]	@ (800a924 <prvHeapInit+0xac>)
 800a8a8:	4413      	add	r3, r2
 800a8aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a8b0:	4a1d      	ldr	r2, [pc, #116]	@ (800a928 <prvHeapInit+0xb0>)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a8b6:	4b1c      	ldr	r3, [pc, #112]	@ (800a928 <prvHeapInit+0xb0>)
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a8c4:	2208      	movs	r2, #8
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	1a9b      	subs	r3, r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0307 	bic.w	r3, r3, #7
 800a8d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4a15      	ldr	r2, [pc, #84]	@ (800a92c <prvHeapInit+0xb4>)
 800a8d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a8da:	4b14      	ldr	r3, [pc, #80]	@ (800a92c <prvHeapInit+0xb4>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a8e2:	4b12      	ldr	r3, [pc, #72]	@ (800a92c <prvHeapInit+0xb4>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	1ad2      	subs	r2, r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a8f8:	4b0c      	ldr	r3, [pc, #48]	@ (800a92c <prvHeapInit+0xb4>)
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	4a0a      	ldr	r2, [pc, #40]	@ (800a930 <prvHeapInit+0xb8>)
 800a906:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	4a09      	ldr	r2, [pc, #36]	@ (800a934 <prvHeapInit+0xbc>)
 800a90e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a910:	4b09      	ldr	r3, [pc, #36]	@ (800a938 <prvHeapInit+0xc0>)
 800a912:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a916:	601a      	str	r2, [r3, #0]
}
 800a918:	bf00      	nop
 800a91a:	3714      	adds	r7, #20
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr
 800a924:	200007b8 	.word	0x200007b8
 800a928:	200087b8 	.word	0x200087b8
 800a92c:	200087c0 	.word	0x200087c0
 800a930:	200087c8 	.word	0x200087c8
 800a934:	200087c4 	.word	0x200087c4
 800a938:	200087d4 	.word	0x200087d4

0800a93c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a944:	4b28      	ldr	r3, [pc, #160]	@ (800a9e8 <prvInsertBlockIntoFreeList+0xac>)
 800a946:	60fb      	str	r3, [r7, #12]
 800a948:	e002      	b.n	800a950 <prvInsertBlockIntoFreeList+0x14>
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d8f7      	bhi.n	800a94a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	4413      	add	r3, r2
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	429a      	cmp	r2, r3
 800a96a:	d108      	bne.n	800a97e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	685a      	ldr	r2, [r3, #4]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	441a      	add	r2, r3
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	68ba      	ldr	r2, [r7, #8]
 800a988:	441a      	add	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	429a      	cmp	r2, r3
 800a990:	d118      	bne.n	800a9c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681a      	ldr	r2, [r3, #0]
 800a996:	4b15      	ldr	r3, [pc, #84]	@ (800a9ec <prvInsertBlockIntoFreeList+0xb0>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d00d      	beq.n	800a9ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	685b      	ldr	r3, [r3, #4]
 800a9a8:	441a      	add	r2, r3
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	601a      	str	r2, [r3, #0]
 800a9b8:	e008      	b.n	800a9cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a9ba:	4b0c      	ldr	r3, [pc, #48]	@ (800a9ec <prvInsertBlockIntoFreeList+0xb0>)
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e003      	b.n	800a9cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d002      	beq.n	800a9da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9da:	bf00      	nop
 800a9dc:	3714      	adds	r7, #20
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	200087b8 	.word	0x200087b8
 800a9ec:	200087c0 	.word	0x200087c0

0800a9f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	4912      	ldr	r1, [pc, #72]	@ (800aa40 <MX_USB_DEVICE_Init+0x50>)
 800a9f8:	4812      	ldr	r0, [pc, #72]	@ (800aa44 <MX_USB_DEVICE_Init+0x54>)
 800a9fa:	f7fd fa5d 	bl	8007eb8 <USBD_Init>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa04:	f7f6 f9d4 	bl	8000db0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800aa08:	490f      	ldr	r1, [pc, #60]	@ (800aa48 <MX_USB_DEVICE_Init+0x58>)
 800aa0a:	480e      	ldr	r0, [pc, #56]	@ (800aa44 <MX_USB_DEVICE_Init+0x54>)
 800aa0c:	f7fd fa84 	bl	8007f18 <USBD_RegisterClass>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa16:	f7f6 f9cb 	bl	8000db0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800aa1a:	490c      	ldr	r1, [pc, #48]	@ (800aa4c <MX_USB_DEVICE_Init+0x5c>)
 800aa1c:	4809      	ldr	r0, [pc, #36]	@ (800aa44 <MX_USB_DEVICE_Init+0x54>)
 800aa1e:	f7fd f97b 	bl	8007d18 <USBD_CDC_RegisterInterface>
 800aa22:	4603      	mov	r3, r0
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d001      	beq.n	800aa2c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa28:	f7f6 f9c2 	bl	8000db0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800aa2c:	4805      	ldr	r0, [pc, #20]	@ (800aa44 <MX_USB_DEVICE_Init+0x54>)
 800aa2e:	f7fd faa9 	bl	8007f84 <USBD_Start>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa38:	f7f6 f9ba 	bl	8000db0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa3c:	bf00      	nop
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	200000b0 	.word	0x200000b0
 800aa44:	200087d8 	.word	0x200087d8
 800aa48:	20000018 	.word	0x20000018
 800aa4c:	2000009c 	.word	0x2000009c

0800aa50 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800aa54:	2200      	movs	r2, #0
 800aa56:	4905      	ldr	r1, [pc, #20]	@ (800aa6c <CDC_Init_HS+0x1c>)
 800aa58:	4805      	ldr	r0, [pc, #20]	@ (800aa70 <CDC_Init_HS+0x20>)
 800aa5a:	f7fd f977 	bl	8007d4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800aa5e:	4905      	ldr	r1, [pc, #20]	@ (800aa74 <CDC_Init_HS+0x24>)
 800aa60:	4803      	ldr	r0, [pc, #12]	@ (800aa70 <CDC_Init_HS+0x20>)
 800aa62:	f7fd f995 	bl	8007d90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa66:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	bd80      	pop	{r7, pc}
 800aa6c:	200092b4 	.word	0x200092b4
 800aa70:	200087d8 	.word	0x200087d8
 800aa74:	20008ab4 	.word	0x20008ab4

0800aa78 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800aa7c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	46bd      	mov	sp, r7
 800aa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa86:	4770      	bx	lr

0800aa88 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa88:	b480      	push	{r7}
 800aa8a:	b083      	sub	sp, #12
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	4603      	mov	r3, r0
 800aa90:	6039      	str	r1, [r7, #0]
 800aa92:	71fb      	strb	r3, [r7, #7]
 800aa94:	4613      	mov	r3, r2
 800aa96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800aa98:	79fb      	ldrb	r3, [r7, #7]
 800aa9a:	2b23      	cmp	r3, #35	@ 0x23
 800aa9c:	d84a      	bhi.n	800ab34 <CDC_Control_HS+0xac>
 800aa9e:	a201      	add	r2, pc, #4	@ (adr r2, 800aaa4 <CDC_Control_HS+0x1c>)
 800aaa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa4:	0800ab35 	.word	0x0800ab35
 800aaa8:	0800ab35 	.word	0x0800ab35
 800aaac:	0800ab35 	.word	0x0800ab35
 800aab0:	0800ab35 	.word	0x0800ab35
 800aab4:	0800ab35 	.word	0x0800ab35
 800aab8:	0800ab35 	.word	0x0800ab35
 800aabc:	0800ab35 	.word	0x0800ab35
 800aac0:	0800ab35 	.word	0x0800ab35
 800aac4:	0800ab35 	.word	0x0800ab35
 800aac8:	0800ab35 	.word	0x0800ab35
 800aacc:	0800ab35 	.word	0x0800ab35
 800aad0:	0800ab35 	.word	0x0800ab35
 800aad4:	0800ab35 	.word	0x0800ab35
 800aad8:	0800ab35 	.word	0x0800ab35
 800aadc:	0800ab35 	.word	0x0800ab35
 800aae0:	0800ab35 	.word	0x0800ab35
 800aae4:	0800ab35 	.word	0x0800ab35
 800aae8:	0800ab35 	.word	0x0800ab35
 800aaec:	0800ab35 	.word	0x0800ab35
 800aaf0:	0800ab35 	.word	0x0800ab35
 800aaf4:	0800ab35 	.word	0x0800ab35
 800aaf8:	0800ab35 	.word	0x0800ab35
 800aafc:	0800ab35 	.word	0x0800ab35
 800ab00:	0800ab35 	.word	0x0800ab35
 800ab04:	0800ab35 	.word	0x0800ab35
 800ab08:	0800ab35 	.word	0x0800ab35
 800ab0c:	0800ab35 	.word	0x0800ab35
 800ab10:	0800ab35 	.word	0x0800ab35
 800ab14:	0800ab35 	.word	0x0800ab35
 800ab18:	0800ab35 	.word	0x0800ab35
 800ab1c:	0800ab35 	.word	0x0800ab35
 800ab20:	0800ab35 	.word	0x0800ab35
 800ab24:	0800ab35 	.word	0x0800ab35
 800ab28:	0800ab35 	.word	0x0800ab35
 800ab2c:	0800ab35 	.word	0x0800ab35
 800ab30:	0800ab35 	.word	0x0800ab35
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab34:	bf00      	nop
  }

  return (USBD_OK);
 800ab36:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b082      	sub	sp, #8
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ab4e:	6879      	ldr	r1, [r7, #4]
 800ab50:	4805      	ldr	r0, [pc, #20]	@ (800ab68 <CDC_Receive_HS+0x24>)
 800ab52:	f7fd f91d 	bl	8007d90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ab56:	4804      	ldr	r0, [pc, #16]	@ (800ab68 <CDC_Receive_HS+0x24>)
 800ab58:	f7fd f978 	bl	8007e4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ab5c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}
 800ab66:	bf00      	nop
 800ab68:	200087d8 	.word	0x200087d8

0800ab6c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b084      	sub	sp, #16
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ab7c:	4b0d      	ldr	r3, [pc, #52]	@ (800abb4 <CDC_Transmit_HS+0x48>)
 800ab7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ab82:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e00b      	b.n	800abaa <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ab92:	887b      	ldrh	r3, [r7, #2]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6879      	ldr	r1, [r7, #4]
 800ab98:	4806      	ldr	r0, [pc, #24]	@ (800abb4 <CDC_Transmit_HS+0x48>)
 800ab9a:	f7fd f8d7 	bl	8007d4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ab9e:	4805      	ldr	r0, [pc, #20]	@ (800abb4 <CDC_Transmit_HS+0x48>)
 800aba0:	f7fd f914 	bl	8007dcc <USBD_CDC_TransmitPacket>
 800aba4:	4603      	mov	r3, r0
 800aba6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	200087d8 	.word	0x200087d8

0800abb8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800abb8:	b480      	push	{r7}
 800abba:	b087      	sub	sp, #28
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	60f8      	str	r0, [r7, #12]
 800abc0:	60b9      	str	r1, [r7, #8]
 800abc2:	4613      	mov	r3, r2
 800abc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800abca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	371c      	adds	r7, #28
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr
	...

0800abdc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abdc:	b480      	push	{r7}
 800abde:	b083      	sub	sp, #12
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	4603      	mov	r3, r0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2212      	movs	r2, #18
 800abec:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800abee:	4b03      	ldr	r3, [pc, #12]	@ (800abfc <USBD_HS_DeviceDescriptor+0x20>)
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	200000cc 	.word	0x200000cc

0800ac00 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	4603      	mov	r3, r0
 800ac08:	6039      	str	r1, [r7, #0]
 800ac0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	2204      	movs	r2, #4
 800ac10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac12:	4b03      	ldr	r3, [pc, #12]	@ (800ac20 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	200000e0 	.word	0x200000e0

0800ac24 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	6039      	str	r1, [r7, #0]
 800ac2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac30:	79fb      	ldrb	r3, [r7, #7]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d105      	bne.n	800ac42 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	4907      	ldr	r1, [pc, #28]	@ (800ac58 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac3a:	4808      	ldr	r0, [pc, #32]	@ (800ac5c <USBD_HS_ProductStrDescriptor+0x38>)
 800ac3c:	f7fe fb52 	bl	80092e4 <USBD_GetString>
 800ac40:	e004      	b.n	800ac4c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac42:	683a      	ldr	r2, [r7, #0]
 800ac44:	4904      	ldr	r1, [pc, #16]	@ (800ac58 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac46:	4805      	ldr	r0, [pc, #20]	@ (800ac5c <USBD_HS_ProductStrDescriptor+0x38>)
 800ac48:	f7fe fb4c 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac4c:	4b02      	ldr	r3, [pc, #8]	@ (800ac58 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	20009ab4 	.word	0x20009ab4
 800ac5c:	0800b4f4 	.word	0x0800b4f4

0800ac60 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	4603      	mov	r3, r0
 800ac68:	6039      	str	r1, [r7, #0]
 800ac6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac6c:	683a      	ldr	r2, [r7, #0]
 800ac6e:	4904      	ldr	r1, [pc, #16]	@ (800ac80 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ac70:	4804      	ldr	r0, [pc, #16]	@ (800ac84 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ac72:	f7fe fb37 	bl	80092e4 <USBD_GetString>
  return USBD_StrDesc;
 800ac76:	4b02      	ldr	r3, [pc, #8]	@ (800ac80 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}
 800ac80:	20009ab4 	.word	0x20009ab4
 800ac84:	0800b50c 	.word	0x0800b50c

0800ac88 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b082      	sub	sp, #8
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	4603      	mov	r3, r0
 800ac90:	6039      	str	r1, [r7, #0]
 800ac92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	221a      	movs	r2, #26
 800ac98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ac9a:	f000 f843 	bl	800ad24 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ac9e:	4b02      	ldr	r3, [pc, #8]	@ (800aca8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3708      	adds	r7, #8
 800aca4:	46bd      	mov	sp, r7
 800aca6:	bd80      	pop	{r7, pc}
 800aca8:	200000e4 	.word	0x200000e4

0800acac <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	4603      	mov	r3, r0
 800acb4:	6039      	str	r1, [r7, #0]
 800acb6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800acb8:	79fb      	ldrb	r3, [r7, #7]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d105      	bne.n	800acca <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acbe:	683a      	ldr	r2, [r7, #0]
 800acc0:	4907      	ldr	r1, [pc, #28]	@ (800ace0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800acc2:	4808      	ldr	r0, [pc, #32]	@ (800ace4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800acc4:	f7fe fb0e 	bl	80092e4 <USBD_GetString>
 800acc8:	e004      	b.n	800acd4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acca:	683a      	ldr	r2, [r7, #0]
 800accc:	4904      	ldr	r1, [pc, #16]	@ (800ace0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800acce:	4805      	ldr	r0, [pc, #20]	@ (800ace4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800acd0:	f7fe fb08 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800acd4:	4b02      	ldr	r3, [pc, #8]	@ (800ace0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800acd6:	4618      	mov	r0, r3
 800acd8:	3708      	adds	r7, #8
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20009ab4 	.word	0x20009ab4
 800ace4:	0800b520 	.word	0x0800b520

0800ace8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b082      	sub	sp, #8
 800acec:	af00      	add	r7, sp, #0
 800acee:	4603      	mov	r3, r0
 800acf0:	6039      	str	r1, [r7, #0]
 800acf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800acf4:	79fb      	ldrb	r3, [r7, #7]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d105      	bne.n	800ad06 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800acfa:	683a      	ldr	r2, [r7, #0]
 800acfc:	4907      	ldr	r1, [pc, #28]	@ (800ad1c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800acfe:	4808      	ldr	r0, [pc, #32]	@ (800ad20 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad00:	f7fe faf0 	bl	80092e4 <USBD_GetString>
 800ad04:	e004      	b.n	800ad10 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	4904      	ldr	r1, [pc, #16]	@ (800ad1c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad0a:	4805      	ldr	r0, [pc, #20]	@ (800ad20 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad0c:	f7fe faea 	bl	80092e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad10:	4b02      	ldr	r3, [pc, #8]	@ (800ad1c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	3708      	adds	r7, #8
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20009ab4 	.word	0x20009ab4
 800ad20:	0800b52c 	.word	0x0800b52c

0800ad24 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b084      	sub	sp, #16
 800ad28:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad2a:	4b0f      	ldr	r3, [pc, #60]	@ (800ad68 <Get_SerialNum+0x44>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad30:	4b0e      	ldr	r3, [pc, #56]	@ (800ad6c <Get_SerialNum+0x48>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad36:	4b0e      	ldr	r3, [pc, #56]	@ (800ad70 <Get_SerialNum+0x4c>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4413      	add	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d009      	beq.n	800ad5e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad4a:	2208      	movs	r2, #8
 800ad4c:	4909      	ldr	r1, [pc, #36]	@ (800ad74 <Get_SerialNum+0x50>)
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f000 f814 	bl	800ad7c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad54:	2204      	movs	r2, #4
 800ad56:	4908      	ldr	r1, [pc, #32]	@ (800ad78 <Get_SerialNum+0x54>)
 800ad58:	68b8      	ldr	r0, [r7, #8]
 800ad5a:	f000 f80f 	bl	800ad7c <IntToUnicode>
  }
}
 800ad5e:	bf00      	nop
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}
 800ad66:	bf00      	nop
 800ad68:	1fff7a10 	.word	0x1fff7a10
 800ad6c:	1fff7a14 	.word	0x1fff7a14
 800ad70:	1fff7a18 	.word	0x1fff7a18
 800ad74:	200000e6 	.word	0x200000e6
 800ad78:	200000f6 	.word	0x200000f6

0800ad7c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad7c:	b480      	push	{r7}
 800ad7e:	b087      	sub	sp, #28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	4613      	mov	r3, r2
 800ad88:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad8e:	2300      	movs	r3, #0
 800ad90:	75fb      	strb	r3, [r7, #23]
 800ad92:	e027      	b.n	800ade4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	0f1b      	lsrs	r3, r3, #28
 800ad98:	2b09      	cmp	r3, #9
 800ad9a:	d80b      	bhi.n	800adb4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	0f1b      	lsrs	r3, r3, #28
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	7dfb      	ldrb	r3, [r7, #23]
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	4619      	mov	r1, r3
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	440b      	add	r3, r1
 800adac:	3230      	adds	r2, #48	@ 0x30
 800adae:	b2d2      	uxtb	r2, r2
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	e00a      	b.n	800adca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	0f1b      	lsrs	r3, r3, #28
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	7dfb      	ldrb	r3, [r7, #23]
 800adbc:	005b      	lsls	r3, r3, #1
 800adbe:	4619      	mov	r1, r3
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	440b      	add	r3, r1
 800adc4:	3237      	adds	r2, #55	@ 0x37
 800adc6:	b2d2      	uxtb	r2, r2
 800adc8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	011b      	lsls	r3, r3, #4
 800adce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800add0:	7dfb      	ldrb	r3, [r7, #23]
 800add2:	005b      	lsls	r3, r3, #1
 800add4:	3301      	adds	r3, #1
 800add6:	68ba      	ldr	r2, [r7, #8]
 800add8:	4413      	add	r3, r2
 800adda:	2200      	movs	r2, #0
 800addc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adde:	7dfb      	ldrb	r3, [r7, #23]
 800ade0:	3301      	adds	r3, #1
 800ade2:	75fb      	strb	r3, [r7, #23]
 800ade4:	7dfa      	ldrb	r2, [r7, #23]
 800ade6:	79fb      	ldrb	r3, [r7, #7]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d3d3      	bcc.n	800ad94 <IntToUnicode+0x18>
  }
}
 800adec:	bf00      	nop
 800adee:	bf00      	nop
 800adf0:	371c      	adds	r7, #28
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
	...

0800adfc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b08a      	sub	sp, #40	@ 0x28
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae04:	f107 0314 	add.w	r3, r7, #20
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
 800ae0c:	605a      	str	r2, [r3, #4]
 800ae0e:	609a      	str	r2, [r3, #8]
 800ae10:	60da      	str	r2, [r3, #12]
 800ae12:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a24      	ldr	r2, [pc, #144]	@ (800aeac <HAL_PCD_MspInit+0xb0>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d141      	bne.n	800aea2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae1e:	2300      	movs	r3, #0
 800ae20:	613b      	str	r3, [r7, #16]
 800ae22:	4b23      	ldr	r3, [pc, #140]	@ (800aeb0 <HAL_PCD_MspInit+0xb4>)
 800ae24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae26:	4a22      	ldr	r2, [pc, #136]	@ (800aeb0 <HAL_PCD_MspInit+0xb4>)
 800ae28:	f043 0302 	orr.w	r3, r3, #2
 800ae2c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae2e:	4b20      	ldr	r3, [pc, #128]	@ (800aeb0 <HAL_PCD_MspInit+0xb4>)
 800ae30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	613b      	str	r3, [r7, #16]
 800ae38:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800ae3a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800ae3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae40:	2302      	movs	r3, #2
 800ae42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae44:	2300      	movs	r3, #0
 800ae46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ae48:	2300      	movs	r3, #0
 800ae4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ae4c:	230c      	movs	r3, #12
 800ae4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae50:	f107 0314 	add.w	r3, r7, #20
 800ae54:	4619      	mov	r1, r3
 800ae56:	4817      	ldr	r0, [pc, #92]	@ (800aeb4 <HAL_PCD_MspInit+0xb8>)
 800ae58:	f7f6 ff90 	bl	8001d7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800ae5c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ae60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ae62:	2300      	movs	r3, #0
 800ae64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800ae6a:	f107 0314 	add.w	r3, r7, #20
 800ae6e:	4619      	mov	r1, r3
 800ae70:	4810      	ldr	r0, [pc, #64]	@ (800aeb4 <HAL_PCD_MspInit+0xb8>)
 800ae72:	f7f6 ff83 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
 800ae7a:	4b0d      	ldr	r3, [pc, #52]	@ (800aeb0 <HAL_PCD_MspInit+0xb4>)
 800ae7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7e:	4a0c      	ldr	r2, [pc, #48]	@ (800aeb0 <HAL_PCD_MspInit+0xb4>)
 800ae80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ae84:	6313      	str	r3, [r2, #48]	@ 0x30
 800ae86:	4b0a      	ldr	r3, [pc, #40]	@ (800aeb0 <HAL_PCD_MspInit+0xb4>)
 800ae88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae8a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ae8e:	60fb      	str	r3, [r7, #12]
 800ae90:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800ae92:	2200      	movs	r2, #0
 800ae94:	2105      	movs	r1, #5
 800ae96:	204d      	movs	r0, #77	@ 0x4d
 800ae98:	f7f6 fd3e 	bl	8001918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ae9c:	204d      	movs	r0, #77	@ 0x4d
 800ae9e:	f7f6 fd57 	bl	8001950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800aea2:	bf00      	nop
 800aea4:	3728      	adds	r7, #40	@ 0x28
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	40040000 	.word	0x40040000
 800aeb0:	40023800 	.word	0x40023800
 800aeb4:	40020400 	.word	0x40020400

0800aeb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b082      	sub	sp, #8
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800aecc:	4619      	mov	r1, r3
 800aece:	4610      	mov	r0, r2
 800aed0:	f7fd f8a5 	bl	800801e <USBD_LL_SetupStage>
}
 800aed4:	bf00      	nop
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	460b      	mov	r3, r1
 800aee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800aeee:	78fa      	ldrb	r2, [r7, #3]
 800aef0:	6879      	ldr	r1, [r7, #4]
 800aef2:	4613      	mov	r3, r2
 800aef4:	00db      	lsls	r3, r3, #3
 800aef6:	4413      	add	r3, r2
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	440b      	add	r3, r1
 800aefc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	78fb      	ldrb	r3, [r7, #3]
 800af04:	4619      	mov	r1, r3
 800af06:	f7fd f8df 	bl	80080c8 <USBD_LL_DataOutStage>
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af12:	b580      	push	{r7, lr}
 800af14:	b082      	sub	sp, #8
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	460b      	mov	r3, r1
 800af1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800af24:	78fa      	ldrb	r2, [r7, #3]
 800af26:	6879      	ldr	r1, [r7, #4]
 800af28:	4613      	mov	r3, r2
 800af2a:	00db      	lsls	r3, r3, #3
 800af2c:	4413      	add	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	440b      	add	r3, r1
 800af32:	3320      	adds	r3, #32
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	78fb      	ldrb	r3, [r7, #3]
 800af38:	4619      	mov	r1, r3
 800af3a:	f7fd f978 	bl	800822e <USBD_LL_DataInStage>
}
 800af3e:	bf00      	nop
 800af40:	3708      	adds	r7, #8
 800af42:	46bd      	mov	sp, r7
 800af44:	bd80      	pop	{r7, pc}

0800af46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af46:	b580      	push	{r7, lr}
 800af48:	b082      	sub	sp, #8
 800af4a:	af00      	add	r7, sp, #0
 800af4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af54:	4618      	mov	r0, r3
 800af56:	f7fd fab2 	bl	80084be <USBD_LL_SOF>
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af6a:	2301      	movs	r3, #1
 800af6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	79db      	ldrb	r3, [r3, #7]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d102      	bne.n	800af7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af76:	2300      	movs	r3, #0
 800af78:	73fb      	strb	r3, [r7, #15]
 800af7a:	e008      	b.n	800af8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	79db      	ldrb	r3, [r3, #7]
 800af80:	2b02      	cmp	r3, #2
 800af82:	d102      	bne.n	800af8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
 800af88:	e001      	b.n	800af8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af8a:	f7f5 ff11 	bl	8000db0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800af94:	7bfa      	ldrb	r2, [r7, #15]
 800af96:	4611      	mov	r1, r2
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fd fa4c 	bl	8008436 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fd f9f4 	bl	8008392 <USBD_LL_Reset>
}
 800afaa:	bf00      	nop
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
	...

0800afb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7fd fa47 	bl	8008456 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	6812      	ldr	r2, [r2, #0]
 800afd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800afda:	f043 0301 	orr.w	r3, r3, #1
 800afde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	7adb      	ldrb	r3, [r3, #11]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d005      	beq.n	800aff4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afe8:	4b04      	ldr	r3, [pc, #16]	@ (800affc <HAL_PCD_SuspendCallback+0x48>)
 800afea:	691b      	ldr	r3, [r3, #16]
 800afec:	4a03      	ldr	r2, [pc, #12]	@ (800affc <HAL_PCD_SuspendCallback+0x48>)
 800afee:	f043 0306 	orr.w	r3, r3, #6
 800aff2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}
 800affc:	e000ed00 	.word	0xe000ed00

0800b000 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b00e:	4618      	mov	r0, r3
 800b010:	f7fd fa3d 	bl	800848e <USBD_LL_Resume>
}
 800b014:	bf00      	nop
 800b016:	3708      	adds	r7, #8
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}

0800b01c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b02e:	78fa      	ldrb	r2, [r7, #3]
 800b030:	4611      	mov	r1, r2
 800b032:	4618      	mov	r0, r3
 800b034:	f7fd fa95 	bl	8008562 <USBD_LL_IsoOUTIncomplete>
}
 800b038:	bf00      	nop
 800b03a:	3708      	adds	r7, #8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	460b      	mov	r3, r1
 800b04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b052:	78fa      	ldrb	r2, [r7, #3]
 800b054:	4611      	mov	r1, r2
 800b056:	4618      	mov	r0, r3
 800b058:	f7fd fa51 	bl	80084fe <USBD_LL_IsoINIncomplete>
}
 800b05c:	bf00      	nop
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b072:	4618      	mov	r0, r3
 800b074:	f7fd faa7 	bl	80085c6 <USBD_LL_DevConnected>
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b08e:	4618      	mov	r0, r3
 800b090:	f7fd faa4 	bl	80085dc <USBD_LL_DevDisconnected>
}
 800b094:	bf00      	nop
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d140      	bne.n	800b12e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b0ac:	4a22      	ldr	r2, [pc, #136]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	4a20      	ldr	r2, [pc, #128]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b0bc:	4b1e      	ldr	r3, [pc, #120]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0be:	4a1f      	ldr	r2, [pc, #124]	@ (800b13c <USBD_LL_Init+0xa0>)
 800b0c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0c4:	2206      	movs	r2, #6
 800b0c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b0c8:	4b1b      	ldr	r3, [pc, #108]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b0ce:	4b1a      	ldr	r3, [pc, #104]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b0d4:	4b18      	ldr	r3, [pc, #96]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0d6:	2202      	movs	r2, #2
 800b0d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b0da:	4b17      	ldr	r3, [pc, #92]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b0e0:	4b15      	ldr	r3, [pc, #84]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b0e6:	4b14      	ldr	r3, [pc, #80]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800b0ec:	4b12      	ldr	r3, [pc, #72]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b0f2:	4b11      	ldr	r3, [pc, #68]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b0f8:	4b0f      	ldr	r3, [pc, #60]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b0fe:	480e      	ldr	r0, [pc, #56]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b100:	f7f7 fd29 	bl	8002b56 <HAL_PCD_Init>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b10a:	f7f5 fe51 	bl	8000db0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b10e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b112:	4809      	ldr	r0, [pc, #36]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b114:	f7f8 ff55 	bl	8003fc2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b118:	2280      	movs	r2, #128	@ 0x80
 800b11a:	2100      	movs	r1, #0
 800b11c:	4806      	ldr	r0, [pc, #24]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b11e:	f7f8 ff09 	bl	8003f34 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b122:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800b126:	2101      	movs	r1, #1
 800b128:	4803      	ldr	r0, [pc, #12]	@ (800b138 <USBD_LL_Init+0x9c>)
 800b12a:	f7f8 ff03 	bl	8003f34 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	3708      	adds	r7, #8
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}
 800b138:	20009cb4 	.word	0x20009cb4
 800b13c:	40040000 	.word	0x40040000

0800b140 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b148:	2300      	movs	r3, #0
 800b14a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b156:	4618      	mov	r0, r3
 800b158:	f7f7 fe0c 	bl	8002d74 <HAL_PCD_Start>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	4618      	mov	r0, r3
 800b164:	f000 f942 	bl	800b3ec <USBD_Get_USB_Status>
 800b168:	4603      	mov	r3, r0
 800b16a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b16e:	4618      	mov	r0, r3
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b084      	sub	sp, #16
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
 800b17e:	4608      	mov	r0, r1
 800b180:	4611      	mov	r1, r2
 800b182:	461a      	mov	r2, r3
 800b184:	4603      	mov	r3, r0
 800b186:	70fb      	strb	r3, [r7, #3]
 800b188:	460b      	mov	r3, r1
 800b18a:	70bb      	strb	r3, [r7, #2]
 800b18c:	4613      	mov	r3, r2
 800b18e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b190:	2300      	movs	r3, #0
 800b192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b194:	2300      	movs	r3, #0
 800b196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b19e:	78bb      	ldrb	r3, [r7, #2]
 800b1a0:	883a      	ldrh	r2, [r7, #0]
 800b1a2:	78f9      	ldrb	r1, [r7, #3]
 800b1a4:	f7f8 fae0 	bl	8003768 <HAL_PCD_EP_Open>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ac:	7bfb      	ldrb	r3, [r7, #15]
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f000 f91c 	bl	800b3ec <USBD_Get_USB_Status>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b084      	sub	sp, #16
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b1dc:	78fa      	ldrb	r2, [r7, #3]
 800b1de:	4611      	mov	r1, r2
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7f8 fb2b 	bl	800383c <HAL_PCD_EP_Close>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f000 f8fd 	bl	800b3ec <USBD_Get_USB_Status>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	3710      	adds	r7, #16
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}

0800b200 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b084      	sub	sp, #16
 800b204:	af00      	add	r7, sp, #0
 800b206:	6078      	str	r0, [r7, #4]
 800b208:	460b      	mov	r3, r1
 800b20a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b21a:	78fa      	ldrb	r2, [r7, #3]
 800b21c:	4611      	mov	r1, r2
 800b21e:	4618      	mov	r0, r3
 800b220:	f7f8 fbe3 	bl	80039ea <HAL_PCD_EP_SetStall>
 800b224:	4603      	mov	r3, r0
 800b226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b228:	7bfb      	ldrb	r3, [r7, #15]
 800b22a:	4618      	mov	r0, r3
 800b22c:	f000 f8de 	bl	800b3ec <USBD_Get_USB_Status>
 800b230:	4603      	mov	r3, r0
 800b232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b234:	7bbb      	ldrb	r3, [r7, #14]
}
 800b236:	4618      	mov	r0, r3
 800b238:	3710      	adds	r7, #16
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd80      	pop	{r7, pc}

0800b23e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b084      	sub	sp, #16
 800b242:	af00      	add	r7, sp, #0
 800b244:	6078      	str	r0, [r7, #4]
 800b246:	460b      	mov	r3, r1
 800b248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b24a:	2300      	movs	r3, #0
 800b24c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b24e:	2300      	movs	r3, #0
 800b250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b258:	78fa      	ldrb	r2, [r7, #3]
 800b25a:	4611      	mov	r1, r2
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7f8 fc27 	bl	8003ab0 <HAL_PCD_EP_ClrStall>
 800b262:	4603      	mov	r3, r0
 800b264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b266:	7bfb      	ldrb	r3, [r7, #15]
 800b268:	4618      	mov	r0, r3
 800b26a:	f000 f8bf 	bl	800b3ec <USBD_Get_USB_Status>
 800b26e:	4603      	mov	r3, r0
 800b270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b272:	7bbb      	ldrb	r3, [r7, #14]
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b28e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b294:	2b00      	cmp	r3, #0
 800b296:	da0b      	bge.n	800b2b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b298:	78fb      	ldrb	r3, [r7, #3]
 800b29a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b29e:	68f9      	ldr	r1, [r7, #12]
 800b2a0:	4613      	mov	r3, r2
 800b2a2:	00db      	lsls	r3, r3, #3
 800b2a4:	4413      	add	r3, r2
 800b2a6:	009b      	lsls	r3, r3, #2
 800b2a8:	440b      	add	r3, r1
 800b2aa:	3316      	adds	r3, #22
 800b2ac:	781b      	ldrb	r3, [r3, #0]
 800b2ae:	e00b      	b.n	800b2c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2b0:	78fb      	ldrb	r3, [r7, #3]
 800b2b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2b6:	68f9      	ldr	r1, [r7, #12]
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	440b      	add	r3, r1
 800b2c2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800b2c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3714      	adds	r7, #20
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d2:	4770      	bx	lr

0800b2d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b084      	sub	sp, #16
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b2ee:	78fa      	ldrb	r2, [r7, #3]
 800b2f0:	4611      	mov	r1, r2
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f8 fa14 	bl	8003720 <HAL_PCD_SetAddress>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	4618      	mov	r0, r3
 800b300:	f000 f874 	bl	800b3ec <USBD_Get_USB_Status>
 800b304:	4603      	mov	r3, r0
 800b306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b308:	7bbb      	ldrb	r3, [r7, #14]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3710      	adds	r7, #16
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b086      	sub	sp, #24
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	607a      	str	r2, [r7, #4]
 800b31c:	603b      	str	r3, [r7, #0]
 800b31e:	460b      	mov	r3, r1
 800b320:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b322:	2300      	movs	r3, #0
 800b324:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b330:	7af9      	ldrb	r1, [r7, #11]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	687a      	ldr	r2, [r7, #4]
 800b336:	f7f8 fb1e 	bl	8003976 <HAL_PCD_EP_Transmit>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b33e:	7dfb      	ldrb	r3, [r7, #23]
 800b340:	4618      	mov	r0, r3
 800b342:	f000 f853 	bl	800b3ec <USBD_Get_USB_Status>
 800b346:	4603      	mov	r3, r0
 800b348:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b34a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3718      	adds	r7, #24
 800b350:	46bd      	mov	sp, r7
 800b352:	bd80      	pop	{r7, pc}

0800b354 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	607a      	str	r2, [r7, #4]
 800b35e:	603b      	str	r3, [r7, #0]
 800b360:	460b      	mov	r3, r1
 800b362:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b364:	2300      	movs	r3, #0
 800b366:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b368:	2300      	movs	r3, #0
 800b36a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800b372:	7af9      	ldrb	r1, [r7, #11]
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	687a      	ldr	r2, [r7, #4]
 800b378:	f7f8 faaa 	bl	80038d0 <HAL_PCD_EP_Receive>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b380:	7dfb      	ldrb	r3, [r7, #23]
 800b382:	4618      	mov	r0, r3
 800b384:	f000 f832 	bl	800b3ec <USBD_Get_USB_Status>
 800b388:	4603      	mov	r3, r0
 800b38a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b38c:	7dbb      	ldrb	r3, [r7, #22]
}
 800b38e:	4618      	mov	r0, r3
 800b390:	3718      	adds	r7, #24
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}

0800b396 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b396:	b580      	push	{r7, lr}
 800b398:	b082      	sub	sp, #8
 800b39a:	af00      	add	r7, sp, #0
 800b39c:	6078      	str	r0, [r7, #4]
 800b39e:	460b      	mov	r3, r1
 800b3a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b3a8:	78fa      	ldrb	r2, [r7, #3]
 800b3aa:	4611      	mov	r1, r2
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7f8 faca 	bl	8003946 <HAL_PCD_EP_GetRxCount>
 800b3b2:	4603      	mov	r3, r0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3708      	adds	r7, #8
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b3bc:	b480      	push	{r7}
 800b3be:	b083      	sub	sp, #12
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b3c4:	4b03      	ldr	r3, [pc, #12]	@ (800b3d4 <USBD_static_malloc+0x18>)
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	370c      	adds	r7, #12
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr
 800b3d2:	bf00      	nop
 800b3d4:	2000a198 	.word	0x2000a198

0800b3d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b083      	sub	sp, #12
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]

}
 800b3e0:	bf00      	nop
 800b3e2:	370c      	adds	r7, #12
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b085      	sub	sp, #20
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3fa:	79fb      	ldrb	r3, [r7, #7]
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d817      	bhi.n	800b430 <USBD_Get_USB_Status+0x44>
 800b400:	a201      	add	r2, pc, #4	@ (adr r2, 800b408 <USBD_Get_USB_Status+0x1c>)
 800b402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b406:	bf00      	nop
 800b408:	0800b419 	.word	0x0800b419
 800b40c:	0800b41f 	.word	0x0800b41f
 800b410:	0800b425 	.word	0x0800b425
 800b414:	0800b42b 	.word	0x0800b42b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b418:	2300      	movs	r3, #0
 800b41a:	73fb      	strb	r3, [r7, #15]
    break;
 800b41c:	e00b      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	73fb      	strb	r3, [r7, #15]
    break;
 800b422:	e008      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b424:	2301      	movs	r3, #1
 800b426:	73fb      	strb	r3, [r7, #15]
    break;
 800b428:	e005      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b42a:	2303      	movs	r3, #3
 800b42c:	73fb      	strb	r3, [r7, #15]
    break;
 800b42e:	e002      	b.n	800b436 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b430:	2303      	movs	r3, #3
 800b432:	73fb      	strb	r3, [r7, #15]
    break;
 800b434:	bf00      	nop
  }
  return usb_status;
 800b436:	7bfb      	ldrb	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3714      	adds	r7, #20
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <memset>:
 800b444:	4402      	add	r2, r0
 800b446:	4603      	mov	r3, r0
 800b448:	4293      	cmp	r3, r2
 800b44a:	d100      	bne.n	800b44e <memset+0xa>
 800b44c:	4770      	bx	lr
 800b44e:	f803 1b01 	strb.w	r1, [r3], #1
 800b452:	e7f9      	b.n	800b448 <memset+0x4>

0800b454 <__libc_init_array>:
 800b454:	b570      	push	{r4, r5, r6, lr}
 800b456:	4d0d      	ldr	r5, [pc, #52]	@ (800b48c <__libc_init_array+0x38>)
 800b458:	4c0d      	ldr	r4, [pc, #52]	@ (800b490 <__libc_init_array+0x3c>)
 800b45a:	1b64      	subs	r4, r4, r5
 800b45c:	10a4      	asrs	r4, r4, #2
 800b45e:	2600      	movs	r6, #0
 800b460:	42a6      	cmp	r6, r4
 800b462:	d109      	bne.n	800b478 <__libc_init_array+0x24>
 800b464:	4d0b      	ldr	r5, [pc, #44]	@ (800b494 <__libc_init_array+0x40>)
 800b466:	4c0c      	ldr	r4, [pc, #48]	@ (800b498 <__libc_init_array+0x44>)
 800b468:	f000 f818 	bl	800b49c <_init>
 800b46c:	1b64      	subs	r4, r4, r5
 800b46e:	10a4      	asrs	r4, r4, #2
 800b470:	2600      	movs	r6, #0
 800b472:	42a6      	cmp	r6, r4
 800b474:	d105      	bne.n	800b482 <__libc_init_array+0x2e>
 800b476:	bd70      	pop	{r4, r5, r6, pc}
 800b478:	f855 3b04 	ldr.w	r3, [r5], #4
 800b47c:	4798      	blx	r3
 800b47e:	3601      	adds	r6, #1
 800b480:	e7ee      	b.n	800b460 <__libc_init_array+0xc>
 800b482:	f855 3b04 	ldr.w	r3, [r5], #4
 800b486:	4798      	blx	r3
 800b488:	3601      	adds	r6, #1
 800b48a:	e7f2      	b.n	800b472 <__libc_init_array+0x1e>
 800b48c:	0800b55c 	.word	0x0800b55c
 800b490:	0800b55c 	.word	0x0800b55c
 800b494:	0800b55c 	.word	0x0800b55c
 800b498:	0800b560 	.word	0x0800b560

0800b49c <_init>:
 800b49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49e:	bf00      	nop
 800b4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4a2:	bc08      	pop	{r3}
 800b4a4:	469e      	mov	lr, r3
 800b4a6:	4770      	bx	lr

0800b4a8 <_fini>:
 800b4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4aa:	bf00      	nop
 800b4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4ae:	bc08      	pop	{r3}
 800b4b0:	469e      	mov	lr, r3
 800b4b2:	4770      	bx	lr
