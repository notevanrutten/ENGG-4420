
Home-Security-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100e4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08010294  08010294  00011294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010698  08010698  00012150  2**0
                  CONTENTS
  4 .ARM          00000008  08010698  08010698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106a0  080106a0  00012150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106a0  080106a0  000116a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106a4  080106a4  000116a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000150  20000000  080106a8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012150  2**0
                  CONTENTS
 10 .bss          000069c0  20000150  20000150  00012150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006b10  20006b10  00012150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c3d6  00000000  00000000  00012180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f64  00000000  00000000  0003e556  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025f8  00000000  00000000  000444c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d6a  00000000  00000000  00046ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008d39  00000000  00000000  00048822  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e9e7  00000000  00000000  0005155b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5ea0  00000000  00000000  0007ff42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00175de2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a71c  00000000  00000000  00175e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00180544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000150 	.word	0x20000150
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801027c 	.word	0x0801027c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000154 	.word	0x20000154
 80001ec:	0801027c 	.word	0x0801027c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000594:	f001 fb68 	bl	8001c68 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000598:	f000 f87a 	bl	8000690 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800059c:	f000 fb1e 	bl	8000bdc <MX_GPIO_Init>
	MX_CRC_Init();
 80005a0:	f000 f8e0 	bl	8000764 <MX_CRC_Init>
	MX_DMA2D_Init();
 80005a4:	f000 f8f2 	bl	800078c <MX_DMA2D_Init>
	MX_FMC_Init();
 80005a8:	f000 fac8 	bl	8000b3c <MX_FMC_Init>
	MX_I2C3_Init();
 80005ac:	f000 f920 	bl	80007f0 <MX_I2C3_Init>
	MX_LTDC_Init();
 80005b0:	f000 f95e 	bl	8000870 <MX_LTDC_Init>
	MX_SPI5_Init();
 80005b4:	f000 fa12 	bl	80009dc <MX_SPI5_Init>
	MX_TIM1_Init();
 80005b8:	f000 fa46 	bl	8000a48 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 80005bc:	f000 fa94 	bl	8000ae8 <MX_USART1_UART_Init>
	MX_SPI4_Init();
 80005c0:	f000 f9d6 	bl	8000970 <MX_SPI4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80005c4:	f00a ffe4 	bl	800b590 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of motionSem */
	motionSemHandle = osSemaphoreNew(1, 0, &motionSem_attributes);
 80005c8:	4a1e      	ldr	r2, [pc, #120]	@ (8000644 <main+0xb4>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	2001      	movs	r0, #1
 80005ce:	f00b f995 	bl	800b8fc <osSemaphoreNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a1c      	ldr	r2, [pc, #112]	@ (8000648 <main+0xb8>)
 80005d6:	6013      	str	r3, [r2, #0]

	/* creation of alertSem */
	alertSemHandle = osSemaphoreNew(3, 0, &alertSem_attributes);
 80005d8:	4a1c      	ldr	r2, [pc, #112]	@ (800064c <main+0xbc>)
 80005da:	2100      	movs	r1, #0
 80005dc:	2003      	movs	r0, #3
 80005de:	f00b f98d 	bl	800b8fc <osSemaphoreNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000650 <main+0xc0>)
 80005e6:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of alertTimer */
	alertTimerHandle = osTimerNew(alertTimerCallback, osTimerOnce, NULL,
 80005e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <main+0xc4>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	481a      	ldr	r0, [pc, #104]	@ (8000658 <main+0xc8>)
 80005f0:	f00b f8da 	bl	800b7a8 <osTimerNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a19      	ldr	r2, [pc, #100]	@ (800065c <main+0xcc>)
 80005f8:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80005fa:	4a19      	ldr	r2, [pc, #100]	@ (8000660 <main+0xd0>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4819      	ldr	r0, [pc, #100]	@ (8000664 <main+0xd4>)
 8000600:	f00b f810 	bl	800b624 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a18      	ldr	r2, [pc, #96]	@ (8000668 <main+0xd8>)
 8000608:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motionTask */
	motionTaskHandle = osThreadNew(StartMotionTask, NULL,
 800060a:	4a18      	ldr	r2, [pc, #96]	@ (800066c <main+0xdc>)
 800060c:	2100      	movs	r1, #0
 800060e:	4818      	ldr	r0, [pc, #96]	@ (8000670 <main+0xe0>)
 8000610:	f00b f808 	bl	800b624 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <main+0xe4>)
 8000618:	6013      	str	r3, [r2, #0]
			&motionTask_attributes);

	/* creation of captureTask */
	captureTaskHandle = osThreadNew(StartCaptureTask, NULL,
 800061a:	4a17      	ldr	r2, [pc, #92]	@ (8000678 <main+0xe8>)
 800061c:	2100      	movs	r1, #0
 800061e:	4817      	ldr	r0, [pc, #92]	@ (800067c <main+0xec>)
 8000620:	f00b f800 	bl	800b624 <osThreadNew>
 8000624:	4603      	mov	r3, r0
 8000626:	4a16      	ldr	r2, [pc, #88]	@ (8000680 <main+0xf0>)
 8000628:	6013      	str	r3, [r2, #0]
			&captureTask_attributes);

	/* creation of alertTask */
	alertTaskHandle = osThreadNew(StartAlertTask, NULL, &alertTask_attributes);
 800062a:	4a16      	ldr	r2, [pc, #88]	@ (8000684 <main+0xf4>)
 800062c:	2100      	movs	r1, #0
 800062e:	4816      	ldr	r0, [pc, #88]	@ (8000688 <main+0xf8>)
 8000630:	f00a fff8 	bl	800b624 <osThreadNew>
 8000634:	4603      	mov	r3, r0
 8000636:	4a15      	ldr	r2, [pc, #84]	@ (800068c <main+0xfc>)
 8000638:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800063a:	f00a ffcd 	bl	800b5d8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800063e:	bf00      	nop
 8000640:	e7fd      	b.n	800063e <main+0xae>
 8000642:	bf00      	nop
 8000644:	0801062c 	.word	0x0801062c
 8000648:	20000438 	.word	0x20000438
 800064c:	0801063c 	.word	0x0801063c
 8000650:	2000043c 	.word	0x2000043c
 8000654:	0801061c 	.word	0x0801061c
 8000658:	08001269 	.word	0x08001269
 800065c:	20000434 	.word	0x20000434
 8000660:	0801058c 	.word	0x0801058c
 8000664:	08001059 	.word	0x08001059
 8000668:	20000424 	.word	0x20000424
 800066c:	080105b0 	.word	0x080105b0
 8000670:	080010d1 	.word	0x080010d1
 8000674:	20000428 	.word	0x20000428
 8000678:	080105d4 	.word	0x080105d4
 800067c:	08001161 	.word	0x08001161
 8000680:	2000042c 	.word	0x2000042c
 8000684:	080105f8 	.word	0x080105f8
 8000688:	08001205 	.word	0x08001205
 800068c:	20000430 	.word	0x20000430

08000690 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b094      	sub	sp, #80	@ 0x50
 8000694:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2230      	movs	r2, #48	@ 0x30
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f00f f96c 	bl	800f97c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006a4:	f107 030c 	add.w	r3, r7, #12
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
 80006b2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	4b28      	ldr	r3, [pc, #160]	@ (800075c <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	4a27      	ldr	r2, [pc, #156]	@ (800075c <SystemClock_Config+0xcc>)
 80006be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	4b22      	ldr	r3, [pc, #136]	@ (8000760 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006dc:	4a20      	ldr	r2, [pc, #128]	@ (8000760 <SystemClock_Config+0xd0>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000760 <SystemClock_Config+0xd0>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000702:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000708:	2348      	movs	r3, #72	@ 0x48
 800070a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000710:	2303      	movs	r3, #3
 8000712:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000714:	f107 0320 	add.w	r3, r7, #32
 8000718:	4618      	mov	r0, r3
 800071a:	f004 ff4b 	bl	80055b4 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x98>
		Error_Handler();
 8000724:	f000 fdcc 	bl	80012c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2302      	movs	r3, #2
 800072e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000734:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000738:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	2102      	movs	r1, #2
 8000744:	4618      	mov	r0, r3
 8000746:	f005 f9ad 	bl	8005aa4 <HAL_RCC_ClockConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xc4>
		Error_Handler();
 8000750:	f000 fdb6 	bl	80012c0 <Error_Handler>
	}
}
 8000754:	bf00      	nop
 8000756:	3750      	adds	r7, #80	@ 0x50
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <MX_CRC_Init+0x20>)
 800076a:	4a07      	ldr	r2, [pc, #28]	@ (8000788 <MX_CRC_Init+0x24>)
 800076c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800076e:	4805      	ldr	r0, [pc, #20]	@ (8000784 <MX_CRC_Init+0x20>)
 8000770:	f001 fbc2 	bl	8001ef8 <HAL_CRC_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_CRC_Init+0x1a>
		Error_Handler();
 800077a:	f000 fda1 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	2000016c 	.word	0x2000016c
 8000788:	40023000 	.word	0x40023000

0800078c <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 8000792:	4a16      	ldr	r2, [pc, #88]	@ (80007ec <MX_DMA2D_Init+0x60>)
 8000794:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 8000798:	2200      	movs	r2, #0
 800079a:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 80007c0:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007c2:	f001 fbb5 	bl	8001f30 <HAL_DMA2D_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_DMA2D_Init+0x44>
		Error_Handler();
 80007cc:	f000 fd78 	bl	80012c0 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 80007d0:	2101      	movs	r1, #1
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_DMA2D_Init+0x5c>)
 80007d4:	f001 fd06 	bl	80021e4 <HAL_DMA2D_ConfigLayer>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_DMA2D_Init+0x56>
		Error_Handler();
 80007de:	f000 fd6f 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000174 	.word	0x20000174
 80007ec:	4002b000 	.word	0x4002b000

080007f0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 80007f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000864 <MX_I2C3_Init+0x74>)
 80007f6:	4a1c      	ldr	r2, [pc, #112]	@ (8000868 <MX_I2C3_Init+0x78>)
 80007f8:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 80007fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000864 <MX_I2C3_Init+0x74>)
 80007fc:	4a1b      	ldr	r2, [pc, #108]	@ (800086c <MX_I2C3_Init+0x7c>)
 80007fe:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000806:	4b17      	ldr	r3, [pc, #92]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800080c:	4b15      	ldr	r3, [pc, #84]	@ (8000864 <MX_I2C3_Init+0x74>)
 800080e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000812:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	4b13      	ldr	r3, [pc, #76]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800081a:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <MX_I2C3_Init+0x74>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000820:	4b10      	ldr	r3, [pc, #64]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000822:	2200      	movs	r2, #0
 8000824:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000826:	4b0f      	ldr	r3, [pc, #60]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800082c:	480d      	ldr	r0, [pc, #52]	@ (8000864 <MX_I2C3_Init+0x74>)
 800082e:	f001 ff63 	bl	80026f8 <HAL_I2C_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000838:	f000 fd42 	bl	80012c0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800083c:	2100      	movs	r1, #0
 800083e:	4809      	ldr	r0, [pc, #36]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000840:	f003 f882 	bl	8003948 <HAL_I2CEx_ConfigAnalogFilter>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800084a:	f000 fd39 	bl	80012c0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 800084e:	2100      	movs	r1, #0
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <MX_I2C3_Init+0x74>)
 8000852:	f003 f8b5 	bl	80039c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_I2C3_Init+0x70>
		Error_Handler();
 800085c:	f000 fd30 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	200001b4 	.word	0x200001b4
 8000868:	40005c00 	.word	0x40005c00
 800086c:	000186a0 	.word	0x000186a0

08000870 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b08e      	sub	sp, #56	@ 0x38
 8000874:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2234      	movs	r2, #52	@ 0x34
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f00f f87d 	bl	800f97c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8000882:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <MX_LTDC_Init+0xf8>)
 8000884:	4a39      	ldr	r2, [pc, #228]	@ (800096c <MX_LTDC_Init+0xfc>)
 8000886:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000888:	4b37      	ldr	r3, [pc, #220]	@ (8000968 <MX_LTDC_Init+0xf8>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800088e:	4b36      	ldr	r3, [pc, #216]	@ (8000968 <MX_LTDC_Init+0xf8>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000894:	4b34      	ldr	r3, [pc, #208]	@ (8000968 <MX_LTDC_Init+0xf8>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800089a:	4b33      	ldr	r3, [pc, #204]	@ (8000968 <MX_LTDC_Init+0xf8>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 80008a0:	4b31      	ldr	r3, [pc, #196]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008a2:	2209      	movs	r2, #9
 80008a4:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 80008a6:	4b30      	ldr	r3, [pc, #192]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 80008ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008ae:	221d      	movs	r2, #29
 80008b0:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 80008b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008b4:	2203      	movs	r2, #3
 80008b6:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 80008b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008ba:	f240 120d 	movw	r2, #269	@ 0x10d
 80008be:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 80008c0:	4b29      	ldr	r3, [pc, #164]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008c2:	f240 1243 	movw	r2, #323	@ 0x143
 80008c6:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 80008c8:	4b27      	ldr	r3, [pc, #156]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008ca:	f240 1217 	movw	r2, #279	@ 0x117
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 80008d0:	4b25      	ldr	r3, [pc, #148]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008d2:	f240 1247 	movw	r2, #327	@ 0x147
 80008d6:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80008d8:	4b23      	ldr	r3, [pc, #140]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80008e0:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80008f0:	481d      	ldr	r0, [pc, #116]	@ (8000968 <MX_LTDC_Init+0xf8>)
 80008f2:	f003 f8a5 	bl	8003a40 <HAL_LTDC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_LTDC_Init+0x90>
		Error_Handler();
 80008fc:	f000 fce0 	bl	80012c0 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 8000904:	23f0      	movs	r3, #240	@ 0xf0
 8000906:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 800090c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000910:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000912:	2302      	movs	r3, #2
 8000914:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8000916:	23ff      	movs	r3, #255	@ 0xff
 8000918:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800091e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000922:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000924:	2307      	movs	r3, #7
 8000926:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 8000928:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 800092e:	23f0      	movs	r3, #240	@ 0xf0
 8000930:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 8000932:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000936:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2200      	movs	r2, #0
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	@ (8000968 <MX_LTDC_Init+0xf8>)
 8000952:	f003 fa07 	bl	8003d64 <HAL_LTDC_ConfigLayer>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_LTDC_Init+0xf0>
		Error_Handler();
 800095c:	f000 fcb0 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3738      	adds	r7, #56	@ 0x38
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000208 	.word	0x20000208
 800096c:	40016800 	.word	0x40016800

08000970 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 8000974:	4b17      	ldr	r3, [pc, #92]	@ (80009d4 <MX_SPI4_Init+0x64>)
 8000976:	4a18      	ldr	r2, [pc, #96]	@ (80009d8 <MX_SPI4_Init+0x68>)
 8000978:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <MX_SPI4_Init+0x64>)
 800097c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000980:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000982:	4b14      	ldr	r3, [pc, #80]	@ (80009d4 <MX_SPI4_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <MX_SPI4_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098e:	4b11      	ldr	r3, [pc, #68]	@ (80009d4 <MX_SPI4_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <MX_SPI4_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 800099a:	4b0e      	ldr	r3, [pc, #56]	@ (80009d4 <MX_SPI4_Init+0x64>)
 800099c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009a0:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009a2:	4b0c      	ldr	r3, [pc, #48]	@ (80009d4 <MX_SPI4_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <MX_SPI4_Init+0x64>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ae:	4b09      	ldr	r3, [pc, #36]	@ (80009d4 <MX_SPI4_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b4:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <MX_SPI4_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 10;
 80009ba:	4b06      	ldr	r3, [pc, #24]	@ (80009d4 <MX_SPI4_Init+0x64>)
 80009bc:	220a      	movs	r2, #10
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 80009c0:	4804      	ldr	r0, [pc, #16]	@ (80009d4 <MX_SPI4_Init+0x64>)
 80009c2:	f005 fcb5 	bl	8006330 <HAL_SPI_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_SPI4_Init+0x60>
		Error_Handler();
 80009cc:	f000 fc78 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	200002b0 	.word	0x200002b0
 80009d8:	40013400 	.word	0x40013400

080009dc <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80009e0:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <MX_SPI5_Init+0x64>)
 80009e2:	4a18      	ldr	r2, [pc, #96]	@ (8000a44 <MX_SPI5_Init+0x68>)
 80009e4:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80009e6:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_SPI5_Init+0x64>)
 80009e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009ec:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <MX_SPI5_Init+0x64>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <MX_SPI5_Init+0x64>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <MX_SPI5_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a0c:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a10:	2218      	movs	r2, #24
 8000a12:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a14:	4b0a      	ldr	r3, [pc, #40]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a1a:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a20:	4b07      	ldr	r3, [pc, #28]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000a26:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a28:	220a      	movs	r2, #10
 8000a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8000a2c:	4804      	ldr	r0, [pc, #16]	@ (8000a40 <MX_SPI5_Init+0x64>)
 8000a2e:	f005 fc7f 	bl	8006330 <HAL_SPI_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_SPI5_Init+0x60>
		Error_Handler();
 8000a38:	f000 fc42 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000308 	.word	0x20000308
 8000a44:	40015000 	.word	0x40015000

08000a48 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ae4 <MX_TIM1_Init+0x9c>)
 8000a68:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000a6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a7c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000a84:	4b16      	ldr	r3, [pc, #88]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000a90:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000a92:	f006 fa1f 	bl	8006ed4 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_TIM1_Init+0x58>
		Error_Handler();
 8000a9c:	f000 fc10 	bl	80012c0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aa4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000aa6:	f107 0308 	add.w	r3, r7, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000aae:	f006 fbc1 	bl	8007234 <HAL_TIM_ConfigClockSource>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM1_Init+0x74>
		Error_Handler();
 8000ab8:	f000 fc02 	bl	80012c0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_TIM1_Init+0x98>)
 8000aca:	f006 fde9 	bl	80076a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000ad4:	f000 fbf4 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000ad8:	bf00      	nop
 8000ada:	3718      	adds	r7, #24
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000360 	.word	0x20000360
 8000ae4:	40010000 	.word	0x40010000

08000ae8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000aec:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000aee:	4a12      	ldr	r2, [pc, #72]	@ (8000b38 <MX_USART1_UART_Init+0x50>)
 8000af0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000af2:	4b10      	ldr	r3, [pc, #64]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b0e      	ldr	r3, [pc, #56]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0b      	ldr	r3, [pc, #44]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b08      	ldr	r3, [pc, #32]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000b1e:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_USART1_UART_Init+0x4c>)
 8000b20:	f006 fe4e 	bl	80077c0 <HAL_UART_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000b2a:	f000 fbc9 	bl	80012c0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	200003a8 	.word	0x200003a8
 8000b38:	40011000 	.word	0x40011000

08000b3c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]
 8000b52:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b56:	4a20      	ldr	r2, [pc, #128]	@ (8000bd8 <MX_FMC_Init+0x9c>)
 8000b58:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b60:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b68:	2204      	movs	r2, #4
 8000b6a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b6e:	2210      	movs	r2, #16
 8000b70:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b72:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b74:	2240      	movs	r2, #64	@ 0x40
 8000b76:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000b78:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b7e:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000b8c:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000b96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b9a:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000bac:	2303      	movs	r3, #3
 8000bae:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000bb8:	1d3b      	adds	r3, r7, #4
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	@ (8000bd4 <MX_FMC_Init+0x98>)
 8000bbe:	f005 fb83 	bl	80062c8 <HAL_SDRAM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_FMC_Init+0x90>
		Error_Handler();
 8000bc8:	f000 fb7a 	bl	80012c0 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000bcc:	bf00      	nop
 8000bce:	3720      	adds	r7, #32
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200003f0 	.word	0x200003f0
 8000bd8:	a0000140 	.word	0xa0000140

08000bdc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08e      	sub	sp, #56	@ 0x38
 8000be0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
 8000bf6:	4b86      	ldr	r3, [pc, #536]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a85      	ldr	r2, [pc, #532]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b83      	ldr	r3, [pc, #524]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	623b      	str	r3, [r7, #32]
 8000c0c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
 8000c12:	4b7f      	ldr	r3, [pc, #508]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a7e      	ldr	r2, [pc, #504]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0304 	and.w	r3, r3, #4
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61bb      	str	r3, [r7, #24]
 8000c2e:	4b78      	ldr	r3, [pc, #480]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a77      	ldr	r2, [pc, #476]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c34:	f043 0320 	orr.w	r3, r3, #32
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b75      	ldr	r3, [pc, #468]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0320 	and.w	r3, r3, #32
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	4b71      	ldr	r3, [pc, #452]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a70      	ldr	r2, [pc, #448]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b6e      	ldr	r3, [pc, #440]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b6a      	ldr	r3, [pc, #424]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6a:	4a69      	ldr	r2, [pc, #420]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c72:	4b67      	ldr	r3, [pc, #412]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	4b63      	ldr	r3, [pc, #396]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c86:	4a62      	ldr	r2, [pc, #392]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c88:	f043 0302 	orr.w	r3, r3, #2
 8000c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c8e:	4b60      	ldr	r3, [pc, #384]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	f003 0302 	and.w	r3, r3, #2
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b5c      	ldr	r3, [pc, #368]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a5b      	ldr	r2, [pc, #364]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	4b59      	ldr	r3, [pc, #356]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	4b55      	ldr	r3, [pc, #340]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a54      	ldr	r2, [pc, #336]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b52      	ldr	r3, [pc, #328]	@ (8000e10 <MX_GPIO_Init+0x234>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2116      	movs	r1, #22
 8000cd6:	484f      	ldr	r0, [pc, #316]	@ (8000e14 <MX_GPIO_Init+0x238>)
 8000cd8:	f001 fcc2 	bl	8002660 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2180      	movs	r1, #128	@ 0x80
 8000ce0:	484d      	ldr	r0, [pc, #308]	@ (8000e18 <MX_GPIO_Init+0x23c>)
 8000ce2:	f001 fcbd 	bl	8002660 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000cec:	484b      	ldr	r0, [pc, #300]	@ (8000e1c <MX_GPIO_Init+0x240>)
 8000cee:	f001 fcb7 	bl	8002660 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000cf8:	4849      	ldr	r0, [pc, #292]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000cfa:	f001 fcb1 	bl	8002660 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000cfe:	2316      	movs	r3, #22
 8000d00:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d02:	2301      	movs	r3, #1
 8000d04:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	4619      	mov	r1, r3
 8000d14:	483f      	ldr	r0, [pc, #252]	@ (8000e14 <MX_GPIO_Init+0x238>)
 8000d16:	f001 faf7 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000d1a:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d20:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4839      	ldr	r0, [pc, #228]	@ (8000e18 <MX_GPIO_Init+0x23c>)
 8000d32:	f001 fae9 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d36:	2380      	movs	r3, #128	@ 0x80
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4832      	ldr	r0, [pc, #200]	@ (8000e18 <MX_GPIO_Init+0x23c>)
 8000d4e:	f001 fadb 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000d52:	2320      	movs	r3, #32
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d56:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	482b      	ldr	r0, [pc, #172]	@ (8000e14 <MX_GPIO_Init+0x238>)
 8000d68:	f001 face 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d70:	2300      	movs	r3, #0
 8000d72:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4829      	ldr	r0, [pc, #164]	@ (8000e24 <MX_GPIO_Init+0x248>)
 8000d80:	f001 fac2 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000d84:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4820      	ldr	r0, [pc, #128]	@ (8000e1c <MX_GPIO_Init+0x240>)
 8000d9a:	f001 fab5 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000d9e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000db0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db4:	4619      	mov	r1, r3
 8000db6:	4819      	ldr	r0, [pc, #100]	@ (8000e1c <MX_GPIO_Init+0x240>)
 8000db8:	f001 faa6 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dc2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4810      	ldr	r0, [pc, #64]	@ (8000e14 <MX_GPIO_Init+0x238>)
 8000dd4:	f001 fa98 	bl	8002308 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000dd8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dee:	4619      	mov	r1, r3
 8000df0:	480b      	ldr	r0, [pc, #44]	@ (8000e20 <MX_GPIO_Init+0x244>)
 8000df2:	f001 fa89 	bl	8002308 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000df6:	2200      	movs	r2, #0
 8000df8:	2105      	movs	r1, #5
 8000dfa:	2017      	movs	r0, #23
 8000dfc:	f001 f852 	bl	8001ea4 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e00:	2017      	movs	r0, #23
 8000e02:	f001 f86b 	bl	8001edc <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e06:	bf00      	nop
 8000e08:	3738      	adds	r7, #56	@ 0x38
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40021800 	.word	0x40021800
 8000e24:	40020400 	.word	0x40020400

08000e28 <CDC_Print>:

/* USER CODE BEGIN 4 */

void CDC_Print(const char *msg) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	// print over USB CDC
	while (CDC_Transmit_HS((uint8_t*) msg, strlen(msg)) != USBD_OK) {
 8000e30:	e002      	b.n	8000e38 <CDC_Print+0x10>
		osDelay(1);
 8000e32:	2001      	movs	r0, #1
 8000e34:	f00a fc88 	bl	800b748 <osDelay>
	while (CDC_Transmit_HS((uint8_t*) msg, strlen(msg)) != USBD_OK) {
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff f9d9 	bl	80001f0 <strlen>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f00e f90d 	bl	800f064 <CDC_Transmit_HS>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d1f0      	bne.n	8000e32 <CDC_Print+0xa>
	}
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	80fb      	strh	r3, [r7, #6]
	CDC_Print("\r\nInterrupt triggered!\r\n");
 8000e66:	4808      	ldr	r0, [pc, #32]	@ (8000e88 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000e68:	f7ff ffde 	bl	8000e28 <CDC_Print>

	// check for interrupt on pin PC8
	if (GPIO_Pin == GPIO_PIN_8) {
 8000e6c:	88fb      	ldrh	r3, [r7, #6]
 8000e6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e72:	d104      	bne.n	8000e7e <HAL_GPIO_EXTI_Callback+0x22>
		// release the motion semaphore (binary)
		osSemaphoreRelease(motionSemHandle);
 8000e74:	4b05      	ldr	r3, [pc, #20]	@ (8000e8c <HAL_GPIO_EXTI_Callback+0x30>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f00a fe1b 	bl	800bab4 <osSemaphoreRelease>
	}
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	080102e8 	.word	0x080102e8
 8000e8c:	20000438 	.word	0x20000438

08000e90 <ArduCAM_WriteI2C>:
}

// I2C address
#define ARDUCAM_I2C_ADDR 0x3C << 1

HAL_StatusTypeDef ArduCAM_WriteI2C(uint16_t reg, uint8_t val) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af02      	add	r7, sp, #8
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	80fb      	strh	r3, [r7, #6]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	717b      	strb	r3, [r7, #5]
	uint8_t data[3];

	data[0] = (reg >> 8) & 0xFF;
 8000ea0:	88fb      	ldrh	r3, [r7, #6]
 8000ea2:	0a1b      	lsrs	r3, r3, #8
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	733b      	strb	r3, [r7, #12]
	data[1] = reg & 0xFF;
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	737b      	strb	r3, [r7, #13]
	data[3] = val;
 8000eb0:	797b      	ldrb	r3, [r7, #5]
 8000eb2:	73fb      	strb	r3, [r7, #15]

	if (HAL_I2C_Master_Transmit(&hi2c3, ARDUCAM_I2C_ADDR, data, 3,
 8000eb4:	f107 020c 	add.w	r2, r7, #12
 8000eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	2178      	movs	r1, #120	@ 0x78
 8000ec2:	4806      	ldr	r0, [pc, #24]	@ (8000edc <ArduCAM_WriteI2C+0x4c>)
 8000ec4:	f001 fd5c 	bl	8002980 <HAL_I2C_Master_Transmit>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <ArduCAM_WriteI2C+0x42>
	HAL_MAX_DELAY) != HAL_OK) {
		return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e000      	b.n	8000ed4 <ArduCAM_WriteI2C+0x44>
	}

	return HAL_OK;
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	200001b4 	.word	0x200001b4

08000ee0 <ArduCAM_ReadI2C>:

HAL_StatusTypeDef ArduCAM_ReadI2C(uint16_t reg, uint8_t *val) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	80fb      	strh	r3, [r7, #6]
	uint8_t reg_addr[2];

	reg_addr[0] = (reg >> 8) & 0xFF;
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	733b      	strb	r3, [r7, #12]
	reg_addr[1] = reg & 0xFF;
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	737b      	strb	r3, [r7, #13]

	if (HAL_I2C_Master_Transmit(&hi2c3, ARDUCAM_I2C_ADDR, reg_addr, 2,
 8000efc:	f107 020c 	add.w	r2, r7, #12
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
 8000f04:	9300      	str	r3, [sp, #0]
 8000f06:	2302      	movs	r3, #2
 8000f08:	2178      	movs	r1, #120	@ 0x78
 8000f0a:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <ArduCAM_ReadI2C+0x60>)
 8000f0c:	f001 fd38 	bl	8002980 <HAL_I2C_Master_Transmit>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <ArduCAM_ReadI2C+0x3a>
	HAL_MAX_DELAY) != HAL_OK) {
		return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <ArduCAM_ReadI2C+0x58>
	}

	if (HAL_I2C_Master_Receive(&hi2c3, ARDUCAM_I2C_ADDR, val, 1,
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2301      	movs	r3, #1
 8000f22:	683a      	ldr	r2, [r7, #0]
 8000f24:	2178      	movs	r1, #120	@ 0x78
 8000f26:	4806      	ldr	r0, [pc, #24]	@ (8000f40 <ArduCAM_ReadI2C+0x60>)
 8000f28:	f001 fe28 	bl	8002b7c <HAL_I2C_Master_Receive>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <ArduCAM_ReadI2C+0x56>
	HAL_MAX_DELAY) != HAL_OK) {
		return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <ArduCAM_ReadI2C+0x58>
	}

	return HAL_OK;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	200001b4 	.word	0x200001b4

08000f44 <ArduCAM_WriteSPI>:

HAL_StatusTypeDef ArduCAM_WriteSPI(uint8_t reg, uint8_t val) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = { reg | 0x80, val }; // bit[7] = 1 for write
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	733b      	strb	r3, [r7, #12]
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(&hspi4, data, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000f62:	f107 010c 	add.w	r1, r7, #12
 8000f66:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6a:	2202      	movs	r2, #2
 8000f6c:	4806      	ldr	r0, [pc, #24]	@ (8000f88 <ArduCAM_WriteSPI+0x44>)
 8000f6e:	f005 fa68 	bl	8006442 <HAL_SPI_Transmit>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <ArduCAM_WriteSPI+0x38>
		return HAL_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <ArduCAM_WriteSPI+0x3a>
	}

	return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200002b0 	.word	0x200002b0

08000f8c <ArduCAM_ReadSPI>:

HAL_StatusTypeDef ArduCAM_ReadSPI(uint8_t reg, uint8_t *val, uint16_t len) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	71fb      	strb	r3, [r7, #7]
 8000f98:	4613      	mov	r3, r2
 8000f9a:	80bb      	strh	r3, [r7, #4]
	uint8_t cmd = reg & 0x7F; // bit[7] = 0 for read
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	73fb      	strb	r3, [r7, #15]

	if (HAL_SPI_Transmit(&hspi4, &cmd, 1, HAL_MAX_DELAY) != HAL_OK) {
 8000fa6:	f107 010f 	add.w	r1, r7, #15
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	2201      	movs	r2, #1
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <ArduCAM_ReadSPI+0x58>)
 8000fb2:	f005 fa46 	bl	8006442 <HAL_SPI_Transmit>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <ArduCAM_ReadSPI+0x34>
		return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e00c      	b.n	8000fda <ArduCAM_ReadSPI+0x4e>
	}

	if (HAL_SPI_Receive(&hspi4, val, len, HAL_MAX_DELAY) != HAL_OK) {
 8000fc0:	88ba      	ldrh	r2, [r7, #4]
 8000fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4806      	ldr	r0, [pc, #24]	@ (8000fe4 <ArduCAM_ReadSPI+0x58>)
 8000fca:	f005 fb7e 	bl	80066ca <HAL_SPI_Receive>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <ArduCAM_ReadSPI+0x4c>
		return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e000      	b.n	8000fda <ArduCAM_ReadSPI+0x4e>
	}

	return HAL_OK;
 8000fd8:	2300      	movs	r3, #0
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200002b0 	.word	0x200002b0

08000fe8 <ArduCAM_Init>:

void ArduCAM_Init() {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b092      	sub	sp, #72	@ 0x48
 8000fec:	af00      	add	r7, sp, #0
	uint8_t chipID_high, chipID_low;

	ArduCAM_ReadI2C(0x300A, &chipID_high);
 8000fee:	f107 0347 	add.w	r3, r7, #71	@ 0x47
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	f243 000a 	movw	r0, #12298	@ 0x300a
 8000ff8:	f7ff ff72 	bl	8000ee0 <ArduCAM_ReadI2C>
	ArduCAM_ReadI2C(0x300B, &chipID_low);
 8000ffc:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8001000:	4619      	mov	r1, r3
 8001002:	f243 000b 	movw	r0, #12299	@ 0x300b
 8001006:	f7ff ff6b 	bl	8000ee0 <ArduCAM_ReadI2C>

	char buf[64];
	sprintf(buf, "Chip ID: 0x%X, 0x%X\r\n", chipID_high, chipID_low);
 800100a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800100e:	461a      	mov	r2, r3
 8001010:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001014:	1d38      	adds	r0, r7, #4
 8001016:	490f      	ldr	r1, [pc, #60]	@ (8001054 <ArduCAM_Init+0x6c>)
 8001018:	f00e fc90 	bl	800f93c <siprintf>
	CDC_Print(buf);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff ff02 	bl	8000e28 <CDC_Print>

//	ArduCAM_WriteI2C(0x3008, 0x80); // reset the camera
//	ArduCAM_WriteI2C(0x4300, 0x30); // set to JPEG mode

	ArduCAM_WriteI2C(0x3808, 0x00); // high byte for 240 width
 8001024:	2100      	movs	r1, #0
 8001026:	f643 0008 	movw	r0, #14344	@ 0x3808
 800102a:	f7ff ff31 	bl	8000e90 <ArduCAM_WriteI2C>
	ArduCAM_WriteI2C(0x3809, 0xF0); // low byte for 240 width
 800102e:	21f0      	movs	r1, #240	@ 0xf0
 8001030:	f643 0009 	movw	r0, #14345	@ 0x3809
 8001034:	f7ff ff2c 	bl	8000e90 <ArduCAM_WriteI2C>

	ArduCAM_WriteI2C(0x380A, 0x01); // high byte for 320 height
 8001038:	2101      	movs	r1, #1
 800103a:	f643 000a 	movw	r0, #14346	@ 0x380a
 800103e:	f7ff ff27 	bl	8000e90 <ArduCAM_WriteI2C>
	ArduCAM_WriteI2C(0x380B, 0x40); // low byte for 320 height
 8001042:	2140      	movs	r1, #64	@ 0x40
 8001044:	f643 000b 	movw	r0, #14347	@ 0x380b
 8001048:	f7ff ff22 	bl	8000e90 <ArduCAM_WriteI2C>
}
 800104c:	bf00      	nop
 800104e:	3748      	adds	r7, #72	@ 0x48
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	08010308 	.word	0x08010308

08001058 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b094      	sub	sp, #80	@ 0x50
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8001060:	f00d ff42 	bl	800eee8 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */

	uint8_t addr;
	HAL_StatusTypeDef result;

	for (addr = 1; addr < 128; addr++) {
 8001064:	2301      	movs	r3, #1
 8001066:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800106a:	e022      	b.n	80010b2 <StartDefaultTask+0x5a>
		result = HAL_I2C_IsDeviceReady(&hi2c3, (addr << 1), 1, 10);
 800106c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001070:	b29b      	uxth	r3, r3
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	b299      	uxth	r1, r3
 8001076:	230a      	movs	r3, #10
 8001078:	2201      	movs	r2, #1
 800107a:	4813      	ldr	r0, [pc, #76]	@ (80010c8 <StartDefaultTask+0x70>)
 800107c:	f001 ffb0 	bl	8002fe0 <HAL_I2C_IsDeviceReady>
 8001080:	4603      	mov	r3, r0
 8001082:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		if (result == HAL_OK) {
 8001086:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800108a:	2b00      	cmp	r3, #0
 800108c:	d10c      	bne.n	80010a8 <StartDefaultTask+0x50>
			char buffer[64];
			sprintf(buffer, "I2C device found at address 0x%02X\r\n", addr);
 800108e:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	490d      	ldr	r1, [pc, #52]	@ (80010cc <StartDefaultTask+0x74>)
 8001098:	4618      	mov	r0, r3
 800109a:	f00e fc4f 	bl	800f93c <siprintf>
			CDC_Print(buffer);
 800109e:	f107 030c 	add.w	r3, r7, #12
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fec0 	bl	8000e28 <CDC_Print>
	for (addr = 1; addr < 128; addr++) {
 80010a8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80010ac:	3301      	adds	r3, #1
 80010ae:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80010b2:	f997 304f 	ldrsb.w	r3, [r7, #79]	@ 0x4f
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	dad8      	bge.n	800106c <StartDefaultTask+0x14>
		}
	}

	ArduCAM_Init();
 80010ba:	f7ff ff95 	bl	8000fe8 <ArduCAM_Init>
//	HAL_LTDC_SetAddress(&hltdc, FRAMEBUFFER_ADDRESS, LTDC_LAYER_1);
// clear the framebuffer
//	memset((uint8_t*) FRAMEBUFFER_ADDRESS, 0, LCD_WIDTH * LCD_HEIGHT * 2);
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 80010be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c2:	f00a fb41 	bl	800b748 <osDelay>
 80010c6:	e7fa      	b.n	80010be <StartDefaultTask+0x66>
 80010c8:	200001b4 	.word	0x200001b4
 80010cc:	08010320 	.word	0x08010320

080010d0 <StartMotionTask>:
 * @brief  Function implementing the motionTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotionTask */
void StartMotionTask(void *argument) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotionTask */
	/* Infinite loop */
	for (;;) {
		// acquire the motion semaphore
		osSemaphoreAcquire(motionSemHandle, osWaitForever);
 80010d8:	4b18      	ldr	r3, [pc, #96]	@ (800113c <StartMotionTask+0x6c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00a fc95 	bl	800ba10 <osSemaphoreAcquire>
		CDC_Print("Released motionSem (binary, count=1)\r\n\r\n");
 80010e6:	4816      	ldr	r0, [pc, #88]	@ (8001140 <StartMotionTask+0x70>)
 80010e8:	f7ff fe9e 	bl	8000e28 <CDC_Print>

		CDC_Print("Acquired motionSem (binary, count=0)\r\n");
 80010ec:	4815      	ldr	r0, [pc, #84]	@ (8001144 <StartMotionTask+0x74>)
 80010ee:	f7ff fe9b 	bl	8000e28 <CDC_Print>
		CDC_Print("Started motionTask\r\n");
 80010f2:	4815      	ldr	r0, [pc, #84]	@ (8001148 <StartMotionTask+0x78>)
 80010f4:	f7ff fe98 	bl	8000e28 <CDC_Print>

		// start the interrupt timeout
		CDC_Print("Interrupt timeout reset! (10 seconds)\r\n");
 80010f8:	4814      	ldr	r0, [pc, #80]	@ (800114c <StartMotionTask+0x7c>)
 80010fa:	f7ff fe95 	bl	8000e28 <CDC_Print>
		osTimerStart(alertTimerHandle, 10000);
 80010fe:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <StartMotionTask+0x80>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001106:	4618      	mov	r0, r3
 8001108:	f00a fbca 	bl	800b8a0 <osTimerStart>

		CDC_Print("Released alertSem (counting, count=3)\r\n");
 800110c:	4811      	ldr	r0, [pc, #68]	@ (8001154 <StartMotionTask+0x84>)
 800110e:	f7ff fe8b 	bl	8000e28 <CDC_Print>
		CDC_Print("Ended motionTask\r\n\r\n");
 8001112:	4811      	ldr	r0, [pc, #68]	@ (8001158 <StartMotionTask+0x88>)
 8001114:	f7ff fe88 	bl	8000e28 <CDC_Print>

		// release the alert semaphore (counting)
		osSemaphoreRelease(alertSemHandle); // count = 1
 8001118:	4b10      	ldr	r3, [pc, #64]	@ (800115c <StartMotionTask+0x8c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f00a fcc9 	bl	800bab4 <osSemaphoreRelease>
		osSemaphoreRelease(alertSemHandle); // count = 2
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <StartMotionTask+0x8c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f00a fcc4 	bl	800bab4 <osSemaphoreRelease>
		osSemaphoreRelease(alertSemHandle); // count = 3
 800112c:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <StartMotionTask+0x8c>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f00a fcbf 	bl	800bab4 <osSemaphoreRelease>
		osSemaphoreAcquire(motionSemHandle, osWaitForever);
 8001136:	bf00      	nop
 8001138:	e7ce      	b.n	80010d8 <StartMotionTask+0x8>
 800113a:	bf00      	nop
 800113c:	20000438 	.word	0x20000438
 8001140:	08010348 	.word	0x08010348
 8001144:	08010374 	.word	0x08010374
 8001148:	0801039c 	.word	0x0801039c
 800114c:	080103b4 	.word	0x080103b4
 8001150:	20000434 	.word	0x20000434
 8001154:	080103dc 	.word	0x080103dc
 8001158:	08010404 	.word	0x08010404
 800115c:	2000043c 	.word	0x2000043c

08001160 <StartCaptureTask>:
 * @brief Function implementing the captureTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCaptureTask */
void StartCaptureTask(void *argument) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b094      	sub	sp, #80	@ 0x50
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCaptureTask */
	/* Infinite loop */
	for (;;) {
		// acquire the alert semaphore
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 8001168:	4b21      	ldr	r3, [pc, #132]	@ (80011f0 <StartCaptureTask+0x90>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f04f 31ff 	mov.w	r1, #4294967295
 8001170:	4618      	mov	r0, r3
 8001172:	f00a fc4d 	bl	800ba10 <osSemaphoreAcquire>

		CDC_Print("Acquired alertSem (counting, count=1)\r\n");
 8001176:	481f      	ldr	r0, [pc, #124]	@ (80011f4 <StartCaptureTask+0x94>)
 8001178:	f7ff fe56 	bl	8000e28 <CDC_Print>
		CDC_Print("Started captureTask\r\n\r\n");
 800117c:	481e      	ldr	r0, [pc, #120]	@ (80011f8 <StartCaptureTask+0x98>)
 800117e:	f7ff fe53 	bl	8000e28 <CDC_Print>

		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 8001182:	e028      	b.n	80011d6 <StartCaptureTask+0x76>
			// reset FIFO pointers
			ArduCAM_WriteSPI(0x04, 0x30);
 8001184:	2130      	movs	r1, #48	@ 0x30
 8001186:	2004      	movs	r0, #4
 8001188:	f7ff fedc 	bl	8000f44 <ArduCAM_WriteSPI>

			// start capture
			ArduCAM_WriteSPI(0x04, 0x02);
 800118c:	2102      	movs	r1, #2
 800118e:	2004      	movs	r0, #4
 8001190:	f7ff fed8 	bl	8000f44 <ArduCAM_WriteSPI>

			// read FIFO size
			uint8_t fifo_size[3];
			ArduCAM_ReadSPI(0x42, fifo_size, 3);
 8001194:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001198:	2203      	movs	r2, #3
 800119a:	4619      	mov	r1, r3
 800119c:	2042      	movs	r0, #66	@ 0x42
 800119e:	f7ff fef5 	bl	8000f8c <ArduCAM_ReadSPI>
			uint32_t total_size = (fifo_size[2] << 16) | (fifo_size[1] << 8)
 80011a2:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80011a6:	041a      	lsls	r2, r3, #16
 80011a8:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	4313      	orrs	r3, r2
					| fifo_size[0];
 80011b0:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80011b4:	4313      	orrs	r3, r2
			uint32_t total_size = (fifo_size[2] << 16) | (fifo_size[1] << 8)
 80011b6:	64fb      	str	r3, [r7, #76]	@ 0x4c

			char buf[64];
			sprintf(buf, "FIFO size: %lu\r\n", total_size);
 80011b8:	f107 0308 	add.w	r3, r7, #8
 80011bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80011be:	490f      	ldr	r1, [pc, #60]	@ (80011fc <StartCaptureTask+0x9c>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00e fbbb 	bl	800f93c <siprintf>
			CDC_Print(buf);
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff fe2c 	bl	8000e28 <CDC_Print>

			osDelay(100);
 80011d0:	2064      	movs	r0, #100	@ 0x64
 80011d2:	f00a fab9 	bl	800b748 <osDelay>
		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <StartCaptureTask+0x90>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f00a fcae 	bl	800bb3c <osSemaphoreGetCount>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d1ce      	bne.n	8001184 <StartCaptureTask+0x24>
		}

		CDC_Print("Ended captureTask\r\n");
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <StartCaptureTask+0xa0>)
 80011e8:	f7ff fe1e 	bl	8000e28 <CDC_Print>
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 80011ec:	e7bc      	b.n	8001168 <StartCaptureTask+0x8>
 80011ee:	bf00      	nop
 80011f0:	2000043c 	.word	0x2000043c
 80011f4:	0801041c 	.word	0x0801041c
 80011f8:	08010444 	.word	0x08010444
 80011fc:	0801045c 	.word	0x0801045c
 8001200:	08010470 	.word	0x08010470

08001204 <StartAlertTask>:
 * @brief Function implementing the alertTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAlertTask */
void StartAlertTask(void *argument) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAlertTask */
	/* Infinite loop */
	for (;;) {
		// acquire the alert semaphore
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <StartAlertTask+0x50>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	4618      	mov	r0, r3
 8001216:	f00a fbfb 	bl	800ba10 <osSemaphoreAcquire>

		CDC_Print("Acquired alertSem (counting, count=2)\r\n");
 800121a:	480f      	ldr	r0, [pc, #60]	@ (8001258 <StartAlertTask+0x54>)
 800121c:	f7ff fe04 	bl	8000e28 <CDC_Print>
		CDC_Print("Started alertTask\r\n");
 8001220:	480e      	ldr	r0, [pc, #56]	@ (800125c <StartAlertTask+0x58>)
 8001222:	f7ff fe01 	bl	8000e28 <CDC_Print>

		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 8001226:	e008      	b.n	800123a <StartAlertTask+0x36>
			// toggle pin PG14, onboard LED (red)
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8001228:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <StartAlertTask+0x5c>)
 800122e:	f001 fa30 	bl	8002692 <HAL_GPIO_TogglePin>
			osDelay(500);
 8001232:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001236:	f00a fa87 	bl	800b748 <osDelay>
		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <StartAlertTask+0x50>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4618      	mov	r0, r3
 8001240:	f00a fc7c 	bl	800bb3c <osSemaphoreGetCount>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1ee      	bne.n	8001228 <StartAlertTask+0x24>
		}

		CDC_Print("Ended alertTask\r\n");
 800124a:	4806      	ldr	r0, [pc, #24]	@ (8001264 <StartAlertTask+0x60>)
 800124c:	f7ff fdec 	bl	8000e28 <CDC_Print>
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 8001250:	e7dc      	b.n	800120c <StartAlertTask+0x8>
 8001252:	bf00      	nop
 8001254:	2000043c 	.word	0x2000043c
 8001258:	08010484 	.word	0x08010484
 800125c:	080104ac 	.word	0x080104ac
 8001260:	40021800 	.word	0x40021800
 8001264:	080104c0 	.word	0x080104c0

08001268 <alertTimerCallback>:
	}
	/* USER CODE END StartAlertTask */
}

/* alertTimerCallback function */
void alertTimerCallback(void *argument) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN alertTimerCallback */
	CDC_Print("Interrupt timeout expired! (10 seconds)\r\n");
 8001270:	4807      	ldr	r0, [pc, #28]	@ (8001290 <alertTimerCallback+0x28>)
 8001272:	f7ff fdd9 	bl	8000e28 <CDC_Print>
	CDC_Print("Acquired alertSem (counting, count=0)\r\n\r\n");
 8001276:	4807      	ldr	r0, [pc, #28]	@ (8001294 <alertTimerCallback+0x2c>)
 8001278:	f7ff fdd6 	bl	8000e28 <CDC_Print>
// acquire alert semaphore (stops capture and alert tasks)
	osSemaphoreAcquire(alertSemHandle, 0);
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <alertTimerCallback+0x30>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f00a fbc4 	bl	800ba10 <osSemaphoreAcquire>
	/* USER CODE END alertTimerCallback */
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	080104d4 	.word	0x080104d4
 8001294:	08010500 	.word	0x08010500
 8001298:	2000043c 	.word	0x2000043c

0800129c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a04      	ldr	r2, [pc, #16]	@ (80012bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80012ae:	f000 fcfd 	bl	8001cac <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40001000 	.word	0x40001000

080012c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <Error_Handler+0x8>

080012cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	4b12      	ldr	r3, [pc, #72]	@ (8001320 <HAL_MspInit+0x54>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012da:	4a11      	ldr	r2, [pc, #68]	@ (8001320 <HAL_MspInit+0x54>)
 80012dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001320 <HAL_MspInit+0x54>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <HAL_MspInit+0x54>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <HAL_MspInit+0x54>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <HAL_MspInit+0x54>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	210f      	movs	r1, #15
 800130e:	f06f 0001 	mvn.w	r0, #1
 8001312:	f000 fdc7 	bl	8001ea4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800

08001324 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_CRC_MspInit+0x3c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d10d      	bne.n	8001352 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
 800133a:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <HAL_CRC_MspInit+0x40>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a09      	ldr	r2, [pc, #36]	@ (8001364 <HAL_CRC_MspInit+0x40>)
 8001340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <HAL_CRC_MspInit+0x40>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001352:	bf00      	nop
 8001354:	3714      	adds	r7, #20
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023000 	.word	0x40023000
 8001364:	40023800 	.word	0x40023800

08001368 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a0e      	ldr	r2, [pc, #56]	@ (80013b0 <HAL_DMA2D_MspInit+0x48>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d115      	bne.n	80013a6 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <HAL_DMA2D_MspInit+0x4c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a0c      	ldr	r2, [pc, #48]	@ (80013b4 <HAL_DMA2D_MspInit+0x4c>)
 8001384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_DMA2D_MspInit+0x4c>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	205a      	movs	r0, #90	@ 0x5a
 800139c:	f000 fd82 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80013a0:	205a      	movs	r0, #90	@ 0x5a
 80013a2:	f000 fd9b 	bl	8001edc <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80013a6:	bf00      	nop
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	4002b000 	.word	0x4002b000
 80013b4:	40023800 	.word	0x40023800

080013b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08a      	sub	sp, #40	@ 0x28
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a29      	ldr	r2, [pc, #164]	@ (800147c <HAL_I2C_MspInit+0xc4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d14b      	bne.n	8001472 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a27      	ldr	r2, [pc, #156]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 80013e4:	f043 0304 	orr.w	r3, r3, #4
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a20      	ldr	r2, [pc, #128]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001412:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001418:	2312      	movs	r3, #18
 800141a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141c:	2301      	movs	r3, #1
 800141e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001424:	2304      	movs	r3, #4
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	@ (8001484 <HAL_I2C_MspInit+0xcc>)
 8001430:	f000 ff6a 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001434:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800143a:	2312      	movs	r3, #18
 800143c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143e:	2301      	movs	r3, #1
 8001440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001446:	2304      	movs	r3, #4
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	480d      	ldr	r0, [pc, #52]	@ (8001488 <HAL_I2C_MspInit+0xd0>)
 8001452:	f000 ff59 	bl	8002308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	4a08      	ldr	r2, [pc, #32]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 8001460:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001464:	6413      	str	r3, [r2, #64]	@ 0x40
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_I2C_MspInit+0xc8>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	@ 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40005c00 	.word	0x40005c00
 8001480:	40023800 	.word	0x40023800
 8001484:	40020800 	.word	0x40020800
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b09a      	sub	sp, #104	@ 0x68
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a8:	2230      	movs	r2, #48	@ 0x30
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f00e fa65 	bl	800f97c <memset>
  if(hltdc->Instance==LTDC)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a85      	ldr	r2, [pc, #532]	@ (80016cc <HAL_LTDC_MspInit+0x240>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	f040 8102 	bne.w	80016c2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80014be:	2308      	movs	r3, #8
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80014c2:	2332      	movs	r3, #50	@ 0x32
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80014ca:	2300      	movs	r3, #0
 80014cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014d2:	4618      	mov	r0, r3
 80014d4:	f004 fd38 	bl	8005f48 <HAL_RCCEx_PeriphCLKConfig>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80014de:	f7ff feef 	bl	80012c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	623b      	str	r3, [r7, #32]
 80014e6:	4b7a      	ldr	r3, [pc, #488]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a79      	ldr	r2, [pc, #484]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 80014ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b77      	ldr	r3, [pc, #476]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	61fb      	str	r3, [r7, #28]
 8001502:	4b73      	ldr	r3, [pc, #460]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a72      	ldr	r2, [pc, #456]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001508:	f043 0320 	orr.w	r3, r3, #32
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b70      	ldr	r3, [pc, #448]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0320 	and.w	r3, r3, #32
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	2300      	movs	r3, #0
 800151c:	61bb      	str	r3, [r7, #24]
 800151e:	4b6c      	ldr	r3, [pc, #432]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	4a6b      	ldr	r2, [pc, #428]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	6313      	str	r3, [r2, #48]	@ 0x30
 800152a:	4b69      	ldr	r3, [pc, #420]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
 800153a:	4b65      	ldr	r3, [pc, #404]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153e:	4a64      	ldr	r2, [pc, #400]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	@ 0x30
 8001546:	4b62      	ldr	r3, [pc, #392]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	4b5e      	ldr	r3, [pc, #376]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a5d      	ldr	r2, [pc, #372]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b5b      	ldr	r3, [pc, #364]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	4b57      	ldr	r3, [pc, #348]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001576:	4a56      	ldr	r2, [pc, #344]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001578:	f043 0304 	orr.w	r3, r3, #4
 800157c:	6313      	str	r3, [r2, #48]	@ 0x30
 800157e:	4b54      	ldr	r3, [pc, #336]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	f003 0304 	and.w	r3, r3, #4
 8001586:	60fb      	str	r3, [r7, #12]
 8001588:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	4b50      	ldr	r3, [pc, #320]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a4f      	ldr	r2, [pc, #316]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b4d      	ldr	r3, [pc, #308]	@ (80016d0 <HAL_LTDC_MspInit+0x244>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	60bb      	str	r3, [r7, #8]
 80015a4:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80015a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ac:	2302      	movs	r3, #2
 80015ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b4:	2300      	movs	r3, #0
 80015b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015b8:	230e      	movs	r3, #14
 80015ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80015bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015c0:	4619      	mov	r1, r3
 80015c2:	4844      	ldr	r0, [pc, #272]	@ (80016d4 <HAL_LTDC_MspInit+0x248>)
 80015c4:	f000 fea0 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80015c8:	f641 0358 	movw	r3, #6232	@ 0x1858
 80015cc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80015da:	230e      	movs	r3, #14
 80015dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e2:	4619      	mov	r1, r3
 80015e4:	483c      	ldr	r0, [pc, #240]	@ (80016d8 <HAL_LTDC_MspInit+0x24c>)
 80015e6:	f000 fe8f 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80015ea:	2303      	movs	r3, #3
 80015ec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ee:	2302      	movs	r3, #2
 80015f0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	2300      	movs	r3, #0
 80015f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f6:	2300      	movs	r3, #0
 80015f8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015fa:	2309      	movs	r3, #9
 80015fc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001602:	4619      	mov	r1, r3
 8001604:	4835      	ldr	r0, [pc, #212]	@ (80016dc <HAL_LTDC_MspInit+0x250>)
 8001606:	f000 fe7f 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800160a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800160e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001618:	2300      	movs	r3, #0
 800161a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800161c:	230e      	movs	r3, #14
 800161e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001624:	4619      	mov	r1, r3
 8001626:	482d      	ldr	r0, [pc, #180]	@ (80016dc <HAL_LTDC_MspInit+0x250>)
 8001628:	f000 fe6e 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800162c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001630:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800163e:	230e      	movs	r3, #14
 8001640:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001642:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001646:	4619      	mov	r1, r3
 8001648:	4825      	ldr	r0, [pc, #148]	@ (80016e0 <HAL_LTDC_MspInit+0x254>)
 800164a:	f000 fe5d 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800164e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001652:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001660:	230e      	movs	r3, #14
 8001662:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001664:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001668:	4619      	mov	r1, r3
 800166a:	481e      	ldr	r0, [pc, #120]	@ (80016e4 <HAL_LTDC_MspInit+0x258>)
 800166c:	f000 fe4c 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001670:	2348      	movs	r3, #72	@ 0x48
 8001672:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001674:	2302      	movs	r3, #2
 8001676:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167c:	2300      	movs	r3, #0
 800167e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001680:	230e      	movs	r3, #14
 8001682:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001684:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001688:	4619      	mov	r1, r3
 800168a:	4817      	ldr	r0, [pc, #92]	@ (80016e8 <HAL_LTDC_MspInit+0x25c>)
 800168c:	f000 fe3c 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001690:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001694:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	2300      	movs	r3, #0
 80016a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80016a2:	2309      	movs	r3, #9
 80016a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80016aa:	4619      	mov	r1, r3
 80016ac:	480c      	ldr	r0, [pc, #48]	@ (80016e0 <HAL_LTDC_MspInit+0x254>)
 80016ae:	f000 fe2b 	bl	8002308 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2105      	movs	r1, #5
 80016b6:	2058      	movs	r0, #88	@ 0x58
 80016b8:	f000 fbf4 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80016bc:	2058      	movs	r0, #88	@ 0x58
 80016be:	f000 fc0d 	bl	8001edc <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80016c2:	bf00      	nop
 80016c4:	3768      	adds	r7, #104	@ 0x68
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40016800 	.word	0x40016800
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40020000 	.word	0x40020000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	40021800 	.word	0x40021800
 80016e4:	40020800 	.word	0x40020800
 80016e8:	40020c00 	.word	0x40020c00

080016ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	@ 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a32      	ldr	r2, [pc, #200]	@ (80017d4 <HAL_SPI_MspInit+0xe8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d12c      	bne.n	8001768 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	61bb      	str	r3, [r7, #24]
 8001712:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001716:	4a30      	ldr	r2, [pc, #192]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001718:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800171c:	6453      	str	r3, [r2, #68]	@ 0x44
 800171e:	4b2e      	ldr	r3, [pc, #184]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001726:	61bb      	str	r3, [r7, #24]
 8001728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	617b      	str	r3, [r7, #20]
 800172e:	4b2a      	ldr	r3, [pc, #168]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a29      	ldr	r2, [pc, #164]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b27      	ldr	r3, [pc, #156]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001746:	2364      	movs	r3, #100	@ 0x64
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174e:	2300      	movs	r3, #0
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001756:	2305      	movs	r3, #5
 8001758:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	481e      	ldr	r0, [pc, #120]	@ (80017dc <HAL_SPI_MspInit+0xf0>)
 8001762:	f000 fdd1 	bl	8002308 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001766:	e031      	b.n	80017cc <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1c      	ldr	r2, [pc, #112]	@ (80017e0 <HAL_SPI_MspInit+0xf4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12c      	bne.n	80017cc <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177a:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 800177c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001780:	6453      	str	r3, [r2, #68]	@ 0x44
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 8001798:	f043 0320 	orr.w	r3, r3, #32
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_SPI_MspInit+0xec>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80017aa:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b0:	2302      	movs	r3, #2
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80017bc:	2305      	movs	r3, #5
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c0:	f107 031c 	add.w	r3, r7, #28
 80017c4:	4619      	mov	r1, r3
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <HAL_SPI_MspInit+0xf8>)
 80017c8:	f000 fd9e 	bl	8002308 <HAL_GPIO_Init>
}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	@ 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40013400 	.word	0x40013400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40021000 	.word	0x40021000
 80017e0:	40015000 	.word	0x40015000
 80017e4:	40021400 	.word	0x40021400

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001824 <HAL_TIM_Base_MspInit+0x3c>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10d      	bne.n	8001816 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001828 <HAL_TIM_Base_MspInit+0x40>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	4a09      	ldr	r2, [pc, #36]	@ (8001828 <HAL_TIM_Base_MspInit+0x40>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6453      	str	r3, [r2, #68]	@ 0x44
 800180a:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <HAL_TIM_Base_MspInit+0x40>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001816:	bf00      	nop
 8001818:	3714      	adds	r7, #20
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40010000 	.word	0x40010000
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b08a      	sub	sp, #40	@ 0x28
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	@ (80018b0 <HAL_UART_MspInit+0x84>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d12c      	bne.n	80018a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a17      	ldr	r2, [pc, #92]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001858:	f043 0310 	orr.w	r3, r3, #16
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f003 0310 	and.w	r3, r3, #16
 8001866:	613b      	str	r3, [r7, #16]
 8001868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	4b11      	ldr	r3, [pc, #68]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <HAL_UART_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001886:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001898:	2307      	movs	r3, #7
 800189a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4805      	ldr	r0, [pc, #20]	@ (80018b8 <HAL_UART_MspInit+0x8c>)
 80018a4:	f000 fd30 	bl	8002308 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000

080018bc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80018d0:	4b3b      	ldr	r3, [pc, #236]	@ (80019c0 <HAL_FMC_MspInit+0x104>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d16f      	bne.n	80019b8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_FMC_MspInit+0x104>)
 80018da:	2201      	movs	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	603b      	str	r3, [r7, #0]
 80018e2:	4b38      	ldr	r3, [pc, #224]	@ (80019c4 <HAL_FMC_MspInit+0x108>)
 80018e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018e6:	4a37      	ldr	r2, [pc, #220]	@ (80019c4 <HAL_FMC_MspInit+0x108>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6393      	str	r3, [r2, #56]	@ 0x38
 80018ee:	4b35      	ldr	r3, [pc, #212]	@ (80019c4 <HAL_FMC_MspInit+0x108>)
 80018f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80018fa:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80018fe:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800190c:	230c      	movs	r3, #12
 800190e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	4619      	mov	r1, r3
 8001914:	482c      	ldr	r0, [pc, #176]	@ (80019c8 <HAL_FMC_MspInit+0x10c>)
 8001916:	f000 fcf7 	bl	8002308 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800191a:	2301      	movs	r3, #1
 800191c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800192a:	230c      	movs	r3, #12
 800192c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	4619      	mov	r1, r3
 8001932:	4826      	ldr	r0, [pc, #152]	@ (80019cc <HAL_FMC_MspInit+0x110>)
 8001934:	f000 fce8 	bl	8002308 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001938:	f248 1333 	movw	r3, #33075	@ 0x8133
 800193c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194a:	230c      	movs	r3, #12
 800194c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	481f      	ldr	r0, [pc, #124]	@ (80019d0 <HAL_FMC_MspInit+0x114>)
 8001954:	f000 fcd8 	bl	8002308 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001958:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800195c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195e:	2302      	movs	r3, #2
 8001960:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001966:	2303      	movs	r3, #3
 8001968:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800196a:	230c      	movs	r3, #12
 800196c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	4619      	mov	r1, r3
 8001972:	4818      	ldr	r0, [pc, #96]	@ (80019d4 <HAL_FMC_MspInit+0x118>)
 8001974:	f000 fcc8 	bl	8002308 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001978:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800197c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800198a:	230c      	movs	r3, #12
 800198c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800198e:	1d3b      	adds	r3, r7, #4
 8001990:	4619      	mov	r1, r3
 8001992:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <HAL_FMC_MspInit+0x11c>)
 8001994:	f000 fcb8 	bl	8002308 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001998:	2360      	movs	r3, #96	@ 0x60
 800199a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a4:	2303      	movs	r3, #3
 80019a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a8:	230c      	movs	r3, #12
 80019aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	480a      	ldr	r0, [pc, #40]	@ (80019dc <HAL_FMC_MspInit+0x120>)
 80019b2:	f000 fca9 	bl	8002308 <HAL_GPIO_Init>
 80019b6:	e000      	b.n	80019ba <HAL_FMC_MspInit+0xfe>
    return;
 80019b8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80019ba:	3718      	adds	r7, #24
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000440 	.word	0x20000440
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40021400 	.word	0x40021400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40021800 	.word	0x40021800
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40020400 	.word	0x40020400

080019e0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019e8:	f7ff ff68 	bl	80018bc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80019ec:	bf00      	nop
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}

080019f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08e      	sub	sp, #56	@ 0x38
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	4b33      	ldr	r3, [pc, #204]	@ (8001ad8 <HAL_InitTick+0xe4>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0c:	4a32      	ldr	r2, [pc, #200]	@ (8001ad8 <HAL_InitTick+0xe4>)
 8001a0e:	f043 0310 	orr.w	r3, r3, #16
 8001a12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a14:	4b30      	ldr	r3, [pc, #192]	@ (8001ad8 <HAL_InitTick+0xe4>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a20:	f107 0210 	add.w	r2, r7, #16
 8001a24:	f107 0314 	add.w	r3, r7, #20
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 fa5a 	bl	8005ee4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001a30:	6a3b      	ldr	r3, [r7, #32]
 8001a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d103      	bne.n	8001a42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a3a:	f004 fa2b 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8001a3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001a40:	e004      	b.n	8001a4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a42:	f004 fa27 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8001a46:	4603      	mov	r3, r0
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a4e:	4a23      	ldr	r2, [pc, #140]	@ (8001adc <HAL_InitTick+0xe8>)
 8001a50:	fba2 2303 	umull	r2, r3, r2, r3
 8001a54:	0c9b      	lsrs	r3, r3, #18
 8001a56:	3b01      	subs	r3, #1
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a5a:	4b21      	ldr	r3, [pc, #132]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a5c:	4a21      	ldr	r2, [pc, #132]	@ (8001ae4 <HAL_InitTick+0xf0>)
 8001a5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a60:	4b1f      	ldr	r3, [pc, #124]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001a66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a68:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001a80:	4817      	ldr	r0, [pc, #92]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a82:	f005 fa27 	bl	8006ed4 <HAL_TIM_Base_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001a8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d11b      	bne.n	8001acc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a94:	4812      	ldr	r0, [pc, #72]	@ (8001ae0 <HAL_InitTick+0xec>)
 8001a96:	f005 fa6d 	bl	8006f74 <HAL_TIM_Base_Start_IT>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d111      	bne.n	8001acc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aa8:	2036      	movs	r0, #54	@ 0x36
 8001aaa:	f000 fa17 	bl	8001edc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d808      	bhi.n	8001ac6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	6879      	ldr	r1, [r7, #4]
 8001ab8:	2036      	movs	r0, #54	@ 0x36
 8001aba:	f000 f9f3 	bl	8001ea4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001abe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ae8 <HAL_InitTick+0xf4>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	e002      	b.n	8001acc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001acc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3738      	adds	r7, #56	@ 0x38
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	431bde83 	.word	0x431bde83
 8001ae0:	20000444 	.word	0x20000444
 8001ae4:	40001000 	.word	0x40001000
 8001ae8:	20000004 	.word	0x20000004

08001aec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001af0:	bf00      	nop
 8001af2:	e7fd      	b.n	8001af0 <NMI_Handler+0x4>

08001af4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af8:	bf00      	nop
 8001afa:	e7fd      	b.n	8001af8 <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <MemManage_Handler+0x4>

08001b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b08:	bf00      	nop
 8001b0a:	e7fd      	b.n	8001b08 <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	bf00      	nop
 8001b12:	e7fd      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001b26:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001b2a:	f000 fdcd 	bl	80026c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
	...

08001b34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b38:	4802      	ldr	r0, [pc, #8]	@ (8001b44 <TIM6_DAC_IRQHandler+0x10>)
 8001b3a:	f005 fa8b 	bl	8007054 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000444 	.word	0x20000444

08001b48 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001b4c:	4802      	ldr	r0, [pc, #8]	@ (8001b58 <OTG_HS_IRQHandler+0x10>)
 8001b4e:	f002 fc22 	bl	8004396 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	200062c4 	.word	0x200062c4

08001b5c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b60:	4802      	ldr	r0, [pc, #8]	@ (8001b6c <LTDC_IRQHandler+0x10>)
 8001b62:	f002 f83d 	bl	8003be0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000208 	.word	0x20000208

08001b70 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b74:	4802      	ldr	r0, [pc, #8]	@ (8001b80 <DMA2D_IRQHandler+0x10>)
 8001b76:	f000 fa24 	bl	8001fc2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000174 	.word	0x20000174

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	@ (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	@ (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f00d feea 	bl	800f98c <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	@ (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	@ (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20030000 	.word	0x20030000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	2000048c 	.word	0x2000048c
 8001bec:	20006b10 	.word	0x20006b10

08001bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	@ (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c4c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c18:	f7ff ffea 	bl	8001bf0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	@ (8001c50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	@ (8001c54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	@ (8001c58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	@ (8001c60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f00d fea9 	bl	800f998 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c46:	f7fe fca3 	bl	8000590 <main>
  bx  lr    
 8001c4a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c4c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8001c58:	080106a8 	.word	0x080106a8
  ldr r2, =_sbss
 8001c5c:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8001c60:	20006b10 	.word	0x20006b10

08001c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>
	...

08001c68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca8 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <HAL_Init+0x40>)
 8001c72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca8 <HAL_Init+0x40>)
 8001c7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c84:	4b08      	ldr	r3, [pc, #32]	@ (8001ca8 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a07      	ldr	r2, [pc, #28]	@ (8001ca8 <HAL_Init+0x40>)
 8001c8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c90:	2003      	movs	r0, #3
 8001c92:	f000 f8fc 	bl	8001e8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7ff feac 	bl	80019f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c9c:	f7ff fb16 	bl	80012cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023c00 	.word	0x40023c00

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	@ (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	20000490 	.word	0x20000490

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000490 	.word	0x20000490

08001cec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cf4:	f7ff ffee 	bl	8001cd4 <HAL_GetTick>
 8001cf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d04:	d005      	beq.n	8001d12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_Delay+0x44>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d12:	bf00      	nop
 8001d14:	f7ff ffde 	bl	8001cd4 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	68fa      	ldr	r2, [r7, #12]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d8f7      	bhi.n	8001d14 <HAL_Delay+0x28>
  {
  }
}
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000008 	.word	0x20000008

08001d34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d44:	4b0c      	ldr	r3, [pc, #48]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d50:	4013      	ands	r3, r2
 8001d52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <__NVIC_SetPriorityGrouping+0x44>)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	60d3      	str	r3, [r2, #12]
}
 8001d6c:	bf00      	nop
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d80:	4b04      	ldr	r3, [pc, #16]	@ (8001d94 <__NVIC_GetPriorityGrouping+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 0307 	and.w	r3, r3, #7
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	db0b      	blt.n	8001dc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	f003 021f 	and.w	r2, r3, #31
 8001db0:	4907      	ldr	r1, [pc, #28]	@ (8001dd0 <__NVIC_EnableIRQ+0x38>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	095b      	lsrs	r3, r3, #5
 8001db8:	2001      	movs	r0, #1
 8001dba:	fa00 f202 	lsl.w	r2, r0, r2
 8001dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	e000e100 	.word	0xe000e100

08001dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	6039      	str	r1, [r7, #0]
 8001dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	db0a      	blt.n	8001dfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	490c      	ldr	r1, [pc, #48]	@ (8001e20 <__NVIC_SetPriority+0x4c>)
 8001dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df2:	0112      	lsls	r2, r2, #4
 8001df4:	b2d2      	uxtb	r2, r2
 8001df6:	440b      	add	r3, r1
 8001df8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dfc:	e00a      	b.n	8001e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	4908      	ldr	r1, [pc, #32]	@ (8001e24 <__NVIC_SetPriority+0x50>)
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	3b04      	subs	r3, #4
 8001e0c:	0112      	lsls	r2, r2, #4
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	440b      	add	r3, r1
 8001e12:	761a      	strb	r2, [r3, #24]
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000e100 	.word	0xe000e100
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b089      	sub	sp, #36	@ 0x24
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f1c3 0307 	rsb	r3, r3, #7
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	bf28      	it	cs
 8001e46:	2304      	movcs	r3, #4
 8001e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	2b06      	cmp	r3, #6
 8001e50:	d902      	bls.n	8001e58 <NVIC_EncodePriority+0x30>
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3b03      	subs	r3, #3
 8001e56:	e000      	b.n	8001e5a <NVIC_EncodePriority+0x32>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43da      	mvns	r2, r3
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e70:	f04f 31ff 	mov.w	r1, #4294967295
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e80:	4313      	orrs	r3, r2
         );
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3724      	adds	r7, #36	@ 0x24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ff4c 	bl	8001d34 <__NVIC_SetPriorityGrouping>
}
 8001e9c:	bf00      	nop
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb6:	f7ff ff61 	bl	8001d7c <__NVIC_GetPriorityGrouping>
 8001eba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	68b9      	ldr	r1, [r7, #8]
 8001ec0:	6978      	ldr	r0, [r7, #20]
 8001ec2:	f7ff ffb1 	bl	8001e28 <NVIC_EncodePriority>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ecc:	4611      	mov	r1, r2
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff80 	bl	8001dd4 <__NVIC_SetPriority>
}
 8001ed4:	bf00      	nop
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7ff ff54 	bl	8001d98 <__NVIC_EnableIRQ>
}
 8001ef0:	bf00      	nop
 8001ef2:	3708      	adds	r7, #8
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00e      	b.n	8001f28 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	b2db      	uxtb	r3, r3
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fa02 	bl	8001324 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e03b      	b.n	8001fba <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fa06 	bl	8001368 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2202      	movs	r2, #2
 8001f60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685a      	ldr	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f80:	f023 0107 	bic.w	r1, r3, #7
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001f9a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68d1      	ldr	r1, [r2, #12]
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	430b      	orrs	r3, r1
 8001fa8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b084      	sub	sp, #16
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d026      	beq.n	8002032 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d021      	beq.n	8002032 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ffc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2201      	movs	r2, #1
 8002010:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2204      	movs	r2, #4
 8002016:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f003 0320 	and.w	r3, r3, #32
 8002038:	2b00      	cmp	r3, #0
 800203a:	d026      	beq.n	800208a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d021      	beq.n	800208a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002054:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2220      	movs	r2, #32
 800205c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2204      	movs	r2, #4
 800206e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	695b      	ldr	r3, [r3, #20]
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d026      	beq.n	80020e2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800209a:	2b00      	cmp	r3, #0
 800209c:	d021      	beq.n	80020e2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020ac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020ba:	f043 0204 	orr.w	r2, r3, #4
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2204      	movs	r2, #4
 80020c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f003 0304 	and.w	r3, r3, #4
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002104:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2204      	movs	r2, #4
 800210c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f853 	bl	80021ba <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0302 	and.w	r3, r3, #2
 800211a:	2b00      	cmp	r3, #0
 800211c:	d024      	beq.n	8002168 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01f      	beq.n	8002168 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002136:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2202      	movs	r2, #2
 800213e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f003 0310 	and.w	r3, r3, #16
 800216e:	2b00      	cmp	r3, #0
 8002170:	d01f      	beq.n	80021b2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01a      	beq.n	80021b2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800218a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2210      	movs	r2, #16
 8002192:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	f000 f80e 	bl	80021ce <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
	...

080021e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b087      	sub	sp, #28
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DMA2D_ConfigLayer+0x20>
 8002200:	2302      	movs	r3, #2
 8002202:	e079      	b.n	80022f8 <HAL_DMA2D_ConfigLayer+0x114>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2201      	movs	r2, #1
 8002208:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2202      	movs	r2, #2
 8002210:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	011b      	lsls	r3, r3, #4
 8002218:	3318      	adds	r3, #24
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	4413      	add	r3, r2
 800221e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	4313      	orrs	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800222e:	4b35      	ldr	r3, [pc, #212]	@ (8002304 <HAL_DMA2D_ConfigLayer+0x120>)
 8002230:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2b0a      	cmp	r3, #10
 8002238:	d003      	beq.n	8002242 <HAL_DMA2D_ConfigLayer+0x5e>
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b09      	cmp	r3, #9
 8002240:	d107      	bne.n	8002252 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	4313      	orrs	r3, r2
 800224e:	617b      	str	r3, [r7, #20]
 8002250:	e005      	b.n	800225e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	061b      	lsls	r3, r3, #24
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d120      	bne.n	80022a6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	43db      	mvns	r3, r3
 800226e:	ea02 0103 	and.w	r1, r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	430a      	orrs	r2, r1
 800227a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b0a      	cmp	r3, #10
 800228c:	d003      	beq.n	8002296 <HAL_DMA2D_ConfigLayer+0xb2>
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b09      	cmp	r3, #9
 8002294:	d127      	bne.n	80022e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80022a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80022a4:	e01f      	b.n	80022e6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	69da      	ldr	r2, [r3, #28]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	ea02 0103 	and.w	r1, r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	697a      	ldr	r2, [r7, #20]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b0a      	cmp	r3, #10
 80022ce:	d003      	beq.n	80022d8 <HAL_DMA2D_ConfigLayer+0xf4>
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b09      	cmp	r3, #9
 80022d6:	d106      	bne.n	80022e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	68da      	ldr	r2, [r3, #12]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80022e4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	ff03000f 	.word	0xff03000f

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002316:	2300      	movs	r3, #0
 8002318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800231a:	2300      	movs	r3, #0
 800231c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
 8002322:	e177      	b.n	8002614 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	429a      	cmp	r2, r3
 800233e:	f040 8166 	bne.w	800260e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b01      	cmp	r3, #1
 800234c:	d005      	beq.n	800235a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002356:	2b02      	cmp	r3, #2
 8002358:	d130      	bne.n	80023bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	2203      	movs	r2, #3
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69ba      	ldr	r2, [r7, #24]
 8002388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002390:	2201      	movs	r2, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 0201 	and.w	r2, r3, #1
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 0303 	and.w	r3, r3, #3
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d017      	beq.n	80023f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	2203      	movs	r2, #3
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d123      	bne.n	800244c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	08da      	lsrs	r2, r3, #3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3208      	adds	r2, #8
 800240c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	f003 0307 	and.w	r3, r3, #7
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	220f      	movs	r2, #15
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	691a      	ldr	r2, [r3, #16]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	08da      	lsrs	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3208      	adds	r2, #8
 8002446:	69b9      	ldr	r1, [r7, #24]
 8002448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	2203      	movs	r2, #3
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0203 	and.w	r2, r3, #3
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4313      	orrs	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69ba      	ldr	r2, [r7, #24]
 800247e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002488:	2b00      	cmp	r3, #0
 800248a:	f000 80c0 	beq.w	800260e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	4b66      	ldr	r3, [pc, #408]	@ (800262c <HAL_GPIO_Init+0x324>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002496:	4a65      	ldr	r2, [pc, #404]	@ (800262c <HAL_GPIO_Init+0x324>)
 8002498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800249c:	6453      	str	r3, [r2, #68]	@ 0x44
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_GPIO_Init+0x324>)
 80024a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024a6:	60fb      	str	r3, [r7, #12]
 80024a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024aa:	4a61      	ldr	r2, [pc, #388]	@ (8002630 <HAL_GPIO_Init+0x328>)
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	089b      	lsrs	r3, r3, #2
 80024b0:	3302      	adds	r3, #2
 80024b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a58      	ldr	r2, [pc, #352]	@ (8002634 <HAL_GPIO_Init+0x32c>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d037      	beq.n	8002546 <HAL_GPIO_Init+0x23e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a57      	ldr	r2, [pc, #348]	@ (8002638 <HAL_GPIO_Init+0x330>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d031      	beq.n	8002542 <HAL_GPIO_Init+0x23a>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a56      	ldr	r2, [pc, #344]	@ (800263c <HAL_GPIO_Init+0x334>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d02b      	beq.n	800253e <HAL_GPIO_Init+0x236>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a55      	ldr	r2, [pc, #340]	@ (8002640 <HAL_GPIO_Init+0x338>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d025      	beq.n	800253a <HAL_GPIO_Init+0x232>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a54      	ldr	r2, [pc, #336]	@ (8002644 <HAL_GPIO_Init+0x33c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01f      	beq.n	8002536 <HAL_GPIO_Init+0x22e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a53      	ldr	r2, [pc, #332]	@ (8002648 <HAL_GPIO_Init+0x340>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d019      	beq.n	8002532 <HAL_GPIO_Init+0x22a>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a52      	ldr	r2, [pc, #328]	@ (800264c <HAL_GPIO_Init+0x344>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <HAL_GPIO_Init+0x226>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a51      	ldr	r2, [pc, #324]	@ (8002650 <HAL_GPIO_Init+0x348>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00d      	beq.n	800252a <HAL_GPIO_Init+0x222>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a50      	ldr	r2, [pc, #320]	@ (8002654 <HAL_GPIO_Init+0x34c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d007      	beq.n	8002526 <HAL_GPIO_Init+0x21e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4f      	ldr	r2, [pc, #316]	@ (8002658 <HAL_GPIO_Init+0x350>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_GPIO_Init+0x21a>
 800251e:	2309      	movs	r3, #9
 8002520:	e012      	b.n	8002548 <HAL_GPIO_Init+0x240>
 8002522:	230a      	movs	r3, #10
 8002524:	e010      	b.n	8002548 <HAL_GPIO_Init+0x240>
 8002526:	2308      	movs	r3, #8
 8002528:	e00e      	b.n	8002548 <HAL_GPIO_Init+0x240>
 800252a:	2307      	movs	r3, #7
 800252c:	e00c      	b.n	8002548 <HAL_GPIO_Init+0x240>
 800252e:	2306      	movs	r3, #6
 8002530:	e00a      	b.n	8002548 <HAL_GPIO_Init+0x240>
 8002532:	2305      	movs	r3, #5
 8002534:	e008      	b.n	8002548 <HAL_GPIO_Init+0x240>
 8002536:	2304      	movs	r3, #4
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x240>
 800253a:	2303      	movs	r3, #3
 800253c:	e004      	b.n	8002548 <HAL_GPIO_Init+0x240>
 800253e:	2302      	movs	r3, #2
 8002540:	e002      	b.n	8002548 <HAL_GPIO_Init+0x240>
 8002542:	2301      	movs	r3, #1
 8002544:	e000      	b.n	8002548 <HAL_GPIO_Init+0x240>
 8002546:	2300      	movs	r3, #0
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f002 0203 	and.w	r2, r2, #3
 800254e:	0092      	lsls	r2, r2, #2
 8002550:	4093      	lsls	r3, r2
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4313      	orrs	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002558:	4935      	ldr	r1, [pc, #212]	@ (8002630 <HAL_GPIO_Init+0x328>)
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	089b      	lsrs	r3, r3, #2
 800255e:	3302      	adds	r3, #2
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002566:	4b3d      	ldr	r3, [pc, #244]	@ (800265c <HAL_GPIO_Init+0x354>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258a:	4a34      	ldr	r2, [pc, #208]	@ (800265c <HAL_GPIO_Init+0x354>)
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002590:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HAL_GPIO_Init+0x354>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b4:	4a29      	ldr	r2, [pc, #164]	@ (800265c <HAL_GPIO_Init+0x354>)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ba:	4b28      	ldr	r3, [pc, #160]	@ (800265c <HAL_GPIO_Init+0x354>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4013      	ands	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025de:	4a1f      	ldr	r2, [pc, #124]	@ (800265c <HAL_GPIO_Init+0x354>)
 80025e0:	69bb      	ldr	r3, [r7, #24]
 80025e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_GPIO_Init+0x354>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d003      	beq.n	8002608 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002608:	4a14      	ldr	r2, [pc, #80]	@ (800265c <HAL_GPIO_Init+0x354>)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3301      	adds	r3, #1
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	f67f ae84 	bls.w	8002324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3724      	adds	r7, #36	@ 0x24
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	40013800 	.word	0x40013800
 8002634:	40020000 	.word	0x40020000
 8002638:	40020400 	.word	0x40020400
 800263c:	40020800 	.word	0x40020800
 8002640:	40020c00 	.word	0x40020c00
 8002644:	40021000 	.word	0x40021000
 8002648:	40021400 	.word	0x40021400
 800264c:	40021800 	.word	0x40021800
 8002650:	40021c00 	.word	0x40021c00
 8002654:	40022000 	.word	0x40022000
 8002658:	40022400 	.word	0x40022400
 800265c:	40013c00 	.word	0x40013c00

08002660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	807b      	strh	r3, [r7, #2]
 800266c:	4613      	mov	r3, r2
 800266e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002670:	787b      	ldrb	r3, [r7, #1]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002676:	887a      	ldrh	r2, [r7, #2]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800267c:	e003      	b.n	8002686 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800267e:	887b      	ldrh	r3, [r7, #2]
 8002680:	041a      	lsls	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	619a      	str	r2, [r3, #24]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002692:	b480      	push	{r7}
 8002694:	b085      	sub	sp, #20
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
 800269a:	460b      	mov	r3, r1
 800269c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	695b      	ldr	r3, [r3, #20]
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026a4:	887a      	ldrh	r2, [r7, #2]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	4013      	ands	r3, r2
 80026aa:	041a      	lsls	r2, r3, #16
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	43d9      	mvns	r1, r3
 80026b0:	887b      	ldrh	r3, [r7, #2]
 80026b2:	400b      	ands	r3, r1
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	619a      	str	r2, [r3, #24]
}
 80026ba:	bf00      	nop
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
	...

080026c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026d2:	4b08      	ldr	r3, [pc, #32]	@ (80026f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	88fb      	ldrh	r3, [r7, #6]
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d006      	beq.n	80026ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026de:	4a05      	ldr	r2, [pc, #20]	@ (80026f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026e4:	88fb      	ldrh	r3, [r7, #6]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7fe fbb8 	bl	8000e5c <HAL_GPIO_EXTI_Callback>
  }
}
 80026ec:	bf00      	nop
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40013c00 	.word	0x40013c00

080026f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e12b      	b.n	8002962 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7fe fe4a 	bl	80013b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2224      	movs	r2, #36	@ 0x24
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0201 	bic.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800274a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800275a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800275c:	f003 fb9a 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 8002760:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	4a81      	ldr	r2, [pc, #516]	@ (800296c <HAL_I2C_Init+0x274>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d807      	bhi.n	800277c <HAL_I2C_Init+0x84>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a80      	ldr	r2, [pc, #512]	@ (8002970 <HAL_I2C_Init+0x278>)
 8002770:	4293      	cmp	r3, r2
 8002772:	bf94      	ite	ls
 8002774:	2301      	movls	r3, #1
 8002776:	2300      	movhi	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	e006      	b.n	800278a <HAL_I2C_Init+0x92>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4a7d      	ldr	r2, [pc, #500]	@ (8002974 <HAL_I2C_Init+0x27c>)
 8002780:	4293      	cmp	r3, r2
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e0e7      	b.n	8002962 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a78      	ldr	r2, [pc, #480]	@ (8002978 <HAL_I2C_Init+0x280>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	0c9b      	lsrs	r3, r3, #18
 800279c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
 80027b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	4a6a      	ldr	r2, [pc, #424]	@ (800296c <HAL_I2C_Init+0x274>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d802      	bhi.n	80027cc <HAL_I2C_Init+0xd4>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	e009      	b.n	80027e0 <HAL_I2C_Init+0xe8>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	4a69      	ldr	r2, [pc, #420]	@ (800297c <HAL_I2C_Init+0x284>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	3301      	adds	r3, #1
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	430b      	orrs	r3, r1
 80027e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80027f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	495c      	ldr	r1, [pc, #368]	@ (800296c <HAL_I2C_Init+0x274>)
 80027fc:	428b      	cmp	r3, r1
 80027fe:	d819      	bhi.n	8002834 <HAL_I2C_Init+0x13c>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	1e59      	subs	r1, r3, #1
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fbb1 f3f3 	udiv	r3, r1, r3
 800280e:	1c59      	adds	r1, r3, #1
 8002810:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002814:	400b      	ands	r3, r1
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00a      	beq.n	8002830 <HAL_I2C_Init+0x138>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	1e59      	subs	r1, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fbb1 f3f3 	udiv	r3, r1, r3
 8002828:	3301      	adds	r3, #1
 800282a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282e:	e051      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 8002830:	2304      	movs	r3, #4
 8002832:	e04f      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <HAL_I2C_Init+0x168>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1e58      	subs	r0, r3, #1
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	440b      	add	r3, r1
 800284a:	fbb0 f3f3 	udiv	r3, r0, r3
 800284e:	3301      	adds	r3, #1
 8002850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e012      	b.n	8002886 <HAL_I2C_Init+0x18e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	0099      	lsls	r1, r3, #2
 8002870:	440b      	add	r3, r1
 8002872:	fbb0 f3f3 	udiv	r3, r0, r3
 8002876:	3301      	adds	r3, #1
 8002878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf0c      	ite	eq
 8002880:	2301      	moveq	r3, #1
 8002882:	2300      	movne	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Init+0x196>
 800288a:	2301      	movs	r3, #1
 800288c:	e022      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10e      	bne.n	80028b4 <HAL_I2C_Init+0x1bc>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1e58      	subs	r0, r3, #1
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	460b      	mov	r3, r1
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	440b      	add	r3, r1
 80028a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a8:	3301      	adds	r3, #1
 80028aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028b2:	e00f      	b.n	80028d4 <HAL_I2C_Init+0x1dc>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	6809      	ldr	r1, [r1, #0]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69da      	ldr	r2, [r3, #28]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002902:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6911      	ldr	r1, [r2, #16]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	68d2      	ldr	r2, [r2, #12]
 800290e:	4311      	orrs	r1, r2
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	430b      	orrs	r3, r1
 8002916:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695a      	ldr	r2, [r3, #20]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699b      	ldr	r3, [r3, #24]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	000186a0 	.word	0x000186a0
 8002970:	001e847f 	.word	0x001e847f
 8002974:	003d08ff 	.word	0x003d08ff
 8002978:	431bde83 	.word	0x431bde83
 800297c:	10624dd3 	.word	0x10624dd3

08002980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af02      	add	r7, sp, #8
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	607a      	str	r2, [r7, #4]
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	817b      	strh	r3, [r7, #10]
 8002990:	4613      	mov	r3, r2
 8002992:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002994:	f7ff f99e 	bl	8001cd4 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b20      	cmp	r3, #32
 80029a4:	f040 80e0 	bne.w	8002b68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2319      	movs	r3, #25
 80029ae:	2201      	movs	r2, #1
 80029b0:	4970      	ldr	r1, [pc, #448]	@ (8002b74 <HAL_I2C_Master_Transmit+0x1f4>)
 80029b2:	68f8      	ldr	r0, [r7, #12]
 80029b4:	f000 fd92 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	e0d3      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2C_Master_Transmit+0x50>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e0cc      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d007      	beq.n	80029f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 0201 	orr.w	r2, r2, #1
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2221      	movs	r2, #33	@ 0x21
 8002a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2210      	movs	r2, #16
 8002a12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	893a      	ldrh	r2, [r7, #8]
 8002a26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a50      	ldr	r2, [pc, #320]	@ (8002b78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a38:	8979      	ldrh	r1, [r7, #10]
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	6a3a      	ldr	r2, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f000 fbfc 	bl	800323c <I2C_MasterRequestWrite>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e08d      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a4e:	2300      	movs	r3, #0
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	613b      	str	r3, [r7, #16]
 8002a62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a64:	e066      	b.n	8002b34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 fe50 	bl	8003710 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a70:	4603      	mov	r3, r0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00d      	beq.n	8002a92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	d107      	bne.n	8002a8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e06b      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	781a      	ldrb	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aba:	3b01      	subs	r3, #1
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b04      	cmp	r3, #4
 8002ace:	d11b      	bne.n	8002b08 <HAL_I2C_Master_Transmit+0x188>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002adc:	781a      	ldrb	r2, [r3, #0]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	6a39      	ldr	r1, [r7, #32]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 fe47 	bl	80037a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d107      	bne.n	8002b30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e01a      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d194      	bne.n	8002a66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2220      	movs	r2, #32
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e000      	b.n	8002b6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b68:	2302      	movs	r3, #2
  }
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	00100002 	.word	0x00100002
 8002b78:	ffff0000 	.word	0xffff0000

08002b7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08c      	sub	sp, #48	@ 0x30
 8002b80:	af02      	add	r7, sp, #8
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	607a      	str	r2, [r7, #4]
 8002b86:	461a      	mov	r2, r3
 8002b88:	460b      	mov	r3, r1
 8002b8a:	817b      	strh	r3, [r7, #10]
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b90:	f7ff f8a0 	bl	8001cd4 <HAL_GetTick>
 8002b94:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b20      	cmp	r3, #32
 8002ba0:	f040 8217 	bne.w	8002fd2 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2319      	movs	r3, #25
 8002baa:	2201      	movs	r2, #1
 8002bac:	497c      	ldr	r1, [pc, #496]	@ (8002da0 <HAL_I2C_Master_Receive+0x224>)
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fc94 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e20a      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2C_Master_Receive+0x50>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e203      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d007      	beq.n	8002bf2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0201 	orr.w	r2, r2, #1
 8002bf0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2222      	movs	r2, #34	@ 0x22
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2210      	movs	r2, #16
 8002c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2200      	movs	r2, #0
 8002c16:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	893a      	ldrh	r2, [r7, #8]
 8002c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4a5c      	ldr	r2, [pc, #368]	@ (8002da4 <HAL_I2C_Master_Receive+0x228>)
 8002c32:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c34:	8979      	ldrh	r1, [r7, #10]
 8002c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fb80 	bl	8003340 <I2C_MasterRequestRead>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c4      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d113      	bne.n	8002c7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	623b      	str	r3, [r7, #32]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	623b      	str	r3, [r7, #32]
 8002c66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	e198      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d11b      	bne.n	8002cba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	61fb      	str	r3, [r7, #28]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e178      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d11b      	bne.n	8002cfa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ce0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	e158      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	617b      	str	r3, [r7, #20]
 8002d1e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d20:	e144      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d26:	2b03      	cmp	r3, #3
 8002d28:	f200 80f1 	bhi.w	8002f0e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d123      	bne.n	8002d7c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fd79 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e145      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d7a:	e117      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d14e      	bne.n	8002e22 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4906      	ldr	r1, [pc, #24]	@ (8002da8 <HAL_I2C_Master_Receive+0x22c>)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 fba4 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d008      	beq.n	8002dac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e11a      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
 8002d9e:	bf00      	nop
 8002da0:	00100002 	.word	0x00100002
 8002da4:	ffff0000 	.word	0xffff0000
 8002da8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691a      	ldr	r2, [r3, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc6:	b2d2      	uxtb	r2, r2
 8002dc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	3b01      	subs	r3, #1
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	691a      	ldr	r2, [r3, #16]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	b2d2      	uxtb	r2, r2
 8002dfa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e00:	1c5a      	adds	r2, r3, #1
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	3b01      	subs	r3, #1
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e20:	e0c4      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e28:	2200      	movs	r2, #0
 8002e2a:	496c      	ldr	r1, [pc, #432]	@ (8002fdc <HAL_I2C_Master_Receive+0x460>)
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fb55 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e0cb      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	691a      	ldr	r2, [r3, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	2200      	movs	r2, #0
 8002e86:	4955      	ldr	r1, [pc, #340]	@ (8002fdc <HAL_I2C_Master_Receive+0x460>)
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 fb27 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e09d      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f0c:	e04e      	b.n	8002fac <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 fc8c 	bl	8003830 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e058      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0304 	and.w	r3, r3, #4
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d124      	bne.n	8002fac <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f78:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aeb6 	bne.w	8002d22 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3728      	adds	r7, #40	@ 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	00010004 	.word	0x00010004

08002fe0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	@ 0x28
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	460b      	mov	r3, r1
 8002fee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ff0:	f7fe fe70 	bl	8001cd4 <HAL_GetTick>
 8002ff4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b20      	cmp	r3, #32
 8003004:	f040 8111 	bne.w	800322a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	2319      	movs	r3, #25
 800300e:	2201      	movs	r2, #1
 8003010:	4988      	ldr	r1, [pc, #544]	@ (8003234 <HAL_I2C_IsDeviceReady+0x254>)
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f000 fa62 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800301e:	2302      	movs	r3, #2
 8003020:	e104      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003028:	2b01      	cmp	r3, #1
 800302a:	d101      	bne.n	8003030 <HAL_I2C_IsDeviceReady+0x50>
 800302c:	2302      	movs	r3, #2
 800302e:	e0fd      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d007      	beq.n	8003056 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f042 0201 	orr.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2224      	movs	r2, #36	@ 0x24
 800306a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a70      	ldr	r2, [pc, #448]	@ (8003238 <HAL_I2C_IsDeviceReady+0x258>)
 8003078:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003088:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2200      	movs	r2, #0
 8003092:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fa20 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b0:	d103      	bne.n	80030ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030b8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e0b6      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030be:	897b      	ldrh	r3, [r7, #10]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80030cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80030ce:	f7fe fe01 	bl	8001cd4 <HAL_GetTick>
 80030d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b02      	cmp	r3, #2
 80030e0:	bf0c      	ite	eq
 80030e2:	2301      	moveq	r3, #1
 80030e4:	2300      	movne	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	695b      	ldr	r3, [r3, #20]
 80030f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003102:	e025      	b.n	8003150 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fe fde6 	bl	8001cd4 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <HAL_I2C_IsDeviceReady+0x13a>
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	22a0      	movs	r2, #160	@ 0xa0
 800311e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b02      	cmp	r3, #2
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	bf0c      	ite	eq
 8003148:	2301      	moveq	r3, #1
 800314a:	2300      	movne	r3, #0
 800314c:	b2db      	uxtb	r3, r3
 800314e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2ba0      	cmp	r3, #160	@ 0xa0
 800315a:	d005      	beq.n	8003168 <HAL_I2C_IsDeviceReady+0x188>
 800315c:	7dfb      	ldrb	r3, [r7, #23]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d102      	bne.n	8003168 <HAL_I2C_IsDeviceReady+0x188>
 8003162:	7dbb      	ldrb	r3, [r7, #22]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0cd      	beq.n	8003104 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	d129      	bne.n	80031d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2319      	movs	r3, #25
 80031aa:	2201      	movs	r2, #1
 80031ac:	4921      	ldr	r1, [pc, #132]	@ (8003234 <HAL_I2C_IsDeviceReady+0x254>)
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 f994 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e036      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2220      	movs	r2, #32
 80031c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	e02c      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	9300      	str	r3, [sp, #0]
 80031f0:	2319      	movs	r3, #25
 80031f2:	2201      	movs	r2, #1
 80031f4:	490f      	ldr	r1, [pc, #60]	@ (8003234 <HAL_I2C_IsDeviceReady+0x254>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f970 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e012      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	3301      	adds	r3, #1
 800320a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	429a      	cmp	r2, r3
 8003212:	f4ff af32 	bcc.w	800307a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800322a:	2302      	movs	r3, #2
  }
}
 800322c:	4618      	mov	r0, r3
 800322e:	3720      	adds	r7, #32
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	00100002 	.word	0x00100002
 8003238:	ffff0000 	.word	0xffff0000

0800323c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af02      	add	r7, sp, #8
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	603b      	str	r3, [r7, #0]
 8003248:	460b      	mov	r3, r1
 800324a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d006      	beq.n	8003266 <I2C_MasterRequestWrite+0x2a>
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d003      	beq.n	8003266 <I2C_MasterRequestWrite+0x2a>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003264:	d108      	bne.n	8003278 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e00b      	b.n	8003290 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800327c:	2b12      	cmp	r3, #18
 800327e:	d107      	bne.n	8003290 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800328e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800329c:	68f8      	ldr	r0, [r7, #12]
 800329e:	f000 f91d 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00d      	beq.n	80032c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032b6:	d103      	bne.n	80032c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e035      	b.n	8003330 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032cc:	d108      	bne.n	80032e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	e01b      	b.n	8003318 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e0:	897b      	ldrh	r3, [r7, #10]
 80032e2:	11db      	asrs	r3, r3, #7
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	f003 0306 	and.w	r3, r3, #6
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	f063 030f 	orn	r3, r3, #15
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	490e      	ldr	r1, [pc, #56]	@ (8003338 <I2C_MasterRequestWrite+0xfc>)
 80032fe:	68f8      	ldr	r0, [r7, #12]
 8003300:	f000 f966 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e010      	b.n	8003330 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330e:	897b      	ldrh	r3, [r7, #10]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4907      	ldr	r1, [pc, #28]	@ (800333c <I2C_MasterRequestWrite+0x100>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 f956 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	3718      	adds	r7, #24
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}
 8003338:	00010008 	.word	0x00010008
 800333c:	00010002 	.word	0x00010002

08003340 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	603b      	str	r3, [r7, #0]
 800334c:	460b      	mov	r3, r1
 800334e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003354:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003364:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b08      	cmp	r3, #8
 800336a:	d006      	beq.n	800337a <I2C_MasterRequestRead+0x3a>
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d003      	beq.n	800337a <I2C_MasterRequestRead+0x3a>
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003378:	d108      	bne.n	800338c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	e00b      	b.n	80033a4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	2b11      	cmp	r3, #17
 8003392:	d107      	bne.n	80033a4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f893 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ca:	d103      	bne.n	80033d4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e079      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033e0:	d108      	bne.n	80033f4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033e2:	897b      	ldrh	r3, [r7, #10]
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f043 0301 	orr.w	r3, r3, #1
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	611a      	str	r2, [r3, #16]
 80033f2:	e05f      	b.n	80034b4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80033f4:	897b      	ldrh	r3, [r7, #10]
 80033f6:	11db      	asrs	r3, r3, #7
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	f003 0306 	and.w	r3, r3, #6
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f063 030f 	orn	r3, r3, #15
 8003404:	b2da      	uxtb	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4930      	ldr	r1, [pc, #192]	@ (80034d4 <I2C_MasterRequestRead+0x194>)
 8003412:	68f8      	ldr	r0, [r7, #12]
 8003414:	f000 f8dc 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e054      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	4929      	ldr	r1, [pc, #164]	@ (80034d8 <I2C_MasterRequestRead+0x198>)
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f8cc 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d001      	beq.n	8003442 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e044      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	613b      	str	r3, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003466:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f831 	bl	80034dc <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800348e:	d103      	bne.n	8003498 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e017      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800349c:	897b      	ldrh	r3, [r7, #10]
 800349e:	11db      	asrs	r3, r3, #7
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	f003 0306 	and.w	r3, r3, #6
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f063 030e 	orn	r3, r3, #14
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	4907      	ldr	r1, [pc, #28]	@ (80034d8 <I2C_MasterRequestRead+0x198>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f888 	bl	80035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	00010008 	.word	0x00010008
 80034d8:	00010002 	.word	0x00010002

080034dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	603b      	str	r3, [r7, #0]
 80034e8:	4613      	mov	r3, r2
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ec:	e048      	b.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d044      	beq.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034f6:	f7fe fbed 	bl	8001cd4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	429a      	cmp	r2, r3
 8003504:	d302      	bcc.n	800350c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d139      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	0c1b      	lsrs	r3, r3, #16
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d10d      	bne.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	43da      	mvns	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	4013      	ands	r3, r2
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	bf0c      	ite	eq
 8003528:	2301      	moveq	r3, #1
 800352a:	2300      	movne	r3, #0
 800352c:	b2db      	uxtb	r3, r3
 800352e:	461a      	mov	r2, r3
 8003530:	e00c      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	43da      	mvns	r2, r3
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	4013      	ands	r3, r2
 800353e:	b29b      	uxth	r3, r3
 8003540:	2b00      	cmp	r3, #0
 8003542:	bf0c      	ite	eq
 8003544:	2301      	moveq	r3, #1
 8003546:	2300      	movne	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	429a      	cmp	r2, r3
 8003550:	d116      	bne.n	8003580 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356c:	f043 0220 	orr.w	r2, r3, #32
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e023      	b.n	80035c8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10d      	bne.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	e00c      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d093      	beq.n	80034ee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035de:	e071      	b.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ee:	d123      	bne.n	8003638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035fe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003608:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2220      	movs	r2, #32
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003624:	f043 0204 	orr.w	r2, r3, #4
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e067      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363e:	d041      	beq.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003640:	f7fe fb48 	bl	8001cd4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	429a      	cmp	r2, r3
 800364e:	d302      	bcc.n	8003656 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d136      	bne.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	0c1b      	lsrs	r3, r3, #16
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d10c      	bne.n	800367a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	43da      	mvns	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	4013      	ands	r3, r2
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e00b      	b.n	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d016      	beq.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	f043 0220 	orr.w	r2, r3, #32
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e021      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d10c      	bne.n	80036e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	e00b      	b.n	8003700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	43da      	mvns	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4013      	ands	r3, r2
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	bf14      	ite	ne
 80036fa:	2301      	movne	r3, #1
 80036fc:	2300      	moveq	r3, #0
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	f47f af6d 	bne.w	80035e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800371c:	e034      	b.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f8e3 	bl	80038ea <I2C_IsAcknowledgeFailed>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e034      	b.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003734:	d028      	beq.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003736:	f7fe facd 	bl	8001cd4 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	429a      	cmp	r2, r3
 8003744:	d302      	bcc.n	800374c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d11d      	bne.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003756:	2b80      	cmp	r3, #128	@ 0x80
 8003758:	d016      	beq.n	8003788 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2220      	movs	r2, #32
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	f043 0220 	orr.w	r2, r3, #32
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e007      	b.n	8003798 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	2b80      	cmp	r3, #128	@ 0x80
 8003794:	d1c3      	bne.n	800371e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ac:	e034      	b.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f89b 	bl	80038ea <I2C_IsAcknowledgeFailed>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e034      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d028      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7fe fa85 	bl	8001cd4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	68ba      	ldr	r2, [r7, #8]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d11d      	bne.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d016      	beq.n	8003818 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2220      	movs	r2, #32
 80037f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003804:	f043 0220 	orr.w	r2, r3, #32
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e007      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b04      	cmp	r3, #4
 8003824:	d1c3      	bne.n	80037ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800383c:	e049      	b.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695b      	ldr	r3, [r3, #20]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	2b10      	cmp	r3, #16
 800384a:	d119      	bne.n	8003880 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0210 	mvn.w	r2, #16
 8003854:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e030      	b.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe fa28 	bl	8001cd4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b40      	cmp	r3, #64	@ 0x40
 80038a2:	d016      	beq.n	80038d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2220      	movs	r2, #32
 80038ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038be:	f043 0220 	orr.w	r2, r3, #32
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e007      	b.n	80038e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b40      	cmp	r3, #64	@ 0x40
 80038de:	d1ae      	bne.n	800383e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b083      	sub	sp, #12
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003900:	d11b      	bne.n	800393a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800390a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	f043 0204 	orr.w	r2, r3, #4
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b20      	cmp	r3, #32
 800395c:	d129      	bne.n	80039b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2224      	movs	r2, #36	@ 0x24
 8003962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f022 0201 	bic.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0210 	bic.w	r2, r2, #16
 8003984:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	e000      	b.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80039b2:	2302      	movs	r3, #2
  }
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b20      	cmp	r3, #32
 80039d8:	d12a      	bne.n	8003a30 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2224      	movs	r2, #36	@ 0x24
 80039de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80039fa:	89fb      	ldrh	r3, [r7, #14]
 80039fc:	f023 030f 	bic.w	r3, r3, #15
 8003a00:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	89fb      	ldrh	r3, [r7, #14]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	89fa      	ldrh	r2, [r7, #14]
 8003a12:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0201 	orr.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	e000      	b.n	8003a32 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003a30:	2302      	movs	r3, #2
  }
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3714      	adds	r7, #20
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
	...

08003a40 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e0bf      	b.n	8003bd2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d106      	bne.n	8003a6c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f7fd fd10 	bl	800148c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8003a82:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003a98:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_LTDC_Init+0x19c>)
 8003ab4:	400b      	ands	r3, r1
 8003ab6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	695b      	ldr	r3, [r3, #20]
 8003abc:	041b      	lsls	r3, r3, #16
 8003abe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	6899      	ldr	r1, [r3, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68d9      	ldr	r1, [r3, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	4b3e      	ldr	r3, [pc, #248]	@ (8003bdc <HAL_LTDC_Init+0x19c>)
 8003ae2:	400b      	ands	r3, r1
 8003ae4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	69db      	ldr	r3, [r3, #28]
 8003aea:	041b      	lsls	r3, r3, #16
 8003aec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68d9      	ldr	r1, [r3, #12]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1a      	ldr	r2, [r3, #32]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6919      	ldr	r1, [r3, #16]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4b33      	ldr	r3, [pc, #204]	@ (8003bdc <HAL_LTDC_Init+0x19c>)
 8003b10:	400b      	ands	r3, r1
 8003b12:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6919      	ldr	r1, [r3, #16]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6959      	ldr	r1, [r3, #20]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b27      	ldr	r3, [pc, #156]	@ (8003bdc <HAL_LTDC_Init+0x19c>)
 8003b3e:	400b      	ands	r3, r1
 8003b40:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	041b      	lsls	r3, r3, #16
 8003b48:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6959      	ldr	r1, [r3, #20]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b66:	021b      	lsls	r3, r3, #8
 8003b68:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8003b70:	041b      	lsls	r3, r3, #16
 8003b72:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8003b82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f042 0206 	orr.w	r2, r2, #6
 8003bae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0201 	orr.w	r2, r2, #1
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	f000f800 	.word	0xf000f800

08003be0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bf6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f003 0304 	and.w	r3, r3, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d023      	beq.n	8003c4a <HAL_LTDC_IRQHandler+0x6a>
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01e      	beq.n	8003c4a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f022 0204 	bic.w	r2, r2, #4
 8003c1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2204      	movs	r2, #4
 8003c22:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c2a:	f043 0201 	orr.w	r2, r3, #1
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2204      	movs	r2, #4
 8003c38:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f86f 	bl	8003d28 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d023      	beq.n	8003c9c <HAL_LTDC_IRQHandler+0xbc>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01e      	beq.n	8003c9c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f022 0202 	bic.w	r2, r2, #2
 8003c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2202      	movs	r2, #2
 8003c74:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c7c:	f043 0202 	orr.w	r2, r3, #2
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2204      	movs	r2, #4
 8003c8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f846 	bl	8003d28 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01b      	beq.n	8003cde <HAL_LTDC_IRQHandler+0xfe>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f022 0201 	bic.w	r2, r2, #1
 8003cbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f82f 	bl	8003d3c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d01b      	beq.n	8003d20 <HAL_LTDC_IRQHandler+0x140>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d016      	beq.n	8003d20 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 0208 	bic.w	r2, r2, #8
 8003d00:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2208      	movs	r2, #8
 8003d08:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f818 	bl	8003d50 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003d64:	b5b0      	push	{r4, r5, r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d101      	bne.n	8003d7e <HAL_LTDC_ConfigLayer+0x1a>
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	e02c      	b.n	8003dd8 <HAL_LTDC_ConfigLayer+0x74>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2202      	movs	r2, #2
 8003d8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003d8e:	68fa      	ldr	r2, [r7, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2134      	movs	r1, #52	@ 0x34
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	4413      	add	r3, r2
 8003d9a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4614      	mov	r4, r2
 8003da2:	461d      	mov	r5, r3
 8003da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db0:	682b      	ldr	r3, [r5, #0]
 8003db2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	68b9      	ldr	r1, [r7, #8]
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f811 	bl	8003de0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bdb0      	pop	{r4, r5, r7, pc}

08003de0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b089      	sub	sp, #36	@ 0x24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	0c1b      	lsrs	r3, r3, #16
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	4413      	add	r3, r2
 8003dfe:	041b      	lsls	r3, r3, #16
 8003e00:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	01db      	lsls	r3, r3, #7
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3384      	adds	r3, #132	@ 0x84
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	6812      	ldr	r2, [r2, #0]
 8003e16:	4611      	mov	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	01d2      	lsls	r2, r2, #7
 8003e1c:	440a      	add	r2, r1
 8003e1e:	3284      	adds	r2, #132	@ 0x84
 8003e20:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e24:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e36:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e38:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	01db      	lsls	r3, r3, #7
 8003e44:	440b      	add	r3, r1
 8003e46:	3384      	adds	r3, #132	@ 0x84
 8003e48:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003e4e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e5e:	4413      	add	r3, r2
 8003e60:	041b      	lsls	r3, r3, #16
 8003e62:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	01db      	lsls	r3, r3, #7
 8003e6e:	4413      	add	r3, r2
 8003e70:	3384      	adds	r3, #132	@ 0x84
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	4611      	mov	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	01d2      	lsls	r2, r2, #7
 8003e7e:	440a      	add	r2, r1
 8003e80:	3284      	adds	r2, #132	@ 0x84
 8003e82:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8003e86:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	689a      	ldr	r2, [r3, #8]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e96:	4413      	add	r3, r2
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	01db      	lsls	r3, r3, #7
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3384      	adds	r3, #132	@ 0x84
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	01db      	lsls	r3, r3, #7
 8003eba:	4413      	add	r3, r2
 8003ebc:	3384      	adds	r3, #132	@ 0x84
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	6812      	ldr	r2, [r2, #0]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	01d2      	lsls	r2, r2, #7
 8003eca:	440a      	add	r2, r1
 8003ecc:	3284      	adds	r2, #132	@ 0x84
 8003ece:	f023 0307 	bic.w	r3, r3, #7
 8003ed2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	01db      	lsls	r3, r3, #7
 8003ede:	4413      	add	r3, r2
 8003ee0:	3384      	adds	r3, #132	@ 0x84
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	061b      	lsls	r3, r3, #24
 8003f04:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	01db      	lsls	r3, r3, #7
 8003f10:	4413      	add	r3, r2
 8003f12:	3384      	adds	r3, #132	@ 0x84
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	01db      	lsls	r3, r3, #7
 8003f20:	4413      	add	r3, r2
 8003f22:	3384      	adds	r3, #132	@ 0x84
 8003f24:	461a      	mov	r2, r3
 8003f26:	2300      	movs	r3, #0
 8003f28:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003f30:	461a      	mov	r2, r3
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	431a      	orrs	r2, r3
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	01db      	lsls	r3, r3, #7
 8003f44:	440b      	add	r3, r1
 8003f46:	3384      	adds	r3, #132	@ 0x84
 8003f48:	4619      	mov	r1, r3
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	01db      	lsls	r3, r3, #7
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3384      	adds	r3, #132	@ 0x84
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	68fa      	ldr	r2, [r7, #12]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	4611      	mov	r1, r2
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	01d2      	lsls	r2, r2, #7
 8003f6a:	440a      	add	r2, r1
 8003f6c:	3284      	adds	r2, #132	@ 0x84
 8003f6e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f72:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	01db      	lsls	r3, r3, #7
 8003f7e:	4413      	add	r3, r2
 8003f80:	3384      	adds	r3, #132	@ 0x84
 8003f82:	461a      	mov	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	01db      	lsls	r3, r3, #7
 8003f94:	4413      	add	r3, r2
 8003f96:	3384      	adds	r3, #132	@ 0x84
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6812      	ldr	r2, [r2, #0]
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	01d2      	lsls	r2, r2, #7
 8003fa4:	440a      	add	r2, r1
 8003fa6:	3284      	adds	r2, #132	@ 0x84
 8003fa8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003fac:	f023 0307 	bic.w	r3, r3, #7
 8003fb0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	6809      	ldr	r1, [r1, #0]
 8003fbe:	4608      	mov	r0, r1
 8003fc0:	6879      	ldr	r1, [r7, #4]
 8003fc2:	01c9      	lsls	r1, r1, #7
 8003fc4:	4401      	add	r1, r0
 8003fc6:	3184      	adds	r1, #132	@ 0x84
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	01db      	lsls	r3, r3, #7
 8003fd6:	4413      	add	r3, r2
 8003fd8:	3384      	adds	r3, #132	@ 0x84
 8003fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	01db      	lsls	r3, r3, #7
 8003fe6:	4413      	add	r3, r2
 8003fe8:	3384      	adds	r3, #132	@ 0x84
 8003fea:	461a      	mov	r2, r3
 8003fec:	2300      	movs	r3, #0
 8003fee:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	01db      	lsls	r3, r3, #7
 8003ffa:	4413      	add	r3, r2
 8003ffc:	3384      	adds	r3, #132	@ 0x84
 8003ffe:	461a      	mov	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d102      	bne.n	8004014 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800400e:	2304      	movs	r3, #4
 8004010:	61fb      	str	r3, [r7, #28]
 8004012:	e01b      	b.n	800404c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d102      	bne.n	8004022 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800401c:	2303      	movs	r3, #3
 800401e:	61fb      	str	r3, [r7, #28]
 8004020:	e014      	b.n	800404c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b04      	cmp	r3, #4
 8004028:	d00b      	beq.n	8004042 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800402e:	2b02      	cmp	r3, #2
 8004030:	d007      	beq.n	8004042 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004036:	2b03      	cmp	r3, #3
 8004038:	d003      	beq.n	8004042 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800403e:	2b07      	cmp	r3, #7
 8004040:	d102      	bne.n	8004048 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004042:	2302      	movs	r3, #2
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	e001      	b.n	800404c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004048:	2301      	movs	r3, #1
 800404a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	01db      	lsls	r3, r3, #7
 8004056:	4413      	add	r3, r2
 8004058:	3384      	adds	r3, #132	@ 0x84
 800405a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	4611      	mov	r1, r2
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	01d2      	lsls	r2, r2, #7
 8004066:	440a      	add	r2, r1
 8004068:	3284      	adds	r2, #132	@ 0x84
 800406a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800406e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	69fa      	ldr	r2, [r7, #28]
 8004076:	fb02 f303 	mul.w	r3, r2, r3
 800407a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1acb      	subs	r3, r1, r3
 8004086:	69f9      	ldr	r1, [r7, #28]
 8004088:	fb01 f303 	mul.w	r3, r1, r3
 800408c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800408e:	68f9      	ldr	r1, [r7, #12]
 8004090:	6809      	ldr	r1, [r1, #0]
 8004092:	4608      	mov	r0, r1
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	01c9      	lsls	r1, r1, #7
 8004098:	4401      	add	r1, r0
 800409a:	3184      	adds	r1, #132	@ 0x84
 800409c:	4313      	orrs	r3, r2
 800409e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	01db      	lsls	r3, r3, #7
 80040aa:	4413      	add	r3, r2
 80040ac:	3384      	adds	r3, #132	@ 0x84
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	4611      	mov	r1, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	01d2      	lsls	r2, r2, #7
 80040ba:	440a      	add	r2, r1
 80040bc:	3284      	adds	r2, #132	@ 0x84
 80040be:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	461a      	mov	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	01db      	lsls	r3, r3, #7
 80040d2:	4413      	add	r3, r2
 80040d4:	3384      	adds	r3, #132	@ 0x84
 80040d6:	461a      	mov	r2, r3
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	461a      	mov	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	01db      	lsls	r3, r3, #7
 80040e8:	4413      	add	r3, r2
 80040ea:	3384      	adds	r3, #132	@ 0x84
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	4611      	mov	r1, r2
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	01d2      	lsls	r2, r2, #7
 80040f8:	440a      	add	r2, r1
 80040fa:	3284      	adds	r2, #132	@ 0x84
 80040fc:	f043 0301 	orr.w	r3, r3, #1
 8004100:	6013      	str	r3, [r2, #0]
}
 8004102:	bf00      	nop
 8004104:	3724      	adds	r7, #36	@ 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af02      	add	r7, sp, #8
 8004114:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e101      	b.n	8004324 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f00b f8da 	bl	800f2f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2203      	movs	r2, #3
 8004144:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800414e:	d102      	bne.n	8004156 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4618      	mov	r0, r3
 800415c:	f003 ffd1 	bl	8008102 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6818      	ldr	r0, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7c1a      	ldrb	r2, [r3, #16]
 8004168:	f88d 2000 	strb.w	r2, [sp]
 800416c:	3304      	adds	r3, #4
 800416e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004170:	f003 feb0 	bl	8007ed4 <USB_CoreInit>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d005      	beq.n	8004186 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e0ce      	b.n	8004324 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f003 ffc9 	bl	8008124 <USB_SetCurrentMode>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d005      	beq.n	80041a4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0bf      	b.n	8004324 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041a4:	2300      	movs	r3, #0
 80041a6:	73fb      	strb	r3, [r7, #15]
 80041a8:	e04a      	b.n	8004240 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80041aa:	7bfa      	ldrb	r2, [r7, #15]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	3315      	adds	r3, #21
 80041ba:	2201      	movs	r2, #1
 80041bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80041be:	7bfa      	ldrb	r2, [r7, #15]
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	3314      	adds	r3, #20
 80041ce:	7bfa      	ldrb	r2, [r7, #15]
 80041d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80041d2:	7bfa      	ldrb	r2, [r7, #15]
 80041d4:	7bfb      	ldrb	r3, [r7, #15]
 80041d6:	b298      	uxth	r0, r3
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	00db      	lsls	r3, r3, #3
 80041de:	4413      	add	r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	332e      	adds	r3, #46	@ 0x2e
 80041e6:	4602      	mov	r2, r0
 80041e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80041ea:	7bfa      	ldrb	r2, [r7, #15]
 80041ec:	6879      	ldr	r1, [r7, #4]
 80041ee:	4613      	mov	r3, r2
 80041f0:	00db      	lsls	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	3318      	adds	r3, #24
 80041fa:	2200      	movs	r2, #0
 80041fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	4613      	mov	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	4413      	add	r3, r2
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	440b      	add	r3, r1
 800420c:	331c      	adds	r3, #28
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004212:	7bfa      	ldrb	r2, [r7, #15]
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	3320      	adds	r3, #32
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	6879      	ldr	r1, [r7, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	00db      	lsls	r3, r3, #3
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	3324      	adds	r3, #36	@ 0x24
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800423a:	7bfb      	ldrb	r3, [r7, #15]
 800423c:	3301      	adds	r3, #1
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	7bfa      	ldrb	r2, [r7, #15]
 8004246:	429a      	cmp	r2, r3
 8004248:	d3af      	bcc.n	80041aa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800424a:	2300      	movs	r3, #0
 800424c:	73fb      	strb	r3, [r7, #15]
 800424e:	e044      	b.n	80042da <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004250:	7bfa      	ldrb	r2, [r7, #15]
 8004252:	6879      	ldr	r1, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	00db      	lsls	r3, r3, #3
 8004258:	4413      	add	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004262:	2200      	movs	r2, #0
 8004264:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004266:	7bfa      	ldrb	r2, [r7, #15]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004278:	7bfa      	ldrb	r2, [r7, #15]
 800427a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800427c:	7bfa      	ldrb	r2, [r7, #15]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	00db      	lsls	r3, r3, #3
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800428e:	2200      	movs	r2, #0
 8004290:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004292:	7bfa      	ldrb	r2, [r7, #15]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	4613      	mov	r3, r2
 8004298:	00db      	lsls	r3, r3, #3
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80042a8:	7bfa      	ldrb	r2, [r7, #15]
 80042aa:	6879      	ldr	r1, [r7, #4]
 80042ac:	4613      	mov	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	4413      	add	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80042ba:	2200      	movs	r2, #0
 80042bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80042be:	7bfa      	ldrb	r2, [r7, #15]
 80042c0:	6879      	ldr	r1, [r7, #4]
 80042c2:	4613      	mov	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	4413      	add	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	440b      	add	r3, r1
 80042cc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
 80042d6:	3301      	adds	r3, #1
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	791b      	ldrb	r3, [r3, #4]
 80042de:	7bfa      	ldrb	r2, [r7, #15]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d3b5      	bcc.n	8004250 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6818      	ldr	r0, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	7c1a      	ldrb	r2, [r3, #16]
 80042ec:	f88d 2000 	strb.w	r2, [sp]
 80042f0:	3304      	adds	r3, #4
 80042f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f4:	f003 ff62 	bl	80081bc <USB_DevInit>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d005      	beq.n	800430a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e00c      	b.n	8004324 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f004 ffac 	bl	800927a <USB_DevDisconnect>

  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_PCD_Start+0x1c>
 8004344:	2302      	movs	r3, #2
 8004346:	e022      	b.n	800438e <HAL_PCD_Start+0x62>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004360:	2b01      	cmp	r3, #1
 8004362:	d105      	bne.n	8004370 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004368:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4618      	mov	r0, r3
 8004376:	f003 feb3 	bl	80080e0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4618      	mov	r0, r3
 8004380:	f004 ff5a 	bl	8009238 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004396:	b590      	push	{r4, r7, lr}
 8004398:	b08d      	sub	sp, #52	@ 0x34
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f005 f818 	bl	80093e2 <USB_GetMode>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f040 848c 	bne.w	8004cd2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f004 ff7c 	bl	80092bc <USB_ReadInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8482 	beq.w	8004cd0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	0a1b      	lsrs	r3, r3, #8
 80043d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4618      	mov	r0, r3
 80043e6:	f004 ff69 	bl	80092bc <USB_ReadInterrupts>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f003 0302 	and.w	r3, r3, #2
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d107      	bne.n	8004404 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695a      	ldr	r2, [r3, #20]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f002 0202 	and.w	r2, r2, #2
 8004402:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f004 ff57 	bl	80092bc <USB_ReadInterrupts>
 800440e:	4603      	mov	r3, r0
 8004410:	f003 0310 	and.w	r3, r3, #16
 8004414:	2b10      	cmp	r3, #16
 8004416:	d161      	bne.n	80044dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0210 	bic.w	r2, r2, #16
 8004426:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	4613      	mov	r3, r2
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	4413      	add	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	3304      	adds	r3, #4
 8004446:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	0c5b      	lsrs	r3, r3, #17
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2b02      	cmp	r3, #2
 8004452:	d124      	bne.n	800449e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d035      	beq.n	80044cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	091b      	lsrs	r3, r3, #4
 8004468:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800446a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800446e:	b29b      	uxth	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	6a38      	ldr	r0, [r7, #32]
 8004474:	f004 fd8e 	bl	8008f94 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004484:	441a      	add	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004496:	441a      	add	r2, r3
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	615a      	str	r2, [r3, #20]
 800449c:	e016      	b.n	80044cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	0c5b      	lsrs	r3, r3, #17
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d110      	bne.n	80044cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80044b0:	2208      	movs	r2, #8
 80044b2:	4619      	mov	r1, r3
 80044b4:	6a38      	ldr	r0, [r7, #32]
 80044b6:	f004 fd6d 	bl	8008f94 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	695a      	ldr	r2, [r3, #20]
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	091b      	lsrs	r3, r3, #4
 80044c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80044c6:	441a      	add	r2, r3
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	699a      	ldr	r2, [r3, #24]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0210 	orr.w	r2, r2, #16
 80044da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f004 feeb 	bl	80092bc <USB_ReadInterrupts>
 80044e6:	4603      	mov	r3, r0
 80044e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80044f0:	f040 80a7 	bne.w	8004642 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f004 fef0 	bl	80092e2 <USB_ReadDevAllOutEpInterrupt>
 8004502:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004504:	e099      	b.n	800463a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	f000 808e 	beq.w	800462e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	4611      	mov	r1, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f004 ff14 	bl	800934a <USB_ReadDevOutEPInterrupt>
 8004522:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	2b00      	cmp	r3, #0
 800452c:	d00c      	beq.n	8004548 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453a:	461a      	mov	r2, r3
 800453c:	2301      	movs	r3, #1
 800453e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004540:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fea4 	bl	8005290 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	f003 0308 	and.w	r3, r3, #8
 800454e:	2b00      	cmp	r3, #0
 8004550:	d00c      	beq.n	800456c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004554:	015a      	lsls	r2, r3, #5
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455e:	461a      	mov	r2, r3
 8004560:	2308      	movs	r3, #8
 8004562:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004564:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f000 ff7a 	bl	8005460 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	d008      	beq.n	8004588 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004582:	461a      	mov	r2, r3
 8004584:	2310      	movs	r3, #16
 8004586:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d030      	beq.n	80045f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004592:	6a3b      	ldr	r3, [r7, #32]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b80      	cmp	r3, #128	@ 0x80
 800459c:	d109      	bne.n	80045b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80045ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80045b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b4:	4613      	mov	r3, r2
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	4413      	add	r3, r2
 80045c4:	3304      	adds	r3, #4
 80045c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	78db      	ldrb	r3, [r3, #3]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d108      	bne.n	80045e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2200      	movs	r2, #0
 80045d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f00a ff99 	bl	800f514 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	015a      	lsls	r2, r3, #5
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ee:	461a      	mov	r2, r3
 80045f0:	2302      	movs	r3, #2
 80045f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d008      	beq.n	8004610 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460a:	461a      	mov	r2, r3
 800460c:	2320      	movs	r3, #32
 800460e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800462c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800462e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004630:	3301      	adds	r3, #1
 8004632:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800463a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	f47f af62 	bne.w	8004506 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4618      	mov	r0, r3
 8004648:	f004 fe38 	bl	80092bc <USB_ReadInterrupts>
 800464c:	4603      	mov	r3, r0
 800464e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004652:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004656:	f040 80db 	bne.w	8004810 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f004 fe59 	bl	8009316 <USB_ReadDevAllInEpInterrupt>
 8004664:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800466a:	e0cd      	b.n	8004808 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800466c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80c2 	beq.w	80047fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	4611      	mov	r1, r2
 8004682:	4618      	mov	r0, r3
 8004684:	f004 fe7f 	bl	8009386 <USB_ReadDevInEPInterrupt>
 8004688:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d057      	beq.n	8004744 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	2201      	movs	r2, #1
 800469c:	fa02 f303 	lsl.w	r3, r2, r3
 80046a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80046a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	43db      	mvns	r3, r3
 80046ae:	69f9      	ldr	r1, [r7, #28]
 80046b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80046b4:	4013      	ands	r3, r2
 80046b6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80046b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c4:	461a      	mov	r2, r3
 80046c6:	2301      	movs	r3, #1
 80046c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	799b      	ldrb	r3, [r3, #6]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d132      	bne.n	8004738 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	440b      	add	r3, r1
 80046e0:	3320      	adds	r3, #32
 80046e2:	6819      	ldr	r1, [r3, #0]
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4403      	add	r3, r0
 80046f2:	331c      	adds	r3, #28
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4419      	add	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4403      	add	r3, r0
 8004706:	3320      	adds	r3, #32
 8004708:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	2b00      	cmp	r3, #0
 800470e:	d113      	bne.n	8004738 <HAL_PCD_IRQHandler+0x3a2>
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	3324      	adds	r3, #36	@ 0x24
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d108      	bne.n	8004738 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6818      	ldr	r0, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004730:	461a      	mov	r2, r3
 8004732:	2101      	movs	r1, #1
 8004734:	f004 fe86 	bl	8009444 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473a:	b2db      	uxtb	r3, r3
 800473c:	4619      	mov	r1, r3
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f00a fe63 	bl	800f40a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f003 0308 	and.w	r3, r3, #8
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800475a:	461a      	mov	r2, r3
 800475c:	2308      	movs	r3, #8
 800475e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004776:	461a      	mov	r2, r3
 8004778:	2310      	movs	r3, #16
 800477a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b00      	cmp	r3, #0
 8004784:	d008      	beq.n	8004798 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	015a      	lsls	r2, r3, #5
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004792:	461a      	mov	r2, r3
 8004794:	2340      	movs	r3, #64	@ 0x40
 8004796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d023      	beq.n	80047ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80047a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047a4:	6a38      	ldr	r0, [r7, #32]
 80047a6:	f003 fe6d 	bl	8008484 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80047aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047ac:	4613      	mov	r3, r2
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	3310      	adds	r3, #16
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	3304      	adds	r3, #4
 80047bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	78db      	ldrb	r3, [r3, #3]
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d108      	bne.n	80047d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	2200      	movs	r2, #0
 80047ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f00a feb0 	bl	800f538 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80047d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e4:	461a      	mov	r2, r3
 80047e6:	2302      	movs	r3, #2
 80047e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d003      	beq.n	80047fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80047f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 fcbd 	bl	8005176 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	3301      	adds	r3, #1
 8004800:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004804:	085b      	lsrs	r3, r3, #1
 8004806:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800480a:	2b00      	cmp	r3, #0
 800480c:	f47f af2e 	bne.w	800466c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f004 fd51 	bl	80092bc <USB_ReadInterrupts>
 800481a:	4603      	mov	r3, r0
 800481c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004820:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004824:	d122      	bne.n	800486c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	69fa      	ldr	r2, [r7, #28]
 8004830:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004834:	f023 0301 	bic.w	r3, r3, #1
 8004838:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004840:	2b01      	cmp	r3, #1
 8004842:	d108      	bne.n	8004856 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800484c:	2100      	movs	r1, #0
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 fea4 	bl	800559c <HAL_PCDEx_LPM_Callback>
 8004854:	e002      	b.n	800485c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f00a fe4e 	bl	800f4f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695a      	ldr	r2, [r3, #20]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800486a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f004 fd23 	bl	80092bc <USB_ReadInterrupts>
 8004876:	4603      	mov	r3, r0
 8004878:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800487c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004880:	d112      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d102      	bne.n	8004898 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f00a fe0a 	bl	800f4ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80048a6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4618      	mov	r0, r3
 80048ae:	f004 fd05 	bl	80092bc <USB_ReadInterrupts>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048bc:	f040 80b7 	bne.w	8004a2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	69fa      	ldr	r2, [r7, #28]
 80048ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048ce:	f023 0301 	bic.w	r3, r3, #1
 80048d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2110      	movs	r1, #16
 80048da:	4618      	mov	r0, r3
 80048dc:	f003 fdd2 	bl	8008484 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048e0:	2300      	movs	r3, #0
 80048e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048e4:	e046      	b.n	8004974 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80048e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e8:	015a      	lsls	r2, r3, #5
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	4413      	add	r3, r2
 80048ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048f2:	461a      	mov	r2, r3
 80048f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80048f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	69fb      	ldr	r3, [r7, #28]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800490a:	0151      	lsls	r1, r2, #5
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	440a      	add	r2, r1
 8004910:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004914:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004918:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800491a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004926:	461a      	mov	r2, r3
 8004928:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800492c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800492e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800493e:	0151      	lsls	r1, r2, #5
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	440a      	add	r2, r1
 8004944:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004948:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800494c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800494e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004950:	015a      	lsls	r2, r3, #5
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	4413      	add	r3, r2
 8004956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800495e:	0151      	lsls	r1, r2, #5
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	440a      	add	r2, r1
 8004964:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004968:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800496c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800496e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004970:	3301      	adds	r3, #1
 8004972:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	791b      	ldrb	r3, [r3, #4]
 8004978:	461a      	mov	r2, r3
 800497a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497c:	4293      	cmp	r3, r2
 800497e:	d3b2      	bcc.n	80048e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800498e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004992:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	7bdb      	ldrb	r3, [r3, #15]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d016      	beq.n	80049ca <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049a6:	69fa      	ldr	r2, [r7, #28]
 80049a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049ac:	f043 030b 	orr.w	r3, r3, #11
 80049b0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049bc:	69fa      	ldr	r2, [r7, #28]
 80049be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049c2:	f043 030b 	orr.w	r3, r3, #11
 80049c6:	6453      	str	r3, [r2, #68]	@ 0x44
 80049c8:	e015      	b.n	80049f6 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	69fa      	ldr	r2, [r7, #28]
 80049d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049d8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80049dc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80049e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	69fa      	ldr	r2, [r7, #28]
 80049ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80049f0:	f043 030b 	orr.w	r3, r3, #11
 80049f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a04:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004a08:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004a18:	461a      	mov	r2, r3
 8004a1a:	f004 fd13 	bl	8009444 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	695a      	ldr	r2, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f004 fc42 	bl	80092bc <USB_ReadInterrupts>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a42:	d123      	bne.n	8004a8c <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f004 fcd8 	bl	80093fe <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f003 fd8f 	bl	8008576 <USB_GetDevSpeed>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681c      	ldr	r4, [r3, #0]
 8004a64:	f001 fa0a 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8004a68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004a6e:	461a      	mov	r2, r3
 8004a70:	4620      	mov	r0, r4
 8004a72:	f003 fa93 	bl	8007f9c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f00a fcef 	bl	800f45a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004a8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f004 fc13 	bl	80092bc <USB_ReadInterrupts>
 8004a96:	4603      	mov	r3, r0
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b08      	cmp	r3, #8
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f00a fccc 	bl	800f43e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695a      	ldr	r2, [r3, #20]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f002 0208 	and.w	r2, r2, #8
 8004ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f004 fbfe 	bl	80092bc <USB_ReadInterrupts>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac6:	2b80      	cmp	r3, #128	@ 0x80
 8004ac8:	d123      	bne.n	8004b12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	699b      	ldr	r3, [r3, #24]
 8004ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ada:	e014      	b.n	8004b06 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004adc:	6879      	ldr	r1, [r7, #4]
 8004ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004aee:	781b      	ldrb	r3, [r3, #0]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d105      	bne.n	8004b00 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	4619      	mov	r1, r3
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fb0a 	bl	8005114 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b02:	3301      	adds	r3, #1
 8004b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	791b      	ldrb	r3, [r3, #4]
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d3e4      	bcc.n	8004adc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4618      	mov	r0, r3
 8004b18:	f004 fbd0 	bl	80092bc <USB_ReadInterrupts>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b26:	d13c      	bne.n	8004ba2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b28:	2301      	movs	r3, #1
 8004b2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b2c:	e02b      	b.n	8004b86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d115      	bne.n	8004b80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004b54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da12      	bge.n	8004b80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5e:	4613      	mov	r3, r2
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	3317      	adds	r3, #23
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	4619      	mov	r1, r3
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 faca 	bl	8005114 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b82:	3301      	adds	r3, #1
 8004b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	791b      	ldrb	r3, [r3, #4]
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d3cd      	bcc.n	8004b2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	695a      	ldr	r2, [r3, #20]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f004 fb88 	bl	80092bc <USB_ReadInterrupts>
 8004bac:	4603      	mov	r3, r0
 8004bae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004bb6:	d156      	bne.n	8004c66 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004bb8:	2301      	movs	r3, #1
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bbc:	e045      	b.n	8004c4a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	015a      	lsls	r2, r3, #5
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	440b      	add	r3, r1
 8004bdc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d12e      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004be6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	da2b      	bge.n	8004c44 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004bf8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d121      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004c12:	2201      	movs	r2, #1
 8004c14:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004c22:	6a3b      	ldr	r3, [r7, #32]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10a      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004c2e:	69fb      	ldr	r3, [r7, #28]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c40:	6053      	str	r3, [r2, #4]
            break;
 8004c42:	e008      	b.n	8004c56 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	3301      	adds	r3, #1
 8004c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	791b      	ldrb	r3, [r3, #4]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d3b3      	bcc.n	8004bbe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695a      	ldr	r2, [r3, #20]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004c64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	f004 fb26 	bl	80092bc <USB_ReadInterrupts>
 8004c70:	4603      	mov	r3, r0
 8004c72:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d10a      	bne.n	8004c92 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f00a fc6d 	bl	800f55c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f004 fb10 	bl	80092bc <USB_ReadInterrupts>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b04      	cmp	r3, #4
 8004ca4:	d115      	bne.n	8004cd2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	f003 0304 	and.w	r3, r3, #4
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f00a fc5d 	bl	800f578 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6859      	ldr	r1, [r3, #4]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
 8004cce:	e000      	b.n	8004cd2 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004cd0:	bf00      	nop
    }
  }
}
 8004cd2:	3734      	adds	r7, #52	@ 0x34
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd90      	pop	{r4, r7, pc}

08004cd8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	460b      	mov	r3, r1
 8004ce2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_PCD_SetAddress+0x1a>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e012      	b.n	8004d18 <HAL_PCD_SetAddress+0x40>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	78fa      	ldrb	r2, [r7, #3]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f004 fa6f 	bl	80091ec <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}

08004d20 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	70fb      	strb	r3, [r7, #3]
 8004d32:	460b      	mov	r3, r1
 8004d34:	803b      	strh	r3, [r7, #0]
 8004d36:	4613      	mov	r3, r2
 8004d38:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	da0f      	bge.n	8004d66 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d46:	78fb      	ldrb	r3, [r7, #3]
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	3310      	adds	r3, #16
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4413      	add	r3, r2
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	705a      	strb	r2, [r3, #1]
 8004d64:	e00f      	b.n	8004d86 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d66:	78fb      	ldrb	r3, [r7, #3]
 8004d68:	f003 020f 	and.w	r2, r3, #15
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	4413      	add	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d78:	687a      	ldr	r2, [r7, #4]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004d86:	78fb      	ldrb	r3, [r7, #3]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004d92:	883b      	ldrh	r3, [r7, #0]
 8004d94:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	78ba      	ldrb	r2, [r7, #2]
 8004da0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004db4:	78bb      	ldrb	r3, [r7, #2]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d102      	bne.n	8004dc0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_PCD_EP_Open+0xae>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e00e      	b.n	8004dec <HAL_PCD_EP_Open+0xcc>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68f9      	ldr	r1, [r7, #12]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f003 fbef 	bl	80085c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004dea:	7afb      	ldrb	r3, [r7, #11]
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	da0f      	bge.n	8004e28 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e08:	78fb      	ldrb	r3, [r7, #3]
 8004e0a:	f003 020f 	and.w	r2, r3, #15
 8004e0e:	4613      	mov	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	3310      	adds	r3, #16
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2201      	movs	r2, #1
 8004e24:	705a      	strb	r2, [r3, #1]
 8004e26:	e00f      	b.n	8004e48 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	f003 020f 	and.w	r2, r3, #15
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	3304      	adds	r3, #4
 8004e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e48:	78fb      	ldrb	r3, [r7, #3]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d101      	bne.n	8004e62 <HAL_PCD_EP_Close+0x6e>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e00e      	b.n	8004e80 <HAL_PCD_EP_Close+0x8c>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f003 fc2d 	bl	80086d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b086      	sub	sp, #24
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	607a      	str	r2, [r7, #4]
 8004e92:	603b      	str	r3, [r7, #0]
 8004e94:	460b      	mov	r3, r1
 8004e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e98:	7afb      	ldrb	r3, [r7, #11]
 8004e9a:	f003 020f 	and.w	r2, r3, #15
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	3304      	adds	r3, #4
 8004eb0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004eca:	7afb      	ldrb	r3, [r7, #11]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	b2da      	uxtb	r2, r3
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	799b      	ldrb	r3, [r3, #6]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d102      	bne.n	8004ee4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6818      	ldr	r0, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	799b      	ldrb	r3, [r3, #6]
 8004eec:	461a      	mov	r2, r3
 8004eee:	6979      	ldr	r1, [r7, #20]
 8004ef0:	f003 fcca 	bl	8008888 <USB_EPStartXfer>

  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}

08004efe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b083      	sub	sp, #12
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6078      	str	r0, [r7, #4]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f003 020f 	and.w	r2, r3, #15
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004f20:	681b      	ldr	r3, [r3, #0]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b086      	sub	sp, #24
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	60f8      	str	r0, [r7, #12]
 8004f36:	607a      	str	r2, [r7, #4]
 8004f38:	603b      	str	r3, [r7, #0]
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f3e:	7afb      	ldrb	r3, [r7, #11]
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	4613      	mov	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	3310      	adds	r3, #16
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	4413      	add	r3, r2
 8004f52:	3304      	adds	r3, #4
 8004f54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	683a      	ldr	r2, [r7, #0]
 8004f60:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f6e:	7afb      	ldrb	r3, [r7, #11]
 8004f70:	f003 030f 	and.w	r3, r3, #15
 8004f74:	b2da      	uxtb	r2, r3
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	799b      	ldrb	r3, [r3, #6]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d102      	bne.n	8004f88 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6818      	ldr	r0, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	799b      	ldrb	r3, [r3, #6]
 8004f90:	461a      	mov	r2, r3
 8004f92:	6979      	ldr	r1, [r7, #20]
 8004f94:	f003 fc78 	bl	8008888 <USB_EPStartXfer>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	460b      	mov	r3, r1
 8004fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004fae:	78fb      	ldrb	r3, [r7, #3]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	7912      	ldrb	r2, [r2, #4]
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e04f      	b.n	8005060 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da0f      	bge.n	8004fe8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc8:	78fb      	ldrb	r3, [r7, #3]
 8004fca:	f003 020f 	and.w	r2, r3, #15
 8004fce:	4613      	mov	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	4413      	add	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	3310      	adds	r3, #16
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	3304      	adds	r3, #4
 8004fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	705a      	strb	r2, [r3, #1]
 8004fe6:	e00d      	b.n	8005004 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	4613      	mov	r3, r2
 8004fec:	00db      	lsls	r3, r3, #3
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2201      	movs	r2, #1
 8005008:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	f003 030f 	and.w	r3, r3, #15
 8005010:	b2da      	uxtb	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_PCD_EP_SetStall+0x82>
 8005020:	2302      	movs	r3, #2
 8005022:	e01d      	b.n	8005060 <HAL_PCD_EP_SetStall+0xbe>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68f9      	ldr	r1, [r7, #12]
 8005032:	4618      	mov	r0, r3
 8005034:	f004 f806 	bl	8009044 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	f003 030f 	and.w	r3, r3, #15
 800503e:	2b00      	cmp	r3, #0
 8005040:	d109      	bne.n	8005056 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	7999      	ldrb	r1, [r3, #6]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005050:	461a      	mov	r2, r3
 8005052:	f004 f9f7 	bl	8009444 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	460b      	mov	r3, r1
 8005072:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	7912      	ldrb	r2, [r2, #4]
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e042      	b.n	800510c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800508a:	2b00      	cmp	r3, #0
 800508c:	da0f      	bge.n	80050ae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800508e:	78fb      	ldrb	r3, [r7, #3]
 8005090:	f003 020f 	and.w	r2, r3, #15
 8005094:	4613      	mov	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	4413      	add	r3, r2
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	3310      	adds	r3, #16
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	4413      	add	r3, r2
 80050a2:	3304      	adds	r3, #4
 80050a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2201      	movs	r2, #1
 80050aa:	705a      	strb	r2, [r3, #1]
 80050ac:	e00f      	b.n	80050ce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ae:	78fb      	ldrb	r3, [r7, #3]
 80050b0:	f003 020f 	and.w	r2, r3, #15
 80050b4:	4613      	mov	r3, r2
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	3304      	adds	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050d4:	78fb      	ldrb	r3, [r7, #3]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_PCD_EP_ClrStall+0x86>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e00e      	b.n	800510c <HAL_PCD_EP_ClrStall+0xa4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68f9      	ldr	r1, [r7, #12]
 80050fc:	4618      	mov	r0, r3
 80050fe:	f004 f80f 	bl	8009120 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005120:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005124:	2b00      	cmp	r3, #0
 8005126:	da0c      	bge.n	8005142 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 020f 	and.w	r2, r3, #15
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	3310      	adds	r3, #16
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4413      	add	r3, r2
 800513c:	3304      	adds	r3, #4
 800513e:	60fb      	str	r3, [r7, #12]
 8005140:	e00c      	b.n	800515c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005142:	78fb      	ldrb	r3, [r7, #3]
 8005144:	f003 020f 	and.w	r2, r3, #15
 8005148:	4613      	mov	r3, r2
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	4413      	add	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	4413      	add	r3, r2
 8005158:	3304      	adds	r3, #4
 800515a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	68f9      	ldr	r1, [r7, #12]
 8005162:	4618      	mov	r0, r3
 8005164:	f003 fe2e 	bl	8008dc4 <USB_EPStopXfer>
 8005168:	4603      	mov	r3, r0
 800516a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800516c:	7afb      	ldrb	r3, [r7, #11]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	@ 0x28
 800517a:	af02      	add	r7, sp, #8
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	3310      	adds	r3, #16
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	695a      	ldr	r2, [r3, #20]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d901      	bls.n	80051ae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e06b      	b.n	8005286 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	695b      	ldr	r3, [r3, #20]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d902      	bls.n	80051ca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	3303      	adds	r3, #3
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80051d2:	e02a      	b.n	800522a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d902      	bls.n	80051f0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3303      	adds	r3, #3
 80051f4:	089b      	lsrs	r3, r3, #2
 80051f6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	68d9      	ldr	r1, [r3, #12]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	b2da      	uxtb	r2, r3
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	4603      	mov	r3, r0
 800520c:	6978      	ldr	r0, [r7, #20]
 800520e:	f003 fe83 	bl	8008f18 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	68da      	ldr	r2, [r3, #12]
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	441a      	add	r2, r3
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	695a      	ldr	r2, [r3, #20]
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	441a      	add	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	015a      	lsls	r2, r3, #5
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	4413      	add	r3, r2
 8005232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	429a      	cmp	r2, r3
 800523e:	d809      	bhi.n	8005254 <PCD_WriteEmptyTxFifo+0xde>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	695a      	ldr	r2, [r3, #20]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005248:	429a      	cmp	r2, r3
 800524a:	d203      	bcs.n	8005254 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1bf      	bne.n	80051d4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	691a      	ldr	r2, [r3, #16]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	429a      	cmp	r2, r3
 800525e:	d811      	bhi.n	8005284 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	f003 030f 	and.w	r3, r3, #15
 8005266:	2201      	movs	r2, #1
 8005268:	fa02 f303 	lsl.w	r3, r2, r3
 800526c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005274:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	43db      	mvns	r3, r3
 800527a:	6939      	ldr	r1, [r7, #16]
 800527c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005280:	4013      	ands	r3, r2
 8005282:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b088      	sub	sp, #32
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a0:	69fb      	ldr	r3, [r7, #28]
 80052a2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	333c      	adds	r3, #60	@ 0x3c
 80052a8:	3304      	adds	r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	799b      	ldrb	r3, [r3, #6]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d17b      	bne.n	80053be <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d015      	beq.n	80052fc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4a61      	ldr	r2, [pc, #388]	@ (8005458 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	f240 80b9 	bls.w	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 80b3 	beq.w	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052f2:	461a      	mov	r2, r3
 80052f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052f8:	6093      	str	r3, [r2, #8]
 80052fa:	e0a7      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	f003 0320 	and.w	r3, r3, #32
 8005302:	2b00      	cmp	r3, #0
 8005304:	d009      	beq.n	800531a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005312:	461a      	mov	r2, r3
 8005314:	2320      	movs	r3, #32
 8005316:	6093      	str	r3, [r2, #8]
 8005318:	e098      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005320:	2b00      	cmp	r3, #0
 8005322:	f040 8093 	bne.w	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	4a4b      	ldr	r2, [pc, #300]	@ (8005458 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d90f      	bls.n	800534e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	015a      	lsls	r2, r3, #5
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	4413      	add	r3, r2
 8005340:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005344:	461a      	mov	r2, r3
 8005346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800534a:	6093      	str	r3, [r2, #8]
 800534c:	e07e      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	4413      	add	r3, r2
 8005360:	3304      	adds	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1a      	ldr	r2, [r3, #32]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	0159      	lsls	r1, r3, #5
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	440b      	add	r3, r1
 8005370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800537a:	1ad2      	subs	r2, r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d114      	bne.n	80053b0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d109      	bne.n	80053a2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005398:	461a      	mov	r2, r3
 800539a:	2101      	movs	r1, #1
 800539c:	f004 f852 	bl	8009444 <USB_EP0_OutStart>
 80053a0:	e006      	b.n	80053b0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	68da      	ldr	r2, [r3, #12]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	441a      	add	r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	4619      	mov	r1, r3
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f00a f80c 	bl	800f3d4 <HAL_PCD_DataOutStageCallback>
 80053bc:	e046      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4a26      	ldr	r2, [pc, #152]	@ (800545c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d124      	bne.n	8005410 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053dc:	461a      	mov	r2, r3
 80053de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e2:	6093      	str	r3, [r2, #8]
 80053e4:	e032      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f003 0320 	and.w	r3, r3, #32
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	2320      	movs	r3, #32
 8005400:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	b2db      	uxtb	r3, r3
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f009 ffe3 	bl	800f3d4 <HAL_PCD_DataOutStageCallback>
 800540e:	e01d      	b.n	800544c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d114      	bne.n	8005440 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	683a      	ldr	r2, [r7, #0]
 800541a:	4613      	mov	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	4413      	add	r3, r2
 8005420:	009b      	lsls	r3, r3, #2
 8005422:	440b      	add	r3, r1
 8005424:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d108      	bne.n	8005440 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005438:	461a      	mov	r2, r3
 800543a:	2100      	movs	r1, #0
 800543c:	f004 f802 	bl	8009444 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f009 ffc4 	bl	800f3d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3720      	adds	r7, #32
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	4f54300a 	.word	0x4f54300a
 800545c:	4f54310a 	.word	0x4f54310a

08005460 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	333c      	adds	r3, #60	@ 0x3c
 8005478:	3304      	adds	r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4413      	add	r3, r2
 8005486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a15      	ldr	r2, [pc, #84]	@ (80054e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d90e      	bls.n	80054b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054ac:	461a      	mov	r2, r3
 80054ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f009 ff7b 	bl	800f3b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d90c      	bls.n	80054dc <PCD_EP_OutSetupPacket_int+0x7c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	799b      	ldrb	r3, [r3, #6]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d108      	bne.n	80054dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6818      	ldr	r0, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054d4:	461a      	mov	r2, r3
 80054d6:	2101      	movs	r1, #1
 80054d8:	f003 ffb4 	bl	8009444 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	4f54300a 	.word	0x4f54300a

080054ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70fb      	strb	r3, [r7, #3]
 80054f8:	4613      	mov	r3, r2
 80054fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005502:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d107      	bne.n	800551a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800550a:	883b      	ldrh	r3, [r7, #0]
 800550c:	0419      	lsls	r1, r3, #16
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	430a      	orrs	r2, r1
 8005516:	629a      	str	r2, [r3, #40]	@ 0x28
 8005518:	e028      	b.n	800556c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005520:	0c1b      	lsrs	r3, r3, #16
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	4413      	add	r3, r2
 8005526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005528:	2300      	movs	r3, #0
 800552a:	73fb      	strb	r3, [r7, #15]
 800552c:	e00d      	b.n	800554a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	3340      	adds	r3, #64	@ 0x40
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	0c1b      	lsrs	r3, r3, #16
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	4413      	add	r3, r2
 8005542:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005544:	7bfb      	ldrb	r3, [r7, #15]
 8005546:	3301      	adds	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
 800554a:	7bfa      	ldrb	r2, [r7, #15]
 800554c:	78fb      	ldrb	r3, [r7, #3]
 800554e:	3b01      	subs	r3, #1
 8005550:	429a      	cmp	r2, r3
 8005552:	d3ec      	bcc.n	800552e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005554:	883b      	ldrh	r3, [r7, #0]
 8005556:	0418      	lsls	r0, r3, #16
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6819      	ldr	r1, [r3, #0]
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	3b01      	subs	r3, #1
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	4302      	orrs	r2, r0
 8005564:	3340      	adds	r3, #64	@ 0x40
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
 8005582:	460b      	mov	r3, r1
 8005584:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	460b      	mov	r3, r1
 80055a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80055a8:	bf00      	nop
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e267      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d075      	beq.n	80056be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055d2:	4b88      	ldr	r3, [pc, #544]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d00c      	beq.n	80055f8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055de:	4b85      	ldr	r3, [pc, #532]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d112      	bne.n	8005610 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80055ea:	4b82      	ldr	r3, [pc, #520]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f6:	d10b      	bne.n	8005610 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055f8:	4b7e      	ldr	r3, [pc, #504]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05b      	beq.n	80056bc <HAL_RCC_OscConfig+0x108>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d157      	bne.n	80056bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e242      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005618:	d106      	bne.n	8005628 <HAL_RCC_OscConfig+0x74>
 800561a:	4b76      	ldr	r3, [pc, #472]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a75      	ldr	r2, [pc, #468]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005620:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	e01d      	b.n	8005664 <HAL_RCC_OscConfig+0xb0>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005630:	d10c      	bne.n	800564c <HAL_RCC_OscConfig+0x98>
 8005632:	4b70      	ldr	r3, [pc, #448]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6f      	ldr	r2, [pc, #444]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	4b6d      	ldr	r3, [pc, #436]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a6c      	ldr	r2, [pc, #432]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005648:	6013      	str	r3, [r2, #0]
 800564a:	e00b      	b.n	8005664 <HAL_RCC_OscConfig+0xb0>
 800564c:	4b69      	ldr	r3, [pc, #420]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a68      	ldr	r2, [pc, #416]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b66      	ldr	r3, [pc, #408]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a65      	ldr	r2, [pc, #404]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 800565e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d013      	beq.n	8005694 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566c:	f7fc fb32 	bl	8001cd4 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005672:	e008      	b.n	8005686 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005674:	f7fc fb2e 	bl	8001cd4 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b64      	cmp	r3, #100	@ 0x64
 8005680:	d901      	bls.n	8005686 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	e207      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005686:	4b5b      	ldr	r3, [pc, #364]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f0      	beq.n	8005674 <HAL_RCC_OscConfig+0xc0>
 8005692:	e014      	b.n	80056be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005694:	f7fc fb1e 	bl	8001cd4 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569a:	e008      	b.n	80056ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800569c:	f7fc fb1a 	bl	8001cd4 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b64      	cmp	r3, #100	@ 0x64
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e1f3      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056ae:	4b51      	ldr	r3, [pc, #324]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1f0      	bne.n	800569c <HAL_RCC_OscConfig+0xe8>
 80056ba:	e000      	b.n	80056be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d063      	beq.n	8005792 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056ca:	4b4a      	ldr	r3, [pc, #296]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00b      	beq.n	80056ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056d6:	4b47      	ldr	r3, [pc, #284]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80056de:	2b08      	cmp	r3, #8
 80056e0:	d11c      	bne.n	800571c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80056e2:	4b44      	ldr	r3, [pc, #272]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d116      	bne.n	800571c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056ee:	4b41      	ldr	r3, [pc, #260]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <HAL_RCC_OscConfig+0x152>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d001      	beq.n	8005706 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e1c7      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005706:	4b3b      	ldr	r3, [pc, #236]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4937      	ldr	r1, [pc, #220]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005716:	4313      	orrs	r3, r2
 8005718:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571a:	e03a      	b.n	8005792 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d020      	beq.n	8005766 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005724:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <HAL_RCC_OscConfig+0x244>)
 8005726:	2201      	movs	r2, #1
 8005728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800572a:	f7fc fad3 	bl	8001cd4 <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005730:	e008      	b.n	8005744 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005732:	f7fc facf 	bl	8001cd4 <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d901      	bls.n	8005744 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e1a8      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005744:	4b2b      	ldr	r3, [pc, #172]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0f0      	beq.n	8005732 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005750:	4b28      	ldr	r3, [pc, #160]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	691b      	ldr	r3, [r3, #16]
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4925      	ldr	r1, [pc, #148]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005760:	4313      	orrs	r3, r2
 8005762:	600b      	str	r3, [r1, #0]
 8005764:	e015      	b.n	8005792 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005766:	4b24      	ldr	r3, [pc, #144]	@ (80057f8 <HAL_RCC_OscConfig+0x244>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fc fab2 	bl	8001cd4 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005774:	f7fc faae 	bl	8001cd4 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e187      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005786:	4b1b      	ldr	r3, [pc, #108]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0308 	and.w	r3, r3, #8
 800579a:	2b00      	cmp	r3, #0
 800579c:	d036      	beq.n	800580c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d016      	beq.n	80057d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057a6:	4b15      	ldr	r3, [pc, #84]	@ (80057fc <HAL_RCC_OscConfig+0x248>)
 80057a8:	2201      	movs	r2, #1
 80057aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ac:	f7fc fa92 	bl	8001cd4 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b4:	f7fc fa8e 	bl	8001cd4 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e167      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057c6:	4b0b      	ldr	r3, [pc, #44]	@ (80057f4 <HAL_RCC_OscConfig+0x240>)
 80057c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0f0      	beq.n	80057b4 <HAL_RCC_OscConfig+0x200>
 80057d2:	e01b      	b.n	800580c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d4:	4b09      	ldr	r3, [pc, #36]	@ (80057fc <HAL_RCC_OscConfig+0x248>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057da:	f7fc fa7b 	bl	8001cd4 <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057e0:	e00e      	b.n	8005800 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057e2:	f7fc fa77 	bl	8001cd4 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d907      	bls.n	8005800 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e150      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
 80057f4:	40023800 	.word	0x40023800
 80057f8:	42470000 	.word	0x42470000
 80057fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005800:	4b88      	ldr	r3, [pc, #544]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d1ea      	bne.n	80057e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8097 	beq.w	8005948 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581e:	4b81      	ldr	r3, [pc, #516]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005822:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10f      	bne.n	800584a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800582a:	2300      	movs	r3, #0
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	4b7d      	ldr	r3, [pc, #500]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005832:	4a7c      	ldr	r2, [pc, #496]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005838:	6413      	str	r3, [r2, #64]	@ 0x40
 800583a:	4b7a      	ldr	r3, [pc, #488]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 800583c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800583e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005842:	60bb      	str	r3, [r7, #8]
 8005844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005846:	2301      	movs	r3, #1
 8005848:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800584a:	4b77      	ldr	r3, [pc, #476]	@ (8005a28 <HAL_RCC_OscConfig+0x474>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005852:	2b00      	cmp	r3, #0
 8005854:	d118      	bne.n	8005888 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005856:	4b74      	ldr	r3, [pc, #464]	@ (8005a28 <HAL_RCC_OscConfig+0x474>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a73      	ldr	r2, [pc, #460]	@ (8005a28 <HAL_RCC_OscConfig+0x474>)
 800585c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005860:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005862:	f7fc fa37 	bl	8001cd4 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005868:	e008      	b.n	800587c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800586a:	f7fc fa33 	bl	8001cd4 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e10c      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800587c:	4b6a      	ldr	r3, [pc, #424]	@ (8005a28 <HAL_RCC_OscConfig+0x474>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d106      	bne.n	800589e <HAL_RCC_OscConfig+0x2ea>
 8005890:	4b64      	ldr	r3, [pc, #400]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005894:	4a63      	ldr	r2, [pc, #396]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005896:	f043 0301 	orr.w	r3, r3, #1
 800589a:	6713      	str	r3, [r2, #112]	@ 0x70
 800589c:	e01c      	b.n	80058d8 <HAL_RCC_OscConfig+0x324>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	2b05      	cmp	r3, #5
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCC_OscConfig+0x30c>
 80058a6:	4b5f      	ldr	r3, [pc, #380]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058aa:	4a5e      	ldr	r2, [pc, #376]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058ac:	f043 0304 	orr.w	r3, r3, #4
 80058b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80058b2:	4b5c      	ldr	r3, [pc, #368]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80058be:	e00b      	b.n	80058d8 <HAL_RCC_OscConfig+0x324>
 80058c0:	4b58      	ldr	r3, [pc, #352]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058c4:	4a57      	ldr	r2, [pc, #348]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058c6:	f023 0301 	bic.w	r3, r3, #1
 80058ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80058cc:	4b55      	ldr	r3, [pc, #340]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058d0:	4a54      	ldr	r2, [pc, #336]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80058d2:	f023 0304 	bic.w	r3, r3, #4
 80058d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d015      	beq.n	800590c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058e0:	f7fc f9f8 	bl	8001cd4 <HAL_GetTick>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058e8:	f7fc f9f4 	bl	8001cd4 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e0cb      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058fe:	4b49      	ldr	r3, [pc, #292]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005902:	f003 0302 	and.w	r3, r3, #2
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0ee      	beq.n	80058e8 <HAL_RCC_OscConfig+0x334>
 800590a:	e014      	b.n	8005936 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590c:	f7fc f9e2 	bl	8001cd4 <HAL_GetTick>
 8005910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005912:	e00a      	b.n	800592a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005914:	f7fc f9de 	bl	8001cd4 <HAL_GetTick>
 8005918:	4602      	mov	r2, r0
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e0b5      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592a:	4b3e      	ldr	r3, [pc, #248]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 800592c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1ee      	bne.n	8005914 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005936:	7dfb      	ldrb	r3, [r7, #23]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d105      	bne.n	8005948 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800593c:	4b39      	ldr	r3, [pc, #228]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 800593e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005940:	4a38      	ldr	r2, [pc, #224]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005942:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005946:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80a1 	beq.w	8005a94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005952:	4b34      	ldr	r3, [pc, #208]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
 800595a:	2b08      	cmp	r3, #8
 800595c:	d05c      	beq.n	8005a18 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	2b02      	cmp	r3, #2
 8005964:	d141      	bne.n	80059ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005966:	4b31      	ldr	r3, [pc, #196]	@ (8005a2c <HAL_RCC_OscConfig+0x478>)
 8005968:	2200      	movs	r2, #0
 800596a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800596c:	f7fc f9b2 	bl	8001cd4 <HAL_GetTick>
 8005970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005972:	e008      	b.n	8005986 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005974:	f7fc f9ae 	bl	8001cd4 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	2b02      	cmp	r3, #2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e087      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005986:	4b27      	ldr	r3, [pc, #156]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1f0      	bne.n	8005974 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	69da      	ldr	r2, [r3, #28]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	085b      	lsrs	r3, r3, #1
 80059aa:	3b01      	subs	r3, #1
 80059ac:	041b      	lsls	r3, r3, #16
 80059ae:	431a      	orrs	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	061b      	lsls	r3, r3, #24
 80059b6:	491b      	ldr	r1, [pc, #108]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059bc:	4b1b      	ldr	r3, [pc, #108]	@ (8005a2c <HAL_RCC_OscConfig+0x478>)
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c2:	f7fc f987 	bl	8001cd4 <HAL_GetTick>
 80059c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059c8:	e008      	b.n	80059dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ca:	f7fc f983 	bl	8001cd4 <HAL_GetTick>
 80059ce:	4602      	mov	r2, r0
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	1ad3      	subs	r3, r2, r3
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d901      	bls.n	80059dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e05c      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80059dc:	4b11      	ldr	r3, [pc, #68]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d0f0      	beq.n	80059ca <HAL_RCC_OscConfig+0x416>
 80059e8:	e054      	b.n	8005a94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059ea:	4b10      	ldr	r3, [pc, #64]	@ (8005a2c <HAL_RCC_OscConfig+0x478>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f0:	f7fc f970 	bl	8001cd4 <HAL_GetTick>
 80059f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80059f6:	e008      	b.n	8005a0a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059f8:	f7fc f96c 	bl	8001cd4 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	2b02      	cmp	r3, #2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e045      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a0a:	4b06      	ldr	r3, [pc, #24]	@ (8005a24 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1f0      	bne.n	80059f8 <HAL_RCC_OscConfig+0x444>
 8005a16:	e03d      	b.n	8005a94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e038      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
 8005a24:	40023800 	.word	0x40023800
 8005a28:	40007000 	.word	0x40007000
 8005a2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005a30:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa0 <HAL_RCC_OscConfig+0x4ec>)
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d028      	beq.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d121      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d11a      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005a60:	4013      	ands	r3, r2
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005a66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d111      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a76:	085b      	lsrs	r3, r3, #1
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d107      	bne.n	8005a90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d001      	beq.n	8005a94 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e000      	b.n	8005a96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40023800 	.word	0x40023800

08005aa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0cc      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ab8:	4b68      	ldr	r3, [pc, #416]	@ (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d90c      	bls.n	8005ae0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac6:	4b65      	ldr	r3, [pc, #404]	@ (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ace:	4b63      	ldr	r3, [pc, #396]	@ (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 030f 	and.w	r3, r3, #15
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e0b8      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d020      	beq.n	8005b2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d005      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af8:	4b59      	ldr	r3, [pc, #356]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	4a58      	ldr	r2, [pc, #352]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005b02:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b10:	4b53      	ldr	r3, [pc, #332]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	4a52      	ldr	r2, [pc, #328]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005b1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b1c:	4b50      	ldr	r3, [pc, #320]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	494d      	ldr	r1, [pc, #308]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d044      	beq.n	8005bc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d107      	bne.n	8005b52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	4b47      	ldr	r3, [pc, #284]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d119      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e07f      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d003      	beq.n	8005b62 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d107      	bne.n	8005b72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b62:	4b3f      	ldr	r3, [pc, #252]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d109      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e06f      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b72:	4b3b      	ldr	r3, [pc, #236]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e067      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b82:	4b37      	ldr	r3, [pc, #220]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f023 0203 	bic.w	r2, r3, #3
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	4934      	ldr	r1, [pc, #208]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b94:	f7fc f89e 	bl	8001cd4 <HAL_GetTick>
 8005b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b9a:	e00a      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b9c:	f7fc f89a 	bl	8001cd4 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e04f      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb2:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	f003 020c 	and.w	r2, r3, #12
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d1eb      	bne.n	8005b9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b25      	ldr	r3, [pc, #148]	@ (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d20c      	bcs.n	8005bec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b22      	ldr	r3, [pc, #136]	@ (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	b2d2      	uxtb	r2, r2
 8005bd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b20      	ldr	r3, [pc, #128]	@ (8005c5c <HAL_RCC_ClockConfig+0x1b8>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	683a      	ldr	r2, [r7, #0]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d001      	beq.n	8005bec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e032      	b.n	8005c52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d008      	beq.n	8005c0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf8:	4b19      	ldr	r3, [pc, #100]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	4916      	ldr	r1, [pc, #88]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c06:	4313      	orrs	r3, r2
 8005c08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c16:	4b12      	ldr	r3, [pc, #72]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	00db      	lsls	r3, r3, #3
 8005c24:	490e      	ldr	r1, [pc, #56]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c2a:	f000 f821 	bl	8005c70 <HAL_RCC_GetSysClockFreq>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	4b0b      	ldr	r3, [pc, #44]	@ (8005c60 <HAL_RCC_ClockConfig+0x1bc>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	490a      	ldr	r1, [pc, #40]	@ (8005c64 <HAL_RCC_ClockConfig+0x1c0>)
 8005c3c:	5ccb      	ldrb	r3, [r1, r3]
 8005c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c42:	4a09      	ldr	r2, [pc, #36]	@ (8005c68 <HAL_RCC_ClockConfig+0x1c4>)
 8005c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005c46:	4b09      	ldr	r3, [pc, #36]	@ (8005c6c <HAL_RCC_ClockConfig+0x1c8>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fb fed2 	bl	80019f4 <HAL_InitTick>

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3710      	adds	r7, #16
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}
 8005c5a:	bf00      	nop
 8005c5c:	40023c00 	.word	0x40023c00
 8005c60:	40023800 	.word	0x40023800
 8005c64:	0801064c 	.word	0x0801064c
 8005c68:	20000000 	.word	0x20000000
 8005c6c:	20000004 	.word	0x20000004

08005c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c74:	b094      	sub	sp, #80	@ 0x50
 8005c76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005c84:	2300      	movs	r3, #0
 8005c86:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c88:	4b79      	ldr	r3, [pc, #484]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f003 030c 	and.w	r3, r3, #12
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d00d      	beq.n	8005cb0 <HAL_RCC_GetSysClockFreq+0x40>
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	f200 80e1 	bhi.w	8005e5c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_RCC_GetSysClockFreq+0x34>
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d003      	beq.n	8005caa <HAL_RCC_GetSysClockFreq+0x3a>
 8005ca2:	e0db      	b.n	8005e5c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ca4:	4b73      	ldr	r3, [pc, #460]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ca8:	e0db      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005caa:	4b73      	ldr	r3, [pc, #460]	@ (8005e78 <HAL_RCC_GetSysClockFreq+0x208>)
 8005cac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005cae:	e0d8      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005cb0:	4b6f      	ldr	r3, [pc, #444]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005cb8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005cba:	4b6d      	ldr	r3, [pc, #436]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d063      	beq.n	8005d8e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	099b      	lsrs	r3, r3, #6
 8005ccc:	2200      	movs	r2, #0
 8005cce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cd0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cda:	2300      	movs	r3, #0
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cde:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ce2:	4622      	mov	r2, r4
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f04f 0000 	mov.w	r0, #0
 8005cea:	f04f 0100 	mov.w	r1, #0
 8005cee:	0159      	lsls	r1, r3, #5
 8005cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cf4:	0150      	lsls	r0, r2, #5
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	1a51      	subs	r1, r2, r1
 8005cfe:	6139      	str	r1, [r7, #16]
 8005d00:	4629      	mov	r1, r5
 8005d02:	eb63 0301 	sbc.w	r3, r3, r1
 8005d06:	617b      	str	r3, [r7, #20]
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d14:	4659      	mov	r1, fp
 8005d16:	018b      	lsls	r3, r1, #6
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005d1e:	4651      	mov	r1, sl
 8005d20:	018a      	lsls	r2, r1, #6
 8005d22:	4651      	mov	r1, sl
 8005d24:	ebb2 0801 	subs.w	r8, r2, r1
 8005d28:	4659      	mov	r1, fp
 8005d2a:	eb63 0901 	sbc.w	r9, r3, r1
 8005d2e:	f04f 0200 	mov.w	r2, #0
 8005d32:	f04f 0300 	mov.w	r3, #0
 8005d36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d42:	4690      	mov	r8, r2
 8005d44:	4699      	mov	r9, r3
 8005d46:	4623      	mov	r3, r4
 8005d48:	eb18 0303 	adds.w	r3, r8, r3
 8005d4c:	60bb      	str	r3, [r7, #8]
 8005d4e:	462b      	mov	r3, r5
 8005d50:	eb49 0303 	adc.w	r3, r9, r3
 8005d54:	60fb      	str	r3, [r7, #12]
 8005d56:	f04f 0200 	mov.w	r2, #0
 8005d5a:	f04f 0300 	mov.w	r3, #0
 8005d5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005d62:	4629      	mov	r1, r5
 8005d64:	024b      	lsls	r3, r1, #9
 8005d66:	4621      	mov	r1, r4
 8005d68:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005d6c:	4621      	mov	r1, r4
 8005d6e:	024a      	lsls	r2, r1, #9
 8005d70:	4610      	mov	r0, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d76:	2200      	movs	r2, #0
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d7c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d80:	f7fa fa8e 	bl	80002a0 <__aeabi_uldivmod>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	4613      	mov	r3, r2
 8005d8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d8c:	e058      	b.n	8005e40 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005d8e:	4b38      	ldr	r3, [pc, #224]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	099b      	lsrs	r3, r3, #6
 8005d94:	2200      	movs	r2, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	4611      	mov	r1, r2
 8005d9a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005d9e:	623b      	str	r3, [r7, #32]
 8005da0:	2300      	movs	r3, #0
 8005da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005da4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005da8:	4642      	mov	r2, r8
 8005daa:	464b      	mov	r3, r9
 8005dac:	f04f 0000 	mov.w	r0, #0
 8005db0:	f04f 0100 	mov.w	r1, #0
 8005db4:	0159      	lsls	r1, r3, #5
 8005db6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005dba:	0150      	lsls	r0, r2, #5
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005dd8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ddc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005de0:	ebb2 040a 	subs.w	r4, r2, sl
 8005de4:	eb63 050b 	sbc.w	r5, r3, fp
 8005de8:	f04f 0200 	mov.w	r2, #0
 8005dec:	f04f 0300 	mov.w	r3, #0
 8005df0:	00eb      	lsls	r3, r5, #3
 8005df2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005df6:	00e2      	lsls	r2, r4, #3
 8005df8:	4614      	mov	r4, r2
 8005dfa:	461d      	mov	r5, r3
 8005dfc:	4643      	mov	r3, r8
 8005dfe:	18e3      	adds	r3, r4, r3
 8005e00:	603b      	str	r3, [r7, #0]
 8005e02:	464b      	mov	r3, r9
 8005e04:	eb45 0303 	adc.w	r3, r5, r3
 8005e08:	607b      	str	r3, [r7, #4]
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005e16:	4629      	mov	r1, r5
 8005e18:	028b      	lsls	r3, r1, #10
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005e20:	4621      	mov	r1, r4
 8005e22:	028a      	lsls	r2, r1, #10
 8005e24:	4610      	mov	r0, r2
 8005e26:	4619      	mov	r1, r3
 8005e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	61fa      	str	r2, [r7, #28]
 8005e30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e34:	f7fa fa34 	bl	80002a0 <__aeabi_uldivmod>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005e40:	4b0b      	ldr	r3, [pc, #44]	@ (8005e70 <HAL_RCC_GetSysClockFreq+0x200>)
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	0c1b      	lsrs	r3, r3, #16
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e58:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e5a:	e002      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005e62:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3750      	adds	r7, #80	@ 0x50
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	00f42400 	.word	0x00f42400
 8005e78:	007a1200 	.word	0x007a1200

08005e7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e80:	4b03      	ldr	r3, [pc, #12]	@ (8005e90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e82:	681b      	ldr	r3, [r3, #0]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20000000 	.word	0x20000000

08005e94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e98:	f7ff fff0 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	4b05      	ldr	r3, [pc, #20]	@ (8005eb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	0a9b      	lsrs	r3, r3, #10
 8005ea4:	f003 0307 	and.w	r3, r3, #7
 8005ea8:	4903      	ldr	r1, [pc, #12]	@ (8005eb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eaa:	5ccb      	ldrb	r3, [r1, r3]
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	bd80      	pop	{r7, pc}
 8005eb4:	40023800 	.word	0x40023800
 8005eb8:	0801065c 	.word	0x0801065c

08005ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005ec0:	f7ff ffdc 	bl	8005e7c <HAL_RCC_GetHCLKFreq>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	4b05      	ldr	r3, [pc, #20]	@ (8005edc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	0b5b      	lsrs	r3, r3, #13
 8005ecc:	f003 0307 	and.w	r3, r3, #7
 8005ed0:	4903      	ldr	r1, [pc, #12]	@ (8005ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ed2:	5ccb      	ldrb	r3, [r1, r3]
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	0801065c 	.word	0x0801065c

08005ee4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	220f      	movs	r2, #15
 8005ef2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ef4:	4b12      	ldr	r3, [pc, #72]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f003 0203 	and.w	r2, r3, #3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005f00:	4b0f      	ldr	r3, [pc, #60]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005f18:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <HAL_RCC_GetClockConfig+0x5c>)
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	08db      	lsrs	r3, r3, #3
 8005f1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005f26:	4b07      	ldr	r3, [pc, #28]	@ (8005f44 <HAL_RCC_GetClockConfig+0x60>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f003 020f 	and.w	r2, r3, #15
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	601a      	str	r2, [r3, #0]
}
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop
 8005f40:	40023800 	.word	0x40023800
 8005f44:	40023c00 	.word	0x40023c00

08005f48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005f50:	2300      	movs	r3, #0
 8005f52:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005f54:	2300      	movs	r3, #0
 8005f56:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d105      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d075      	beq.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005f7c:	4b91      	ldr	r3, [pc, #580]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005f82:	f7fb fea7 	bl	8001cd4 <HAL_GetTick>
 8005f86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f88:	e008      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005f8a:	f7fb fea3 	bl	8001cd4 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d901      	bls.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e189      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1f0      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d009      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	019a      	lsls	r2, r3, #6
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	071b      	lsls	r3, r3, #28
 8005fc0:	4981      	ldr	r1, [pc, #516]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d01f      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005fd4:	4b7c      	ldr	r3, [pc, #496]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fda:	0f1b      	lsrs	r3, r3, #28
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	019a      	lsls	r2, r3, #6
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	071b      	lsls	r3, r3, #28
 8005ff4:	4974      	ldr	r1, [pc, #464]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005ffc:	4b72      	ldr	r3, [pc, #456]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006002:	f023 021f 	bic.w	r2, r3, #31
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	3b01      	subs	r3, #1
 800600c:	496e      	ldr	r1, [pc, #440]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00d      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	019a      	lsls	r2, r3, #6
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	061b      	lsls	r3, r3, #24
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	071b      	lsls	r3, r3, #28
 8006034:	4964      	ldr	r1, [pc, #400]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006036:	4313      	orrs	r3, r2
 8006038:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800603c:	4b61      	ldr	r3, [pc, #388]	@ (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800603e:	2201      	movs	r2, #1
 8006040:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006042:	f7fb fe47 	bl	8001cd4 <HAL_GetTick>
 8006046:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006048:	e008      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800604a:	f7fb fe43 	bl	8001cd4 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	2b02      	cmp	r3, #2
 8006056:	d901      	bls.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e129      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800605c:	4b5a      	ldr	r3, [pc, #360]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d0f0      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 0304 	and.w	r3, r3, #4
 8006070:	2b00      	cmp	r3, #0
 8006072:	d105      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800607c:	2b00      	cmp	r3, #0
 800607e:	d079      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006080:	4b52      	ldr	r3, [pc, #328]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006086:	f7fb fe25 	bl	8001cd4 <HAL_GetTick>
 800608a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800608c:	e008      	b.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800608e:	f7fb fe21 	bl	8001cd4 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	2b02      	cmp	r3, #2
 800609a:	d901      	bls.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	e107      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80060a0:	4b49      	ldr	r3, [pc, #292]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80060a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80060ac:	d0ef      	beq.n	800608e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0304 	and.w	r3, r3, #4
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d020      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80060ba:	4b43      	ldr	r3, [pc, #268]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060c0:	0f1b      	lsrs	r3, r3, #28
 80060c2:	f003 0307 	and.w	r3, r3, #7
 80060c6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	019a      	lsls	r2, r3, #6
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	061b      	lsls	r3, r3, #24
 80060d4:	431a      	orrs	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	071b      	lsls	r3, r3, #28
 80060da:	493b      	ldr	r1, [pc, #236]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80060e2:	4b39      	ldr	r3, [pc, #228]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80060e8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	021b      	lsls	r3, r3, #8
 80060f4:	4934      	ldr	r1, [pc, #208]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0308 	and.w	r3, r3, #8
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01e      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006108:	4b2f      	ldr	r3, [pc, #188]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800610e:	0e1b      	lsrs	r3, r3, #24
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	019a      	lsls	r2, r3, #6
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	061b      	lsls	r3, r3, #24
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	071b      	lsls	r3, r3, #28
 8006128:	4927      	ldr	r1, [pc, #156]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006130:	4b25      	ldr	r3, [pc, #148]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006132:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006136:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613e:	4922      	ldr	r1, [pc, #136]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006146:	4b21      	ldr	r3, [pc, #132]	@ (80061cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006148:	2201      	movs	r2, #1
 800614a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800614c:	f7fb fdc2 	bl	8001cd4 <HAL_GetTick>
 8006150:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006152:	e008      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006154:	f7fb fdbe 	bl	8001cd4 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e0a4      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006166:	4b18      	ldr	r3, [pc, #96]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800616e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006172:	d1ef      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0320 	and.w	r3, r3, #32
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 808b 	beq.w	8006298 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006182:	2300      	movs	r3, #0
 8006184:	60fb      	str	r3, [r7, #12]
 8006186:	4b10      	ldr	r3, [pc, #64]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618a:	4a0f      	ldr	r2, [pc, #60]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800618c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006190:	6413      	str	r3, [r2, #64]	@ 0x40
 8006192:	4b0d      	ldr	r3, [pc, #52]	@ (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800619a:	60fb      	str	r3, [r7, #12]
 800619c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800619e:	4b0c      	ldr	r3, [pc, #48]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a0b      	ldr	r2, [pc, #44]	@ (80061d0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80061a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80061aa:	f7fb fd93 	bl	8001cd4 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80061b0:	e010      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061b2:	f7fb fd8f 	bl	8001cd4 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d909      	bls.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e075      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80061c4:	42470068 	.word	0x42470068
 80061c8:	40023800 	.word	0x40023800
 80061cc:	42470070 	.word	0x42470070
 80061d0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80061d4:	4b38      	ldr	r3, [pc, #224]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d0e8      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80061e0:	4b36      	ldr	r3, [pc, #216]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80061e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061e8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d02f      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d028      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80061fe:	4b2f      	ldr	r3, [pc, #188]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006206:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006208:	4b2d      	ldr	r3, [pc, #180]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800620a:	2201      	movs	r2, #1
 800620c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800620e:	4b2c      	ldr	r3, [pc, #176]	@ (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006214:	4a29      	ldr	r2, [pc, #164]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800621a:	4b28      	ldr	r3, [pc, #160]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800621c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	2b01      	cmp	r3, #1
 8006224:	d114      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006226:	f7fb fd55 	bl	8001cd4 <HAL_GetTick>
 800622a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800622c:	e00a      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800622e:	f7fb fd51 	bl	8001cd4 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800623c:	4293      	cmp	r3, r2
 800623e:	d901      	bls.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e035      	b.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006244:	4b1d      	ldr	r3, [pc, #116]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d0ee      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006258:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800625c:	d10d      	bne.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800625e:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800626a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800626e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006272:	4912      	ldr	r1, [pc, #72]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]
 8006278:	e005      	b.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800627a:	4b10      	ldr	r3, [pc, #64]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	4a0f      	ldr	r2, [pc, #60]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006280:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006284:	6093      	str	r3, [r2, #8]
 8006286:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006288:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800628e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006292:	490a      	ldr	r1, [pc, #40]	@ (80062bc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006294:	4313      	orrs	r3, r2
 8006296:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d004      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80062aa:	4b06      	ldr	r3, [pc, #24]	@ (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80062ac:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40007000 	.word	0x40007000
 80062bc:	40023800 	.word	0x40023800
 80062c0:	42470e40 	.word	0x42470e40
 80062c4:	424711e0 	.word	0x424711e0

080062c8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e025      	b.n	8006328 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7fb fb75 	bl	80019e0 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2202      	movs	r2, #2
 80062fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	3304      	adds	r3, #4
 8006306:	4619      	mov	r1, r3
 8006308:	4610      	mov	r0, r2
 800630a:	f001 fd1d 	bl	8007d48 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	461a      	mov	r2, r3
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	f001 fd72 	bl	8007e02 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e07b      	b.n	800643a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006346:	2b00      	cmp	r3, #0
 8006348:	d108      	bne.n	800635c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006352:	d009      	beq.n	8006368 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	61da      	str	r2, [r3, #28]
 800635a:	e005      	b.n	8006368 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2200      	movs	r2, #0
 800636c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d106      	bne.n	8006388 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fb f9b2 	bl	80016ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800639e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80063b0:	431a      	orrs	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80063ba:	431a      	orrs	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80063d8:	431a      	orrs	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063ec:	ea42 0103 	orr.w	r1, r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	430a      	orrs	r2, r1
 80063fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	0c1b      	lsrs	r3, r3, #16
 8006406:	f003 0104 	and.w	r1, r3, #4
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640e:	f003 0210 	and.w	r2, r3, #16
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	430a      	orrs	r2, r1
 8006418:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69da      	ldr	r2, [r3, #28]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006428:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3708      	adds	r7, #8
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}

08006442 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b088      	sub	sp, #32
 8006446:	af00      	add	r7, sp, #0
 8006448:	60f8      	str	r0, [r7, #12]
 800644a:	60b9      	str	r1, [r7, #8]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4613      	mov	r3, r2
 8006450:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006452:	f7fb fc3f 	bl	8001cd4 <HAL_GetTick>
 8006456:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006462:	b2db      	uxtb	r3, r3
 8006464:	2b01      	cmp	r3, #1
 8006466:	d001      	beq.n	800646c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006468:	2302      	movs	r3, #2
 800646a:	e12a      	b.n	80066c2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_SPI_Transmit+0x36>
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d101      	bne.n	800647c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e122      	b.n	80066c2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006482:	2b01      	cmp	r3, #1
 8006484:	d101      	bne.n	800648a <HAL_SPI_Transmit+0x48>
 8006486:	2302      	movs	r3, #2
 8006488:	e11b      	b.n	80066c2 <HAL_SPI_Transmit+0x280>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2203      	movs	r2, #3
 8006496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	88fa      	ldrh	r2, [r7, #6]
 80064aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2200      	movs	r2, #0
 80064ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064d8:	d10f      	bne.n	80064fa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80064e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064f8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	d007      	beq.n	8006518 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006520:	d152      	bne.n	80065c8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_SPI_Transmit+0xee>
 800652a:	8b7b      	ldrh	r3, [r7, #26]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d145      	bne.n	80065bc <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006534:	881a      	ldrh	r2, [r3, #0]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006540:	1c9a      	adds	r2, r3, #2
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006554:	e032      	b.n	80065bc <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d112      	bne.n	800658a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006568:	881a      	ldrh	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006574:	1c9a      	adds	r2, r3, #2
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800657e:	b29b      	uxth	r3, r3
 8006580:	3b01      	subs	r3, #1
 8006582:	b29a      	uxth	r2, r3
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006588:	e018      	b.n	80065bc <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800658a:	f7fb fba3 	bl	8001cd4 <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d803      	bhi.n	80065a2 <HAL_SPI_Transmit+0x160>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a0:	d102      	bne.n	80065a8 <HAL_SPI_Transmit+0x166>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80065b8:	2303      	movs	r3, #3
 80065ba:	e082      	b.n	80066c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d1c7      	bne.n	8006556 <HAL_SPI_Transmit+0x114>
 80065c6:	e053      	b.n	8006670 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <HAL_SPI_Transmit+0x194>
 80065d0:	8b7b      	ldrh	r3, [r7, #26]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d147      	bne.n	8006666 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	7812      	ldrb	r2, [r2, #0]
 80065e2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80065fc:	e033      	b.n	8006666 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0302 	and.w	r3, r3, #2
 8006608:	2b02      	cmp	r3, #2
 800660a:	d113      	bne.n	8006634 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	7812      	ldrb	r2, [r2, #0]
 8006618:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006632:	e018      	b.n	8006666 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006634:	f7fb fb4e 	bl	8001cd4 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	429a      	cmp	r2, r3
 8006642:	d803      	bhi.n	800664c <HAL_SPI_Transmit+0x20a>
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664a:	d102      	bne.n	8006652 <HAL_SPI_Transmit+0x210>
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2201      	movs	r2, #1
 8006656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e02d      	b.n	80066c2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800666a:	b29b      	uxth	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d1c6      	bne.n	80065fe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006670:	69fa      	ldr	r2, [r7, #28]
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fbd9 	bl	8006e2c <SPI_EndRxTxTransaction>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10a      	bne.n	80066a4 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	617b      	str	r3, [r7, #20]
 80066a2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d001      	beq.n	80066c0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	e000      	b.n	80066c2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80066c0:	2300      	movs	r3, #0
  }
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3720      	adds	r7, #32
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ca:	b580      	push	{r7, lr}
 80066cc:	b088      	sub	sp, #32
 80066ce:	af02      	add	r7, sp, #8
 80066d0:	60f8      	str	r0, [r7, #12]
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	603b      	str	r3, [r7, #0]
 80066d6:	4613      	mov	r3, r2
 80066d8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d001      	beq.n	80066ea <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80066e6:	2302      	movs	r3, #2
 80066e8:	e104      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f2:	d112      	bne.n	800671a <HAL_SPI_Receive+0x50>
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10e      	bne.n	800671a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	2204      	movs	r2, #4
 8006700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006704:	88fa      	ldrh	r2, [r7, #6]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4613      	mov	r3, r2
 800670c:	68ba      	ldr	r2, [r7, #8]
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 f8f3 	bl	80068fc <HAL_SPI_TransmitReceive>
 8006716:	4603      	mov	r3, r0
 8006718:	e0ec      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800671a:	f7fb fadb 	bl	8001cd4 <HAL_GetTick>
 800671e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d002      	beq.n	800672c <HAL_SPI_Receive+0x62>
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d101      	bne.n	8006730 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e0e1      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006736:	2b01      	cmp	r3, #1
 8006738:	d101      	bne.n	800673e <HAL_SPI_Receive+0x74>
 800673a:	2302      	movs	r3, #2
 800673c:	e0da      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2204      	movs	r2, #4
 800674a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	88fa      	ldrh	r2, [r7, #6]
 800675e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	88fa      	ldrh	r2, [r7, #6]
 8006764:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800678c:	d10f      	bne.n	80067ae <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800679c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80067ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b40      	cmp	r3, #64	@ 0x40
 80067ba:	d007      	beq.n	80067cc <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d170      	bne.n	80068b6 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80067d4:	e035      	b.n	8006842 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d115      	bne.n	8006810 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f103 020c 	add.w	r2, r3, #12
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f0:	7812      	ldrb	r2, [r2, #0]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006804:	b29b      	uxth	r3, r3
 8006806:	3b01      	subs	r3, #1
 8006808:	b29a      	uxth	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800680e:	e018      	b.n	8006842 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006810:	f7fb fa60 	bl	8001cd4 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	429a      	cmp	r2, r3
 800681e:	d803      	bhi.n	8006828 <HAL_SPI_Receive+0x15e>
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006826:	d102      	bne.n	800682e <HAL_SPI_Receive+0x164>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d109      	bne.n	8006842 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e058      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006846:	b29b      	uxth	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1c4      	bne.n	80067d6 <HAL_SPI_Receive+0x10c>
 800684c:	e038      	b.n	80068c0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0301 	and.w	r3, r3, #1
 8006858:	2b01      	cmp	r3, #1
 800685a:	d113      	bne.n	8006884 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68da      	ldr	r2, [r3, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006866:	b292      	uxth	r2, r2
 8006868:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800686e:	1c9a      	adds	r2, r3, #2
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006882:	e018      	b.n	80068b6 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006884:	f7fb fa26 	bl	8001cd4 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	683a      	ldr	r2, [r7, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d803      	bhi.n	800689c <HAL_SPI_Receive+0x1d2>
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689a:	d102      	bne.n	80068a2 <HAL_SPI_Receive+0x1d8>
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e01e      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1c6      	bne.n	800684e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	6839      	ldr	r1, [r7, #0]
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 fa4b 	bl	8006d60 <SPI_EndRxTransaction>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e000      	b.n	80068f4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80068f2:	2300      	movs	r3, #0
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3718      	adds	r7, #24
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	@ 0x28
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
 8006908:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800690a:	2301      	movs	r3, #1
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800690e:	f7fb f9e1 	bl	8001cd4 <HAL_GetTick>
 8006912:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800691a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006926:	7ffb      	ldrb	r3, [r7, #31]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d00c      	beq.n	8006946 <HAL_SPI_TransmitReceive+0x4a>
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006932:	d106      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d102      	bne.n	8006942 <HAL_SPI_TransmitReceive+0x46>
 800693c:	7ffb      	ldrb	r3, [r7, #31]
 800693e:	2b04      	cmp	r3, #4
 8006940:	d001      	beq.n	8006946 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006942:	2302      	movs	r3, #2
 8006944:	e17f      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d005      	beq.n	8006958 <HAL_SPI_TransmitReceive+0x5c>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <HAL_SPI_TransmitReceive+0x5c>
 8006952:	887b      	ldrh	r3, [r7, #2]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e174      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_SPI_TransmitReceive+0x6e>
 8006966:	2302      	movs	r3, #2
 8006968:	e16d      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b04      	cmp	r3, #4
 800697c:	d003      	beq.n	8006986 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2205      	movs	r2, #5
 8006982:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	887a      	ldrh	r2, [r7, #2]
 8006996:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	887a      	ldrh	r2, [r7, #2]
 800699c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	887a      	ldrh	r2, [r7, #2]
 80069a8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	887a      	ldrh	r2, [r7, #2]
 80069ae:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069c6:	2b40      	cmp	r3, #64	@ 0x40
 80069c8:	d007      	beq.n	80069da <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	68db      	ldr	r3, [r3, #12]
 80069de:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069e2:	d17e      	bne.n	8006ae2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <HAL_SPI_TransmitReceive+0xf6>
 80069ec:	8afb      	ldrh	r3, [r7, #22]
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d16c      	bne.n	8006acc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f6:	881a      	ldrh	r2, [r3, #0]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a02:	1c9a      	adds	r2, r3, #2
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a16:	e059      	b.n	8006acc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d11b      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x162>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d016      	beq.n	8006a5e <HAL_SPI_TransmitReceive+0x162>
 8006a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d113      	bne.n	8006a5e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a3a:	881a      	ldrh	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d119      	bne.n	8006aa0 <HAL_SPI_TransmitReceive+0x1a4>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d014      	beq.n	8006aa0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a80:	b292      	uxth	r2, r2
 8006a82:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a88:	1c9a      	adds	r2, r3, #2
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	3b01      	subs	r3, #1
 8006a96:	b29a      	uxth	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006aa0:	f7fb f918 	bl	8001cd4 <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	6a3b      	ldr	r3, [r7, #32]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d80d      	bhi.n	8006acc <HAL_SPI_TransmitReceive+0x1d0>
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ab6:	d009      	beq.n	8006acc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e0bc      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1a0      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x11c>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d19b      	bne.n	8006a18 <HAL_SPI_TransmitReceive+0x11c>
 8006ae0:	e082      	b.n	8006be8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d002      	beq.n	8006af0 <HAL_SPI_TransmitReceive+0x1f4>
 8006aea:	8afb      	ldrh	r3, [r7, #22]
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d171      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	7812      	ldrb	r2, [r2, #0]
 8006afc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	3b01      	subs	r3, #1
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b16:	e05d      	b.n	8006bd4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 0302 	and.w	r3, r3, #2
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d11c      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x264>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d017      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x264>
 8006b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d114      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	330c      	adds	r3, #12
 8006b40:	7812      	ldrb	r2, [r2, #0]
 8006b42:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	3b01      	subs	r3, #1
 8006b56:	b29a      	uxth	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d119      	bne.n	8006ba2 <HAL_SPI_TransmitReceive+0x2a6>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d014      	beq.n	8006ba2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68da      	ldr	r2, [r3, #12]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ba2:	f7fb f897 	bl	8001cd4 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d803      	bhi.n	8006bba <HAL_SPI_TransmitReceive+0x2be>
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb8:	d102      	bne.n	8006bc0 <HAL_SPI_TransmitReceive+0x2c4>
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d109      	bne.n	8006bd4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e038      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d19c      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x21c>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d197      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006be8:	6a3a      	ldr	r2, [r7, #32]
 8006bea:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f91d 	bl	8006e2c <SPI_EndRxTxTransaction>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d008      	beq.n	8006c0a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e01d      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10a      	bne.n	8006c28 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c12:	2300      	movs	r3, #0
 8006c14:	613b      	str	r3, [r7, #16]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	613b      	str	r3, [r7, #16]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	613b      	str	r3, [r7, #16]
 8006c26:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
  }
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3728      	adds	r7, #40	@ 0x28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
	...

08006c50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c60:	f7fb f838 	bl	8001cd4 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	1a9b      	subs	r3, r3, r2
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c70:	f7fb f830 	bl	8001cd4 <HAL_GetTick>
 8006c74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c76:	4b39      	ldr	r3, [pc, #228]	@ (8006d5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	015b      	lsls	r3, r3, #5
 8006c7c:	0d1b      	lsrs	r3, r3, #20
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	fb02 f303 	mul.w	r3, r2, r3
 8006c84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c86:	e054      	b.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8e:	d050      	beq.n	8006d32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c90:	f7fb f820 	bl	8001cd4 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d902      	bls.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d13d      	bne.n	8006d22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cbe:	d111      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cc8:	d004      	beq.n	8006cd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cd2:	d107      	bne.n	8006ce4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006ce2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cec:	d10f      	bne.n	8006d0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d1e:	2303      	movs	r3, #3
 8006d20:	e017      	b.n	8006d52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	3b01      	subs	r3, #1
 8006d30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689a      	ldr	r2, [r3, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	bf0c      	ite	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	2300      	movne	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	79fb      	ldrb	r3, [r7, #7]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d19b      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3720      	adds	r7, #32
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	20000000 	.word	0x20000000

08006d60 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006d74:	d111      	bne.n	8006d9a <SPI_EndRxTransaction+0x3a>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d7e:	d004      	beq.n	8006d8a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d88:	d107      	bne.n	8006d9a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d98:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006da2:	d12a      	bne.n	8006dfa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dac:	d012      	beq.n	8006dd4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	@ 0x80
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff ff49 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d02d      	beq.n	8006e20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dc8:	f043 0220 	orr.w	r2, r3, #32
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e026      	b.n	8006e22 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	2101      	movs	r1, #1
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff ff36 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d01a      	beq.n	8006e20 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dee:	f043 0220 	orr.w	r2, r3, #32
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e013      	b.n	8006e22 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	9300      	str	r3, [sp, #0]
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	2200      	movs	r2, #0
 8006e02:	2101      	movs	r1, #1
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff ff23 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d007      	beq.n	8006e20 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e14:	f043 0220 	orr.w	r2, r3, #32
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e000      	b.n	8006e22 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006e20:	2300      	movs	r3, #0
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3710      	adds	r7, #16
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
	...

08006e2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b088      	sub	sp, #32
 8006e30:	af02      	add	r7, sp, #8
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	2102      	movs	r1, #2
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ff04 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d007      	beq.n	8006e5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e032      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8006ecc <SPI_EndRxTxTransaction+0xa0>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed0 <SPI_EndRxTxTransaction+0xa4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	0d5b      	lsrs	r3, r3, #21
 8006e6a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e6e:	fb02 f303 	mul.w	r3, r2, r3
 8006e72:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e7c:	d112      	bne.n	8006ea4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	9300      	str	r3, [sp, #0]
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	2180      	movs	r1, #128	@ 0x80
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff fee1 	bl	8006c50 <SPI_WaitFlagStateUntilTimeout>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d016      	beq.n	8006ec2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e98:	f043 0220 	orr.w	r2, r3, #32
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	e00f      	b.n	8006ec4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3b01      	subs	r3, #1
 8006eae:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eba:	2b80      	cmp	r3, #128	@ 0x80
 8006ebc:	d0f2      	beq.n	8006ea4 <SPI_EndRxTxTransaction+0x78>
 8006ebe:	e000      	b.n	8006ec2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006ec0:	bf00      	nop
  }

  return HAL_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3718      	adds	r7, #24
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	20000000 	.word	0x20000000
 8006ed0:	165e9f81 	.word	0x165e9f81

08006ed4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e041      	b.n	8006f6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fa fc74 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4619      	mov	r1, r3
 8006f12:	4610      	mov	r0, r2
 8006f14:	f000 fa7e 	bl	8007414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3708      	adds	r7, #8
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
	...

08006f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d001      	beq.n	8006f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e04e      	b.n	800702a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a23      	ldr	r2, [pc, #140]	@ (8007038 <HAL_TIM_Base_Start_IT+0xc4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d022      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fb6:	d01d      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a1f      	ldr	r2, [pc, #124]	@ (800703c <HAL_TIM_Base_Start_IT+0xc8>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d018      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a1e      	ldr	r2, [pc, #120]	@ (8007040 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d013      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a1c      	ldr	r2, [pc, #112]	@ (8007044 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00e      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a1b      	ldr	r2, [pc, #108]	@ (8007048 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d009      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a19      	ldr	r2, [pc, #100]	@ (800704c <HAL_TIM_Base_Start_IT+0xd8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d004      	beq.n	8006ff4 <HAL_TIM_Base_Start_IT+0x80>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a18      	ldr	r2, [pc, #96]	@ (8007050 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d111      	bne.n	8007018 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 0307 	and.w	r3, r3, #7
 8006ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b06      	cmp	r3, #6
 8007004:	d010      	beq.n	8007028 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f042 0201 	orr.w	r2, r2, #1
 8007014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007016:	e007      	b.n	8007028 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f042 0201 	orr.w	r2, r2, #1
 8007026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr
 8007036:	bf00      	nop
 8007038:	40010000 	.word	0x40010000
 800703c:	40000400 	.word	0x40000400
 8007040:	40000800 	.word	0x40000800
 8007044:	40000c00 	.word	0x40000c00
 8007048:	40010400 	.word	0x40010400
 800704c:	40014000 	.word	0x40014000
 8007050:	40001800 	.word	0x40001800

08007054 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	691b      	ldr	r3, [r3, #16]
 800706a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	f003 0302 	and.w	r3, r3, #2
 8007072:	2b00      	cmp	r3, #0
 8007074:	d020      	beq.n	80070b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01b      	beq.n	80070b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f06f 0202 	mvn.w	r2, #2
 8007088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	f003 0303 	and.w	r3, r3, #3
 800709a:	2b00      	cmp	r3, #0
 800709c:	d003      	beq.n	80070a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f999 	bl	80073d6 <HAL_TIM_IC_CaptureCallback>
 80070a4:	e005      	b.n	80070b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 f98b 	bl	80073c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f99c 	bl	80073ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d020      	beq.n	8007104 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f003 0304 	and.w	r3, r3, #4
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d01b      	beq.n	8007104 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f06f 0204 	mvn.w	r2, #4
 80070d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2202      	movs	r2, #2
 80070da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699b      	ldr	r3, [r3, #24]
 80070e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f973 	bl	80073d6 <HAL_TIM_IC_CaptureCallback>
 80070f0:	e005      	b.n	80070fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f965 	bl	80073c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 f976 	bl	80073ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d020      	beq.n	8007150 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f003 0308 	and.w	r3, r3, #8
 8007114:	2b00      	cmp	r3, #0
 8007116:	d01b      	beq.n	8007150 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f06f 0208 	mvn.w	r2, #8
 8007120:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2204      	movs	r2, #4
 8007126:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	2b00      	cmp	r3, #0
 8007134:	d003      	beq.n	800713e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f94d 	bl	80073d6 <HAL_TIM_IC_CaptureCallback>
 800713c:	e005      	b.n	800714a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f93f 	bl	80073c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f000 f950 	bl	80073ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	f003 0310 	and.w	r3, r3, #16
 8007156:	2b00      	cmp	r3, #0
 8007158:	d020      	beq.n	800719c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 0310 	and.w	r3, r3, #16
 8007160:	2b00      	cmp	r3, #0
 8007162:	d01b      	beq.n	800719c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f06f 0210 	mvn.w	r2, #16
 800716c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2208      	movs	r2, #8
 8007172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800717e:	2b00      	cmp	r3, #0
 8007180:	d003      	beq.n	800718a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 f927 	bl	80073d6 <HAL_TIM_IC_CaptureCallback>
 8007188:	e005      	b.n	8007196 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f919 	bl	80073c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f92a 	bl	80073ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	f003 0301 	and.w	r3, r3, #1
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00c      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f06f 0201 	mvn.w	r2, #1
 80071b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fa f86e 	bl	800129c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00c      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d007      	beq.n	80071e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fae4 	bl	80077ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00c      	beq.n	8007208 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d007      	beq.n	8007208 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f8fb 	bl	80073fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0320 	and.w	r3, r3, #32
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00c      	beq.n	800722c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0220 	mvn.w	r2, #32
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f000 fab6 	bl	8007798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}

08007234 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_TIM_ConfigClockSource+0x1c>
 800724c:	2302      	movs	r3, #2
 800724e:	e0b4      	b.n	80073ba <HAL_TIM_ConfigClockSource+0x186>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800726e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007276:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007288:	d03e      	beq.n	8007308 <HAL_TIM_ConfigClockSource+0xd4>
 800728a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800728e:	f200 8087 	bhi.w	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 8007292:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007296:	f000 8086 	beq.w	80073a6 <HAL_TIM_ConfigClockSource+0x172>
 800729a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729e:	d87f      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072a0:	2b70      	cmp	r3, #112	@ 0x70
 80072a2:	d01a      	beq.n	80072da <HAL_TIM_ConfigClockSource+0xa6>
 80072a4:	2b70      	cmp	r3, #112	@ 0x70
 80072a6:	d87b      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072a8:	2b60      	cmp	r3, #96	@ 0x60
 80072aa:	d050      	beq.n	800734e <HAL_TIM_ConfigClockSource+0x11a>
 80072ac:	2b60      	cmp	r3, #96	@ 0x60
 80072ae:	d877      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072b0:	2b50      	cmp	r3, #80	@ 0x50
 80072b2:	d03c      	beq.n	800732e <HAL_TIM_ConfigClockSource+0xfa>
 80072b4:	2b50      	cmp	r3, #80	@ 0x50
 80072b6:	d873      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072b8:	2b40      	cmp	r3, #64	@ 0x40
 80072ba:	d058      	beq.n	800736e <HAL_TIM_ConfigClockSource+0x13a>
 80072bc:	2b40      	cmp	r3, #64	@ 0x40
 80072be:	d86f      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072c0:	2b30      	cmp	r3, #48	@ 0x30
 80072c2:	d064      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072c4:	2b30      	cmp	r3, #48	@ 0x30
 80072c6:	d86b      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072c8:	2b20      	cmp	r3, #32
 80072ca:	d060      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072cc:	2b20      	cmp	r3, #32
 80072ce:	d867      	bhi.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d05c      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072d4:	2b10      	cmp	r3, #16
 80072d6:	d05a      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x15a>
 80072d8:	e062      	b.n	80073a0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072ea:	f000 f9b9 	bl	8007660 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68ba      	ldr	r2, [r7, #8]
 8007304:	609a      	str	r2, [r3, #8]
      break;
 8007306:	e04f      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007318:	f000 f9a2 	bl	8007660 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	689a      	ldr	r2, [r3, #8]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800732a:	609a      	str	r2, [r3, #8]
      break;
 800732c:	e03c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800733a:	461a      	mov	r2, r3
 800733c:	f000 f916 	bl	800756c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2150      	movs	r1, #80	@ 0x50
 8007346:	4618      	mov	r0, r3
 8007348:	f000 f96f 	bl	800762a <TIM_ITRx_SetConfig>
      break;
 800734c:	e02c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800735a:	461a      	mov	r2, r3
 800735c:	f000 f935 	bl	80075ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2160      	movs	r1, #96	@ 0x60
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f95f 	bl	800762a <TIM_ITRx_SetConfig>
      break;
 800736c:	e01c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	461a      	mov	r2, r3
 800737c:	f000 f8f6 	bl	800756c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2140      	movs	r1, #64	@ 0x40
 8007386:	4618      	mov	r0, r3
 8007388:	f000 f94f 	bl	800762a <TIM_ITRx_SetConfig>
      break;
 800738c:	e00c      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4619      	mov	r1, r3
 8007398:	4610      	mov	r0, r2
 800739a:	f000 f946 	bl	800762a <TIM_ITRx_SetConfig>
      break;
 800739e:	e003      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073a0:	2301      	movs	r3, #1
 80073a2:	73fb      	strb	r3, [r7, #15]
      break;
 80073a4:	e000      	b.n	80073a8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073a6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3710      	adds	r7, #16
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr

080073d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073d6:	b480      	push	{r7}
 80073d8:	b083      	sub	sp, #12
 80073da:	af00      	add	r7, sp, #0
 80073dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073de:	bf00      	nop
 80073e0:	370c      	adds	r7, #12
 80073e2:	46bd      	mov	sp, r7
 80073e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e8:	4770      	bx	lr

080073ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80073f2:	bf00      	nop
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073fe:	b480      	push	{r7}
 8007400:	b083      	sub	sp, #12
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
	...

08007414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007414:	b480      	push	{r7}
 8007416:	b085      	sub	sp, #20
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
 800741c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a46      	ldr	r2, [pc, #280]	@ (8007540 <TIM_Base_SetConfig+0x12c>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d013      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007432:	d00f      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a43      	ldr	r2, [pc, #268]	@ (8007544 <TIM_Base_SetConfig+0x130>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00b      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a42      	ldr	r2, [pc, #264]	@ (8007548 <TIM_Base_SetConfig+0x134>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d007      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a41      	ldr	r2, [pc, #260]	@ (800754c <TIM_Base_SetConfig+0x138>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d003      	beq.n	8007454 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a40      	ldr	r2, [pc, #256]	@ (8007550 <TIM_Base_SetConfig+0x13c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d108      	bne.n	8007466 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800745a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4a35      	ldr	r2, [pc, #212]	@ (8007540 <TIM_Base_SetConfig+0x12c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d02b      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007474:	d027      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a32      	ldr	r2, [pc, #200]	@ (8007544 <TIM_Base_SetConfig+0x130>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d023      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	4a31      	ldr	r2, [pc, #196]	@ (8007548 <TIM_Base_SetConfig+0x134>)
 8007482:	4293      	cmp	r3, r2
 8007484:	d01f      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a30      	ldr	r2, [pc, #192]	@ (800754c <TIM_Base_SetConfig+0x138>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d01b      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a2f      	ldr	r2, [pc, #188]	@ (8007550 <TIM_Base_SetConfig+0x13c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d017      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a2e      	ldr	r2, [pc, #184]	@ (8007554 <TIM_Base_SetConfig+0x140>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d013      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007558 <TIM_Base_SetConfig+0x144>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d00f      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2c      	ldr	r2, [pc, #176]	@ (800755c <TIM_Base_SetConfig+0x148>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d00b      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2b      	ldr	r2, [pc, #172]	@ (8007560 <TIM_Base_SetConfig+0x14c>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d007      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007564 <TIM_Base_SetConfig+0x150>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d003      	beq.n	80074c6 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a29      	ldr	r2, [pc, #164]	@ (8007568 <TIM_Base_SetConfig+0x154>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d108      	bne.n	80074d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	4313      	orrs	r3, r2
 80074e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68fa      	ldr	r2, [r7, #12]
 80074ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a10      	ldr	r2, [pc, #64]	@ (8007540 <TIM_Base_SetConfig+0x12c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d003      	beq.n	800750c <TIM_Base_SetConfig+0xf8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a12      	ldr	r2, [pc, #72]	@ (8007550 <TIM_Base_SetConfig+0x13c>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d103      	bne.n	8007514 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	691a      	ldr	r2, [r3, #16]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b01      	cmp	r3, #1
 8007524:	d105      	bne.n	8007532 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	f023 0201 	bic.w	r2, r3, #1
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	611a      	str	r2, [r3, #16]
  }
}
 8007532:	bf00      	nop
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40010000 	.word	0x40010000
 8007544:	40000400 	.word	0x40000400
 8007548:	40000800 	.word	0x40000800
 800754c:	40000c00 	.word	0x40000c00
 8007550:	40010400 	.word	0x40010400
 8007554:	40014000 	.word	0x40014000
 8007558:	40014400 	.word	0x40014400
 800755c:	40014800 	.word	0x40014800
 8007560:	40001800 	.word	0x40001800
 8007564:	40001c00 	.word	0x40001c00
 8007568:	40002000 	.word	0x40002000

0800756c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f023 0201 	bic.w	r2, r3, #1
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	699b      	ldr	r3, [r3, #24]
 800758e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007596:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4313      	orrs	r3, r2
 80075a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	f023 030a 	bic.w	r3, r3, #10
 80075a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	693a      	ldr	r2, [r7, #16]
 80075b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b087      	sub	sp, #28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
 80075d2:	60b9      	str	r1, [r7, #8]
 80075d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6a1b      	ldr	r3, [r3, #32]
 80075e0:	f023 0210 	bic.w	r2, r3, #16
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	699b      	ldr	r3, [r3, #24]
 80075ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	031b      	lsls	r3, r3, #12
 80075fa:	693a      	ldr	r2, [r7, #16]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007606:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	011b      	lsls	r3, r3, #4
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	4313      	orrs	r3, r2
 8007610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	621a      	str	r2, [r3, #32]
}
 800761e:	bf00      	nop
 8007620:	371c      	adds	r7, #28
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800762a:	b480      	push	{r7}
 800762c:	b085      	sub	sp, #20
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
 8007632:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	f043 0307 	orr.w	r3, r3, #7
 800764c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	609a      	str	r2, [r3, #8]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800767a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	021a      	lsls	r2, r3, #8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	431a      	orrs	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4313      	orrs	r3, r2
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4313      	orrs	r3, r2
 800768c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b085      	sub	sp, #20
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e05a      	b.n	800776e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	@ (800777c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d022      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007704:	d01d      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4a1d      	ldr	r2, [pc, #116]	@ (8007780 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d018      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a1b      	ldr	r2, [pc, #108]	@ (8007784 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d013      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a1a      	ldr	r2, [pc, #104]	@ (8007788 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d00e      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	@ (800778c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800772a:	4293      	cmp	r3, r2
 800772c:	d009      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	@ (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007734:	4293      	cmp	r3, r2
 8007736:	d004      	beq.n	8007742 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d10c      	bne.n	800775c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007748:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	4313      	orrs	r3, r2
 8007752:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop
 800777c:	40010000 	.word	0x40010000
 8007780:	40000400 	.word	0x40000400
 8007784:	40000800 	.word	0x40000800
 8007788:	40000c00 	.word	0x40000c00
 800778c:	40010400 	.word	0x40010400
 8007790:	40014000 	.word	0x40014000
 8007794:	40001800 	.word	0x40001800

08007798 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e042      	b.n	8007858 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d106      	bne.n	80077ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f7fa f820 	bl	800182c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2224      	movs	r2, #36	@ 0x24
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68da      	ldr	r2, [r3, #12]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007802:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f82b 	bl	8007860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	691a      	ldr	r2, [r3, #16]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007818:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	695a      	ldr	r2, [r3, #20]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007828:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68da      	ldr	r2, [r3, #12]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007838:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2220      	movs	r2, #32
 8007844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2220      	movs	r2, #32
 800784c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007856:	2300      	movs	r3, #0
}
 8007858:	4618      	mov	r0, r3
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007860:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007864:	b0c0      	sub	sp, #256	@ 0x100
 8007866:	af00      	add	r7, sp, #0
 8007868:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800786c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787c:	68d9      	ldr	r1, [r3, #12]
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	ea40 0301 	orr.w	r3, r0, r1
 8007888:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	431a      	orrs	r2, r3
 8007898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	431a      	orrs	r2, r3
 80078a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a4:	69db      	ldr	r3, [r3, #28]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80078ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80078b8:	f021 010c 	bic.w	r1, r1, #12
 80078bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80078c6:	430b      	orrs	r3, r1
 80078c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80078ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80078d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078da:	6999      	ldr	r1, [r3, #24]
 80078dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	ea40 0301 	orr.w	r3, r0, r1
 80078e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80078e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	4b8f      	ldr	r3, [pc, #572]	@ (8007b2c <UART_SetConfig+0x2cc>)
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d005      	beq.n	8007900 <UART_SetConfig+0xa0>
 80078f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	4b8d      	ldr	r3, [pc, #564]	@ (8007b30 <UART_SetConfig+0x2d0>)
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d104      	bne.n	800790a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007900:	f7fe fadc 	bl	8005ebc <HAL_RCC_GetPCLK2Freq>
 8007904:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007908:	e003      	b.n	8007912 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800790a:	f7fe fac3 	bl	8005e94 <HAL_RCC_GetPCLK1Freq>
 800790e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007912:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007916:	69db      	ldr	r3, [r3, #28]
 8007918:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800791c:	f040 810c 	bne.w	8007b38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007924:	2200      	movs	r2, #0
 8007926:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800792a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800792e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007932:	4622      	mov	r2, r4
 8007934:	462b      	mov	r3, r5
 8007936:	1891      	adds	r1, r2, r2
 8007938:	65b9      	str	r1, [r7, #88]	@ 0x58
 800793a:	415b      	adcs	r3, r3
 800793c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800793e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007942:	4621      	mov	r1, r4
 8007944:	eb12 0801 	adds.w	r8, r2, r1
 8007948:	4629      	mov	r1, r5
 800794a:	eb43 0901 	adc.w	r9, r3, r1
 800794e:	f04f 0200 	mov.w	r2, #0
 8007952:	f04f 0300 	mov.w	r3, #0
 8007956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800795a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800795e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007962:	4690      	mov	r8, r2
 8007964:	4699      	mov	r9, r3
 8007966:	4623      	mov	r3, r4
 8007968:	eb18 0303 	adds.w	r3, r8, r3
 800796c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007970:	462b      	mov	r3, r5
 8007972:	eb49 0303 	adc.w	r3, r9, r3
 8007976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800797a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007986:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800798a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800798e:	460b      	mov	r3, r1
 8007990:	18db      	adds	r3, r3, r3
 8007992:	653b      	str	r3, [r7, #80]	@ 0x50
 8007994:	4613      	mov	r3, r2
 8007996:	eb42 0303 	adc.w	r3, r2, r3
 800799a:	657b      	str	r3, [r7, #84]	@ 0x54
 800799c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80079a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80079a4:	f7f8 fc7c 	bl	80002a0 <__aeabi_uldivmod>
 80079a8:	4602      	mov	r2, r0
 80079aa:	460b      	mov	r3, r1
 80079ac:	4b61      	ldr	r3, [pc, #388]	@ (8007b34 <UART_SetConfig+0x2d4>)
 80079ae:	fba3 2302 	umull	r2, r3, r3, r2
 80079b2:	095b      	lsrs	r3, r3, #5
 80079b4:	011c      	lsls	r4, r3, #4
 80079b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079ba:	2200      	movs	r2, #0
 80079bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80079c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80079c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80079c8:	4642      	mov	r2, r8
 80079ca:	464b      	mov	r3, r9
 80079cc:	1891      	adds	r1, r2, r2
 80079ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80079d0:	415b      	adcs	r3, r3
 80079d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80079d8:	4641      	mov	r1, r8
 80079da:	eb12 0a01 	adds.w	sl, r2, r1
 80079de:	4649      	mov	r1, r9
 80079e0:	eb43 0b01 	adc.w	fp, r3, r1
 80079e4:	f04f 0200 	mov.w	r2, #0
 80079e8:	f04f 0300 	mov.w	r3, #0
 80079ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80079f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80079f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80079f8:	4692      	mov	sl, r2
 80079fa:	469b      	mov	fp, r3
 80079fc:	4643      	mov	r3, r8
 80079fe:	eb1a 0303 	adds.w	r3, sl, r3
 8007a02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a06:	464b      	mov	r3, r9
 8007a08:	eb4b 0303 	adc.w	r3, fp, r3
 8007a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007a1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007a20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007a24:	460b      	mov	r3, r1
 8007a26:	18db      	adds	r3, r3, r3
 8007a28:	643b      	str	r3, [r7, #64]	@ 0x40
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	eb42 0303 	adc.w	r3, r2, r3
 8007a30:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007a36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007a3a:	f7f8 fc31 	bl	80002a0 <__aeabi_uldivmod>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	4b3b      	ldr	r3, [pc, #236]	@ (8007b34 <UART_SetConfig+0x2d4>)
 8007a46:	fba3 2301 	umull	r2, r3, r3, r1
 8007a4a:	095b      	lsrs	r3, r3, #5
 8007a4c:	2264      	movs	r2, #100	@ 0x64
 8007a4e:	fb02 f303 	mul.w	r3, r2, r3
 8007a52:	1acb      	subs	r3, r1, r3
 8007a54:	00db      	lsls	r3, r3, #3
 8007a56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007a5a:	4b36      	ldr	r3, [pc, #216]	@ (8007b34 <UART_SetConfig+0x2d4>)
 8007a5c:	fba3 2302 	umull	r2, r3, r3, r2
 8007a60:	095b      	lsrs	r3, r3, #5
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007a68:	441c      	add	r4, r3
 8007a6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007a78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007a7c:	4642      	mov	r2, r8
 8007a7e:	464b      	mov	r3, r9
 8007a80:	1891      	adds	r1, r2, r2
 8007a82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007a84:	415b      	adcs	r3, r3
 8007a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	1851      	adds	r1, r2, r1
 8007a90:	6339      	str	r1, [r7, #48]	@ 0x30
 8007a92:	4649      	mov	r1, r9
 8007a94:	414b      	adcs	r3, r1
 8007a96:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a98:	f04f 0200 	mov.w	r2, #0
 8007a9c:	f04f 0300 	mov.w	r3, #0
 8007aa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007aa4:	4659      	mov	r1, fp
 8007aa6:	00cb      	lsls	r3, r1, #3
 8007aa8:	4651      	mov	r1, sl
 8007aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007aae:	4651      	mov	r1, sl
 8007ab0:	00ca      	lsls	r2, r1, #3
 8007ab2:	4610      	mov	r0, r2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4642      	mov	r2, r8
 8007aba:	189b      	adds	r3, r3, r2
 8007abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ac0:	464b      	mov	r3, r9
 8007ac2:	460a      	mov	r2, r1
 8007ac4:	eb42 0303 	adc.w	r3, r2, r3
 8007ac8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ad8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007adc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ae0:	460b      	mov	r3, r1
 8007ae2:	18db      	adds	r3, r3, r3
 8007ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	eb42 0303 	adc.w	r3, r2, r3
 8007aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007aee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007af2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007af6:	f7f8 fbd3 	bl	80002a0 <__aeabi_uldivmod>
 8007afa:	4602      	mov	r2, r0
 8007afc:	460b      	mov	r3, r1
 8007afe:	4b0d      	ldr	r3, [pc, #52]	@ (8007b34 <UART_SetConfig+0x2d4>)
 8007b00:	fba3 1302 	umull	r1, r3, r3, r2
 8007b04:	095b      	lsrs	r3, r3, #5
 8007b06:	2164      	movs	r1, #100	@ 0x64
 8007b08:	fb01 f303 	mul.w	r3, r1, r3
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	00db      	lsls	r3, r3, #3
 8007b10:	3332      	adds	r3, #50	@ 0x32
 8007b12:	4a08      	ldr	r2, [pc, #32]	@ (8007b34 <UART_SetConfig+0x2d4>)
 8007b14:	fba2 2303 	umull	r2, r3, r2, r3
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	f003 0207 	and.w	r2, r3, #7
 8007b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4422      	add	r2, r4
 8007b26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007b28:	e106      	b.n	8007d38 <UART_SetConfig+0x4d8>
 8007b2a:	bf00      	nop
 8007b2c:	40011000 	.word	0x40011000
 8007b30:	40011400 	.word	0x40011400
 8007b34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007b38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007b42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007b46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007b4a:	4642      	mov	r2, r8
 8007b4c:	464b      	mov	r3, r9
 8007b4e:	1891      	adds	r1, r2, r2
 8007b50:	6239      	str	r1, [r7, #32]
 8007b52:	415b      	adcs	r3, r3
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b5a:	4641      	mov	r1, r8
 8007b5c:	1854      	adds	r4, r2, r1
 8007b5e:	4649      	mov	r1, r9
 8007b60:	eb43 0501 	adc.w	r5, r3, r1
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	f04f 0300 	mov.w	r3, #0
 8007b6c:	00eb      	lsls	r3, r5, #3
 8007b6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b72:	00e2      	lsls	r2, r4, #3
 8007b74:	4614      	mov	r4, r2
 8007b76:	461d      	mov	r5, r3
 8007b78:	4643      	mov	r3, r8
 8007b7a:	18e3      	adds	r3, r4, r3
 8007b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007b80:	464b      	mov	r3, r9
 8007b82:	eb45 0303 	adc.w	r3, r5, r3
 8007b86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007b96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b9a:	f04f 0200 	mov.w	r2, #0
 8007b9e:	f04f 0300 	mov.w	r3, #0
 8007ba2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	008b      	lsls	r3, r1, #2
 8007baa:	4621      	mov	r1, r4
 8007bac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	008a      	lsls	r2, r1, #2
 8007bb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007bb8:	f7f8 fb72 	bl	80002a0 <__aeabi_uldivmod>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	460b      	mov	r3, r1
 8007bc0:	4b60      	ldr	r3, [pc, #384]	@ (8007d44 <UART_SetConfig+0x4e4>)
 8007bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8007bc6:	095b      	lsrs	r3, r3, #5
 8007bc8:	011c      	lsls	r4, r3, #4
 8007bca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007bd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007bd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007bdc:	4642      	mov	r2, r8
 8007bde:	464b      	mov	r3, r9
 8007be0:	1891      	adds	r1, r2, r2
 8007be2:	61b9      	str	r1, [r7, #24]
 8007be4:	415b      	adcs	r3, r3
 8007be6:	61fb      	str	r3, [r7, #28]
 8007be8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bec:	4641      	mov	r1, r8
 8007bee:	1851      	adds	r1, r2, r1
 8007bf0:	6139      	str	r1, [r7, #16]
 8007bf2:	4649      	mov	r1, r9
 8007bf4:	414b      	adcs	r3, r1
 8007bf6:	617b      	str	r3, [r7, #20]
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007c04:	4659      	mov	r1, fp
 8007c06:	00cb      	lsls	r3, r1, #3
 8007c08:	4651      	mov	r1, sl
 8007c0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007c0e:	4651      	mov	r1, sl
 8007c10:	00ca      	lsls	r2, r1, #3
 8007c12:	4610      	mov	r0, r2
 8007c14:	4619      	mov	r1, r3
 8007c16:	4603      	mov	r3, r0
 8007c18:	4642      	mov	r2, r8
 8007c1a:	189b      	adds	r3, r3, r2
 8007c1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007c20:	464b      	mov	r3, r9
 8007c22:	460a      	mov	r2, r1
 8007c24:	eb42 0303 	adc.w	r3, r2, r3
 8007c28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007c38:	f04f 0200 	mov.w	r2, #0
 8007c3c:	f04f 0300 	mov.w	r3, #0
 8007c40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007c44:	4649      	mov	r1, r9
 8007c46:	008b      	lsls	r3, r1, #2
 8007c48:	4641      	mov	r1, r8
 8007c4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c4e:	4641      	mov	r1, r8
 8007c50:	008a      	lsls	r2, r1, #2
 8007c52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007c56:	f7f8 fb23 	bl	80002a0 <__aeabi_uldivmod>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	4b38      	ldr	r3, [pc, #224]	@ (8007d44 <UART_SetConfig+0x4e4>)
 8007c62:	fba3 2301 	umull	r2, r3, r3, r1
 8007c66:	095b      	lsrs	r3, r3, #5
 8007c68:	2264      	movs	r2, #100	@ 0x64
 8007c6a:	fb02 f303 	mul.w	r3, r2, r3
 8007c6e:	1acb      	subs	r3, r1, r3
 8007c70:	011b      	lsls	r3, r3, #4
 8007c72:	3332      	adds	r3, #50	@ 0x32
 8007c74:	4a33      	ldr	r2, [pc, #204]	@ (8007d44 <UART_SetConfig+0x4e4>)
 8007c76:	fba2 2303 	umull	r2, r3, r2, r3
 8007c7a:	095b      	lsrs	r3, r3, #5
 8007c7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007c80:	441c      	add	r4, r3
 8007c82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c86:	2200      	movs	r2, #0
 8007c88:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007c8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007c90:	4642      	mov	r2, r8
 8007c92:	464b      	mov	r3, r9
 8007c94:	1891      	adds	r1, r2, r2
 8007c96:	60b9      	str	r1, [r7, #8]
 8007c98:	415b      	adcs	r3, r3
 8007c9a:	60fb      	str	r3, [r7, #12]
 8007c9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	1851      	adds	r1, r2, r1
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	4649      	mov	r1, r9
 8007ca8:	414b      	adcs	r3, r1
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	f04f 0200 	mov.w	r2, #0
 8007cb0:	f04f 0300 	mov.w	r3, #0
 8007cb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007cb8:	4659      	mov	r1, fp
 8007cba:	00cb      	lsls	r3, r1, #3
 8007cbc:	4651      	mov	r1, sl
 8007cbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007cc2:	4651      	mov	r1, sl
 8007cc4:	00ca      	lsls	r2, r1, #3
 8007cc6:	4610      	mov	r0, r2
 8007cc8:	4619      	mov	r1, r3
 8007cca:	4603      	mov	r3, r0
 8007ccc:	4642      	mov	r2, r8
 8007cce:	189b      	adds	r3, r3, r2
 8007cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007cd2:	464b      	mov	r3, r9
 8007cd4:	460a      	mov	r2, r1
 8007cd6:	eb42 0303 	adc.w	r3, r2, r3
 8007cda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ce6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	f04f 0300 	mov.w	r3, #0
 8007cf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007cf4:	4649      	mov	r1, r9
 8007cf6:	008b      	lsls	r3, r1, #2
 8007cf8:	4641      	mov	r1, r8
 8007cfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cfe:	4641      	mov	r1, r8
 8007d00:	008a      	lsls	r2, r1, #2
 8007d02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007d06:	f7f8 facb 	bl	80002a0 <__aeabi_uldivmod>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d44 <UART_SetConfig+0x4e4>)
 8007d10:	fba3 1302 	umull	r1, r3, r3, r2
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	2164      	movs	r1, #100	@ 0x64
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	3332      	adds	r3, #50	@ 0x32
 8007d22:	4a08      	ldr	r2, [pc, #32]	@ (8007d44 <UART_SetConfig+0x4e4>)
 8007d24:	fba2 2303 	umull	r2, r3, r2, r3
 8007d28:	095b      	lsrs	r3, r3, #5
 8007d2a:	f003 020f 	and.w	r2, r3, #15
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4422      	add	r2, r4
 8007d36:	609a      	str	r2, [r3, #8]
}
 8007d38:	bf00      	nop
 8007d3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007d44:	51eb851f 	.word	0x51eb851f

08007d48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d123      	bne.n	8007da2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007d62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	6851      	ldr	r1, [r2, #4]
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	6892      	ldr	r2, [r2, #8]
 8007d6e:	4311      	orrs	r1, r2
 8007d70:	683a      	ldr	r2, [r7, #0]
 8007d72:	68d2      	ldr	r2, [r2, #12]
 8007d74:	4311      	orrs	r1, r2
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	6912      	ldr	r2, [r2, #16]
 8007d7a:	4311      	orrs	r1, r2
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	6952      	ldr	r2, [r2, #20]
 8007d80:	4311      	orrs	r1, r2
 8007d82:	683a      	ldr	r2, [r7, #0]
 8007d84:	6992      	ldr	r2, [r2, #24]
 8007d86:	4311      	orrs	r1, r2
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	69d2      	ldr	r2, [r2, #28]
 8007d8c:	4311      	orrs	r1, r2
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	6a12      	ldr	r2, [r2, #32]
 8007d92:	4311      	orrs	r1, r2
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	e028      	b.n	8007df4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	69d9      	ldr	r1, [r3, #28]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	4319      	orrs	r1, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db8:	430b      	orrs	r3, r1
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007dc8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	6851      	ldr	r1, [r2, #4]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	6892      	ldr	r2, [r2, #8]
 8007dd4:	4311      	orrs	r1, r2
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	68d2      	ldr	r2, [r2, #12]
 8007dda:	4311      	orrs	r1, r2
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	6912      	ldr	r2, [r2, #16]
 8007de0:	4311      	orrs	r1, r2
 8007de2:	683a      	ldr	r2, [r7, #0]
 8007de4:	6952      	ldr	r2, [r2, #20]
 8007de6:	4311      	orrs	r1, r2
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	6992      	ldr	r2, [r2, #24]
 8007dec:	430a      	orrs	r2, r1
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	370c      	adds	r7, #12
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	60f8      	str	r0, [r7, #12]
 8007e0a:	60b9      	str	r1, [r7, #8]
 8007e0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d128      	bne.n	8007e66 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	1e59      	subs	r1, r3, #1
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	011b      	lsls	r3, r3, #4
 8007e2a:	4319      	orrs	r1, r3
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	4319      	orrs	r1, r3
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	031b      	lsls	r3, r3, #12
 8007e3e:	4319      	orrs	r1, r3
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	3b01      	subs	r3, #1
 8007e46:	041b      	lsls	r3, r3, #16
 8007e48:	4319      	orrs	r1, r3
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	695b      	ldr	r3, [r3, #20]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	051b      	lsls	r3, r3, #20
 8007e52:	4319      	orrs	r1, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	699b      	ldr	r3, [r3, #24]
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	061b      	lsls	r3, r3, #24
 8007e5c:	430b      	orrs	r3, r1
 8007e5e:	431a      	orrs	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	609a      	str	r2, [r3, #8]
 8007e64:	e02f      	b.n	8007ec6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e6e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	68d2      	ldr	r2, [r2, #12]
 8007e76:	3a01      	subs	r2, #1
 8007e78:	0311      	lsls	r1, r2, #12
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	6952      	ldr	r2, [r2, #20]
 8007e7e:	3a01      	subs	r2, #1
 8007e80:	0512      	lsls	r2, r2, #20
 8007e82:	430a      	orrs	r2, r1
 8007e84:	431a      	orrs	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	1e59      	subs	r1, r3, #1
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	011b      	lsls	r3, r3, #4
 8007ea0:	4319      	orrs	r1, r3
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	689b      	ldr	r3, [r3, #8]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	021b      	lsls	r3, r3, #8
 8007eaa:	4319      	orrs	r1, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	4319      	orrs	r1, r3
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	061b      	lsls	r3, r3, #24
 8007ebe:	430b      	orrs	r3, r1
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ed4:	b084      	sub	sp, #16
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b084      	sub	sp, #16
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
 8007ede:	f107 001c 	add.w	r0, r7, #28
 8007ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ee6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d123      	bne.n	8007f36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007f16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d105      	bne.n	8007f2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	68db      	ldr	r3, [r3, #12]
 8007f22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 fae8 	bl	8009500 <USB_CoreReset>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
 8007f34:	e01b      	b.n	8007f6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f001 fadc 	bl	8009500 <USB_CoreReset>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007f4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f60:	e005      	b.n	8007f6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007f6e:	7fbb      	ldrb	r3, [r7, #30]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d10b      	bne.n	8007f8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f043 0206 	orr.w	r2, r3, #6
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f043 0220 	orr.w	r2, r3, #32
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f98:	b004      	add	sp, #16
 8007f9a:	4770      	bx	lr

08007f9c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d165      	bne.n	800807c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	4a41      	ldr	r2, [pc, #260]	@ (80080b8 <USB_SetTurnaroundTime+0x11c>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d906      	bls.n	8007fc6 <USB_SetTurnaroundTime+0x2a>
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4a40      	ldr	r2, [pc, #256]	@ (80080bc <USB_SetTurnaroundTime+0x120>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d202      	bcs.n	8007fc6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007fc0:	230f      	movs	r3, #15
 8007fc2:	617b      	str	r3, [r7, #20]
 8007fc4:	e062      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80080bc <USB_SetTurnaroundTime+0x120>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d306      	bcc.n	8007fdc <USB_SetTurnaroundTime+0x40>
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	4a3b      	ldr	r2, [pc, #236]	@ (80080c0 <USB_SetTurnaroundTime+0x124>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d202      	bcs.n	8007fdc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007fd6:	230e      	movs	r3, #14
 8007fd8:	617b      	str	r3, [r7, #20]
 8007fda:	e057      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4a38      	ldr	r2, [pc, #224]	@ (80080c0 <USB_SetTurnaroundTime+0x124>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d306      	bcc.n	8007ff2 <USB_SetTurnaroundTime+0x56>
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4a37      	ldr	r2, [pc, #220]	@ (80080c4 <USB_SetTurnaroundTime+0x128>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d202      	bcs.n	8007ff2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007fec:	230d      	movs	r3, #13
 8007fee:	617b      	str	r3, [r7, #20]
 8007ff0:	e04c      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	4a33      	ldr	r2, [pc, #204]	@ (80080c4 <USB_SetTurnaroundTime+0x128>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d306      	bcc.n	8008008 <USB_SetTurnaroundTime+0x6c>
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	4a32      	ldr	r2, [pc, #200]	@ (80080c8 <USB_SetTurnaroundTime+0x12c>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d802      	bhi.n	8008008 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008002:	230c      	movs	r3, #12
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	e041      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	4a2f      	ldr	r2, [pc, #188]	@ (80080c8 <USB_SetTurnaroundTime+0x12c>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d906      	bls.n	800801e <USB_SetTurnaroundTime+0x82>
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	4a2e      	ldr	r2, [pc, #184]	@ (80080cc <USB_SetTurnaroundTime+0x130>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d802      	bhi.n	800801e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008018:	230b      	movs	r3, #11
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e036      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	4a2a      	ldr	r2, [pc, #168]	@ (80080cc <USB_SetTurnaroundTime+0x130>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d906      	bls.n	8008034 <USB_SetTurnaroundTime+0x98>
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	4a29      	ldr	r2, [pc, #164]	@ (80080d0 <USB_SetTurnaroundTime+0x134>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d802      	bhi.n	8008034 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800802e:	230a      	movs	r3, #10
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	e02b      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	4a26      	ldr	r2, [pc, #152]	@ (80080d0 <USB_SetTurnaroundTime+0x134>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d906      	bls.n	800804a <USB_SetTurnaroundTime+0xae>
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	4a25      	ldr	r2, [pc, #148]	@ (80080d4 <USB_SetTurnaroundTime+0x138>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d202      	bcs.n	800804a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008044:	2309      	movs	r3, #9
 8008046:	617b      	str	r3, [r7, #20]
 8008048:	e020      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	4a21      	ldr	r2, [pc, #132]	@ (80080d4 <USB_SetTurnaroundTime+0x138>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d306      	bcc.n	8008060 <USB_SetTurnaroundTime+0xc4>
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	4a20      	ldr	r2, [pc, #128]	@ (80080d8 <USB_SetTurnaroundTime+0x13c>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d802      	bhi.n	8008060 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800805a:	2308      	movs	r3, #8
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e015      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	4a1d      	ldr	r2, [pc, #116]	@ (80080d8 <USB_SetTurnaroundTime+0x13c>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d906      	bls.n	8008076 <USB_SetTurnaroundTime+0xda>
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	4a1c      	ldr	r2, [pc, #112]	@ (80080dc <USB_SetTurnaroundTime+0x140>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d202      	bcs.n	8008076 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008070:	2307      	movs	r3, #7
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e00a      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008076:	2306      	movs	r3, #6
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e007      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d102      	bne.n	8008088 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008082:	2309      	movs	r3, #9
 8008084:	617b      	str	r3, [r7, #20]
 8008086:	e001      	b.n	800808c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008088:	2309      	movs	r3, #9
 800808a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	68db      	ldr	r3, [r3, #12]
 8008090:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68da      	ldr	r2, [r3, #12]
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	029b      	lsls	r3, r3, #10
 80080a0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	00d8acbf 	.word	0x00d8acbf
 80080bc:	00e4e1c0 	.word	0x00e4e1c0
 80080c0:	00f42400 	.word	0x00f42400
 80080c4:	01067380 	.word	0x01067380
 80080c8:	011a499f 	.word	0x011a499f
 80080cc:	01312cff 	.word	0x01312cff
 80080d0:	014ca43f 	.word	0x014ca43f
 80080d4:	016e3600 	.word	0x016e3600
 80080d8:	01a6ab1f 	.word	0x01a6ab1f
 80080dc:	01e84800 	.word	0x01e84800

080080e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f043 0201 	orr.w	r2, r3, #1
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080f4:	2300      	movs	r3, #0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr

08008102 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008102:	b480      	push	{r7}
 8008104:	b083      	sub	sp, #12
 8008106:	af00      	add	r7, sp, #0
 8008108:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	f023 0201 	bic.w	r2, r3, #1
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	2b01      	cmp	r3, #1
 8008144:	d115      	bne.n	8008172 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008152:	200a      	movs	r0, #10
 8008154:	f7f9 fdca 	bl	8001cec <HAL_Delay>
      ms += 10U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	330a      	adds	r3, #10
 800815c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 f93f 	bl	80093e2 <USB_GetMode>
 8008164:	4603      	mov	r3, r0
 8008166:	2b01      	cmp	r3, #1
 8008168:	d01e      	beq.n	80081a8 <USB_SetCurrentMode+0x84>
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2bc7      	cmp	r3, #199	@ 0xc7
 800816e:	d9f0      	bls.n	8008152 <USB_SetCurrentMode+0x2e>
 8008170:	e01a      	b.n	80081a8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d115      	bne.n	80081a4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008184:	200a      	movs	r0, #10
 8008186:	f7f9 fdb1 	bl	8001cec <HAL_Delay>
      ms += 10U;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	330a      	adds	r3, #10
 800818e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f926 	bl	80093e2 <USB_GetMode>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <USB_SetCurrentMode+0x84>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	2bc7      	cmp	r3, #199	@ 0xc7
 80081a0:	d9f0      	bls.n	8008184 <USB_SetCurrentMode+0x60>
 80081a2:	e001      	b.n	80081a8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e005      	b.n	80081b4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2bc8      	cmp	r3, #200	@ 0xc8
 80081ac:	d101      	bne.n	80081b2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	e000      	b.n	80081b4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80081bc:	b084      	sub	sp, #16
 80081be:	b580      	push	{r7, lr}
 80081c0:	b086      	sub	sp, #24
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80081ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	e009      	b.n	80081f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	3340      	adds	r3, #64	@ 0x40
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	2200      	movs	r2, #0
 80081e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3301      	adds	r3, #1
 80081ee:	613b      	str	r3, [r7, #16]
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	2b0e      	cmp	r3, #14
 80081f4:	d9f2      	bls.n	80081dc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d11c      	bne.n	8008238 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008204:	685b      	ldr	r3, [r3, #4]
 8008206:	68fa      	ldr	r2, [r7, #12]
 8008208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800820c:	f043 0302 	orr.w	r3, r3, #2
 8008210:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008216:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008222:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800822e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	639a      	str	r2, [r3, #56]	@ 0x38
 8008236:	e00b      	b.n	8008250 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800823c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008248:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008256:	461a      	mov	r2, r3
 8008258:	2300      	movs	r3, #0
 800825a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800825c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008260:	2b01      	cmp	r3, #1
 8008262:	d10d      	bne.n	8008280 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008264:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008268:	2b00      	cmp	r3, #0
 800826a:	d104      	bne.n	8008276 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800826c:	2100      	movs	r1, #0
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f000 f968 	bl	8008544 <USB_SetDevSpeed>
 8008274:	e008      	b.n	8008288 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008276:	2101      	movs	r1, #1
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f000 f963 	bl	8008544 <USB_SetDevSpeed>
 800827e:	e003      	b.n	8008288 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008280:	2103      	movs	r1, #3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f95e 	bl	8008544 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008288:	2110      	movs	r1, #16
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8fa 	bl	8008484 <USB_FlushTxFifo>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d001      	beq.n	800829a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f924 	bl	80084e8 <USB_FlushRxFifo>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d001      	beq.n	80082aa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082b0:	461a      	mov	r2, r3
 80082b2:	2300      	movs	r3, #0
 80082b4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082bc:	461a      	mov	r2, r3
 80082be:	2300      	movs	r3, #0
 80082c0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80082c8:	461a      	mov	r2, r3
 80082ca:	2300      	movs	r3, #0
 80082cc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	613b      	str	r3, [r7, #16]
 80082d2:	e043      	b.n	800835c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ea:	d118      	bne.n	800831e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	015a      	lsls	r2, r3, #5
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4413      	add	r3, r2
 80082fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082fe:	461a      	mov	r2, r3
 8008300:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	e013      	b.n	8008330 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	4413      	add	r3, r2
 8008310:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008314:	461a      	mov	r2, r3
 8008316:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	e008      	b.n	8008330 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800832a:	461a      	mov	r2, r3
 800832c:	2300      	movs	r3, #0
 800832e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800833c:	461a      	mov	r2, r3
 800833e:	2300      	movs	r3, #0
 8008340:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	015a      	lsls	r2, r3, #5
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	4413      	add	r3, r2
 800834a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800834e:	461a      	mov	r2, r3
 8008350:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	3301      	adds	r3, #1
 800835a:	613b      	str	r3, [r7, #16]
 800835c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008360:	461a      	mov	r2, r3
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	4293      	cmp	r3, r2
 8008366:	d3b5      	bcc.n	80082d4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008368:	2300      	movs	r3, #0
 800836a:	613b      	str	r3, [r7, #16]
 800836c:	e043      	b.n	80083f6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	015a      	lsls	r2, r3, #5
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	4413      	add	r3, r2
 8008376:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008380:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008384:	d118      	bne.n	80083b8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d10a      	bne.n	80083a2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	015a      	lsls	r2, r3, #5
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	4413      	add	r3, r2
 8008394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008398:	461a      	mov	r2, r3
 800839a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	e013      	b.n	80083ca <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	015a      	lsls	r2, r3, #5
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4413      	add	r3, r2
 80083aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083ae:	461a      	mov	r2, r3
 80083b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80083b4:	6013      	str	r3, [r2, #0]
 80083b6:	e008      	b.n	80083ca <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	015a      	lsls	r2, r3, #5
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	4413      	add	r3, r2
 80083c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c4:	461a      	mov	r2, r3
 80083c6:	2300      	movs	r3, #0
 80083c8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	015a      	lsls	r2, r3, #5
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	4413      	add	r3, r2
 80083d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083d6:	461a      	mov	r2, r3
 80083d8:	2300      	movs	r3, #0
 80083da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80083dc:	693b      	ldr	r3, [r7, #16]
 80083de:	015a      	lsls	r2, r3, #5
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	4413      	add	r3, r2
 80083e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083e8:	461a      	mov	r2, r3
 80083ea:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80083ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	3301      	adds	r3, #1
 80083f4:	613b      	str	r3, [r7, #16]
 80083f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80083fa:	461a      	mov	r2, r3
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	4293      	cmp	r3, r2
 8008400:	d3b5      	bcc.n	800836e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008410:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008414:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008422:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008424:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008428:	2b00      	cmp	r3, #0
 800842a:	d105      	bne.n	8008438 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	f043 0210 	orr.w	r2, r3, #16
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699a      	ldr	r2, [r3, #24]
 800843c:	4b10      	ldr	r3, [pc, #64]	@ (8008480 <USB_DevInit+0x2c4>)
 800843e:	4313      	orrs	r3, r2
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008444:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	699b      	ldr	r3, [r3, #24]
 8008450:	f043 0208 	orr.w	r2, r3, #8
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008458:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800845c:	2b01      	cmp	r3, #1
 800845e:	d107      	bne.n	8008470 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008468:	f043 0304 	orr.w	r3, r3, #4
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008470:	7dfb      	ldrb	r3, [r7, #23]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3718      	adds	r7, #24
 8008476:	46bd      	mov	sp, r7
 8008478:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800847c:	b004      	add	sp, #16
 800847e:	4770      	bx	lr
 8008480:	803c3800 	.word	0x803c3800

08008484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008484:	b480      	push	{r7}
 8008486:	b085      	sub	sp, #20
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800849e:	d901      	bls.n	80084a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80084a0:	2303      	movs	r3, #3
 80084a2:	e01b      	b.n	80084dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	691b      	ldr	r3, [r3, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	daf2      	bge.n	8008492 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	019b      	lsls	r3, r3, #6
 80084b4:	f043 0220 	orr.w	r2, r3, #32
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3301      	adds	r3, #1
 80084c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084c8:	d901      	bls.n	80084ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e006      	b.n	80084dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	f003 0320 	and.w	r3, r3, #32
 80084d6:	2b20      	cmp	r3, #32
 80084d8:	d0f0      	beq.n	80084bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	3301      	adds	r3, #1
 80084f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008500:	d901      	bls.n	8008506 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e018      	b.n	8008538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	2b00      	cmp	r3, #0
 800850c:	daf2      	bge.n	80084f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800850e:	2300      	movs	r3, #0
 8008510:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2210      	movs	r2, #16
 8008516:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008524:	d901      	bls.n	800852a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e006      	b.n	8008538 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f003 0310 	and.w	r3, r3, #16
 8008532:	2b10      	cmp	r3, #16
 8008534:	d0f0      	beq.n	8008518 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3714      	adds	r7, #20
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	460b      	mov	r3, r1
 800854e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	78fb      	ldrb	r3, [r7, #3]
 800855e:	68f9      	ldr	r1, [r7, #12]
 8008560:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008564:	4313      	orrs	r3, r2
 8008566:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008568:	2300      	movs	r3, #0
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8008576:	b480      	push	{r7}
 8008578:	b087      	sub	sp, #28
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 0306 	and.w	r3, r3, #6
 800858e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d102      	bne.n	800859c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008596:	2300      	movs	r3, #0
 8008598:	75fb      	strb	r3, [r7, #23]
 800859a:	e00a      	b.n	80085b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d002      	beq.n	80085a8 <USB_GetDevSpeed+0x32>
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b06      	cmp	r3, #6
 80085a6:	d102      	bne.n	80085ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80085a8:	2302      	movs	r3, #2
 80085aa:	75fb      	strb	r3, [r7, #23]
 80085ac:	e001      	b.n	80085b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80085ae:	230f      	movs	r3, #15
 80085b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80085b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	371c      	adds	r7, #28
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	785b      	ldrb	r3, [r3, #1]
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d13a      	bne.n	8008652 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085e2:	69da      	ldr	r2, [r3, #28]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	2101      	movs	r1, #1
 80085ee:	fa01 f303 	lsl.w	r3, r1, r3
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	68f9      	ldr	r1, [r7, #12]
 80085f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085fa:	4313      	orrs	r3, r2
 80085fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	015a      	lsls	r2, r3, #5
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	4413      	add	r3, r2
 8008606:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d155      	bne.n	80086c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	791b      	ldrb	r3, [r3, #4]
 800862e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008630:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	059b      	lsls	r3, r3, #22
 8008636:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008638:	4313      	orrs	r3, r2
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	0151      	lsls	r1, r2, #5
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	440a      	add	r2, r1
 8008642:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800864a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	e036      	b.n	80086c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008658:	69da      	ldr	r2, [r3, #28]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	781b      	ldrb	r3, [r3, #0]
 800865e:	f003 030f 	and.w	r3, r3, #15
 8008662:	2101      	movs	r1, #1
 8008664:	fa01 f303 	lsl.w	r3, r1, r3
 8008668:	041b      	lsls	r3, r3, #16
 800866a:	68f9      	ldr	r1, [r7, #12]
 800866c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008670:	4313      	orrs	r3, r2
 8008672:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008686:	2b00      	cmp	r3, #0
 8008688:	d11a      	bne.n	80086c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	015a      	lsls	r2, r3, #5
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	4413      	add	r3, r2
 8008692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008696:	681a      	ldr	r2, [r3, #0]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80086a6:	430b      	orrs	r3, r1
 80086a8:	4313      	orrs	r3, r2
 80086aa:	68ba      	ldr	r2, [r7, #8]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3714      	adds	r7, #20
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b085      	sub	sp, #20
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	785b      	ldrb	r3, [r3, #1]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d161      	bne.n	80087b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	015a      	lsls	r2, r3, #5
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	4413      	add	r3, r2
 80086f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008702:	d11f      	bne.n	8008744 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68ba      	ldr	r2, [r7, #8]
 8008714:	0151      	lsls	r1, r2, #5
 8008716:	68fa      	ldr	r2, [r7, #12]
 8008718:	440a      	add	r2, r1
 800871a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800871e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008722:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	015a      	lsls	r2, r3, #5
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	4413      	add	r3, r2
 800872c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	0151      	lsls	r1, r2, #5
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	440a      	add	r2, r1
 800873a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800873e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008742:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800874a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 030f 	and.w	r3, r3, #15
 8008754:	2101      	movs	r1, #1
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	b29b      	uxth	r3, r3
 800875c:	43db      	mvns	r3, r3
 800875e:	68f9      	ldr	r1, [r7, #12]
 8008760:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008764:	4013      	ands	r3, r2
 8008766:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800876e:	69da      	ldr	r2, [r3, #28]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	2101      	movs	r1, #1
 800877a:	fa01 f303 	lsl.w	r3, r1, r3
 800877e:	b29b      	uxth	r3, r3
 8008780:	43db      	mvns	r3, r3
 8008782:	68f9      	ldr	r1, [r7, #12]
 8008784:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008788:	4013      	ands	r3, r2
 800878a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	0159      	lsls	r1, r3, #5
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	440b      	add	r3, r1
 80087a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087a6:	4619      	mov	r1, r3
 80087a8:	4b35      	ldr	r3, [pc, #212]	@ (8008880 <USB_DeactivateEndpoint+0x1b0>)
 80087aa:	4013      	ands	r3, r2
 80087ac:	600b      	str	r3, [r1, #0]
 80087ae:	e060      	b.n	8008872 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	015a      	lsls	r2, r3, #5
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4413      	add	r3, r2
 80087b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80087c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80087c6:	d11f      	bne.n	8008808 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	015a      	lsls	r2, r3, #5
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68ba      	ldr	r2, [r7, #8]
 80087d8:	0151      	lsls	r1, r2, #5
 80087da:	68fa      	ldr	r2, [r7, #12]
 80087dc:	440a      	add	r2, r1
 80087de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80087e2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80087e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68ba      	ldr	r2, [r7, #8]
 80087f8:	0151      	lsls	r1, r2, #5
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	440a      	add	r2, r1
 80087fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008802:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800880e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	781b      	ldrb	r3, [r3, #0]
 8008814:	f003 030f 	and.w	r3, r3, #15
 8008818:	2101      	movs	r1, #1
 800881a:	fa01 f303 	lsl.w	r3, r1, r3
 800881e:	041b      	lsls	r3, r3, #16
 8008820:	43db      	mvns	r3, r3
 8008822:	68f9      	ldr	r1, [r7, #12]
 8008824:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008828:	4013      	ands	r3, r2
 800882a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008832:	69da      	ldr	r2, [r3, #28]
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 030f 	and.w	r3, r3, #15
 800883c:	2101      	movs	r1, #1
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	041b      	lsls	r3, r3, #16
 8008844:	43db      	mvns	r3, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800884c:	4013      	ands	r3, r2
 800884e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	015a      	lsls	r2, r3, #5
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	4413      	add	r3, r2
 8008858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	0159      	lsls	r1, r3, #5
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	440b      	add	r3, r1
 8008866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800886a:	4619      	mov	r1, r3
 800886c:	4b05      	ldr	r3, [pc, #20]	@ (8008884 <USB_DeactivateEndpoint+0x1b4>)
 800886e:	4013      	ands	r3, r2
 8008870:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3714      	adds	r7, #20
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr
 8008880:	ec337800 	.word	0xec337800
 8008884:	eff37800 	.word	0xeff37800

08008888 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08a      	sub	sp, #40	@ 0x28
 800888c:	af02      	add	r7, sp, #8
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	4613      	mov	r3, r2
 8008894:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	f040 817f 	bne.w	8008ba8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d132      	bne.n	8008918 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80088b2:	69bb      	ldr	r3, [r7, #24]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	69ba      	ldr	r2, [r7, #24]
 80088c2:	0151      	lsls	r1, r2, #5
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	440a      	add	r2, r1
 80088c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088cc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80088d0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80088d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	015a      	lsls	r2, r3, #5
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	4413      	add	r3, r2
 80088de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088e2:	691b      	ldr	r3, [r3, #16]
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	0151      	lsls	r1, r2, #5
 80088e8:	69fa      	ldr	r2, [r7, #28]
 80088ea:	440a      	add	r2, r1
 80088ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80088f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	69fb      	ldr	r3, [r7, #28]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	69ba      	ldr	r2, [r7, #24]
 8008906:	0151      	lsls	r1, r2, #5
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	440a      	add	r2, r1
 800890c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008910:	0cdb      	lsrs	r3, r3, #19
 8008912:	04db      	lsls	r3, r3, #19
 8008914:	6113      	str	r3, [r2, #16]
 8008916:	e097      	b.n	8008a48 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008918:	69bb      	ldr	r3, [r7, #24]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	0151      	lsls	r1, r2, #5
 800892a:	69fa      	ldr	r2, [r7, #28]
 800892c:	440a      	add	r2, r1
 800892e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008932:	0cdb      	lsrs	r3, r3, #19
 8008934:	04db      	lsls	r3, r3, #19
 8008936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	69fb      	ldr	r3, [r7, #28]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	69ba      	ldr	r2, [r7, #24]
 8008948:	0151      	lsls	r1, r2, #5
 800894a:	69fa      	ldr	r2, [r7, #28]
 800894c:	440a      	add	r2, r1
 800894e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008952:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008956:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800895a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800895c:	69bb      	ldr	r3, [r7, #24]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d11a      	bne.n	8008998 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	691a      	ldr	r2, [r3, #16]
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	429a      	cmp	r2, r3
 800896c:	d903      	bls.n	8008976 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	689a      	ldr	r2, [r3, #8]
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	015a      	lsls	r2, r3, #5
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4413      	add	r3, r2
 800897e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	69ba      	ldr	r2, [r7, #24]
 8008986:	0151      	lsls	r1, r2, #5
 8008988:	69fa      	ldr	r2, [r7, #28]
 800898a:	440a      	add	r2, r1
 800898c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008990:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008994:	6113      	str	r3, [r2, #16]
 8008996:	e044      	b.n	8008a22 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	691a      	ldr	r2, [r3, #16]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	689b      	ldr	r3, [r3, #8]
 80089a0:	4413      	add	r3, r2
 80089a2:	1e5a      	subs	r2, r3, #1
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ac:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80089ae:	69bb      	ldr	r3, [r7, #24]
 80089b0:	015a      	lsls	r2, r3, #5
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	4413      	add	r3, r2
 80089b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ba:	691a      	ldr	r2, [r3, #16]
 80089bc:	8afb      	ldrh	r3, [r7, #22]
 80089be:	04d9      	lsls	r1, r3, #19
 80089c0:	4ba4      	ldr	r3, [pc, #656]	@ (8008c54 <USB_EPStartXfer+0x3cc>)
 80089c2:	400b      	ands	r3, r1
 80089c4:	69b9      	ldr	r1, [r7, #24]
 80089c6:	0148      	lsls	r0, r1, #5
 80089c8:	69f9      	ldr	r1, [r7, #28]
 80089ca:	4401      	add	r1, r0
 80089cc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80089d0:	4313      	orrs	r3, r2
 80089d2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	791b      	ldrb	r3, [r3, #4]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d122      	bne.n	8008a22 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	015a      	lsls	r2, r3, #5
 80089e0:	69fb      	ldr	r3, [r7, #28]
 80089e2:	4413      	add	r3, r2
 80089e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	0151      	lsls	r1, r2, #5
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	440a      	add	r2, r1
 80089f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089f6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80089fa:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	8afb      	ldrh	r3, [r7, #22]
 8008a0c:	075b      	lsls	r3, r3, #29
 8008a0e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008a12:	69b9      	ldr	r1, [r7, #24]
 8008a14:	0148      	lsls	r0, r1, #5
 8008a16:	69f9      	ldr	r1, [r7, #28]
 8008a18:	4401      	add	r1, r0
 8008a1a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a1e:	4313      	orrs	r3, r2
 8008a20:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	015a      	lsls	r2, r3, #5
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	4413      	add	r3, r2
 8008a2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a2e:	691a      	ldr	r2, [r3, #16]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	691b      	ldr	r3, [r3, #16]
 8008a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a38:	69b9      	ldr	r1, [r7, #24]
 8008a3a:	0148      	lsls	r0, r1, #5
 8008a3c:	69f9      	ldr	r1, [r7, #28]
 8008a3e:	4401      	add	r1, r0
 8008a40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008a44:	4313      	orrs	r3, r2
 8008a46:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d14b      	bne.n	8008ae6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	69db      	ldr	r3, [r3, #28]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d009      	beq.n	8008a6a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a56:	69bb      	ldr	r3, [r7, #24]
 8008a58:	015a      	lsls	r2, r3, #5
 8008a5a:	69fb      	ldr	r3, [r7, #28]
 8008a5c:	4413      	add	r3, r2
 8008a5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a62:	461a      	mov	r2, r3
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	791b      	ldrb	r3, [r3, #4]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d128      	bne.n	8008ac4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d110      	bne.n	8008aa4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008a9c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008aa0:	6013      	str	r3, [r2, #0]
 8008aa2:	e00f      	b.n	8008ac4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008aa4:	69bb      	ldr	r3, [r7, #24]
 8008aa6:	015a      	lsls	r2, r3, #5
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	4413      	add	r3, r2
 8008aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	0151      	lsls	r1, r2, #5
 8008ab6:	69fa      	ldr	r2, [r7, #28]
 8008ab8:	440a      	add	r2, r1
 8008aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ac2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	015a      	lsls	r2, r3, #5
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	4413      	add	r3, r2
 8008acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	0151      	lsls	r1, r2, #5
 8008ad6:	69fa      	ldr	r2, [r7, #28]
 8008ad8:	440a      	add	r2, r1
 8008ada:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ade:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	e166      	b.n	8008db4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	0151      	lsls	r1, r2, #5
 8008af8:	69fa      	ldr	r2, [r7, #28]
 8008afa:	440a      	add	r2, r1
 8008afc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b00:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008b04:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	791b      	ldrb	r3, [r3, #4]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d015      	beq.n	8008b3a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	f000 814e 	beq.w	8008db4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	f003 030f 	and.w	r3, r3, #15
 8008b28:	2101      	movs	r1, #1
 8008b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b2e:	69f9      	ldr	r1, [r7, #28]
 8008b30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b34:	4313      	orrs	r3, r2
 8008b36:	634b      	str	r3, [r1, #52]	@ 0x34
 8008b38:	e13c      	b.n	8008db4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d110      	bne.n	8008b6c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008b68:	6013      	str	r3, [r2, #0]
 8008b6a:	e00f      	b.n	8008b8c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b6c:	69bb      	ldr	r3, [r7, #24]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	69fa      	ldr	r2, [r7, #28]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008b86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b8a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	68d9      	ldr	r1, [r3, #12]
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	781a      	ldrb	r2, [r3, #0]
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	b298      	uxth	r0, r3
 8008b9a:	79fb      	ldrb	r3, [r7, #7]
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f000 f9b9 	bl	8008f18 <USB_WritePacket>
 8008ba6:	e105      	b.n	8008db4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bb4:	691b      	ldr	r3, [r3, #16]
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	0151      	lsls	r1, r2, #5
 8008bba:	69fa      	ldr	r2, [r7, #28]
 8008bbc:	440a      	add	r2, r1
 8008bbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bc2:	0cdb      	lsrs	r3, r3, #19
 8008bc4:	04db      	lsls	r3, r3, #19
 8008bc6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	0151      	lsls	r1, r2, #5
 8008bda:	69fa      	ldr	r2, [r7, #28]
 8008bdc:	440a      	add	r2, r1
 8008bde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008be2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008be6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008bea:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d132      	bne.n	8008c58 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d003      	beq.n	8008c02 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	689a      	ldr	r2, [r3, #8]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	689a      	ldr	r2, [r3, #8]
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c16:	691a      	ldr	r2, [r3, #16]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6a1b      	ldr	r3, [r3, #32]
 8008c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c20:	69b9      	ldr	r1, [r7, #24]
 8008c22:	0148      	lsls	r0, r1, #5
 8008c24:	69f9      	ldr	r1, [r7, #28]
 8008c26:	4401      	add	r1, r0
 8008c28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	015a      	lsls	r2, r3, #5
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	4413      	add	r3, r2
 8008c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	0151      	lsls	r1, r2, #5
 8008c42:	69fa      	ldr	r2, [r7, #28]
 8008c44:	440a      	add	r2, r1
 8008c46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c4e:	6113      	str	r3, [r2, #16]
 8008c50:	e062      	b.n	8008d18 <USB_EPStartXfer+0x490>
 8008c52:	bf00      	nop
 8008c54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d123      	bne.n	8008ca8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c6c:	691a      	ldr	r2, [r3, #16]
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	689b      	ldr	r3, [r3, #8]
 8008c72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c76:	69b9      	ldr	r1, [r7, #24]
 8008c78:	0148      	lsls	r0, r1, #5
 8008c7a:	69f9      	ldr	r1, [r7, #28]
 8008c7c:	4401      	add	r1, r0
 8008c7e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008c82:	4313      	orrs	r3, r2
 8008c84:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	015a      	lsls	r2, r3, #5
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	69fa      	ldr	r2, [r7, #28]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ca0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ca4:	6113      	str	r3, [r2, #16]
 8008ca6:	e037      	b.n	8008d18 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	691a      	ldr	r2, [r3, #16]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	689b      	ldr	r3, [r3, #8]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	1e5a      	subs	r2, r3, #1
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	8afa      	ldrh	r2, [r7, #22]
 8008cc4:	fb03 f202 	mul.w	r2, r3, r2
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cd8:	691a      	ldr	r2, [r3, #16]
 8008cda:	8afb      	ldrh	r3, [r7, #22]
 8008cdc:	04d9      	lsls	r1, r3, #19
 8008cde:	4b38      	ldr	r3, [pc, #224]	@ (8008dc0 <USB_EPStartXfer+0x538>)
 8008ce0:	400b      	ands	r3, r1
 8008ce2:	69b9      	ldr	r1, [r7, #24]
 8008ce4:	0148      	lsls	r0, r1, #5
 8008ce6:	69f9      	ldr	r1, [r7, #28]
 8008ce8:	4401      	add	r1, r0
 8008cea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008cf2:	69bb      	ldr	r3, [r7, #24]
 8008cf4:	015a      	lsls	r2, r3, #5
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	6a1b      	ldr	r3, [r3, #32]
 8008d04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d08:	69b9      	ldr	r1, [r7, #24]
 8008d0a:	0148      	lsls	r0, r1, #5
 8008d0c:	69f9      	ldr	r1, [r7, #28]
 8008d0e:	4401      	add	r1, r0
 8008d10:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008d14:	4313      	orrs	r3, r2
 8008d16:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d10d      	bne.n	8008d3a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d009      	beq.n	8008d3a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	68d9      	ldr	r1, [r3, #12]
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d36:	460a      	mov	r2, r1
 8008d38:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	791b      	ldrb	r3, [r3, #4]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d128      	bne.n	8008d94 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d48:	689b      	ldr	r3, [r3, #8]
 8008d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d110      	bne.n	8008d74 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	0151      	lsls	r1, r2, #5
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	440a      	add	r2, r1
 8008d68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008d70:	6013      	str	r3, [r2, #0]
 8008d72:	e00f      	b.n	8008d94 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	69ba      	ldr	r2, [r7, #24]
 8008d84:	0151      	lsls	r1, r2, #5
 8008d86:	69fa      	ldr	r2, [r7, #28]
 8008d88:	440a      	add	r2, r1
 8008d8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008d92:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008dae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008db2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3720      	adds	r7, #32
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	1ff80000 	.word	0x1ff80000

08008dc4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
 8008dcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	785b      	ldrb	r3, [r3, #1]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d14a      	bne.n	8008e78 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	015a      	lsls	r2, r3, #5
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	4413      	add	r3, r2
 8008dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008df6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008dfa:	f040 8086 	bne.w	8008f0a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	781b      	ldrb	r3, [r3, #0]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	7812      	ldrb	r2, [r2, #0]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e1c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008e20:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	781b      	ldrb	r3, [r3, #0]
 8008e26:	015a      	lsls	r2, r3, #5
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	683a      	ldr	r2, [r7, #0]
 8008e34:	7812      	ldrb	r2, [r2, #0]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e40:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e44:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	3301      	adds	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d902      	bls.n	8008e5c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	75fb      	strb	r3, [r7, #23]
          break;
 8008e5a:	e056      	b.n	8008f0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e74:	d0e7      	beq.n	8008e46 <USB_EPStopXfer+0x82>
 8008e76:	e048      	b.n	8008f0a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e90:	d13b      	bne.n	8008f0a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	7812      	ldrb	r2, [r2, #0]
 8008ea6:	0151      	lsls	r1, r2, #5
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	440a      	add	r2, r1
 8008eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008eb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008eb4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	683a      	ldr	r2, [r7, #0]
 8008ec8:	7812      	ldrb	r2, [r2, #0]
 8008eca:	0151      	lsls	r1, r2, #5
 8008ecc:	693a      	ldr	r2, [r7, #16]
 8008ece:	440a      	add	r2, r1
 8008ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ed4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ed8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	3301      	adds	r3, #1
 8008ede:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d902      	bls.n	8008ef0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	75fb      	strb	r3, [r7, #23]
          break;
 8008eee:	e00c      	b.n	8008f0a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f08:	d0e7      	beq.n	8008eda <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	371c      	adds	r7, #28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr

08008f18 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008f18:	b480      	push	{r7}
 8008f1a:	b089      	sub	sp, #36	@ 0x24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	4611      	mov	r1, r2
 8008f24:	461a      	mov	r2, r3
 8008f26:	460b      	mov	r3, r1
 8008f28:	71fb      	strb	r3, [r7, #7]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008f36:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d123      	bne.n	8008f86 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008f3e:	88bb      	ldrh	r3, [r7, #4]
 8008f40:	3303      	adds	r3, #3
 8008f42:	089b      	lsrs	r3, r3, #2
 8008f44:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	e018      	b.n	8008f7e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	031a      	lsls	r2, r3, #12
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008f58:	461a      	mov	r2, r3
 8008f5a:	69fb      	ldr	r3, [r7, #28]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	3301      	adds	r3, #1
 8008f64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f6c:	69fb      	ldr	r3, [r7, #28]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	3301      	adds	r3, #1
 8008f76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	61bb      	str	r3, [r7, #24]
 8008f7e:	69ba      	ldr	r2, [r7, #24]
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d3e2      	bcc.n	8008f4c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008f86:	2300      	movs	r3, #0
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	3724      	adds	r7, #36	@ 0x24
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b08b      	sub	sp, #44	@ 0x2c
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008faa:	88fb      	ldrh	r3, [r7, #6]
 8008fac:	089b      	lsrs	r3, r3, #2
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008fb2:	88fb      	ldrh	r3, [r7, #6]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008fba:	2300      	movs	r3, #0
 8008fbc:	623b      	str	r3, [r7, #32]
 8008fbe:	e014      	b.n	8008fea <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fca:	601a      	str	r2, [r3, #0]
    pDest++;
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fce:	3301      	adds	r3, #1
 8008fd0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fda:	3301      	adds	r3, #1
 8008fdc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	623b      	str	r3, [r7, #32]
 8008fea:	6a3a      	ldr	r2, [r7, #32]
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d3e6      	bcc.n	8008fc0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008ff2:	8bfb      	ldrh	r3, [r7, #30]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01e      	beq.n	8009036 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008ffc:	69bb      	ldr	r3, [r7, #24]
 8008ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009002:	461a      	mov	r2, r3
 8009004:	f107 0310 	add.w	r3, r7, #16
 8009008:	6812      	ldr	r2, [r2, #0]
 800900a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	00db      	lsls	r3, r3, #3
 8009014:	fa22 f303 	lsr.w	r3, r2, r3
 8009018:	b2da      	uxtb	r2, r3
 800901a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901c:	701a      	strb	r2, [r3, #0]
      i++;
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	3301      	adds	r3, #1
 8009022:	623b      	str	r3, [r7, #32]
      pDest++;
 8009024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009026:	3301      	adds	r3, #1
 8009028:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800902a:	8bfb      	ldrh	r3, [r7, #30]
 800902c:	3b01      	subs	r3, #1
 800902e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009030:	8bfb      	ldrh	r3, [r7, #30]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1ea      	bne.n	800900c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009038:	4618      	mov	r0, r3
 800903a:	372c      	adds	r7, #44	@ 0x2c
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009044:	b480      	push	{r7}
 8009046:	b085      	sub	sp, #20
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	785b      	ldrb	r3, [r3, #1]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d12c      	bne.n	80090ba <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	db12      	blt.n	8009098 <USB_EPSetStall+0x54>
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00f      	beq.n	8009098 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	015a      	lsls	r2, r3, #5
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4413      	add	r3, r2
 8009080:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	68ba      	ldr	r2, [r7, #8]
 8009088:	0151      	lsls	r1, r2, #5
 800908a:	68fa      	ldr	r2, [r7, #12]
 800908c:	440a      	add	r2, r1
 800908e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009092:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009096:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	0151      	lsls	r1, r2, #5
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	440a      	add	r2, r1
 80090ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80090b2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	e02b      	b.n	8009112 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	db12      	blt.n	80090f2 <USB_EPSetStall+0xae>
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00f      	beq.n	80090f2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	015a      	lsls	r2, r3, #5
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4413      	add	r3, r2
 80090da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	0151      	lsls	r1, r2, #5
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	440a      	add	r2, r1
 80090e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80090ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80090f0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80090f2:	68bb      	ldr	r3, [r7, #8]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800910c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009110:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	785b      	ldrb	r3, [r3, #1]
 8009138:	2b01      	cmp	r3, #1
 800913a:	d128      	bne.n	800918e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	015a      	lsls	r2, r3, #5
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	4413      	add	r3, r2
 8009144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	0151      	lsls	r1, r2, #5
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	440a      	add	r2, r1
 8009152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009156:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800915a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	791b      	ldrb	r3, [r3, #4]
 8009160:	2b03      	cmp	r3, #3
 8009162:	d003      	beq.n	800916c <USB_EPClearStall+0x4c>
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	791b      	ldrb	r3, [r3, #4]
 8009168:	2b02      	cmp	r3, #2
 800916a:	d138      	bne.n	80091de <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	4413      	add	r3, r2
 8009174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	68ba      	ldr	r2, [r7, #8]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	440a      	add	r2, r1
 8009182:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009186:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	e027      	b.n	80091de <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	015a      	lsls	r2, r3, #5
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	0151      	lsls	r1, r2, #5
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	440a      	add	r2, r1
 80091a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091a8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091ac:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	791b      	ldrb	r3, [r3, #4]
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d003      	beq.n	80091be <USB_EPClearStall+0x9e>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	791b      	ldrb	r3, [r3, #4]
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d10f      	bne.n	80091de <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	015a      	lsls	r2, r3, #5
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	4413      	add	r3, r2
 80091c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	0151      	lsls	r1, r2, #5
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	440a      	add	r2, r1
 80091d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091dc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3714      	adds	r7, #20
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	68fa      	ldr	r2, [r7, #12]
 8009206:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800920a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800920e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009220:	68f9      	ldr	r1, [r7, #12]
 8009222:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009226:	4313      	orrs	r3, r2
 8009228:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800922a:	2300      	movs	r3, #0
}
 800922c:	4618      	mov	r0, r3
 800922e:	3714      	adds	r7, #20
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009252:	f023 0303 	bic.w	r3, r3, #3
 8009256:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009266:	f023 0302 	bic.w	r3, r3, #2
 800926a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	3714      	adds	r7, #20
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800927a:	b480      	push	{r7}
 800927c:	b085      	sub	sp, #20
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80092a8:	f043 0302 	orr.w	r3, r3, #2
 80092ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3714      	adds	r7, #20
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80092bc:	b480      	push	{r7}
 80092be:	b085      	sub	sp, #20
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	695b      	ldr	r3, [r3, #20]
 80092c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4013      	ands	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80092d4:	68fb      	ldr	r3, [r7, #12]
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80092e2:	b480      	push	{r7}
 80092e4:	b085      	sub	sp, #20
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092fe:	69db      	ldr	r3, [r3, #28]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	4013      	ands	r3, r2
 8009304:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	0c1b      	lsrs	r3, r3, #16
}
 800930a:	4618      	mov	r0, r3
 800930c:	3714      	adds	r7, #20
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009316:	b480      	push	{r7}
 8009318:	b085      	sub	sp, #20
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009328:	699b      	ldr	r3, [r3, #24]
 800932a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009332:	69db      	ldr	r3, [r3, #28]
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	4013      	ands	r3, r2
 8009338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	b29b      	uxth	r3, r3
}
 800933e:	4618      	mov	r0, r3
 8009340:	3714      	adds	r7, #20
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800934a:	b480      	push	{r7}
 800934c:	b085      	sub	sp, #20
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	460b      	mov	r3, r1
 8009354:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800935a:	78fb      	ldrb	r3, [r7, #3]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	68ba      	ldr	r2, [r7, #8]
 8009374:	4013      	ands	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009378:	68bb      	ldr	r3, [r7, #8]
}
 800937a:	4618      	mov	r0, r3
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009386:	b480      	push	{r7}
 8009388:	b087      	sub	sp, #28
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
 800938e:	460b      	mov	r3, r1
 8009390:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80093aa:	78fb      	ldrb	r3, [r7, #3]
 80093ac:	f003 030f 	and.w	r3, r3, #15
 80093b0:	68fa      	ldr	r2, [r7, #12]
 80093b2:	fa22 f303 	lsr.w	r3, r2, r3
 80093b6:	01db      	lsls	r3, r3, #7
 80093b8:	b2db      	uxtb	r3, r3
 80093ba:	693a      	ldr	r2, [r7, #16]
 80093bc:	4313      	orrs	r3, r2
 80093be:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80093c0:	78fb      	ldrb	r3, [r7, #3]
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093cc:	689b      	ldr	r3, [r3, #8]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	4013      	ands	r3, r2
 80093d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80093d4:	68bb      	ldr	r3, [r7, #8]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	371c      	adds	r7, #28
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b083      	sub	sp, #12
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	695b      	ldr	r3, [r3, #20]
 80093ee:	f003 0301 	and.w	r3, r3, #1
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fc:	4770      	bx	lr

080093fe <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80093fe:	b480      	push	{r7}
 8009400:	b085      	sub	sp, #20
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009418:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800941c:	f023 0307 	bic.w	r3, r3, #7
 8009420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009430:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3714      	adds	r7, #20
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	460b      	mov	r3, r1
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	333c      	adds	r3, #60	@ 0x3c
 800945a:	3304      	adds	r3, #4
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	4a26      	ldr	r2, [pc, #152]	@ (80094fc <USB_EP0_OutStart+0xb8>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d90a      	bls.n	800947e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009474:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009478:	d101      	bne.n	800947e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e037      	b.n	80094ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009484:	461a      	mov	r2, r3
 8009486:	2300      	movs	r3, #0
 8009488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800948a:	697b      	ldr	r3, [r7, #20]
 800948c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	697a      	ldr	r2, [r7, #20]
 8009494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009498:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800949c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	697a      	ldr	r2, [r7, #20]
 80094a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094ac:	f043 0318 	orr.w	r3, r3, #24
 80094b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094c0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80094c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80094c6:	7afb      	ldrb	r3, [r7, #11]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d10f      	bne.n	80094ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80094d8:	697b      	ldr	r3, [r7, #20]
 80094da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094e6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80094ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094ec:	2300      	movs	r3, #0
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	4f54300a 	.word	0x4f54300a

08009500 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009518:	d901      	bls.n	800951e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800951a:	2303      	movs	r3, #3
 800951c:	e01b      	b.n	8009556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	2b00      	cmp	r3, #0
 8009524:	daf2      	bge.n	800950c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009526:	2300      	movs	r3, #0
 8009528:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	f043 0201 	orr.w	r2, r3, #1
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	3301      	adds	r3, #1
 800953a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009542:	d901      	bls.n	8009548 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009544:	2303      	movs	r3, #3
 8009546:	e006      	b.n	8009556 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	f003 0301 	and.w	r3, r3, #1
 8009550:	2b01      	cmp	r3, #1
 8009552:	d0f0      	beq.n	8009536 <USB_CoreReset+0x36>

  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr
	...

08009564 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b084      	sub	sp, #16
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	460b      	mov	r3, r1
 800956e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009570:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009574:	f006 f99e 	bl	800f8b4 <USBD_static_malloc>
 8009578:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d109      	bne.n	8009594 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	32b0      	adds	r2, #176	@ 0xb0
 800958a:	2100      	movs	r1, #0
 800958c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009590:	2302      	movs	r3, #2
 8009592:	e0d4      	b.n	800973e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009594:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009598:	2100      	movs	r1, #0
 800959a:	68f8      	ldr	r0, [r7, #12]
 800959c:	f006 f9ee 	bl	800f97c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	32b0      	adds	r2, #176	@ 0xb0
 80095aa:	68f9      	ldr	r1, [r7, #12]
 80095ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	32b0      	adds	r2, #176	@ 0xb0
 80095ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	7c1b      	ldrb	r3, [r3, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d138      	bne.n	800963e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80095cc:	4b5e      	ldr	r3, [pc, #376]	@ (8009748 <USBD_CDC_Init+0x1e4>)
 80095ce:	7819      	ldrb	r1, [r3, #0]
 80095d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095d4:	2202      	movs	r2, #2
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f006 f849 	bl	800f66e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80095dc:	4b5a      	ldr	r3, [pc, #360]	@ (8009748 <USBD_CDC_Init+0x1e4>)
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	f003 020f 	and.w	r2, r3, #15
 80095e4:	6879      	ldr	r1, [r7, #4]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	440b      	add	r3, r1
 80095f0:	3324      	adds	r3, #36	@ 0x24
 80095f2:	2201      	movs	r2, #1
 80095f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80095f6:	4b55      	ldr	r3, [pc, #340]	@ (800974c <USBD_CDC_Init+0x1e8>)
 80095f8:	7819      	ldrb	r1, [r3, #0]
 80095fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095fe:	2202      	movs	r2, #2
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f006 f834 	bl	800f66e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009606:	4b51      	ldr	r3, [pc, #324]	@ (800974c <USBD_CDC_Init+0x1e8>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	f003 020f 	and.w	r2, r3, #15
 800960e:	6879      	ldr	r1, [r7, #4]
 8009610:	4613      	mov	r3, r2
 8009612:	009b      	lsls	r3, r3, #2
 8009614:	4413      	add	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	440b      	add	r3, r1
 800961a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800961e:	2201      	movs	r2, #1
 8009620:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009622:	4b4b      	ldr	r3, [pc, #300]	@ (8009750 <USBD_CDC_Init+0x1ec>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 020f 	and.w	r2, r3, #15
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	3326      	adds	r3, #38	@ 0x26
 8009638:	2210      	movs	r2, #16
 800963a:	801a      	strh	r2, [r3, #0]
 800963c:	e035      	b.n	80096aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800963e:	4b42      	ldr	r3, [pc, #264]	@ (8009748 <USBD_CDC_Init+0x1e4>)
 8009640:	7819      	ldrb	r1, [r3, #0]
 8009642:	2340      	movs	r3, #64	@ 0x40
 8009644:	2202      	movs	r2, #2
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f006 f811 	bl	800f66e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800964c:	4b3e      	ldr	r3, [pc, #248]	@ (8009748 <USBD_CDC_Init+0x1e4>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	f003 020f 	and.w	r2, r3, #15
 8009654:	6879      	ldr	r1, [r7, #4]
 8009656:	4613      	mov	r3, r2
 8009658:	009b      	lsls	r3, r3, #2
 800965a:	4413      	add	r3, r2
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	440b      	add	r3, r1
 8009660:	3324      	adds	r3, #36	@ 0x24
 8009662:	2201      	movs	r2, #1
 8009664:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009666:	4b39      	ldr	r3, [pc, #228]	@ (800974c <USBD_CDC_Init+0x1e8>)
 8009668:	7819      	ldrb	r1, [r3, #0]
 800966a:	2340      	movs	r3, #64	@ 0x40
 800966c:	2202      	movs	r2, #2
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f005 fffd 	bl	800f66e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009674:	4b35      	ldr	r3, [pc, #212]	@ (800974c <USBD_CDC_Init+0x1e8>)
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	f003 020f 	and.w	r2, r3, #15
 800967c:	6879      	ldr	r1, [r7, #4]
 800967e:	4613      	mov	r3, r2
 8009680:	009b      	lsls	r3, r3, #2
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	440b      	add	r3, r1
 8009688:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800968c:	2201      	movs	r2, #1
 800968e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009690:	4b2f      	ldr	r3, [pc, #188]	@ (8009750 <USBD_CDC_Init+0x1ec>)
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	f003 020f 	and.w	r2, r3, #15
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	440b      	add	r3, r1
 80096a4:	3326      	adds	r3, #38	@ 0x26
 80096a6:	2210      	movs	r2, #16
 80096a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80096aa:	4b29      	ldr	r3, [pc, #164]	@ (8009750 <USBD_CDC_Init+0x1ec>)
 80096ac:	7819      	ldrb	r1, [r3, #0]
 80096ae:	2308      	movs	r3, #8
 80096b0:	2203      	movs	r2, #3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f005 ffdb 	bl	800f66e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80096b8:	4b25      	ldr	r3, [pc, #148]	@ (8009750 <USBD_CDC_Init+0x1ec>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	f003 020f 	and.w	r2, r3, #15
 80096c0:	6879      	ldr	r1, [r7, #4]
 80096c2:	4613      	mov	r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	440b      	add	r3, r1
 80096cc:	3324      	adds	r3, #36	@ 0x24
 80096ce:	2201      	movs	r2, #1
 80096d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	33b0      	adds	r3, #176	@ 0xb0
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2200      	movs	r2, #0
 80096fa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009708:	2302      	movs	r3, #2
 800970a:	e018      	b.n	800973e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	7c1b      	ldrb	r3, [r3, #16]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d10a      	bne.n	800972a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009714:	4b0d      	ldr	r3, [pc, #52]	@ (800974c <USBD_CDC_Init+0x1e8>)
 8009716:	7819      	ldrb	r1, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800971e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009722:	6878      	ldr	r0, [r7, #4]
 8009724:	f006 f892 	bl	800f84c <USBD_LL_PrepareReceive>
 8009728:	e008      	b.n	800973c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800972a:	4b08      	ldr	r3, [pc, #32]	@ (800974c <USBD_CDC_Init+0x1e8>)
 800972c:	7819      	ldrb	r1, [r3, #0]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009734:	2340      	movs	r3, #64	@ 0x40
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f006 f888 	bl	800f84c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	20000093 	.word	0x20000093
 800974c:	20000094 	.word	0x20000094
 8009750:	20000095 	.word	0x20000095

08009754 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	460b      	mov	r3, r1
 800975e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009760:	4b3a      	ldr	r3, [pc, #232]	@ (800984c <USBD_CDC_DeInit+0xf8>)
 8009762:	781b      	ldrb	r3, [r3, #0]
 8009764:	4619      	mov	r1, r3
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f005 ffa7 	bl	800f6ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800976c:	4b37      	ldr	r3, [pc, #220]	@ (800984c <USBD_CDC_DeInit+0xf8>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	f003 020f 	and.w	r2, r3, #15
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	4613      	mov	r3, r2
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	009b      	lsls	r3, r3, #2
 800977e:	440b      	add	r3, r1
 8009780:	3324      	adds	r3, #36	@ 0x24
 8009782:	2200      	movs	r2, #0
 8009784:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009786:	4b32      	ldr	r3, [pc, #200]	@ (8009850 <USBD_CDC_DeInit+0xfc>)
 8009788:	781b      	ldrb	r3, [r3, #0]
 800978a:	4619      	mov	r1, r3
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f005 ff94 	bl	800f6ba <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009792:	4b2f      	ldr	r3, [pc, #188]	@ (8009850 <USBD_CDC_DeInit+0xfc>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f003 020f 	and.w	r2, r3, #15
 800979a:	6879      	ldr	r1, [r7, #4]
 800979c:	4613      	mov	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	4413      	add	r3, r2
 80097a2:	009b      	lsls	r3, r3, #2
 80097a4:	440b      	add	r3, r1
 80097a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80097aa:	2200      	movs	r2, #0
 80097ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80097ae:	4b29      	ldr	r3, [pc, #164]	@ (8009854 <USBD_CDC_DeInit+0x100>)
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f005 ff80 	bl	800f6ba <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80097ba:	4b26      	ldr	r3, [pc, #152]	@ (8009854 <USBD_CDC_DeInit+0x100>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	f003 020f 	and.w	r2, r3, #15
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	440b      	add	r3, r1
 80097ce:	3324      	adds	r3, #36	@ 0x24
 80097d0:	2200      	movs	r2, #0
 80097d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80097d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009854 <USBD_CDC_DeInit+0x100>)
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	f003 020f 	and.w	r2, r3, #15
 80097dc:	6879      	ldr	r1, [r7, #4]
 80097de:	4613      	mov	r3, r2
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	440b      	add	r3, r1
 80097e8:	3326      	adds	r3, #38	@ 0x26
 80097ea:	2200      	movs	r2, #0
 80097ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	32b0      	adds	r2, #176	@ 0xb0
 80097f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01f      	beq.n	8009840 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	33b0      	adds	r3, #176	@ 0xb0
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	4413      	add	r3, r2
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	32b0      	adds	r2, #176	@ 0xb0
 800981e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009822:	4618      	mov	r0, r3
 8009824:	f006 f854 	bl	800f8d0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	32b0      	adds	r2, #176	@ 0xb0
 8009832:	2100      	movs	r1, #0
 8009834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2200      	movs	r2, #0
 800983c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20000093 	.word	0x20000093
 8009850:	20000094 	.word	0x20000094
 8009854:	20000095 	.word	0x20000095

08009858 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b086      	sub	sp, #24
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	32b0      	adds	r2, #176	@ 0xb0
 800986c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009870:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009876:	2300      	movs	r3, #0
 8009878:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009884:	2303      	movs	r3, #3
 8009886:	e0bf      	b.n	8009a08 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009890:	2b00      	cmp	r3, #0
 8009892:	d050      	beq.n	8009936 <USBD_CDC_Setup+0xde>
 8009894:	2b20      	cmp	r3, #32
 8009896:	f040 80af 	bne.w	80099f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	88db      	ldrh	r3, [r3, #6]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d03a      	beq.n	8009918 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	781b      	ldrb	r3, [r3, #0]
 80098a6:	b25b      	sxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	da1b      	bge.n	80098e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	33b0      	adds	r3, #176	@ 0xb0
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80098c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80098c4:	683a      	ldr	r2, [r7, #0]
 80098c6:	88d2      	ldrh	r2, [r2, #6]
 80098c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	88db      	ldrh	r3, [r3, #6]
 80098ce:	2b07      	cmp	r3, #7
 80098d0:	bf28      	it	cs
 80098d2:	2307      	movcs	r3, #7
 80098d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	89fa      	ldrh	r2, [r7, #14]
 80098da:	4619      	mov	r1, r3
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f001 fd93 	bl	800b408 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80098e2:	e090      	b.n	8009a06 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	785a      	ldrb	r2, [r3, #1]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	88db      	ldrh	r3, [r3, #6]
 80098f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80098f4:	d803      	bhi.n	80098fe <USBD_CDC_Setup+0xa6>
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	88db      	ldrh	r3, [r3, #6]
 80098fa:	b2da      	uxtb	r2, r3
 80098fc:	e000      	b.n	8009900 <USBD_CDC_Setup+0xa8>
 80098fe:	2240      	movs	r2, #64	@ 0x40
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009906:	6939      	ldr	r1, [r7, #16]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800990e:	461a      	mov	r2, r3
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f001 fda5 	bl	800b460 <USBD_CtlPrepareRx>
      break;
 8009916:	e076      	b.n	8009a06 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	33b0      	adds	r3, #176	@ 0xb0
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	685b      	ldr	r3, [r3, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	7850      	ldrb	r0, [r2, #1]
 800992e:	2200      	movs	r2, #0
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	4798      	blx	r3
      break;
 8009934:	e067      	b.n	8009a06 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	785b      	ldrb	r3, [r3, #1]
 800993a:	2b0b      	cmp	r3, #11
 800993c:	d851      	bhi.n	80099e2 <USBD_CDC_Setup+0x18a>
 800993e:	a201      	add	r2, pc, #4	@ (adr r2, 8009944 <USBD_CDC_Setup+0xec>)
 8009940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009944:	08009975 	.word	0x08009975
 8009948:	080099f1 	.word	0x080099f1
 800994c:	080099e3 	.word	0x080099e3
 8009950:	080099e3 	.word	0x080099e3
 8009954:	080099e3 	.word	0x080099e3
 8009958:	080099e3 	.word	0x080099e3
 800995c:	080099e3 	.word	0x080099e3
 8009960:	080099e3 	.word	0x080099e3
 8009964:	080099e3 	.word	0x080099e3
 8009968:	080099e3 	.word	0x080099e3
 800996c:	0800999f 	.word	0x0800999f
 8009970:	080099c9 	.word	0x080099c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800997a:	b2db      	uxtb	r3, r3
 800997c:	2b03      	cmp	r3, #3
 800997e:	d107      	bne.n	8009990 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009980:	f107 030a 	add.w	r3, r7, #10
 8009984:	2202      	movs	r2, #2
 8009986:	4619      	mov	r1, r3
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f001 fd3d 	bl	800b408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800998e:	e032      	b.n	80099f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f001 fcbb 	bl	800b30e <USBD_CtlError>
            ret = USBD_FAIL;
 8009998:	2303      	movs	r3, #3
 800999a:	75fb      	strb	r3, [r7, #23]
          break;
 800999c:	e02b      	b.n	80099f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099a4:	b2db      	uxtb	r3, r3
 80099a6:	2b03      	cmp	r3, #3
 80099a8:	d107      	bne.n	80099ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80099aa:	f107 030d 	add.w	r3, r7, #13
 80099ae:	2201      	movs	r2, #1
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 fd28 	bl	800b408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099b8:	e01d      	b.n	80099f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f001 fca6 	bl	800b30e <USBD_CtlError>
            ret = USBD_FAIL;
 80099c2:	2303      	movs	r3, #3
 80099c4:	75fb      	strb	r3, [r7, #23]
          break;
 80099c6:	e016      	b.n	80099f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b03      	cmp	r3, #3
 80099d2:	d00f      	beq.n	80099f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80099d4:	6839      	ldr	r1, [r7, #0]
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f001 fc99 	bl	800b30e <USBD_CtlError>
            ret = USBD_FAIL;
 80099dc:	2303      	movs	r3, #3
 80099de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099e0:	e008      	b.n	80099f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f001 fc92 	bl	800b30e <USBD_CtlError>
          ret = USBD_FAIL;
 80099ea:	2303      	movs	r3, #3
 80099ec:	75fb      	strb	r3, [r7, #23]
          break;
 80099ee:	e002      	b.n	80099f6 <USBD_CDC_Setup+0x19e>
          break;
 80099f0:	bf00      	nop
 80099f2:	e008      	b.n	8009a06 <USBD_CDC_Setup+0x1ae>
          break;
 80099f4:	bf00      	nop
      }
      break;
 80099f6:	e006      	b.n	8009a06 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f001 fc87 	bl	800b30e <USBD_CtlError>
      ret = USBD_FAIL;
 8009a00:	2303      	movs	r3, #3
 8009a02:	75fb      	strb	r3, [r7, #23]
      break;
 8009a04:	bf00      	nop
  }

  return (uint8_t)ret;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
 8009a18:	460b      	mov	r3, r1
 8009a1a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a22:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	32b0      	adds	r2, #176	@ 0xb0
 8009a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d101      	bne.n	8009a3a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e065      	b.n	8009b06 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	32b0      	adds	r2, #176	@ 0xb0
 8009a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a48:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a4a:	78fb      	ldrb	r3, [r7, #3]
 8009a4c:	f003 020f 	and.w	r2, r3, #15
 8009a50:	6879      	ldr	r1, [r7, #4]
 8009a52:	4613      	mov	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	009b      	lsls	r3, r3, #2
 8009a5a:	440b      	add	r3, r1
 8009a5c:	3318      	adds	r3, #24
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d02f      	beq.n	8009ac4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f003 020f 	and.w	r2, r3, #15
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	009b      	lsls	r3, r3, #2
 8009a70:	4413      	add	r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	3318      	adds	r3, #24
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	f003 010f 	and.w	r1, r3, #15
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	460b      	mov	r3, r1
 8009a84:	00db      	lsls	r3, r3, #3
 8009a86:	440b      	add	r3, r1
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	4403      	add	r3, r0
 8009a8c:	331c      	adds	r3, #28
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a94:	fb01 f303 	mul.w	r3, r1, r3
 8009a98:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d112      	bne.n	8009ac4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	f003 020f 	and.w	r2, r3, #15
 8009aa4:	6879      	ldr	r1, [r7, #4]
 8009aa6:	4613      	mov	r3, r2
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	3318      	adds	r3, #24
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009ab6:	78f9      	ldrb	r1, [r7, #3]
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2200      	movs	r2, #0
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f005 fea4 	bl	800f80a <USBD_LL_Transmit>
 8009ac2:	e01f      	b.n	8009b04 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	33b0      	adds	r3, #176	@ 0xb0
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	4413      	add	r3, r2
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d010      	beq.n	8009b04 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	33b0      	adds	r3, #176	@ 0xb0
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	4413      	add	r3, r2
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009afa:	68ba      	ldr	r2, [r7, #8]
 8009afc:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009b00:	78fa      	ldrb	r2, [r7, #3]
 8009b02:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3710      	adds	r7, #16
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b084      	sub	sp, #16
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	32b0      	adds	r2, #176	@ 0xb0
 8009b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b28:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	32b0      	adds	r2, #176	@ 0xb0
 8009b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d101      	bne.n	8009b40 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009b3c:	2303      	movs	r3, #3
 8009b3e:	e01a      	b.n	8009b76 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009b40:	78fb      	ldrb	r3, [r7, #3]
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f005 fea2 	bl	800f88e <USBD_LL_GetRxDataSize>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	33b0      	adds	r3, #176	@ 0xb0
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4413      	add	r3, r2
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	68db      	ldr	r3, [r3, #12]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009b6a:	68fa      	ldr	r2, [r7, #12]
 8009b6c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009b70:	4611      	mov	r1, r2
 8009b72:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3710      	adds	r7, #16
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	32b0      	adds	r2, #176	@ 0xb0
 8009b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d101      	bne.n	8009ba0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e024      	b.n	8009bea <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	33b0      	adds	r3, #176	@ 0xb0
 8009baa:	009b      	lsls	r3, r3, #2
 8009bac:	4413      	add	r3, r2
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d019      	beq.n	8009be8 <USBD_CDC_EP0_RxReady+0x6a>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009bba:	2bff      	cmp	r3, #255	@ 0xff
 8009bbc:	d014      	beq.n	8009be8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	33b0      	adds	r3, #176	@ 0xb0
 8009bc8:	009b      	lsls	r3, r3, #2
 8009bca:	4413      	add	r3, r2
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	68fa      	ldr	r2, [r7, #12]
 8009bd2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009bd6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009bde:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	22ff      	movs	r2, #255	@ 0xff
 8009be4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
	...

08009bf4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009bfc:	2182      	movs	r1, #130	@ 0x82
 8009bfe:	4818      	ldr	r0, [pc, #96]	@ (8009c60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c00:	f000 fd4f 	bl	800a6a2 <USBD_GetEpDesc>
 8009c04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c06:	2101      	movs	r1, #1
 8009c08:	4815      	ldr	r0, [pc, #84]	@ (8009c60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c0a:	f000 fd4a 	bl	800a6a2 <USBD_GetEpDesc>
 8009c0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c10:	2181      	movs	r1, #129	@ 0x81
 8009c12:	4813      	ldr	r0, [pc, #76]	@ (8009c60 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009c14:	f000 fd45 	bl	800a6a2 <USBD_GetEpDesc>
 8009c18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	2210      	movs	r2, #16
 8009c24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d006      	beq.n	8009c3a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c34:	711a      	strb	r2, [r3, #4]
 8009c36:	2200      	movs	r2, #0
 8009c38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d006      	beq.n	8009c4e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2200      	movs	r2, #0
 8009c44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c48:	711a      	strb	r2, [r3, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2243      	movs	r2, #67	@ 0x43
 8009c52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009c54:	4b02      	ldr	r3, [pc, #8]	@ (8009c60 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000050 	.word	0x20000050

08009c64 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009c6c:	2182      	movs	r1, #130	@ 0x82
 8009c6e:	4818      	ldr	r0, [pc, #96]	@ (8009cd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c70:	f000 fd17 	bl	800a6a2 <USBD_GetEpDesc>
 8009c74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009c76:	2101      	movs	r1, #1
 8009c78:	4815      	ldr	r0, [pc, #84]	@ (8009cd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c7a:	f000 fd12 	bl	800a6a2 <USBD_GetEpDesc>
 8009c7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009c80:	2181      	movs	r1, #129	@ 0x81
 8009c82:	4813      	ldr	r0, [pc, #76]	@ (8009cd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009c84:	f000 fd0d 	bl	800a6a2 <USBD_GetEpDesc>
 8009c88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	2210      	movs	r2, #16
 8009c94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d006      	beq.n	8009caa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009c9c:	693b      	ldr	r3, [r7, #16]
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	711a      	strb	r2, [r3, #4]
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	f042 0202 	orr.w	r2, r2, #2
 8009ca8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d006      	beq.n	8009cbe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	711a      	strb	r2, [r3, #4]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f042 0202 	orr.w	r2, r2, #2
 8009cbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2243      	movs	r2, #67	@ 0x43
 8009cc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009cc4:	4b02      	ldr	r3, [pc, #8]	@ (8009cd0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	20000050 	.word	0x20000050

08009cd4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009cdc:	2182      	movs	r1, #130	@ 0x82
 8009cde:	4818      	ldr	r0, [pc, #96]	@ (8009d40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ce0:	f000 fcdf 	bl	800a6a2 <USBD_GetEpDesc>
 8009ce4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	4815      	ldr	r0, [pc, #84]	@ (8009d40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009cea:	f000 fcda 	bl	800a6a2 <USBD_GetEpDesc>
 8009cee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009cf0:	2181      	movs	r1, #129	@ 0x81
 8009cf2:	4813      	ldr	r0, [pc, #76]	@ (8009d40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009cf4:	f000 fcd5 	bl	800a6a2 <USBD_GetEpDesc>
 8009cf8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d002      	beq.n	8009d06 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	2210      	movs	r2, #16
 8009d04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d006      	beq.n	8009d1a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d14:	711a      	strb	r2, [r3, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d006      	beq.n	8009d2e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2200      	movs	r2, #0
 8009d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d28:	711a      	strb	r2, [r3, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2243      	movs	r2, #67	@ 0x43
 8009d32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009d34:	4b02      	ldr	r3, [pc, #8]	@ (8009d40 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3718      	adds	r7, #24
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
 8009d3e:	bf00      	nop
 8009d40:	20000050 	.word	0x20000050

08009d44 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b083      	sub	sp, #12
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	220a      	movs	r2, #10
 8009d50:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009d52:	4b03      	ldr	r3, [pc, #12]	@ (8009d60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	2000000c 	.word	0x2000000c

08009d64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d74:	2303      	movs	r3, #3
 8009d76:	e009      	b.n	8009d8c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	33b0      	adds	r3, #176	@ 0xb0
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009d8a:	2300      	movs	r3, #0
}
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b087      	sub	sp, #28
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	32b0      	adds	r2, #176	@ 0xb0
 8009dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009db2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d101      	bne.n	8009dbe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	e008      	b.n	8009dd0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009dce:	2300      	movs	r3, #0
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	371c      	adds	r7, #28
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr

08009ddc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b085      	sub	sp, #20
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	32b0      	adds	r2, #176	@ 0xb0
 8009df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009dfc:	2303      	movs	r3, #3
 8009dfe:	e004      	b.n	8009e0a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009e08:	2300      	movs	r3, #0
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3714      	adds	r7, #20
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e14:	4770      	bx	lr
	...

08009e18 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	32b0      	adds	r2, #176	@ 0xb0
 8009e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009e30:	2301      	movs	r3, #1
 8009e32:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d101      	bne.n	8009e3e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	e025      	b.n	8009e8a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d11f      	bne.n	8009e88 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009e50:	4b10      	ldr	r3, [pc, #64]	@ (8009e94 <USBD_CDC_TransmitPacket+0x7c>)
 8009e52:	781b      	ldrb	r3, [r3, #0]
 8009e54:	f003 020f 	and.w	r2, r3, #15
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	4403      	add	r3, r0
 8009e6a:	3318      	adds	r3, #24
 8009e6c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009e6e:	4b09      	ldr	r3, [pc, #36]	@ (8009e94 <USBD_CDC_TransmitPacket+0x7c>)
 8009e70:	7819      	ldrb	r1, [r3, #0]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f005 fcc3 	bl	800f80a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3710      	adds	r7, #16
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
 8009e92:	bf00      	nop
 8009e94:	20000093 	.word	0x20000093

08009e98 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b084      	sub	sp, #16
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	32b0      	adds	r2, #176	@ 0xb0
 8009eaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	32b0      	adds	r2, #176	@ 0xb0
 8009eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e018      	b.n	8009ef8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	7c1b      	ldrb	r3, [r3, #16]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d10a      	bne.n	8009ee4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ece:	4b0c      	ldr	r3, [pc, #48]	@ (8009f00 <USBD_CDC_ReceivePacket+0x68>)
 8009ed0:	7819      	ldrb	r1, [r3, #0]
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ed8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f005 fcb5 	bl	800f84c <USBD_LL_PrepareReceive>
 8009ee2:	e008      	b.n	8009ef6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ee4:	4b06      	ldr	r3, [pc, #24]	@ (8009f00 <USBD_CDC_ReceivePacket+0x68>)
 8009ee6:	7819      	ldrb	r1, [r3, #0]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009eee:	2340      	movs	r3, #64	@ 0x40
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f005 fcab 	bl	800f84c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009ef6:	2300      	movs	r3, #0
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	20000094 	.word	0x20000094

08009f04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b086      	sub	sp, #24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d101      	bne.n	8009f1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f18:	2303      	movs	r3, #3
 8009f1a:	e01f      	b.n	8009f5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d003      	beq.n	8009f42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2201      	movs	r2, #1
 8009f46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	79fa      	ldrb	r2, [r7, #7]
 8009f4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f005 fb1f 	bl	800f594 <USBD_LL_Init>
 8009f56:	4603      	mov	r3, r0
 8009f58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b084      	sub	sp, #16
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f72:	683b      	ldr	r3, [r7, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d101      	bne.n	8009f7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e025      	b.n	8009fc8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	32ae      	adds	r2, #174	@ 0xae
 8009f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d00f      	beq.n	8009fb8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	32ae      	adds	r2, #174	@ 0xae
 8009fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fa8:	f107 020e 	add.w	r2, r7, #14
 8009fac:	4610      	mov	r0, r2
 8009fae:	4798      	blx	r3
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3710      	adds	r7, #16
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f005 fb2d 	bl	800f638 <USBD_LL_Start>
 8009fde:	4603      	mov	r3, r0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3708      	adds	r7, #8
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b083      	sub	sp, #12
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ff0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	370c      	adds	r7, #12
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	460b      	mov	r3, r1
 800a008:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a014:	2b00      	cmp	r3, #0
 800a016:	d009      	beq.n	800a02c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	6878      	ldr	r0, [r7, #4]
 800a026:	4798      	blx	r3
 800a028:	4603      	mov	r3, r0
 800a02a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a02c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a042:	2300      	movs	r3, #0
 800a044:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	78fa      	ldrb	r2, [r7, #3]
 800a050:	4611      	mov	r1, r2
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d001      	beq.n	800a060 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a05c:	2303      	movs	r3, #3
 800a05e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a060:	7bfb      	ldrb	r3, [r7, #15]
}
 800a062:	4618      	mov	r0, r3
 800a064:	3710      	adds	r7, #16
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}

0800a06a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b084      	sub	sp, #16
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
 800a072:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a07a:	6839      	ldr	r1, [r7, #0]
 800a07c:	4618      	mov	r0, r3
 800a07e:	f001 f90c 	bl	800b29a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a090:	461a      	mov	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a09e:	f003 031f 	and.w	r3, r3, #31
 800a0a2:	2b02      	cmp	r3, #2
 800a0a4:	d01a      	beq.n	800a0dc <USBD_LL_SetupStage+0x72>
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d822      	bhi.n	800a0f0 <USBD_LL_SetupStage+0x86>
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <USBD_LL_SetupStage+0x4a>
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d00a      	beq.n	800a0c8 <USBD_LL_SetupStage+0x5e>
 800a0b2:	e01d      	b.n	800a0f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fb63 	bl	800a788 <USBD_StdDevReq>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800a0c6:	e020      	b.n	800a10a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0ce:	4619      	mov	r1, r3
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 fbcb 	bl	800a86c <USBD_StdItfReq>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a0da:	e016      	b.n	800a10a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f000 fc2d 	bl	800a944 <USBD_StdEPReq>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ee:	e00c      	b.n	800a10a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a0f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f005 fafa 	bl	800f6f8 <USBD_LL_StallEP>
 800a104:	4603      	mov	r3, r0
 800a106:	73fb      	strb	r3, [r7, #15]
      break;
 800a108:	bf00      	nop
  }

  return ret;
 800a10a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	3710      	adds	r7, #16
 800a110:	46bd      	mov	sp, r7
 800a112:	bd80      	pop	{r7, pc}

0800a114 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b086      	sub	sp, #24
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	460b      	mov	r3, r1
 800a11e:	607a      	str	r2, [r7, #4]
 800a120:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a122:	2300      	movs	r3, #0
 800a124:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a126:	7afb      	ldrb	r3, [r7, #11]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d16e      	bne.n	800a20a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a132:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a13a:	2b03      	cmp	r3, #3
 800a13c:	f040 8098 	bne.w	800a270 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	689a      	ldr	r2, [r3, #8]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	68db      	ldr	r3, [r3, #12]
 800a148:	429a      	cmp	r2, r3
 800a14a:	d913      	bls.n	800a174 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	689a      	ldr	r2, [r3, #8]
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	1ad2      	subs	r2, r2, r3
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	68da      	ldr	r2, [r3, #12]
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	4293      	cmp	r3, r2
 800a164:	bf28      	it	cs
 800a166:	4613      	movcs	r3, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f001 f994 	bl	800b49a <USBD_CtlContinueRx>
 800a172:	e07d      	b.n	800a270 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a17a:	f003 031f 	and.w	r3, r3, #31
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d014      	beq.n	800a1ac <USBD_LL_DataOutStage+0x98>
 800a182:	2b02      	cmp	r3, #2
 800a184:	d81d      	bhi.n	800a1c2 <USBD_LL_DataOutStage+0xae>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d002      	beq.n	800a190 <USBD_LL_DataOutStage+0x7c>
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d003      	beq.n	800a196 <USBD_LL_DataOutStage+0x82>
 800a18e:	e018      	b.n	800a1c2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a190:	2300      	movs	r3, #0
 800a192:	75bb      	strb	r3, [r7, #22]
            break;
 800a194:	e018      	b.n	800a1c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	4619      	mov	r1, r3
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 fa64 	bl	800a66e <USBD_CoreFindIF>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	75bb      	strb	r3, [r7, #22]
            break;
 800a1aa:	e00d      	b.n	800a1c8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f000 fa66 	bl	800a688 <USBD_CoreFindEP>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75bb      	strb	r3, [r7, #22]
            break;
 800a1c0:	e002      	b.n	800a1c8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	75bb      	strb	r3, [r7, #22]
            break;
 800a1c6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a1c8:	7dbb      	ldrb	r3, [r7, #22]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d119      	bne.n	800a202 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d113      	bne.n	800a202 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a1da:	7dba      	ldrb	r2, [r7, #22]
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	32ae      	adds	r2, #174	@ 0xae
 800a1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00b      	beq.n	800a202 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a1ea:	7dba      	ldrb	r2, [r7, #22]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a1f2:	7dba      	ldrb	r2, [r7, #22]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	32ae      	adds	r2, #174	@ 0xae
 800a1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fc:	691b      	ldr	r3, [r3, #16]
 800a1fe:	68f8      	ldr	r0, [r7, #12]
 800a200:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f001 f95a 	bl	800b4bc <USBD_CtlSendStatus>
 800a208:	e032      	b.n	800a270 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a20a:	7afb      	ldrb	r3, [r7, #11]
 800a20c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4619      	mov	r1, r3
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 fa37 	bl	800a688 <USBD_CoreFindEP>
 800a21a:	4603      	mov	r3, r0
 800a21c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a21e:	7dbb      	ldrb	r3, [r7, #22]
 800a220:	2bff      	cmp	r3, #255	@ 0xff
 800a222:	d025      	beq.n	800a270 <USBD_LL_DataOutStage+0x15c>
 800a224:	7dbb      	ldrb	r3, [r7, #22]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d122      	bne.n	800a270 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a230:	b2db      	uxtb	r3, r3
 800a232:	2b03      	cmp	r3, #3
 800a234:	d117      	bne.n	800a266 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a236:	7dba      	ldrb	r2, [r7, #22]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	32ae      	adds	r2, #174	@ 0xae
 800a23c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a240:	699b      	ldr	r3, [r3, #24]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d00f      	beq.n	800a266 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a246:	7dba      	ldrb	r2, [r7, #22]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a24e:	7dba      	ldrb	r2, [r7, #22]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	32ae      	adds	r2, #174	@ 0xae
 800a254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	7afa      	ldrb	r2, [r7, #11]
 800a25c:	4611      	mov	r1, r2
 800a25e:	68f8      	ldr	r0, [r7, #12]
 800a260:	4798      	blx	r3
 800a262:	4603      	mov	r3, r0
 800a264:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d001      	beq.n	800a270 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a26c:	7dfb      	ldrb	r3, [r7, #23]
 800a26e:	e000      	b.n	800a272 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a270:	2300      	movs	r3, #0
}
 800a272:	4618      	mov	r0, r3
 800a274:	3718      	adds	r7, #24
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b086      	sub	sp, #24
 800a27e:	af00      	add	r7, sp, #0
 800a280:	60f8      	str	r0, [r7, #12]
 800a282:	460b      	mov	r3, r1
 800a284:	607a      	str	r2, [r7, #4]
 800a286:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a288:	7afb      	ldrb	r3, [r7, #11]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d16f      	bne.n	800a36e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	3314      	adds	r3, #20
 800a292:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a29a:	2b02      	cmp	r3, #2
 800a29c:	d15a      	bne.n	800a354 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	689a      	ldr	r2, [r3, #8]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d914      	bls.n	800a2d4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	689a      	ldr	r2, [r3, #8]
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	1ad2      	subs	r2, r2, r3
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	689b      	ldr	r3, [r3, #8]
 800a2bc:	461a      	mov	r2, r3
 800a2be:	6879      	ldr	r1, [r7, #4]
 800a2c0:	68f8      	ldr	r0, [r7, #12]
 800a2c2:	f001 f8bc 	bl	800b43e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f005 fabd 	bl	800f84c <USBD_LL_PrepareReceive>
 800a2d2:	e03f      	b.n	800a354 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	68da      	ldr	r2, [r3, #12]
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d11c      	bne.n	800a31a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	685a      	ldr	r2, [r3, #4]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d316      	bcc.n	800a31a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d20f      	bcs.n	800a31a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2100      	movs	r1, #0
 800a2fe:	68f8      	ldr	r0, [r7, #12]
 800a300:	f001 f89d 	bl	800b43e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a30c:	2300      	movs	r3, #0
 800a30e:	2200      	movs	r2, #0
 800a310:	2100      	movs	r1, #0
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f005 fa9a 	bl	800f84c <USBD_LL_PrepareReceive>
 800a318:	e01c      	b.n	800a354 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a320:	b2db      	uxtb	r3, r3
 800a322:	2b03      	cmp	r3, #3
 800a324:	d10f      	bne.n	800a346 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d009      	beq.n	800a346 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2200      	movs	r2, #0
 800a336:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	68f8      	ldr	r0, [r7, #12]
 800a344:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a346:	2180      	movs	r1, #128	@ 0x80
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f005 f9d5 	bl	800f6f8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f001 f8c7 	bl	800b4e2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d03a      	beq.n	800a3d4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a35e:	68f8      	ldr	r0, [r7, #12]
 800a360:	f7ff fe42 	bl	8009fe8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a36c:	e032      	b.n	800a3d4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a36e:	7afb      	ldrb	r3, [r7, #11]
 800a370:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a374:	b2db      	uxtb	r3, r3
 800a376:	4619      	mov	r1, r3
 800a378:	68f8      	ldr	r0, [r7, #12]
 800a37a:	f000 f985 	bl	800a688 <USBD_CoreFindEP>
 800a37e:	4603      	mov	r3, r0
 800a380:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	2bff      	cmp	r3, #255	@ 0xff
 800a386:	d025      	beq.n	800a3d4 <USBD_LL_DataInStage+0x15a>
 800a388:	7dfb      	ldrb	r3, [r7, #23]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d122      	bne.n	800a3d4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a394:	b2db      	uxtb	r3, r3
 800a396:	2b03      	cmp	r3, #3
 800a398:	d11c      	bne.n	800a3d4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a39a:	7dfa      	ldrb	r2, [r7, #23]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	32ae      	adds	r2, #174	@ 0xae
 800a3a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a4:	695b      	ldr	r3, [r3, #20]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d014      	beq.n	800a3d4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a3aa:	7dfa      	ldrb	r2, [r7, #23]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a3b2:	7dfa      	ldrb	r2, [r7, #23]
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	32ae      	adds	r2, #174	@ 0xae
 800a3b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	7afa      	ldrb	r2, [r7, #11]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	4798      	blx	r3
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a3ca:	7dbb      	ldrb	r3, [r7, #22]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a3d0:	7dbb      	ldrb	r3, [r7, #22]
 800a3d2:	e000      	b.n	800a3d6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}

0800a3de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a3de:	b580      	push	{r7, lr}
 800a3e0:	b084      	sub	sp, #16
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2201      	movs	r2, #1
 800a3ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a416:	2b00      	cmp	r3, #0
 800a418:	d014      	beq.n	800a444 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00e      	beq.n	800a444 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	6852      	ldr	r2, [r2, #4]
 800a432:	b2d2      	uxtb	r2, r2
 800a434:	4611      	mov	r1, r2
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	4798      	blx	r3
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a440:	2303      	movs	r3, #3
 800a442:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a444:	2340      	movs	r3, #64	@ 0x40
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f005 f90f 	bl	800f66e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2240      	movs	r2, #64	@ 0x40
 800a45c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a460:	2340      	movs	r3, #64	@ 0x40
 800a462:	2200      	movs	r2, #0
 800a464:	2180      	movs	r1, #128	@ 0x80
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f005 f901 	bl	800f66e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2240      	movs	r2, #64	@ 0x40
 800a476:	621a      	str	r2, [r3, #32]

  return ret;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
 800a48a:	460b      	mov	r3, r1
 800a48c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	78fa      	ldrb	r2, [r7, #3]
 800a492:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	2b04      	cmp	r3, #4
 800a4b4:	d006      	beq.n	800a4c4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4bc:	b2da      	uxtb	r2, r3
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2204      	movs	r2, #4
 800a4c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4e8:	b2db      	uxtb	r3, r3
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	d106      	bne.n	800a4fc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a4f4:	b2da      	uxtb	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a4fc:	2300      	movs	r3, #0
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b082      	sub	sp, #8
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a518:	b2db      	uxtb	r3, r3
 800a51a:	2b03      	cmp	r3, #3
 800a51c:	d110      	bne.n	800a540 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00b      	beq.n	800a540 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a52e:	69db      	ldr	r3, [r3, #28]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d005      	beq.n	800a540 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a53a:	69db      	ldr	r3, [r3, #28]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3708      	adds	r7, #8
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a54a:	b580      	push	{r7, lr}
 800a54c:	b082      	sub	sp, #8
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
 800a552:	460b      	mov	r3, r1
 800a554:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	32ae      	adds	r2, #174	@ 0xae
 800a560:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d101      	bne.n	800a56c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a568:	2303      	movs	r3, #3
 800a56a:	e01c      	b.n	800a5a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b03      	cmp	r3, #3
 800a576:	d115      	bne.n	800a5a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	32ae      	adds	r2, #174	@ 0xae
 800a582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a586:	6a1b      	ldr	r3, [r3, #32]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00b      	beq.n	800a5a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	32ae      	adds	r2, #174	@ 0xae
 800a596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a59a:	6a1b      	ldr	r3, [r3, #32]
 800a59c:	78fa      	ldrb	r2, [r7, #3]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a5a4:	2300      	movs	r3, #0
}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3708      	adds	r7, #8
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}

0800a5ae <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	32ae      	adds	r2, #174	@ 0xae
 800a5c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e01c      	b.n	800a60a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b03      	cmp	r3, #3
 800a5da:	d115      	bne.n	800a608 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	32ae      	adds	r2, #174	@ 0xae
 800a5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d00b      	beq.n	800a608 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	32ae      	adds	r2, #174	@ 0xae
 800a5fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a600:	78fa      	ldrb	r2, [r7, #3]
 800a602:	4611      	mov	r1, r2
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a612:	b480      	push	{r7}
 800a614:	b083      	sub	sp, #12
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00e      	beq.n	800a664 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	687a      	ldr	r2, [r7, #4]
 800a650:	6852      	ldr	r2, [r2, #4]
 800a652:	b2d2      	uxtb	r2, r2
 800a654:	4611      	mov	r1, r2
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	4798      	blx	r3
 800a65a:	4603      	mov	r3, r0
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d001      	beq.n	800a664 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a660:	2303      	movs	r3, #3
 800a662:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a664:	7bfb      	ldrb	r3, [r7, #15]
}
 800a666:	4618      	mov	r0, r3
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a66e:	b480      	push	{r7}
 800a670:	b083      	sub	sp, #12
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	460b      	mov	r3, r1
 800a678:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a67a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	460b      	mov	r3, r1
 800a692:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a694:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a696:	4618      	mov	r0, r3
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b086      	sub	sp, #24
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	885b      	ldrh	r3, [r3, #2]
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	7812      	ldrb	r2, [r2, #0]
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d91f      	bls.n	800a708 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	781b      	ldrb	r3, [r3, #0]
 800a6cc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a6ce:	e013      	b.n	800a6f8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a6d0:	f107 030a 	add.w	r3, r7, #10
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6978      	ldr	r0, [r7, #20]
 800a6d8:	f000 f81b 	bl	800a712 <USBD_GetNextDesc>
 800a6dc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	785b      	ldrb	r3, [r3, #1]
 800a6e2:	2b05      	cmp	r3, #5
 800a6e4:	d108      	bne.n	800a6f8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	789b      	ldrb	r3, [r3, #2]
 800a6ee:	78fa      	ldrb	r2, [r7, #3]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d008      	beq.n	800a706 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	885b      	ldrh	r3, [r3, #2]
 800a6fc:	b29a      	uxth	r2, r3
 800a6fe:	897b      	ldrh	r3, [r7, #10]
 800a700:	429a      	cmp	r2, r3
 800a702:	d8e5      	bhi.n	800a6d0 <USBD_GetEpDesc+0x2e>
 800a704:	e000      	b.n	800a708 <USBD_GetEpDesc+0x66>
          break;
 800a706:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a708:	693b      	ldr	r3, [r7, #16]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3718      	adds	r7, #24
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a712:	b480      	push	{r7}
 800a714:	b085      	sub	sp, #20
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	881b      	ldrh	r3, [r3, #0]
 800a724:	68fa      	ldr	r2, [r7, #12]
 800a726:	7812      	ldrb	r2, [r2, #0]
 800a728:	4413      	add	r3, r2
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	4413      	add	r3, r2
 800a73a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a73c:	68fb      	ldr	r3, [r7, #12]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b087      	sub	sp, #28
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	781b      	ldrb	r3, [r3, #0]
 800a75a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	3301      	adds	r3, #1
 800a760:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	781b      	ldrb	r3, [r3, #0]
 800a766:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a768:	8a3b      	ldrh	r3, [r7, #16]
 800a76a:	021b      	lsls	r3, r3, #8
 800a76c:	b21a      	sxth	r2, r3
 800a76e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a772:	4313      	orrs	r3, r2
 800a774:	b21b      	sxth	r3, r3
 800a776:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a778:	89fb      	ldrh	r3, [r7, #14]
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	371c      	adds	r7, #28
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
	...

0800a788 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b084      	sub	sp, #16
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a792:	2300      	movs	r3, #0
 800a794:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a79e:	2b40      	cmp	r3, #64	@ 0x40
 800a7a0:	d005      	beq.n	800a7ae <USBD_StdDevReq+0x26>
 800a7a2:	2b40      	cmp	r3, #64	@ 0x40
 800a7a4:	d857      	bhi.n	800a856 <USBD_StdDevReq+0xce>
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d00f      	beq.n	800a7ca <USBD_StdDevReq+0x42>
 800a7aa:	2b20      	cmp	r3, #32
 800a7ac:	d153      	bne.n	800a856 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	32ae      	adds	r2, #174	@ 0xae
 800a7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	6839      	ldr	r1, [r7, #0]
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	4798      	blx	r3
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c8:	e04a      	b.n	800a860 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	2b09      	cmp	r3, #9
 800a7d0:	d83b      	bhi.n	800a84a <USBD_StdDevReq+0xc2>
 800a7d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7d8 <USBD_StdDevReq+0x50>)
 800a7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7d8:	0800a82d 	.word	0x0800a82d
 800a7dc:	0800a841 	.word	0x0800a841
 800a7e0:	0800a84b 	.word	0x0800a84b
 800a7e4:	0800a837 	.word	0x0800a837
 800a7e8:	0800a84b 	.word	0x0800a84b
 800a7ec:	0800a80b 	.word	0x0800a80b
 800a7f0:	0800a801 	.word	0x0800a801
 800a7f4:	0800a84b 	.word	0x0800a84b
 800a7f8:	0800a823 	.word	0x0800a823
 800a7fc:	0800a815 	.word	0x0800a815
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a800:	6839      	ldr	r1, [r7, #0]
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 fa3c 	bl	800ac80 <USBD_GetDescriptor>
          break;
 800a808:	e024      	b.n	800a854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a80a:	6839      	ldr	r1, [r7, #0]
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f000 fba1 	bl	800af54 <USBD_SetAddress>
          break;
 800a812:	e01f      	b.n	800a854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fbe0 	bl	800afdc <USBD_SetConfig>
 800a81c:	4603      	mov	r3, r0
 800a81e:	73fb      	strb	r3, [r7, #15]
          break;
 800a820:	e018      	b.n	800a854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a822:	6839      	ldr	r1, [r7, #0]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 fc83 	bl	800b130 <USBD_GetConfig>
          break;
 800a82a:	e013      	b.n	800a854 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 fcb4 	bl	800b19c <USBD_GetStatus>
          break;
 800a834:	e00e      	b.n	800a854 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a836:	6839      	ldr	r1, [r7, #0]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f000 fce3 	bl	800b204 <USBD_SetFeature>
          break;
 800a83e:	e009      	b.n	800a854 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a840:	6839      	ldr	r1, [r7, #0]
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fd07 	bl	800b256 <USBD_ClrFeature>
          break;
 800a848:	e004      	b.n	800a854 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a84a:	6839      	ldr	r1, [r7, #0]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fd5e 	bl	800b30e <USBD_CtlError>
          break;
 800a852:	bf00      	nop
      }
      break;
 800a854:	e004      	b.n	800a860 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 fd58 	bl	800b30e <USBD_CtlError>
      break;
 800a85e:	bf00      	nop
  }

  return ret;
 800a860:	7bfb      	ldrb	r3, [r7, #15]
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
 800a86a:	bf00      	nop

0800a86c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a882:	2b40      	cmp	r3, #64	@ 0x40
 800a884:	d005      	beq.n	800a892 <USBD_StdItfReq+0x26>
 800a886:	2b40      	cmp	r3, #64	@ 0x40
 800a888:	d852      	bhi.n	800a930 <USBD_StdItfReq+0xc4>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d001      	beq.n	800a892 <USBD_StdItfReq+0x26>
 800a88e:	2b20      	cmp	r3, #32
 800a890:	d14e      	bne.n	800a930 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a898:	b2db      	uxtb	r3, r3
 800a89a:	3b01      	subs	r3, #1
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d840      	bhi.n	800a922 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	889b      	ldrh	r3, [r3, #4]
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d836      	bhi.n	800a918 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	889b      	ldrh	r3, [r3, #4]
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f7ff fedb 	bl	800a66e <USBD_CoreFindIF>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8bc:	7bbb      	ldrb	r3, [r7, #14]
 800a8be:	2bff      	cmp	r3, #255	@ 0xff
 800a8c0:	d01d      	beq.n	800a8fe <USBD_StdItfReq+0x92>
 800a8c2:	7bbb      	ldrb	r3, [r7, #14]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d11a      	bne.n	800a8fe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a8c8:	7bba      	ldrb	r2, [r7, #14]
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	32ae      	adds	r2, #174	@ 0xae
 800a8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d00f      	beq.n	800a8f8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a8d8:	7bba      	ldrb	r2, [r7, #14]
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8e0:	7bba      	ldrb	r2, [r7, #14]
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	32ae      	adds	r2, #174	@ 0xae
 800a8e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	6839      	ldr	r1, [r7, #0]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	4798      	blx	r3
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8f6:	e004      	b.n	800a902 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a8f8:	2303      	movs	r3, #3
 800a8fa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a8fc:	e001      	b.n	800a902 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a8fe:	2303      	movs	r3, #3
 800a900:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	88db      	ldrh	r3, [r3, #6]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d110      	bne.n	800a92c <USBD_StdItfReq+0xc0>
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d10d      	bne.n	800a92c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fdd3 	bl	800b4bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a916:	e009      	b.n	800a92c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a918:	6839      	ldr	r1, [r7, #0]
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f000 fcf7 	bl	800b30e <USBD_CtlError>
          break;
 800a920:	e004      	b.n	800a92c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fcf2 	bl	800b30e <USBD_CtlError>
          break;
 800a92a:	e000      	b.n	800a92e <USBD_StdItfReq+0xc2>
          break;
 800a92c:	bf00      	nop
      }
      break;
 800a92e:	e004      	b.n	800a93a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 fceb 	bl	800b30e <USBD_CtlError>
      break;
 800a938:	bf00      	nop
  }

  return ret;
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a94e:	2300      	movs	r3, #0
 800a950:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	889b      	ldrh	r3, [r3, #4]
 800a956:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a960:	2b40      	cmp	r3, #64	@ 0x40
 800a962:	d007      	beq.n	800a974 <USBD_StdEPReq+0x30>
 800a964:	2b40      	cmp	r3, #64	@ 0x40
 800a966:	f200 817f 	bhi.w	800ac68 <USBD_StdEPReq+0x324>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d02a      	beq.n	800a9c4 <USBD_StdEPReq+0x80>
 800a96e:	2b20      	cmp	r3, #32
 800a970:	f040 817a 	bne.w	800ac68 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	4619      	mov	r1, r3
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff fe85 	bl	800a688 <USBD_CoreFindEP>
 800a97e:	4603      	mov	r3, r0
 800a980:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a982:	7b7b      	ldrb	r3, [r7, #13]
 800a984:	2bff      	cmp	r3, #255	@ 0xff
 800a986:	f000 8174 	beq.w	800ac72 <USBD_StdEPReq+0x32e>
 800a98a:	7b7b      	ldrb	r3, [r7, #13]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f040 8170 	bne.w	800ac72 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a992:	7b7a      	ldrb	r2, [r7, #13]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a99a:	7b7a      	ldrb	r2, [r7, #13]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	32ae      	adds	r2, #174	@ 0xae
 800a9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8163 	beq.w	800ac72 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a9ac:	7b7a      	ldrb	r2, [r7, #13]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	32ae      	adds	r2, #174	@ 0xae
 800a9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	6839      	ldr	r1, [r7, #0]
 800a9ba:	6878      	ldr	r0, [r7, #4]
 800a9bc:	4798      	blx	r3
 800a9be:	4603      	mov	r3, r0
 800a9c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a9c2:	e156      	b.n	800ac72 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	785b      	ldrb	r3, [r3, #1]
 800a9c8:	2b03      	cmp	r3, #3
 800a9ca:	d008      	beq.n	800a9de <USBD_StdEPReq+0x9a>
 800a9cc:	2b03      	cmp	r3, #3
 800a9ce:	f300 8145 	bgt.w	800ac5c <USBD_StdEPReq+0x318>
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	f000 809b 	beq.w	800ab0e <USBD_StdEPReq+0x1ca>
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d03c      	beq.n	800aa56 <USBD_StdEPReq+0x112>
 800a9dc:	e13e      	b.n	800ac5c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b02      	cmp	r3, #2
 800a9e8:	d002      	beq.n	800a9f0 <USBD_StdEPReq+0xac>
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d016      	beq.n	800aa1c <USBD_StdEPReq+0xd8>
 800a9ee:	e02c      	b.n	800aa4a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00d      	beq.n	800aa12 <USBD_StdEPReq+0xce>
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
 800a9f8:	2b80      	cmp	r3, #128	@ 0x80
 800a9fa:	d00a      	beq.n	800aa12 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9fc:	7bbb      	ldrb	r3, [r7, #14]
 800a9fe:	4619      	mov	r1, r3
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f004 fe79 	bl	800f6f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa06:	2180      	movs	r1, #128	@ 0x80
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f004 fe75 	bl	800f6f8 <USBD_LL_StallEP>
 800aa0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa10:	e020      	b.n	800aa54 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800aa12:	6839      	ldr	r1, [r7, #0]
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 fc7a 	bl	800b30e <USBD_CtlError>
              break;
 800aa1a:	e01b      	b.n	800aa54 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	885b      	ldrh	r3, [r3, #2]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d10e      	bne.n	800aa42 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa24:	7bbb      	ldrb	r3, [r7, #14]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00b      	beq.n	800aa42 <USBD_StdEPReq+0xfe>
 800aa2a:	7bbb      	ldrb	r3, [r7, #14]
 800aa2c:	2b80      	cmp	r3, #128	@ 0x80
 800aa2e:	d008      	beq.n	800aa42 <USBD_StdEPReq+0xfe>
 800aa30:	683b      	ldr	r3, [r7, #0]
 800aa32:	88db      	ldrh	r3, [r3, #6]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d104      	bne.n	800aa42 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa38:	7bbb      	ldrb	r3, [r7, #14]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f004 fe5b 	bl	800f6f8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 fd3a 	bl	800b4bc <USBD_CtlSendStatus>

              break;
 800aa48:	e004      	b.n	800aa54 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800aa4a:	6839      	ldr	r1, [r7, #0]
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fc5e 	bl	800b30e <USBD_CtlError>
              break;
 800aa52:	bf00      	nop
          }
          break;
 800aa54:	e107      	b.n	800ac66 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	2b02      	cmp	r3, #2
 800aa60:	d002      	beq.n	800aa68 <USBD_StdEPReq+0x124>
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d016      	beq.n	800aa94 <USBD_StdEPReq+0x150>
 800aa66:	e04b      	b.n	800ab00 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa68:	7bbb      	ldrb	r3, [r7, #14]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00d      	beq.n	800aa8a <USBD_StdEPReq+0x146>
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b80      	cmp	r3, #128	@ 0x80
 800aa72:	d00a      	beq.n	800aa8a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	4619      	mov	r1, r3
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f004 fe3d 	bl	800f6f8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa7e:	2180      	movs	r1, #128	@ 0x80
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f004 fe39 	bl	800f6f8 <USBD_LL_StallEP>
 800aa86:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa88:	e040      	b.n	800ab0c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 fc3e 	bl	800b30e <USBD_CtlError>
              break;
 800aa92:	e03b      	b.n	800ab0c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	885b      	ldrh	r3, [r3, #2]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d136      	bne.n	800ab0a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa9c:	7bbb      	ldrb	r3, [r7, #14]
 800aa9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d004      	beq.n	800aab0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aaa6:	7bbb      	ldrb	r3, [r7, #14]
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f004 fe43 	bl	800f736 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 fd03 	bl	800b4bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f7ff fde4 	bl	800a688 <USBD_CoreFindEP>
 800aac0:	4603      	mov	r3, r0
 800aac2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aac4:	7b7b      	ldrb	r3, [r7, #13]
 800aac6:	2bff      	cmp	r3, #255	@ 0xff
 800aac8:	d01f      	beq.n	800ab0a <USBD_StdEPReq+0x1c6>
 800aaca:	7b7b      	ldrb	r3, [r7, #13]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d11c      	bne.n	800ab0a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aad0:	7b7a      	ldrb	r2, [r7, #13]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aad8:	7b7a      	ldrb	r2, [r7, #13]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	32ae      	adds	r2, #174	@ 0xae
 800aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d010      	beq.n	800ab0a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aae8:	7b7a      	ldrb	r2, [r7, #13]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	32ae      	adds	r2, #174	@ 0xae
 800aaee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	4798      	blx	r3
 800aafa:	4603      	mov	r3, r0
 800aafc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aafe:	e004      	b.n	800ab0a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fc03 	bl	800b30e <USBD_CtlError>
              break;
 800ab08:	e000      	b.n	800ab0c <USBD_StdEPReq+0x1c8>
              break;
 800ab0a:	bf00      	nop
          }
          break;
 800ab0c:	e0ab      	b.n	800ac66 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	2b02      	cmp	r3, #2
 800ab18:	d002      	beq.n	800ab20 <USBD_StdEPReq+0x1dc>
 800ab1a:	2b03      	cmp	r3, #3
 800ab1c:	d032      	beq.n	800ab84 <USBD_StdEPReq+0x240>
 800ab1e:	e097      	b.n	800ac50 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d007      	beq.n	800ab36 <USBD_StdEPReq+0x1f2>
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b80      	cmp	r3, #128	@ 0x80
 800ab2a:	d004      	beq.n	800ab36 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ab2c:	6839      	ldr	r1, [r7, #0]
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fbed 	bl	800b30e <USBD_CtlError>
                break;
 800ab34:	e091      	b.n	800ac5a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	da0b      	bge.n	800ab56 <USBD_StdEPReq+0x212>
 800ab3e:	7bbb      	ldrb	r3, [r7, #14]
 800ab40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ab44:	4613      	mov	r3, r2
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	4413      	add	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	3310      	adds	r3, #16
 800ab4e:	687a      	ldr	r2, [r7, #4]
 800ab50:	4413      	add	r3, r2
 800ab52:	3304      	adds	r3, #4
 800ab54:	e00b      	b.n	800ab6e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab56:	7bbb      	ldrb	r3, [r7, #14]
 800ab58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab5c:	4613      	mov	r3, r2
 800ab5e:	009b      	lsls	r3, r3, #2
 800ab60:	4413      	add	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	3304      	adds	r3, #4
 800ab6e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab70:	68bb      	ldr	r3, [r7, #8]
 800ab72:	2200      	movs	r2, #0
 800ab74:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2202      	movs	r2, #2
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6878      	ldr	r0, [r7, #4]
 800ab7e:	f000 fc43 	bl	800b408 <USBD_CtlSendData>
              break;
 800ab82:	e06a      	b.n	800ac5a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	da11      	bge.n	800abb0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab8c:	7bbb      	ldrb	r3, [r7, #14]
 800ab8e:	f003 020f 	and.w	r2, r3, #15
 800ab92:	6879      	ldr	r1, [r7, #4]
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	440b      	add	r3, r1
 800ab9e:	3324      	adds	r3, #36	@ 0x24
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d117      	bne.n	800abd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fbb0 	bl	800b30e <USBD_CtlError>
                  break;
 800abae:	e054      	b.n	800ac5a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800abb0:	7bbb      	ldrb	r3, [r7, #14]
 800abb2:	f003 020f 	and.w	r2, r3, #15
 800abb6:	6879      	ldr	r1, [r7, #4]
 800abb8:	4613      	mov	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4413      	add	r3, r2
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	440b      	add	r3, r1
 800abc2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d104      	bne.n	800abd6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fb9d 	bl	800b30e <USBD_CtlError>
                  break;
 800abd4:	e041      	b.n	800ac5a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	da0b      	bge.n	800abf6 <USBD_StdEPReq+0x2b2>
 800abde:	7bbb      	ldrb	r3, [r7, #14]
 800abe0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800abe4:	4613      	mov	r3, r2
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	3310      	adds	r3, #16
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	4413      	add	r3, r2
 800abf2:	3304      	adds	r3, #4
 800abf4:	e00b      	b.n	800ac0e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abf6:	7bbb      	ldrb	r3, [r7, #14]
 800abf8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abfc:	4613      	mov	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	4413      	add	r3, r2
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ac10:	7bbb      	ldrb	r3, [r7, #14]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d002      	beq.n	800ac1c <USBD_StdEPReq+0x2d8>
 800ac16:	7bbb      	ldrb	r3, [r7, #14]
 800ac18:	2b80      	cmp	r3, #128	@ 0x80
 800ac1a:	d103      	bne.n	800ac24 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	e00e      	b.n	800ac42 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ac24:	7bbb      	ldrb	r3, [r7, #14]
 800ac26:	4619      	mov	r1, r3
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f004 fda3 	bl	800f774 <USBD_LL_IsStallEP>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d003      	beq.n	800ac3c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	2201      	movs	r2, #1
 800ac38:	601a      	str	r2, [r3, #0]
 800ac3a:	e002      	b.n	800ac42 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	2202      	movs	r2, #2
 800ac46:	4619      	mov	r1, r3
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fbdd 	bl	800b408 <USBD_CtlSendData>
              break;
 800ac4e:	e004      	b.n	800ac5a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ac50:	6839      	ldr	r1, [r7, #0]
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fb5b 	bl	800b30e <USBD_CtlError>
              break;
 800ac58:	bf00      	nop
          }
          break;
 800ac5a:	e004      	b.n	800ac66 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb55 	bl	800b30e <USBD_CtlError>
          break;
 800ac64:	bf00      	nop
      }
      break;
 800ac66:	e005      	b.n	800ac74 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ac68:	6839      	ldr	r1, [r7, #0]
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fb4f 	bl	800b30e <USBD_CtlError>
      break;
 800ac70:	e000      	b.n	800ac74 <USBD_StdEPReq+0x330>
      break;
 800ac72:	bf00      	nop
  }

  return ret;
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3710      	adds	r7, #16
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
	...

0800ac80 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
 800ac88:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	885b      	ldrh	r3, [r3, #2]
 800ac9a:	0a1b      	lsrs	r3, r3, #8
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	2b06      	cmp	r3, #6
 800aca2:	f200 8128 	bhi.w	800aef6 <USBD_GetDescriptor+0x276>
 800aca6:	a201      	add	r2, pc, #4	@ (adr r2, 800acac <USBD_GetDescriptor+0x2c>)
 800aca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acac:	0800acc9 	.word	0x0800acc9
 800acb0:	0800ace1 	.word	0x0800ace1
 800acb4:	0800ad21 	.word	0x0800ad21
 800acb8:	0800aef7 	.word	0x0800aef7
 800acbc:	0800aef7 	.word	0x0800aef7
 800acc0:	0800ae97 	.word	0x0800ae97
 800acc4:	0800aec3 	.word	0x0800aec3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	7c12      	ldrb	r2, [r2, #16]
 800acd4:	f107 0108 	add.w	r1, r7, #8
 800acd8:	4610      	mov	r0, r2
 800acda:	4798      	blx	r3
 800acdc:	60f8      	str	r0, [r7, #12]
      break;
 800acde:	e112      	b.n	800af06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	7c1b      	ldrb	r3, [r3, #16]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10d      	bne.n	800ad04 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acf0:	f107 0208 	add.w	r2, r7, #8
 800acf4:	4610      	mov	r0, r2
 800acf6:	4798      	blx	r3
 800acf8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	3301      	adds	r3, #1
 800acfe:	2202      	movs	r2, #2
 800ad00:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad02:	e100      	b.n	800af06 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ad0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad0c:	f107 0208 	add.w	r2, r7, #8
 800ad10:	4610      	mov	r0, r2
 800ad12:	4798      	blx	r3
 800ad14:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	3301      	adds	r3, #1
 800ad1a:	2202      	movs	r2, #2
 800ad1c:	701a      	strb	r2, [r3, #0]
      break;
 800ad1e:	e0f2      	b.n	800af06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	885b      	ldrh	r3, [r3, #2]
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	2b05      	cmp	r3, #5
 800ad28:	f200 80ac 	bhi.w	800ae84 <USBD_GetDescriptor+0x204>
 800ad2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad34 <USBD_GetDescriptor+0xb4>)
 800ad2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad32:	bf00      	nop
 800ad34:	0800ad4d 	.word	0x0800ad4d
 800ad38:	0800ad81 	.word	0x0800ad81
 800ad3c:	0800adb5 	.word	0x0800adb5
 800ad40:	0800ade9 	.word	0x0800ade9
 800ad44:	0800ae1d 	.word	0x0800ae1d
 800ad48:	0800ae51 	.word	0x0800ae51
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad52:	685b      	ldr	r3, [r3, #4]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d00b      	beq.n	800ad70 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	7c12      	ldrb	r2, [r2, #16]
 800ad64:	f107 0108 	add.w	r1, r7, #8
 800ad68:	4610      	mov	r0, r2
 800ad6a:	4798      	blx	r3
 800ad6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad6e:	e091      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ad70:	6839      	ldr	r1, [r7, #0]
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 facb 	bl	800b30e <USBD_CtlError>
            err++;
 800ad78:	7afb      	ldrb	r3, [r7, #11]
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	72fb      	strb	r3, [r7, #11]
          break;
 800ad7e:	e089      	b.n	800ae94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad86:	689b      	ldr	r3, [r3, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00b      	beq.n	800ada4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	687a      	ldr	r2, [r7, #4]
 800ad96:	7c12      	ldrb	r2, [r2, #16]
 800ad98:	f107 0108 	add.w	r1, r7, #8
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	4798      	blx	r3
 800ada0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ada2:	e077      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ada4:	6839      	ldr	r1, [r7, #0]
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fab1 	bl	800b30e <USBD_CtlError>
            err++;
 800adac:	7afb      	ldrb	r3, [r7, #11]
 800adae:	3301      	adds	r3, #1
 800adb0:	72fb      	strb	r3, [r7, #11]
          break;
 800adb2:	e06f      	b.n	800ae94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00b      	beq.n	800add8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	7c12      	ldrb	r2, [r2, #16]
 800adcc:	f107 0108 	add.w	r1, r7, #8
 800add0:	4610      	mov	r0, r2
 800add2:	4798      	blx	r3
 800add4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800add6:	e05d      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f000 fa97 	bl	800b30e <USBD_CtlError>
            err++;
 800ade0:	7afb      	ldrb	r3, [r7, #11]
 800ade2:	3301      	adds	r3, #1
 800ade4:	72fb      	strb	r3, [r7, #11]
          break;
 800ade6:	e055      	b.n	800ae94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00b      	beq.n	800ae0c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	7c12      	ldrb	r2, [r2, #16]
 800ae00:	f107 0108 	add.w	r1, r7, #8
 800ae04:	4610      	mov	r0, r2
 800ae06:	4798      	blx	r3
 800ae08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae0a:	e043      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fa7d 	bl	800b30e <USBD_CtlError>
            err++;
 800ae14:	7afb      	ldrb	r3, [r7, #11]
 800ae16:	3301      	adds	r3, #1
 800ae18:	72fb      	strb	r3, [r7, #11]
          break;
 800ae1a:	e03b      	b.n	800ae94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae22:	695b      	ldr	r3, [r3, #20]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00b      	beq.n	800ae40 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae2e:	695b      	ldr	r3, [r3, #20]
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	7c12      	ldrb	r2, [r2, #16]
 800ae34:	f107 0108 	add.w	r1, r7, #8
 800ae38:	4610      	mov	r0, r2
 800ae3a:	4798      	blx	r3
 800ae3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae3e:	e029      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae40:	6839      	ldr	r1, [r7, #0]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 fa63 	bl	800b30e <USBD_CtlError>
            err++;
 800ae48:	7afb      	ldrb	r3, [r7, #11]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae4e:	e021      	b.n	800ae94 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae56:	699b      	ldr	r3, [r3, #24]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00b      	beq.n	800ae74 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	687a      	ldr	r2, [r7, #4]
 800ae66:	7c12      	ldrb	r2, [r2, #16]
 800ae68:	f107 0108 	add.w	r1, r7, #8
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	4798      	blx	r3
 800ae70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae72:	e00f      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae74:	6839      	ldr	r1, [r7, #0]
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f000 fa49 	bl	800b30e <USBD_CtlError>
            err++;
 800ae7c:	7afb      	ldrb	r3, [r7, #11]
 800ae7e:	3301      	adds	r3, #1
 800ae80:	72fb      	strb	r3, [r7, #11]
          break;
 800ae82:	e007      	b.n	800ae94 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae84:	6839      	ldr	r1, [r7, #0]
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fa41 	bl	800b30e <USBD_CtlError>
          err++;
 800ae8c:	7afb      	ldrb	r3, [r7, #11]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ae92:	bf00      	nop
      }
      break;
 800ae94:	e037      	b.n	800af06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	7c1b      	ldrb	r3, [r3, #16]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aea6:	f107 0208 	add.w	r2, r7, #8
 800aeaa:	4610      	mov	r0, r2
 800aeac:	4798      	blx	r3
 800aeae:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aeb0:	e029      	b.n	800af06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aeb2:	6839      	ldr	r1, [r7, #0]
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 fa2a 	bl	800b30e <USBD_CtlError>
        err++;
 800aeba:	7afb      	ldrb	r3, [r7, #11]
 800aebc:	3301      	adds	r3, #1
 800aebe:	72fb      	strb	r3, [r7, #11]
      break;
 800aec0:	e021      	b.n	800af06 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	7c1b      	ldrb	r3, [r3, #16]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10d      	bne.n	800aee6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aed2:	f107 0208 	add.w	r2, r7, #8
 800aed6:	4610      	mov	r0, r2
 800aed8:	4798      	blx	r3
 800aeda:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3301      	adds	r3, #1
 800aee0:	2207      	movs	r2, #7
 800aee2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aee4:	e00f      	b.n	800af06 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fa10 	bl	800b30e <USBD_CtlError>
        err++;
 800aeee:	7afb      	ldrb	r3, [r7, #11]
 800aef0:	3301      	adds	r3, #1
 800aef2:	72fb      	strb	r3, [r7, #11]
      break;
 800aef4:	e007      	b.n	800af06 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fa08 	bl	800b30e <USBD_CtlError>
      err++;
 800aefe:	7afb      	ldrb	r3, [r7, #11]
 800af00:	3301      	adds	r3, #1
 800af02:	72fb      	strb	r3, [r7, #11]
      break;
 800af04:	bf00      	nop
  }

  if (err != 0U)
 800af06:	7afb      	ldrb	r3, [r7, #11]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d11e      	bne.n	800af4a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	88db      	ldrh	r3, [r3, #6]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d016      	beq.n	800af42 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800af14:	893b      	ldrh	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00e      	beq.n	800af38 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	88da      	ldrh	r2, [r3, #6]
 800af1e:	893b      	ldrh	r3, [r7, #8]
 800af20:	4293      	cmp	r3, r2
 800af22:	bf28      	it	cs
 800af24:	4613      	movcs	r3, r2
 800af26:	b29b      	uxth	r3, r3
 800af28:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af2a:	893b      	ldrh	r3, [r7, #8]
 800af2c:	461a      	mov	r2, r3
 800af2e:	68f9      	ldr	r1, [r7, #12]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 fa69 	bl	800b408 <USBD_CtlSendData>
 800af36:	e009      	b.n	800af4c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af38:	6839      	ldr	r1, [r7, #0]
 800af3a:	6878      	ldr	r0, [r7, #4]
 800af3c:	f000 f9e7 	bl	800b30e <USBD_CtlError>
 800af40:	e004      	b.n	800af4c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 faba 	bl	800b4bc <USBD_CtlSendStatus>
 800af48:	e000      	b.n	800af4c <USBD_GetDescriptor+0x2cc>
    return;
 800af4a:	bf00      	nop
  }
}
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop

0800af54 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	889b      	ldrh	r3, [r3, #4]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d131      	bne.n	800afca <USBD_SetAddress+0x76>
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	88db      	ldrh	r3, [r3, #6]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d12d      	bne.n	800afca <USBD_SetAddress+0x76>
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	885b      	ldrh	r3, [r3, #2]
 800af72:	2b7f      	cmp	r3, #127	@ 0x7f
 800af74:	d829      	bhi.n	800afca <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	885b      	ldrh	r3, [r3, #2]
 800af7a:	b2db      	uxtb	r3, r3
 800af7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800af80:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d104      	bne.n	800af98 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f9bc 	bl	800b30e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af96:	e01d      	b.n	800afd4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7bfa      	ldrb	r2, [r7, #15]
 800af9c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afa0:	7bfb      	ldrb	r3, [r7, #15]
 800afa2:	4619      	mov	r1, r3
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f004 fc11 	bl	800f7cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 fa86 	bl	800b4bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2202      	movs	r2, #2
 800afba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afbe:	e009      	b.n	800afd4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2201      	movs	r2, #1
 800afc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afc8:	e004      	b.n	800afd4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 f99e 	bl	800b30e <USBD_CtlError>
  }
}
 800afd2:	bf00      	nop
 800afd4:	bf00      	nop
 800afd6:	3710      	adds	r7, #16
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	885b      	ldrh	r3, [r3, #2]
 800afee:	b2da      	uxtb	r2, r3
 800aff0:	4b4e      	ldr	r3, [pc, #312]	@ (800b12c <USBD_SetConfig+0x150>)
 800aff2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aff4:	4b4d      	ldr	r3, [pc, #308]	@ (800b12c <USBD_SetConfig+0x150>)
 800aff6:	781b      	ldrb	r3, [r3, #0]
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d905      	bls.n	800b008 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800affc:	6839      	ldr	r1, [r7, #0]
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f985 	bl	800b30e <USBD_CtlError>
    return USBD_FAIL;
 800b004:	2303      	movs	r3, #3
 800b006:	e08c      	b.n	800b122 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b02      	cmp	r3, #2
 800b012:	d002      	beq.n	800b01a <USBD_SetConfig+0x3e>
 800b014:	2b03      	cmp	r3, #3
 800b016:	d029      	beq.n	800b06c <USBD_SetConfig+0x90>
 800b018:	e075      	b.n	800b106 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b01a:	4b44      	ldr	r3, [pc, #272]	@ (800b12c <USBD_SetConfig+0x150>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d020      	beq.n	800b064 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b022:	4b42      	ldr	r3, [pc, #264]	@ (800b12c <USBD_SetConfig+0x150>)
 800b024:	781b      	ldrb	r3, [r3, #0]
 800b026:	461a      	mov	r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b02c:	4b3f      	ldr	r3, [pc, #252]	@ (800b12c <USBD_SetConfig+0x150>)
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7fe ffe3 	bl	8009ffe <USBD_SetClassConfig>
 800b038:	4603      	mov	r3, r0
 800b03a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b03c:	7bfb      	ldrb	r3, [r7, #15]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d008      	beq.n	800b054 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f962 	bl	800b30e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2202      	movs	r2, #2
 800b04e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b052:	e065      	b.n	800b120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f000 fa31 	bl	800b4bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2203      	movs	r2, #3
 800b05e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b062:	e05d      	b.n	800b120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fa29 	bl	800b4bc <USBD_CtlSendStatus>
      break;
 800b06a:	e059      	b.n	800b120 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b06c:	4b2f      	ldr	r3, [pc, #188]	@ (800b12c <USBD_SetConfig+0x150>)
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d112      	bne.n	800b09a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2202      	movs	r2, #2
 800b078:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b07c:	4b2b      	ldr	r3, [pc, #172]	@ (800b12c <USBD_SetConfig+0x150>)
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	461a      	mov	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b086:	4b29      	ldr	r3, [pc, #164]	@ (800b12c <USBD_SetConfig+0x150>)
 800b088:	781b      	ldrb	r3, [r3, #0]
 800b08a:	4619      	mov	r1, r3
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f7fe ffd2 	bl	800a036 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 fa12 	bl	800b4bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b098:	e042      	b.n	800b120 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b09a:	4b24      	ldr	r3, [pc, #144]	@ (800b12c <USBD_SetConfig+0x150>)
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	461a      	mov	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	429a      	cmp	r2, r3
 800b0a6:	d02a      	beq.n	800b0fe <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f7fe ffc0 	bl	800a036 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0b6:	4b1d      	ldr	r3, [pc, #116]	@ (800b12c <USBD_SetConfig+0x150>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0c0:	4b1a      	ldr	r3, [pc, #104]	@ (800b12c <USBD_SetConfig+0x150>)
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f7fe ff99 	bl	8009ffe <USBD_SetClassConfig>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0d0:	7bfb      	ldrb	r3, [r7, #15]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00f      	beq.n	800b0f6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b0d6:	6839      	ldr	r1, [r7, #0]
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 f918 	bl	800b30e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	685b      	ldr	r3, [r3, #4]
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f7fe ffa5 	bl	800a036 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2202      	movs	r2, #2
 800b0f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b0f4:	e014      	b.n	800b120 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 f9e0 	bl	800b4bc <USBD_CtlSendStatus>
      break;
 800b0fc:	e010      	b.n	800b120 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f000 f9dc 	bl	800b4bc <USBD_CtlSendStatus>
      break;
 800b104:	e00c      	b.n	800b120 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b106:	6839      	ldr	r1, [r7, #0]
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f900 	bl	800b30e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b10e:	4b07      	ldr	r3, [pc, #28]	@ (800b12c <USBD_SetConfig+0x150>)
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	4619      	mov	r1, r3
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f7fe ff8e 	bl	800a036 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b11a:	2303      	movs	r3, #3
 800b11c:	73fb      	strb	r3, [r7, #15]
      break;
 800b11e:	bf00      	nop
  }

  return ret;
 800b120:	7bfb      	ldrb	r3, [r7, #15]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	20000494 	.word	0x20000494

0800b130 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	88db      	ldrh	r3, [r3, #6]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d004      	beq.n	800b14c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b142:	6839      	ldr	r1, [r7, #0]
 800b144:	6878      	ldr	r0, [r7, #4]
 800b146:	f000 f8e2 	bl	800b30e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b14a:	e023      	b.n	800b194 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b152:	b2db      	uxtb	r3, r3
 800b154:	2b02      	cmp	r3, #2
 800b156:	dc02      	bgt.n	800b15e <USBD_GetConfig+0x2e>
 800b158:	2b00      	cmp	r3, #0
 800b15a:	dc03      	bgt.n	800b164 <USBD_GetConfig+0x34>
 800b15c:	e015      	b.n	800b18a <USBD_GetConfig+0x5a>
 800b15e:	2b03      	cmp	r3, #3
 800b160:	d00b      	beq.n	800b17a <USBD_GetConfig+0x4a>
 800b162:	e012      	b.n	800b18a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3308      	adds	r3, #8
 800b16e:	2201      	movs	r2, #1
 800b170:	4619      	mov	r1, r3
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	f000 f948 	bl	800b408 <USBD_CtlSendData>
        break;
 800b178:	e00c      	b.n	800b194 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3304      	adds	r3, #4
 800b17e:	2201      	movs	r2, #1
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f940 	bl	800b408 <USBD_CtlSendData>
        break;
 800b188:	e004      	b.n	800b194 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	6878      	ldr	r0, [r7, #4]
 800b18e:	f000 f8be 	bl	800b30e <USBD_CtlError>
        break;
 800b192:	bf00      	nop
}
 800b194:	bf00      	nop
 800b196:	3708      	adds	r7, #8
 800b198:	46bd      	mov	sp, r7
 800b19a:	bd80      	pop	{r7, pc}

0800b19c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b082      	sub	sp, #8
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
 800b1a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	3b01      	subs	r3, #1
 800b1b0:	2b02      	cmp	r3, #2
 800b1b2:	d81e      	bhi.n	800b1f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	88db      	ldrh	r3, [r3, #6]
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d004      	beq.n	800b1c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1bc:	6839      	ldr	r1, [r7, #0]
 800b1be:	6878      	ldr	r0, [r7, #4]
 800b1c0:	f000 f8a5 	bl	800b30e <USBD_CtlError>
        break;
 800b1c4:	e01a      	b.n	800b1fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d005      	beq.n	800b1e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	68db      	ldr	r3, [r3, #12]
 800b1da:	f043 0202 	orr.w	r2, r3, #2
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	330c      	adds	r3, #12
 800b1e6:	2202      	movs	r2, #2
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f90c 	bl	800b408 <USBD_CtlSendData>
      break;
 800b1f0:	e004      	b.n	800b1fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f88a 	bl	800b30e <USBD_CtlError>
      break;
 800b1fa:	bf00      	nop
  }
}
 800b1fc:	bf00      	nop
 800b1fe:	3708      	adds	r7, #8
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	885b      	ldrh	r3, [r3, #2]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d107      	bne.n	800b226 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 f94c 	bl	800b4bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b224:	e013      	b.n	800b24e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	885b      	ldrh	r3, [r3, #2]
 800b22a:	2b02      	cmp	r3, #2
 800b22c:	d10b      	bne.n	800b246 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	889b      	ldrh	r3, [r3, #4]
 800b232:	0a1b      	lsrs	r3, r3, #8
 800b234:	b29b      	uxth	r3, r3
 800b236:	b2da      	uxtb	r2, r3
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f93c 	bl	800b4bc <USBD_CtlSendStatus>
}
 800b244:	e003      	b.n	800b24e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b246:	6839      	ldr	r1, [r7, #0]
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f000 f860 	bl	800b30e <USBD_CtlError>
}
 800b24e:	bf00      	nop
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b082      	sub	sp, #8
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b266:	b2db      	uxtb	r3, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d80b      	bhi.n	800b286 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	885b      	ldrh	r3, [r3, #2]
 800b272:	2b01      	cmp	r3, #1
 800b274:	d10c      	bne.n	800b290 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 f91c 	bl	800b4bc <USBD_CtlSendStatus>
      }
      break;
 800b284:	e004      	b.n	800b290 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b286:	6839      	ldr	r1, [r7, #0]
 800b288:	6878      	ldr	r0, [r7, #4]
 800b28a:	f000 f840 	bl	800b30e <USBD_CtlError>
      break;
 800b28e:	e000      	b.n	800b292 <USBD_ClrFeature+0x3c>
      break;
 800b290:	bf00      	nop
  }
}
 800b292:	bf00      	nop
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}

0800b29a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b29a:	b580      	push	{r7, lr}
 800b29c:	b084      	sub	sp, #16
 800b29e:	af00      	add	r7, sp, #0
 800b2a0:	6078      	str	r0, [r7, #4]
 800b2a2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	781a      	ldrb	r2, [r3, #0]
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	3301      	adds	r3, #1
 800b2c2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f7ff fa40 	bl	800a74a <SWAPBYTE>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff fa33 	bl	800a74a <SWAPBYTE>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f7ff fa26 	bl	800a74a <SWAPBYTE>
 800b2fe:	4603      	mov	r3, r0
 800b300:	461a      	mov	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	80da      	strh	r2, [r3, #6]
}
 800b306:	bf00      	nop
 800b308:	3710      	adds	r7, #16
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}

0800b30e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b30e:	b580      	push	{r7, lr}
 800b310:	b082      	sub	sp, #8
 800b312:	af00      	add	r7, sp, #0
 800b314:	6078      	str	r0, [r7, #4]
 800b316:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b318:	2180      	movs	r1, #128	@ 0x80
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f004 f9ec 	bl	800f6f8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b320:	2100      	movs	r1, #0
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f004 f9e8 	bl	800f6f8 <USBD_LL_StallEP>
}
 800b328:	bf00      	nop
 800b32a:	3708      	adds	r7, #8
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b33c:	2300      	movs	r3, #0
 800b33e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d042      	beq.n	800b3cc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b34a:	6938      	ldr	r0, [r7, #16]
 800b34c:	f000 f842 	bl	800b3d4 <USBD_GetLen>
 800b350:	4603      	mov	r3, r0
 800b352:	3301      	adds	r3, #1
 800b354:	005b      	lsls	r3, r3, #1
 800b356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b35a:	d808      	bhi.n	800b36e <USBD_GetString+0x3e>
 800b35c:	6938      	ldr	r0, [r7, #16]
 800b35e:	f000 f839 	bl	800b3d4 <USBD_GetLen>
 800b362:	4603      	mov	r3, r0
 800b364:	3301      	adds	r3, #1
 800b366:	b29b      	uxth	r3, r3
 800b368:	005b      	lsls	r3, r3, #1
 800b36a:	b29a      	uxth	r2, r3
 800b36c:	e001      	b.n	800b372 <USBD_GetString+0x42>
 800b36e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	68ba      	ldr	r2, [r7, #8]
 800b37a:	4413      	add	r3, r2
 800b37c:	687a      	ldr	r2, [r7, #4]
 800b37e:	7812      	ldrb	r2, [r2, #0]
 800b380:	701a      	strb	r2, [r3, #0]
  idx++;
 800b382:	7dfb      	ldrb	r3, [r7, #23]
 800b384:	3301      	adds	r3, #1
 800b386:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	4413      	add	r3, r2
 800b38e:	2203      	movs	r2, #3
 800b390:	701a      	strb	r2, [r3, #0]
  idx++;
 800b392:	7dfb      	ldrb	r3, [r7, #23]
 800b394:	3301      	adds	r3, #1
 800b396:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b398:	e013      	b.n	800b3c2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b39a:	7dfb      	ldrb	r3, [r7, #23]
 800b39c:	68ba      	ldr	r2, [r7, #8]
 800b39e:	4413      	add	r3, r2
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	7812      	ldrb	r2, [r2, #0]
 800b3a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	3301      	adds	r3, #1
 800b3aa:	613b      	str	r3, [r7, #16]
    idx++;
 800b3ac:	7dfb      	ldrb	r3, [r7, #23]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800b3bc:	7dfb      	ldrb	r3, [r7, #23]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d1e7      	bne.n	800b39a <USBD_GetString+0x6a>
 800b3ca:	e000      	b.n	800b3ce <USBD_GetString+0x9e>
    return;
 800b3cc:	bf00      	nop
  }
}
 800b3ce:	3718      	adds	r7, #24
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b085      	sub	sp, #20
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3e4:	e005      	b.n	800b3f2 <USBD_GetLen+0x1e>
  {
    len++;
 800b3e6:	7bfb      	ldrb	r3, [r7, #15]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1f5      	bne.n	800b3e6 <USBD_GetLen+0x12>
  }

  return len;
 800b3fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3714      	adds	r7, #20
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2202      	movs	r2, #2
 800b418:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	2100      	movs	r1, #0
 800b42e:	68f8      	ldr	r0, [r7, #12]
 800b430:	f004 f9eb 	bl	800f80a <USBD_LL_Transmit>

  return USBD_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	60f8      	str	r0, [r7, #12]
 800b446:	60b9      	str	r1, [r7, #8]
 800b448:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	68ba      	ldr	r2, [r7, #8]
 800b44e:	2100      	movs	r1, #0
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f004 f9da 	bl	800f80a <USBD_LL_Transmit>

  return USBD_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2203      	movs	r2, #3
 800b470:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	2100      	movs	r1, #0
 800b48a:	68f8      	ldr	r0, [r7, #12]
 800b48c:	f004 f9de 	bl	800f84c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b490:	2300      	movs	r3, #0
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}

0800b49a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b49a:	b580      	push	{r7, lr}
 800b49c:	b084      	sub	sp, #16
 800b49e:	af00      	add	r7, sp, #0
 800b4a0:	60f8      	str	r0, [r7, #12]
 800b4a2:	60b9      	str	r1, [r7, #8]
 800b4a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	68ba      	ldr	r2, [r7, #8]
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f004 f9cd 	bl	800f84c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4b2:	2300      	movs	r3, #0
}
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	3710      	adds	r7, #16
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd80      	pop	{r7, pc}

0800b4bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b082      	sub	sp, #8
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	2204      	movs	r2, #4
 800b4c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f004 f999 	bl	800f80a <USBD_LL_Transmit>

  return USBD_OK;
 800b4d8:	2300      	movs	r3, #0
}
 800b4da:	4618      	mov	r0, r3
 800b4dc:	3708      	adds	r7, #8
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	bd80      	pop	{r7, pc}

0800b4e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4e2:	b580      	push	{r7, lr}
 800b4e4:	b082      	sub	sp, #8
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2205      	movs	r2, #5
 800b4ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	2100      	movs	r1, #0
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f004 f9a7 	bl	800f84c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}

0800b508 <__NVIC_SetPriority>:
{
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	6039      	str	r1, [r7, #0]
 800b512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	db0a      	blt.n	800b532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	b2da      	uxtb	r2, r3
 800b520:	490c      	ldr	r1, [pc, #48]	@ (800b554 <__NVIC_SetPriority+0x4c>)
 800b522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b526:	0112      	lsls	r2, r2, #4
 800b528:	b2d2      	uxtb	r2, r2
 800b52a:	440b      	add	r3, r1
 800b52c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b530:	e00a      	b.n	800b548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	b2da      	uxtb	r2, r3
 800b536:	4908      	ldr	r1, [pc, #32]	@ (800b558 <__NVIC_SetPriority+0x50>)
 800b538:	79fb      	ldrb	r3, [r7, #7]
 800b53a:	f003 030f 	and.w	r3, r3, #15
 800b53e:	3b04      	subs	r3, #4
 800b540:	0112      	lsls	r2, r2, #4
 800b542:	b2d2      	uxtb	r2, r2
 800b544:	440b      	add	r3, r1
 800b546:	761a      	strb	r2, [r3, #24]
}
 800b548:	bf00      	nop
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	e000e100 	.word	0xe000e100
 800b558:	e000ed00 	.word	0xe000ed00

0800b55c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b560:	4b05      	ldr	r3, [pc, #20]	@ (800b578 <SysTick_Handler+0x1c>)
 800b562:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b564:	f002 fa86 	bl	800da74 <xTaskGetSchedulerState>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d001      	beq.n	800b572 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b56e:	f003 fa3b 	bl	800e9e8 <xPortSysTickHandler>
  }
}
 800b572:	bf00      	nop
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	e000e010 	.word	0xe000e010

0800b57c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b57c:	b580      	push	{r7, lr}
 800b57e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b580:	2100      	movs	r1, #0
 800b582:	f06f 0004 	mvn.w	r0, #4
 800b586:	f7ff ffbf 	bl	800b508 <__NVIC_SetPriority>
#endif
}
 800b58a:	bf00      	nop
 800b58c:	bd80      	pop	{r7, pc}
	...

0800b590 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b596:	f3ef 8305 	mrs	r3, IPSR
 800b59a:	603b      	str	r3, [r7, #0]
  return(result);
 800b59c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b5a2:	f06f 0305 	mvn.w	r3, #5
 800b5a6:	607b      	str	r3, [r7, #4]
 800b5a8:	e00c      	b.n	800b5c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b5aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d4 <osKernelInitialize+0x44>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d105      	bne.n	800b5be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b5b2:	4b08      	ldr	r3, [pc, #32]	@ (800b5d4 <osKernelInitialize+0x44>)
 800b5b4:	2201      	movs	r2, #1
 800b5b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	607b      	str	r3, [r7, #4]
 800b5bc:	e002      	b.n	800b5c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b5be:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b5c4:	687b      	ldr	r3, [r7, #4]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	370c      	adds	r7, #12
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000498 	.word	0x20000498

0800b5d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5de:	f3ef 8305 	mrs	r3, IPSR
 800b5e2:	603b      	str	r3, [r7, #0]
  return(result);
 800b5e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b5ea:	f06f 0305 	mvn.w	r3, #5
 800b5ee:	607b      	str	r3, [r7, #4]
 800b5f0:	e010      	b.n	800b614 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b5f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b620 <osKernelStart+0x48>)
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d109      	bne.n	800b60e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b5fa:	f7ff ffbf 	bl	800b57c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b5fe:	4b08      	ldr	r3, [pc, #32]	@ (800b620 <osKernelStart+0x48>)
 800b600:	2202      	movs	r2, #2
 800b602:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b604:	f001 fde8 	bl	800d1d8 <vTaskStartScheduler>
      stat = osOK;
 800b608:	2300      	movs	r3, #0
 800b60a:	607b      	str	r3, [r7, #4]
 800b60c:	e002      	b.n	800b614 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b60e:	f04f 33ff 	mov.w	r3, #4294967295
 800b612:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b614:	687b      	ldr	r3, [r7, #4]
}
 800b616:	4618      	mov	r0, r3
 800b618:	3708      	adds	r7, #8
 800b61a:	46bd      	mov	sp, r7
 800b61c:	bd80      	pop	{r7, pc}
 800b61e:	bf00      	nop
 800b620:	20000498 	.word	0x20000498

0800b624 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b624:	b580      	push	{r7, lr}
 800b626:	b08e      	sub	sp, #56	@ 0x38
 800b628:	af04      	add	r7, sp, #16
 800b62a:	60f8      	str	r0, [r7, #12]
 800b62c:	60b9      	str	r1, [r7, #8]
 800b62e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b630:	2300      	movs	r3, #0
 800b632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b634:	f3ef 8305 	mrs	r3, IPSR
 800b638:	617b      	str	r3, [r7, #20]
  return(result);
 800b63a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d17e      	bne.n	800b73e <osThreadNew+0x11a>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d07b      	beq.n	800b73e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b646:	2380      	movs	r3, #128	@ 0x80
 800b648:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b64a:	2318      	movs	r3, #24
 800b64c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b64e:	2300      	movs	r3, #0
 800b650:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b652:	f04f 33ff 	mov.w	r3, #4294967295
 800b656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d045      	beq.n	800b6ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d002      	beq.n	800b66c <osThreadNew+0x48>
        name = attr->name;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	699b      	ldr	r3, [r3, #24]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d002      	beq.n	800b67a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d008      	beq.n	800b692 <osThreadNew+0x6e>
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	2b38      	cmp	r3, #56	@ 0x38
 800b684:	d805      	bhi.n	800b692 <osThreadNew+0x6e>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <osThreadNew+0x72>
        return (NULL);
 800b692:	2300      	movs	r3, #0
 800b694:	e054      	b.n	800b740 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	695b      	ldr	r3, [r3, #20]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d003      	beq.n	800b6a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	695b      	ldr	r3, [r3, #20]
 800b6a2:	089b      	lsrs	r3, r3, #2
 800b6a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00e      	beq.n	800b6cc <osThreadNew+0xa8>
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	2b5b      	cmp	r3, #91	@ 0x5b
 800b6b4:	d90a      	bls.n	800b6cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d006      	beq.n	800b6cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	695b      	ldr	r3, [r3, #20]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <osThreadNew+0xa8>
        mem = 1;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	61bb      	str	r3, [r7, #24]
 800b6ca:	e010      	b.n	800b6ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	689b      	ldr	r3, [r3, #8]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d10c      	bne.n	800b6ee <osThreadNew+0xca>
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	68db      	ldr	r3, [r3, #12]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d108      	bne.n	800b6ee <osThreadNew+0xca>
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d104      	bne.n	800b6ee <osThreadNew+0xca>
          mem = 0;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	61bb      	str	r3, [r7, #24]
 800b6e8:	e001      	b.n	800b6ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d110      	bne.n	800b716 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b6fc:	9202      	str	r2, [sp, #8]
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	69fb      	ldr	r3, [r7, #28]
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	6a3a      	ldr	r2, [r7, #32]
 800b708:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b70a:	68f8      	ldr	r0, [r7, #12]
 800b70c:	f001 fb88 	bl	800ce20 <xTaskCreateStatic>
 800b710:	4603      	mov	r3, r0
 800b712:	613b      	str	r3, [r7, #16]
 800b714:	e013      	b.n	800b73e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b716:	69bb      	ldr	r3, [r7, #24]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d110      	bne.n	800b73e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b71c:	6a3b      	ldr	r3, [r7, #32]
 800b71e:	b29a      	uxth	r2, r3
 800b720:	f107 0310 	add.w	r3, r7, #16
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b72e:	68f8      	ldr	r0, [r7, #12]
 800b730:	f001 fbd6 	bl	800cee0 <xTaskCreate>
 800b734:	4603      	mov	r3, r0
 800b736:	2b01      	cmp	r3, #1
 800b738:	d001      	beq.n	800b73e <osThreadNew+0x11a>
            hTask = NULL;
 800b73a:	2300      	movs	r3, #0
 800b73c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b73e:	693b      	ldr	r3, [r7, #16]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3728      	adds	r7, #40	@ 0x28
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}

0800b748 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b750:	f3ef 8305 	mrs	r3, IPSR
 800b754:	60bb      	str	r3, [r7, #8]
  return(result);
 800b756:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d003      	beq.n	800b764 <osDelay+0x1c>
    stat = osErrorISR;
 800b75c:	f06f 0305 	mvn.w	r3, #5
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e007      	b.n	800b774 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 fcfc 	bl	800d16c <vTaskDelay>
    }
  }

  return (stat);
 800b774:	68fb      	ldr	r3, [r7, #12]
}
 800b776:	4618      	mov	r0, r3
 800b778:	3710      	adds	r7, #16
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f002 ff4e 	bl	800e628 <pvTimerGetTimerID>
 800b78c:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d005      	beq.n	800b7a0 <TimerCallback+0x22>
    callb->func (callb->arg);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68fa      	ldr	r2, [r7, #12]
 800b79a:	6852      	ldr	r2, [r2, #4]
 800b79c:	4610      	mov	r0, r2
 800b79e:	4798      	blx	r3
  }
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}

0800b7a8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b08c      	sub	sp, #48	@ 0x30
 800b7ac:	af02      	add	r7, sp, #8
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	607a      	str	r2, [r7, #4]
 800b7b2:	603b      	str	r3, [r7, #0]
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7bc:	f3ef 8305 	mrs	r3, IPSR
 800b7c0:	613b      	str	r3, [r7, #16]
  return(result);
 800b7c2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d163      	bne.n	800b890 <osTimerNew+0xe8>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d060      	beq.n	800b890 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800b7ce:	2008      	movs	r0, #8
 800b7d0:	f003 f99c 	bl	800eb0c <pvPortMalloc>
 800b7d4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d059      	beq.n	800b890 <osTimerNew+0xe8>
      callb->func = func;
 800b7dc:	697b      	ldr	r3, [r7, #20]
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800b7e8:	7afb      	ldrb	r3, [r7, #11]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d102      	bne.n	800b7f4 <osTimerNew+0x4c>
        reload = pdFALSE;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61fb      	str	r3, [r7, #28]
 800b7f2:	e001      	b.n	800b7f8 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800b7f8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7fc:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800b7fe:	2300      	movs	r3, #0
 800b800:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	2b00      	cmp	r3, #0
 800b806:	d01c      	beq.n	800b842 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d002      	beq.n	800b816 <osTimerNew+0x6e>
          name = attr->name;
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800b816:	683b      	ldr	r3, [r7, #0]
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <osTimerNew+0x84>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	68db      	ldr	r3, [r3, #12]
 800b822:	2b2b      	cmp	r3, #43	@ 0x2b
 800b824:	d902      	bls.n	800b82c <osTimerNew+0x84>
          mem = 1;
 800b826:	2301      	movs	r3, #1
 800b828:	61bb      	str	r3, [r7, #24]
 800b82a:	e00c      	b.n	800b846 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	689b      	ldr	r3, [r3, #8]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d108      	bne.n	800b846 <osTimerNew+0x9e>
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	68db      	ldr	r3, [r3, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d104      	bne.n	800b846 <osTimerNew+0x9e>
            mem = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	61bb      	str	r3, [r7, #24]
 800b840:	e001      	b.n	800b846 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d10c      	bne.n	800b866 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	9301      	str	r3, [sp, #4]
 800b852:	4b12      	ldr	r3, [pc, #72]	@ (800b89c <osTimerNew+0xf4>)
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	69fa      	ldr	r2, [r7, #28]
 800b85a:	2101      	movs	r1, #1
 800b85c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b85e:	f002 fb56 	bl	800df0e <xTimerCreateStatic>
 800b862:	6238      	str	r0, [r7, #32]
 800b864:	e00b      	b.n	800b87e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d108      	bne.n	800b87e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 800b86c:	4b0b      	ldr	r3, [pc, #44]	@ (800b89c <osTimerNew+0xf4>)
 800b86e:	9300      	str	r3, [sp, #0]
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	69fa      	ldr	r2, [r7, #28]
 800b874:	2101      	movs	r1, #1
 800b876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b878:	f002 fb28 	bl	800decc <xTimerCreate>
 800b87c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800b87e:	6a3b      	ldr	r3, [r7, #32]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d105      	bne.n	800b890 <osTimerNew+0xe8>
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <osTimerNew+0xe8>
        vPortFree (callb);
 800b88a:	6978      	ldr	r0, [r7, #20]
 800b88c:	f003 fa0c 	bl	800eca8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800b890:	6a3b      	ldr	r3, [r7, #32]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3728      	adds	r7, #40	@ 0x28
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}
 800b89a:	bf00      	nop
 800b89c:	0800b77f 	.word	0x0800b77f

0800b8a0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b088      	sub	sp, #32
 800b8a4:	af02      	add	r7, sp, #8
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <osTimerStart+0x22>
    stat = osErrorISR;
 800b8ba:	f06f 0305 	mvn.w	r3, #5
 800b8be:	617b      	str	r3, [r7, #20]
 800b8c0:	e017      	b.n	800b8f2 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800b8c2:	693b      	ldr	r3, [r7, #16]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d103      	bne.n	800b8d0 <osTimerStart+0x30>
    stat = osErrorParameter;
 800b8c8:	f06f 0303 	mvn.w	r3, #3
 800b8cc:	617b      	str	r3, [r7, #20]
 800b8ce:	e010      	b.n	800b8f2 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9300      	str	r3, [sp, #0]
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	683a      	ldr	r2, [r7, #0]
 800b8d8:	2104      	movs	r1, #4
 800b8da:	6938      	ldr	r0, [r7, #16]
 800b8dc:	f002 fb94 	bl	800e008 <xTimerGenericCommand>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	2b01      	cmp	r3, #1
 800b8e4:	d102      	bne.n	800b8ec <osTimerStart+0x4c>
      stat = osOK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	e002      	b.n	800b8f2 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800b8ec:	f06f 0302 	mvn.w	r3, #2
 800b8f0:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b8f2:	697b      	ldr	r3, [r7, #20]
}
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	3718      	adds	r7, #24
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	bd80      	pop	{r7, pc}

0800b8fc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b08a      	sub	sp, #40	@ 0x28
 800b900:	af02      	add	r7, sp, #8
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b908:	2300      	movs	r3, #0
 800b90a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b90c:	f3ef 8305 	mrs	r3, IPSR
 800b910:	613b      	str	r3, [r7, #16]
  return(result);
 800b912:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b914:	2b00      	cmp	r3, #0
 800b916:	d175      	bne.n	800ba04 <osSemaphoreNew+0x108>
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d072      	beq.n	800ba04 <osSemaphoreNew+0x108>
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	429a      	cmp	r2, r3
 800b924:	d86e      	bhi.n	800ba04 <osSemaphoreNew+0x108>
    mem = -1;
 800b926:	f04f 33ff 	mov.w	r3, #4294967295
 800b92a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d015      	beq.n	800b95e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	689b      	ldr	r3, [r3, #8]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d006      	beq.n	800b948 <osSemaphoreNew+0x4c>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	68db      	ldr	r3, [r3, #12]
 800b93e:	2b4f      	cmp	r3, #79	@ 0x4f
 800b940:	d902      	bls.n	800b948 <osSemaphoreNew+0x4c>
        mem = 1;
 800b942:	2301      	movs	r3, #1
 800b944:	61bb      	str	r3, [r7, #24]
 800b946:	e00c      	b.n	800b962 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d108      	bne.n	800b962 <osSemaphoreNew+0x66>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d104      	bne.n	800b962 <osSemaphoreNew+0x66>
          mem = 0;
 800b958:	2300      	movs	r3, #0
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	e001      	b.n	800b962 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b968:	d04c      	beq.n	800ba04 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d128      	bne.n	800b9c2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b01      	cmp	r3, #1
 800b974:	d10a      	bne.n	800b98c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	2203      	movs	r2, #3
 800b97c:	9200      	str	r2, [sp, #0]
 800b97e:	2200      	movs	r2, #0
 800b980:	2100      	movs	r1, #0
 800b982:	2001      	movs	r0, #1
 800b984:	f000 fa4c 	bl	800be20 <xQueueGenericCreateStatic>
 800b988:	61f8      	str	r0, [r7, #28]
 800b98a:	e005      	b.n	800b998 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b98c:	2203      	movs	r2, #3
 800b98e:	2100      	movs	r1, #0
 800b990:	2001      	movs	r0, #1
 800b992:	f000 fac2 	bl	800bf1a <xQueueGenericCreate>
 800b996:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d022      	beq.n	800b9e4 <osSemaphoreNew+0xe8>
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d01f      	beq.n	800b9e4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	69f8      	ldr	r0, [r7, #28]
 800b9ac:	f000 fb82 	bl	800c0b4 <xQueueGenericSend>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	d016      	beq.n	800b9e4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b9b6:	69f8      	ldr	r0, [r7, #28]
 800b9b8:	f001 f85e 	bl	800ca78 <vQueueDelete>
            hSemaphore = NULL;
 800b9bc:	2300      	movs	r3, #0
 800b9be:	61fb      	str	r3, [r7, #28]
 800b9c0:	e010      	b.n	800b9e4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b9c2:	69bb      	ldr	r3, [r7, #24]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d108      	bne.n	800b9da <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	689b      	ldr	r3, [r3, #8]
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	68b9      	ldr	r1, [r7, #8]
 800b9d0:	68f8      	ldr	r0, [r7, #12]
 800b9d2:	f000 fb00 	bl	800bfd6 <xQueueCreateCountingSemaphoreStatic>
 800b9d6:	61f8      	str	r0, [r7, #28]
 800b9d8:	e004      	b.n	800b9e4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b9da:	68b9      	ldr	r1, [r7, #8]
 800b9dc:	68f8      	ldr	r0, [r7, #12]
 800b9de:	f000 fb33 	bl	800c048 <xQueueCreateCountingSemaphore>
 800b9e2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b9e4:	69fb      	ldr	r3, [r7, #28]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d003      	beq.n	800b9f8 <osSemaphoreNew+0xfc>
          name = attr->name;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e001      	b.n	800b9fc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b9fc:	6979      	ldr	r1, [r7, #20]
 800b9fe:	69f8      	ldr	r0, [r7, #28]
 800ba00:	f001 f986 	bl	800cd10 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ba04:	69fb      	ldr	r3, [r7, #28]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3720      	adds	r7, #32
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}
	...

0800ba10 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ba28:	f06f 0303 	mvn.w	r3, #3
 800ba2c:	617b      	str	r3, [r7, #20]
 800ba2e:	e039      	b.n	800baa4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba30:	f3ef 8305 	mrs	r3, IPSR
 800ba34:	60fb      	str	r3, [r7, #12]
  return(result);
 800ba36:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d022      	beq.n	800ba82 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d003      	beq.n	800ba4a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800ba42:	f06f 0303 	mvn.w	r3, #3
 800ba46:	617b      	str	r3, [r7, #20]
 800ba48:	e02c      	b.n	800baa4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ba4e:	f107 0308 	add.w	r3, r7, #8
 800ba52:	461a      	mov	r2, r3
 800ba54:	2100      	movs	r1, #0
 800ba56:	6938      	ldr	r0, [r7, #16]
 800ba58:	f000 ff4e 	bl	800c8f8 <xQueueReceiveFromISR>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	d003      	beq.n	800ba6a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800ba62:	f06f 0302 	mvn.w	r3, #2
 800ba66:	617b      	str	r3, [r7, #20]
 800ba68:	e01c      	b.n	800baa4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d019      	beq.n	800baa4 <osSemaphoreAcquire+0x94>
 800ba70:	4b0f      	ldr	r3, [pc, #60]	@ (800bab0 <osSemaphoreAcquire+0xa0>)
 800ba72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba76:	601a      	str	r2, [r3, #0]
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	f3bf 8f6f 	isb	sy
 800ba80:	e010      	b.n	800baa4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ba82:	6839      	ldr	r1, [r7, #0]
 800ba84:	6938      	ldr	r0, [r7, #16]
 800ba86:	f000 fe27 	bl	800c6d8 <xQueueSemaphoreTake>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	2b01      	cmp	r3, #1
 800ba8e:	d009      	beq.n	800baa4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d003      	beq.n	800ba9e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ba96:	f06f 0301 	mvn.w	r3, #1
 800ba9a:	617b      	str	r3, [r7, #20]
 800ba9c:	e002      	b.n	800baa4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ba9e:	f06f 0302 	mvn.w	r3, #2
 800baa2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800baa4:	697b      	ldr	r3, [r7, #20]
}
 800baa6:	4618      	mov	r0, r3
 800baa8:	3718      	adds	r7, #24
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	e000ed04 	.word	0xe000ed04

0800bab4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b086      	sub	sp, #24
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d103      	bne.n	800bad2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800baca:	f06f 0303 	mvn.w	r3, #3
 800bace:	617b      	str	r3, [r7, #20]
 800bad0:	e02c      	b.n	800bb2c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bad2:	f3ef 8305 	mrs	r3, IPSR
 800bad6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bad8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bada:	2b00      	cmp	r3, #0
 800badc:	d01a      	beq.n	800bb14 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800bade:	2300      	movs	r3, #0
 800bae0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800bae2:	f107 0308 	add.w	r3, r7, #8
 800bae6:	4619      	mov	r1, r3
 800bae8:	6938      	ldr	r0, [r7, #16]
 800baea:	f000 fc83 	bl	800c3f4 <xQueueGiveFromISR>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d003      	beq.n	800bafc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800baf4:	f06f 0302 	mvn.w	r3, #2
 800baf8:	617b      	str	r3, [r7, #20]
 800bafa:	e017      	b.n	800bb2c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d014      	beq.n	800bb2c <osSemaphoreRelease+0x78>
 800bb02:	4b0d      	ldr	r3, [pc, #52]	@ (800bb38 <osSemaphoreRelease+0x84>)
 800bb04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb08:	601a      	str	r2, [r3, #0]
 800bb0a:	f3bf 8f4f 	dsb	sy
 800bb0e:	f3bf 8f6f 	isb	sy
 800bb12:	e00b      	b.n	800bb2c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	6938      	ldr	r0, [r7, #16]
 800bb1c:	f000 faca 	bl	800c0b4 <xQueueGenericSend>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d002      	beq.n	800bb2c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800bb26:	f06f 0302 	mvn.w	r3, #2
 800bb2a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800bb2c:	697b      	ldr	r3, [r7, #20]
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3718      	adds	r7, #24
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}
 800bb36:	bf00      	nop
 800bb38:	e000ed04 	.word	0xe000ed04

0800bb3c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d102      	bne.n	800bb54 <osSemaphoreGetCount+0x18>
    count = 0U;
 800bb4e:	2300      	movs	r3, #0
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	e00e      	b.n	800bb72 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb54:	f3ef 8305 	mrs	r3, IPSR
 800bb58:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d004      	beq.n	800bb6a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800bb60:	6938      	ldr	r0, [r7, #16]
 800bb62:	f000 ff6a 	bl	800ca3a <uxQueueMessagesWaitingFromISR>
 800bb66:	6178      	str	r0, [r7, #20]
 800bb68:	e003      	b.n	800bb72 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800bb6a:	6938      	ldr	r0, [r7, #16]
 800bb6c:	f000 ff46 	bl	800c9fc <uxQueueMessagesWaiting>
 800bb70:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800bb72:	697b      	ldr	r3, [r7, #20]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	60f8      	str	r0, [r7, #12]
 800bb84:	60b9      	str	r1, [r7, #8]
 800bb86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	4a07      	ldr	r2, [pc, #28]	@ (800bba8 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	4a06      	ldr	r2, [pc, #24]	@ (800bbac <vApplicationGetIdleTaskMemory+0x30>)
 800bb92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2280      	movs	r2, #128	@ 0x80
 800bb98:	601a      	str	r2, [r3, #0]
}
 800bb9a:	bf00      	nop
 800bb9c:	3714      	adds	r7, #20
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba4:	4770      	bx	lr
 800bba6:	bf00      	nop
 800bba8:	2000049c 	.word	0x2000049c
 800bbac:	200004f8 	.word	0x200004f8

0800bbb0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbb0:	b480      	push	{r7}
 800bbb2:	b085      	sub	sp, #20
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60f8      	str	r0, [r7, #12]
 800bbb8:	60b9      	str	r1, [r7, #8]
 800bbba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	4a07      	ldr	r2, [pc, #28]	@ (800bbdc <vApplicationGetTimerTaskMemory+0x2c>)
 800bbc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	4a06      	ldr	r2, [pc, #24]	@ (800bbe0 <vApplicationGetTimerTaskMemory+0x30>)
 800bbc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bbce:	601a      	str	r2, [r3, #0]
}
 800bbd0:	bf00      	nop
 800bbd2:	3714      	adds	r7, #20
 800bbd4:	46bd      	mov	sp, r7
 800bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbda:	4770      	bx	lr
 800bbdc:	200006f8 	.word	0x200006f8
 800bbe0:	20000754 	.word	0x20000754

0800bbe4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b083      	sub	sp, #12
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f103 0208 	add.w	r2, r3, #8
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f103 0208 	add.w	r2, r3, #8
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f103 0208 	add.w	r2, r3, #8
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc18:	bf00      	nop
 800bc1a:	370c      	adds	r7, #12
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc22:	4770      	bx	lr

0800bc24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc32:	bf00      	nop
 800bc34:	370c      	adds	r7, #12
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b085      	sub	sp, #20
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	689a      	ldr	r2, [r3, #8]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	683a      	ldr	r2, [r7, #0]
 800bc62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	683a      	ldr	r2, [r7, #0]
 800bc68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	687a      	ldr	r2, [r7, #4]
 800bc6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	1c5a      	adds	r2, r3, #1
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	601a      	str	r2, [r3, #0]
}
 800bc7a:	bf00      	nop
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc86:	b480      	push	{r7}
 800bc88:	b085      	sub	sp, #20
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc9c:	d103      	bne.n	800bca6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	e00c      	b.n	800bcc0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	3308      	adds	r3, #8
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	e002      	b.n	800bcb4 <vListInsert+0x2e>
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	685b      	ldr	r3, [r3, #4]
 800bcb2:	60fb      	str	r3, [r7, #12]
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	685b      	ldr	r3, [r3, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	68ba      	ldr	r2, [r7, #8]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d2f6      	bcs.n	800bcae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	685a      	ldr	r2, [r3, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	601a      	str	r2, [r3, #0]
}
 800bcec:	bf00      	nop
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bcf8:	b480      	push	{r7}
 800bcfa:	b085      	sub	sp, #20
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	691b      	ldr	r3, [r3, #16]
 800bd04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6892      	ldr	r2, [r2, #8]
 800bd0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	689b      	ldr	r3, [r3, #8]
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	6852      	ldr	r2, [r2, #4]
 800bd18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	429a      	cmp	r2, r3
 800bd22:	d103      	bne.n	800bd2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689a      	ldr	r2, [r3, #8]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	1e5a      	subs	r2, r3, #1
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
}
 800bd40:	4618      	mov	r0, r3
 800bd42:	3714      	adds	r7, #20
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr

0800bd4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d10b      	bne.n	800bd78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd64:	f383 8811 	msr	BASEPRI, r3
 800bd68:	f3bf 8f6f 	isb	sy
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bd72:	bf00      	nop
 800bd74:	bf00      	nop
 800bd76:	e7fd      	b.n	800bd74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bd78:	f002 fda6 	bl	800e8c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	681a      	ldr	r2, [r3, #0]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd84:	68f9      	ldr	r1, [r7, #12]
 800bd86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bd88:	fb01 f303 	mul.w	r3, r1, r3
 800bd8c:	441a      	add	r2, r3
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	2200      	movs	r2, #0
 800bd96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	681a      	ldr	r2, [r3, #0]
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	68f9      	ldr	r1, [r7, #12]
 800bdac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bdae:	fb01 f303 	mul.w	r3, r1, r3
 800bdb2:	441a      	add	r2, r3
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	22ff      	movs	r2, #255	@ 0xff
 800bdbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	22ff      	movs	r2, #255	@ 0xff
 800bdc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d114      	bne.n	800bdf8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d01a      	beq.n	800be0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	3310      	adds	r3, #16
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 fc8a 	bl	800d6f4 <xTaskRemoveFromEventList>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d012      	beq.n	800be0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bde6:	4b0d      	ldr	r3, [pc, #52]	@ (800be1c <xQueueGenericReset+0xd0>)
 800bde8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bdec:	601a      	str	r2, [r3, #0]
 800bdee:	f3bf 8f4f 	dsb	sy
 800bdf2:	f3bf 8f6f 	isb	sy
 800bdf6:	e009      	b.n	800be0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3310      	adds	r3, #16
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	f7ff fef1 	bl	800bbe4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	3324      	adds	r3, #36	@ 0x24
 800be06:	4618      	mov	r0, r3
 800be08:	f7ff feec 	bl	800bbe4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be0c:	f002 fd8e 	bl	800e92c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be10:	2301      	movs	r3, #1
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	e000ed04 	.word	0xe000ed04

0800be20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b08e      	sub	sp, #56	@ 0x38
 800be24:	af02      	add	r7, sp, #8
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d10b      	bne.n	800be4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800be46:	bf00      	nop
 800be48:	bf00      	nop
 800be4a:	e7fd      	b.n	800be48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10b      	bne.n	800be6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	e7fd      	b.n	800be66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <xQueueGenericCreateStatic+0x56>
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d001      	beq.n	800be7a <xQueueGenericCreateStatic+0x5a>
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <xQueueGenericCreateStatic+0x5c>
 800be7a:	2300      	movs	r3, #0
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d10b      	bne.n	800be98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be84:	f383 8811 	msr	BASEPRI, r3
 800be88:	f3bf 8f6f 	isb	sy
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	623b      	str	r3, [r7, #32]
}
 800be92:	bf00      	nop
 800be94:	bf00      	nop
 800be96:	e7fd      	b.n	800be94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d102      	bne.n	800bea4 <xQueueGenericCreateStatic+0x84>
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d101      	bne.n	800bea8 <xQueueGenericCreateStatic+0x88>
 800bea4:	2301      	movs	r3, #1
 800bea6:	e000      	b.n	800beaa <xQueueGenericCreateStatic+0x8a>
 800bea8:	2300      	movs	r3, #0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10b      	bne.n	800bec6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800beae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb2:	f383 8811 	msr	BASEPRI, r3
 800beb6:	f3bf 8f6f 	isb	sy
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	61fb      	str	r3, [r7, #28]
}
 800bec0:	bf00      	nop
 800bec2:	bf00      	nop
 800bec4:	e7fd      	b.n	800bec2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bec6:	2350      	movs	r3, #80	@ 0x50
 800bec8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	2b50      	cmp	r3, #80	@ 0x50
 800bece:	d00b      	beq.n	800bee8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	61bb      	str	r3, [r7, #24]
}
 800bee2:	bf00      	nop
 800bee4:	bf00      	nop
 800bee6:	e7fd      	b.n	800bee4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bee8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800beee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00d      	beq.n	800bf10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800befc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bf00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf02:	9300      	str	r3, [sp, #0]
 800bf04:	4613      	mov	r3, r2
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	68b9      	ldr	r1, [r7, #8]
 800bf0a:	68f8      	ldr	r0, [r7, #12]
 800bf0c:	f000 f840 	bl	800bf90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3730      	adds	r7, #48	@ 0x30
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b08a      	sub	sp, #40	@ 0x28
 800bf1e:	af02      	add	r7, sp, #8
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	60b9      	str	r1, [r7, #8]
 800bf24:	4613      	mov	r3, r2
 800bf26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d10b      	bne.n	800bf46 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf32:	f383 8811 	msr	BASEPRI, r3
 800bf36:	f3bf 8f6f 	isb	sy
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	613b      	str	r3, [r7, #16]
}
 800bf40:	bf00      	nop
 800bf42:	bf00      	nop
 800bf44:	e7fd      	b.n	800bf42 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	68ba      	ldr	r2, [r7, #8]
 800bf4a:	fb02 f303 	mul.w	r3, r2, r3
 800bf4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	3350      	adds	r3, #80	@ 0x50
 800bf54:	4618      	mov	r0, r3
 800bf56:	f002 fdd9 	bl	800eb0c <pvPortMalloc>
 800bf5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf5c:	69bb      	ldr	r3, [r7, #24]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d011      	beq.n	800bf86 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf62:	69bb      	ldr	r3, [r7, #24]
 800bf64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	3350      	adds	r3, #80	@ 0x50
 800bf6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf74:	79fa      	ldrb	r2, [r7, #7]
 800bf76:	69bb      	ldr	r3, [r7, #24]
 800bf78:	9300      	str	r3, [sp, #0]
 800bf7a:	4613      	mov	r3, r2
 800bf7c:	697a      	ldr	r2, [r7, #20]
 800bf7e:	68b9      	ldr	r1, [r7, #8]
 800bf80:	68f8      	ldr	r0, [r7, #12]
 800bf82:	f000 f805 	bl	800bf90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf86:	69bb      	ldr	r3, [r7, #24]
	}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3720      	adds	r7, #32
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}

0800bf90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b084      	sub	sp, #16
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	607a      	str	r2, [r7, #4]
 800bf9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d103      	bne.n	800bfac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfa4:	69bb      	ldr	r3, [r7, #24]
 800bfa6:	69ba      	ldr	r2, [r7, #24]
 800bfa8:	601a      	str	r2, [r3, #0]
 800bfaa:	e002      	b.n	800bfb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	68fa      	ldr	r2, [r7, #12]
 800bfb6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	68ba      	ldr	r2, [r7, #8]
 800bfbc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	69b8      	ldr	r0, [r7, #24]
 800bfc2:	f7ff fec3 	bl	800bd4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bfc6:	69bb      	ldr	r3, [r7, #24]
 800bfc8:	78fa      	ldrb	r2, [r7, #3]
 800bfca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfce:	bf00      	nop
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}

0800bfd6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b08a      	sub	sp, #40	@ 0x28
 800bfda:	af02      	add	r7, sp, #8
 800bfdc:	60f8      	str	r0, [r7, #12]
 800bfde:	60b9      	str	r1, [r7, #8]
 800bfe0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10b      	bne.n	800c000 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800bfe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfec:	f383 8811 	msr	BASEPRI, r3
 800bff0:	f3bf 8f6f 	isb	sy
 800bff4:	f3bf 8f4f 	dsb	sy
 800bff8:	61bb      	str	r3, [r7, #24]
}
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	e7fd      	b.n	800bffc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	429a      	cmp	r2, r3
 800c006:	d90b      	bls.n	800c020 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	617b      	str	r3, [r7, #20]
}
 800c01a:	bf00      	nop
 800c01c:	bf00      	nop
 800c01e:	e7fd      	b.n	800c01c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c020:	2302      	movs	r3, #2
 800c022:	9300      	str	r3, [sp, #0]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2200      	movs	r2, #0
 800c028:	2100      	movs	r1, #0
 800c02a:	68f8      	ldr	r0, [r7, #12]
 800c02c:	f7ff fef8 	bl	800be20 <xQueueGenericCreateStatic>
 800c030:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c038:	69fb      	ldr	r3, [r7, #28]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c03e:	69fb      	ldr	r3, [r7, #28]
	}
 800c040:	4618      	mov	r0, r3
 800c042:	3720      	adds	r7, #32
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b086      	sub	sp, #24
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
 800c050:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d10b      	bne.n	800c070 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800c058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05c:	f383 8811 	msr	BASEPRI, r3
 800c060:	f3bf 8f6f 	isb	sy
 800c064:	f3bf 8f4f 	dsb	sy
 800c068:	613b      	str	r3, [r7, #16]
}
 800c06a:	bf00      	nop
 800c06c:	bf00      	nop
 800c06e:	e7fd      	b.n	800c06c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c070:	683a      	ldr	r2, [r7, #0]
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d90b      	bls.n	800c090 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	60fb      	str	r3, [r7, #12]
}
 800c08a:	bf00      	nop
 800c08c:	bf00      	nop
 800c08e:	e7fd      	b.n	800c08c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c090:	2202      	movs	r2, #2
 800c092:	2100      	movs	r1, #0
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f7ff ff40 	bl	800bf1a <xQueueGenericCreate>
 800c09a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d002      	beq.n	800c0a8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c0a2:	697b      	ldr	r3, [r7, #20]
 800c0a4:	683a      	ldr	r2, [r7, #0]
 800c0a6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c0a8:	697b      	ldr	r3, [r7, #20]
	}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3718      	adds	r7, #24
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}
	...

0800c0b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08e      	sub	sp, #56	@ 0x38
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10b      	bne.n	800c0e8 <xQueueGenericSend+0x34>
	__asm volatile
 800c0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d4:	f383 8811 	msr	BASEPRI, r3
 800c0d8:	f3bf 8f6f 	isb	sy
 800c0dc:	f3bf 8f4f 	dsb	sy
 800c0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c0e2:	bf00      	nop
 800c0e4:	bf00      	nop
 800c0e6:	e7fd      	b.n	800c0e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0e8:	68bb      	ldr	r3, [r7, #8]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d103      	bne.n	800c0f6 <xQueueGenericSend+0x42>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d101      	bne.n	800c0fa <xQueueGenericSend+0x46>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e000      	b.n	800c0fc <xQueueGenericSend+0x48>
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d10b      	bne.n	800c118 <xQueueGenericSend+0x64>
	__asm volatile
 800c100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c104:	f383 8811 	msr	BASEPRI, r3
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	f3bf 8f4f 	dsb	sy
 800c110:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c112:	bf00      	nop
 800c114:	bf00      	nop
 800c116:	e7fd      	b.n	800c114 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	2b02      	cmp	r3, #2
 800c11c:	d103      	bne.n	800c126 <xQueueGenericSend+0x72>
 800c11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c122:	2b01      	cmp	r3, #1
 800c124:	d101      	bne.n	800c12a <xQueueGenericSend+0x76>
 800c126:	2301      	movs	r3, #1
 800c128:	e000      	b.n	800c12c <xQueueGenericSend+0x78>
 800c12a:	2300      	movs	r3, #0
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10b      	bne.n	800c148 <xQueueGenericSend+0x94>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	623b      	str	r3, [r7, #32]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c148:	f001 fc94 	bl	800da74 <xTaskGetSchedulerState>
 800c14c:	4603      	mov	r3, r0
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d102      	bne.n	800c158 <xQueueGenericSend+0xa4>
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d101      	bne.n	800c15c <xQueueGenericSend+0xa8>
 800c158:	2301      	movs	r3, #1
 800c15a:	e000      	b.n	800c15e <xQueueGenericSend+0xaa>
 800c15c:	2300      	movs	r3, #0
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10b      	bne.n	800c17a <xQueueGenericSend+0xc6>
	__asm volatile
 800c162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c166:	f383 8811 	msr	BASEPRI, r3
 800c16a:	f3bf 8f6f 	isb	sy
 800c16e:	f3bf 8f4f 	dsb	sy
 800c172:	61fb      	str	r3, [r7, #28]
}
 800c174:	bf00      	nop
 800c176:	bf00      	nop
 800c178:	e7fd      	b.n	800c176 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c17a:	f002 fba5 	bl	800e8c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c186:	429a      	cmp	r2, r3
 800c188:	d302      	bcc.n	800c190 <xQueueGenericSend+0xdc>
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	2b02      	cmp	r3, #2
 800c18e:	d129      	bne.n	800c1e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c190:	683a      	ldr	r2, [r7, #0]
 800c192:	68b9      	ldr	r1, [r7, #8]
 800c194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c196:	f000 fcab 	bl	800caf0 <prvCopyDataToQueue>
 800c19a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d010      	beq.n	800c1c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a6:	3324      	adds	r3, #36	@ 0x24
 800c1a8:	4618      	mov	r0, r3
 800c1aa:	f001 faa3 	bl	800d6f4 <xTaskRemoveFromEventList>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d013      	beq.n	800c1dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c1b4:	4b3f      	ldr	r3, [pc, #252]	@ (800c2b4 <xQueueGenericSend+0x200>)
 800c1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1ba:	601a      	str	r2, [r3, #0]
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	f3bf 8f6f 	isb	sy
 800c1c4:	e00a      	b.n	800c1dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d007      	beq.n	800c1dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1cc:	4b39      	ldr	r3, [pc, #228]	@ (800c2b4 <xQueueGenericSend+0x200>)
 800c1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1d2:	601a      	str	r2, [r3, #0]
 800c1d4:	f3bf 8f4f 	dsb	sy
 800c1d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1dc:	f002 fba6 	bl	800e92c <vPortExitCritical>
				return pdPASS;
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e063      	b.n	800c2ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d103      	bne.n	800c1f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1ea:	f002 fb9f 	bl	800e92c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	e05c      	b.n	800c2ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d106      	bne.n	800c206 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1f8:	f107 0314 	add.w	r3, r7, #20
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f001 fadd 	bl	800d7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c202:	2301      	movs	r3, #1
 800c204:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c206:	f002 fb91 	bl	800e92c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c20a:	f001 f84d 	bl	800d2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c20e:	f002 fb5b 	bl	800e8c8 <vPortEnterCritical>
 800c212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c218:	b25b      	sxtb	r3, r3
 800c21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21e:	d103      	bne.n	800c228 <xQueueGenericSend+0x174>
 800c220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c222:	2200      	movs	r2, #0
 800c224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c22a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c22e:	b25b      	sxtb	r3, r3
 800c230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c234:	d103      	bne.n	800c23e <xQueueGenericSend+0x18a>
 800c236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c23e:	f002 fb75 	bl	800e92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c242:	1d3a      	adds	r2, r7, #4
 800c244:	f107 0314 	add.w	r3, r7, #20
 800c248:	4611      	mov	r1, r2
 800c24a:	4618      	mov	r0, r3
 800c24c:	f001 facc 	bl	800d7e8 <xTaskCheckForTimeOut>
 800c250:	4603      	mov	r3, r0
 800c252:	2b00      	cmp	r3, #0
 800c254:	d124      	bne.n	800c2a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c258:	f000 fd42 	bl	800cce0 <prvIsQueueFull>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d018      	beq.n	800c294 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c264:	3310      	adds	r3, #16
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	4611      	mov	r1, r2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 f9f0 	bl	800d650 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c272:	f000 fccd 	bl	800cc10 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c276:	f001 f825 	bl	800d2c4 <xTaskResumeAll>
 800c27a:	4603      	mov	r3, r0
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f47f af7c 	bne.w	800c17a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c282:	4b0c      	ldr	r3, [pc, #48]	@ (800c2b4 <xQueueGenericSend+0x200>)
 800c284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c288:	601a      	str	r2, [r3, #0]
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	e772      	b.n	800c17a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c296:	f000 fcbb 	bl	800cc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c29a:	f001 f813 	bl	800d2c4 <xTaskResumeAll>
 800c29e:	e76c      	b.n	800c17a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c2a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c2a2:	f000 fcb5 	bl	800cc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c2a6:	f001 f80d 	bl	800d2c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c2aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3738      	adds	r7, #56	@ 0x38
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	e000ed04 	.word	0xe000ed04

0800c2b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b090      	sub	sp, #64	@ 0x40
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
 800c2c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10b      	bne.n	800c2e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d103      	bne.n	800c2f6 <xQueueGenericSendFromISR+0x3e>
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <xQueueGenericSendFromISR+0x42>
 800c2f6:	2301      	movs	r3, #1
 800c2f8:	e000      	b.n	800c2fc <xQueueGenericSendFromISR+0x44>
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d10b      	bne.n	800c318 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c304:	f383 8811 	msr	BASEPRI, r3
 800c308:	f3bf 8f6f 	isb	sy
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c312:	bf00      	nop
 800c314:	bf00      	nop
 800c316:	e7fd      	b.n	800c314 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d103      	bne.n	800c326 <xQueueGenericSendFromISR+0x6e>
 800c31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c322:	2b01      	cmp	r3, #1
 800c324:	d101      	bne.n	800c32a <xQueueGenericSendFromISR+0x72>
 800c326:	2301      	movs	r3, #1
 800c328:	e000      	b.n	800c32c <xQueueGenericSendFromISR+0x74>
 800c32a:	2300      	movs	r3, #0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10b      	bne.n	800c348 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	623b      	str	r3, [r7, #32]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c348:	f002 fb9e 	bl	800ea88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c34c:	f3ef 8211 	mrs	r2, BASEPRI
 800c350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	61fa      	str	r2, [r7, #28]
 800c362:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c364:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c366:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c370:	429a      	cmp	r2, r3
 800c372:	d302      	bcc.n	800c37a <xQueueGenericSendFromISR+0xc2>
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b02      	cmp	r3, #2
 800c378:	d12f      	bne.n	800c3da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c37c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c388:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c38a:	683a      	ldr	r2, [r7, #0]
 800c38c:	68b9      	ldr	r1, [r7, #8]
 800c38e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c390:	f000 fbae 	bl	800caf0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c394:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c39c:	d112      	bne.n	800c3c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d016      	beq.n	800c3d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3a8:	3324      	adds	r3, #36	@ 0x24
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f001 f9a2 	bl	800d6f4 <xTaskRemoveFromEventList>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00e      	beq.n	800c3d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d00b      	beq.n	800c3d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	601a      	str	r2, [r3, #0]
 800c3c2:	e007      	b.n	800c3d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c3c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c3c8:	3301      	adds	r3, #1
 800c3ca:	b2db      	uxtb	r3, r3
 800c3cc:	b25a      	sxtb	r2, r3
 800c3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c3d8:	e001      	b.n	800c3de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c3e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	3740      	adds	r7, #64	@ 0x40
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	bd80      	pop	{r7, pc}

0800c3f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b08e      	sub	sp, #56	@ 0x38
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
 800c3fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10b      	bne.n	800c420 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c40c:	f383 8811 	msr	BASEPRI, r3
 800c410:	f3bf 8f6f 	isb	sy
 800c414:	f3bf 8f4f 	dsb	sy
 800c418:	623b      	str	r3, [r7, #32]
}
 800c41a:	bf00      	nop
 800c41c:	bf00      	nop
 800c41e:	e7fd      	b.n	800c41c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c424:	2b00      	cmp	r3, #0
 800c426:	d00b      	beq.n	800c440 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c42c:	f383 8811 	msr	BASEPRI, r3
 800c430:	f3bf 8f6f 	isb	sy
 800c434:	f3bf 8f4f 	dsb	sy
 800c438:	61fb      	str	r3, [r7, #28]
}
 800c43a:	bf00      	nop
 800c43c:	bf00      	nop
 800c43e:	e7fd      	b.n	800c43c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <xQueueGiveFromISR+0x5c>
 800c448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c44a:	689b      	ldr	r3, [r3, #8]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d101      	bne.n	800c454 <xQueueGiveFromISR+0x60>
 800c450:	2301      	movs	r3, #1
 800c452:	e000      	b.n	800c456 <xQueueGiveFromISR+0x62>
 800c454:	2300      	movs	r3, #0
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10b      	bne.n	800c472 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c45e:	f383 8811 	msr	BASEPRI, r3
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	f3bf 8f4f 	dsb	sy
 800c46a:	61bb      	str	r3, [r7, #24]
}
 800c46c:	bf00      	nop
 800c46e:	bf00      	nop
 800c470:	e7fd      	b.n	800c46e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c472:	f002 fb09 	bl	800ea88 <vPortValidateInterruptPriority>
	__asm volatile
 800c476:	f3ef 8211 	mrs	r2, BASEPRI
 800c47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c47e:	f383 8811 	msr	BASEPRI, r3
 800c482:	f3bf 8f6f 	isb	sy
 800c486:	f3bf 8f4f 	dsb	sy
 800c48a:	617a      	str	r2, [r7, #20]
 800c48c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c48e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c490:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c496:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c49a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c49c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d22b      	bcs.n	800c4fa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c4a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ae:	1c5a      	adds	r2, r3, #1
 800c4b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c4b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4bc:	d112      	bne.n	800c4e4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d016      	beq.n	800c4f4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	3324      	adds	r3, #36	@ 0x24
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f001 f912 	bl	800d6f4 <xTaskRemoveFromEventList>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d00e      	beq.n	800c4f4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c4d6:	683b      	ldr	r3, [r7, #0]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d00b      	beq.n	800c4f4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	2201      	movs	r2, #1
 800c4e0:	601a      	str	r2, [r3, #0]
 800c4e2:	e007      	b.n	800c4f4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	b25a      	sxtb	r2, r3
 800c4ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4f8:	e001      	b.n	800c4fe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c500:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f383 8811 	msr	BASEPRI, r3
}
 800c508:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3738      	adds	r7, #56	@ 0x38
 800c510:	46bd      	mov	sp, r7
 800c512:	bd80      	pop	{r7, pc}

0800c514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08c      	sub	sp, #48	@ 0x30
 800c518:	af00      	add	r7, sp, #0
 800c51a:	60f8      	str	r0, [r7, #12]
 800c51c:	60b9      	str	r1, [r7, #8]
 800c51e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c520:	2300      	movs	r3, #0
 800c522:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d10b      	bne.n	800c546 <xQueueReceive+0x32>
	__asm volatile
 800c52e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c532:	f383 8811 	msr	BASEPRI, r3
 800c536:	f3bf 8f6f 	isb	sy
 800c53a:	f3bf 8f4f 	dsb	sy
 800c53e:	623b      	str	r3, [r7, #32]
}
 800c540:	bf00      	nop
 800c542:	bf00      	nop
 800c544:	e7fd      	b.n	800c542 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d103      	bne.n	800c554 <xQueueReceive+0x40>
 800c54c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c54e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <xQueueReceive+0x44>
 800c554:	2301      	movs	r3, #1
 800c556:	e000      	b.n	800c55a <xQueueReceive+0x46>
 800c558:	2300      	movs	r3, #0
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d10b      	bne.n	800c576 <xQueueReceive+0x62>
	__asm volatile
 800c55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c562:	f383 8811 	msr	BASEPRI, r3
 800c566:	f3bf 8f6f 	isb	sy
 800c56a:	f3bf 8f4f 	dsb	sy
 800c56e:	61fb      	str	r3, [r7, #28]
}
 800c570:	bf00      	nop
 800c572:	bf00      	nop
 800c574:	e7fd      	b.n	800c572 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c576:	f001 fa7d 	bl	800da74 <xTaskGetSchedulerState>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <xQueueReceive+0x72>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <xQueueReceive+0x76>
 800c586:	2301      	movs	r3, #1
 800c588:	e000      	b.n	800c58c <xQueueReceive+0x78>
 800c58a:	2300      	movs	r3, #0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d10b      	bne.n	800c5a8 <xQueueReceive+0x94>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	61bb      	str	r3, [r7, #24]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5a8:	f002 f98e 	bl	800e8c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c5b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d01f      	beq.n	800c5f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5b8:	68b9      	ldr	r1, [r7, #8]
 800c5ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5bc:	f000 fb02 	bl	800cbc4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c2:	1e5a      	subs	r2, r3, #1
 800c5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d00f      	beq.n	800c5f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	3310      	adds	r3, #16
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f001 f88d 	bl	800d6f4 <xTaskRemoveFromEventList>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d007      	beq.n	800c5f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c5e0:	4b3c      	ldr	r3, [pc, #240]	@ (800c6d4 <xQueueReceive+0x1c0>)
 800c5e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5e6:	601a      	str	r2, [r3, #0]
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c5f0:	f002 f99c 	bl	800e92c <vPortExitCritical>
				return pdPASS;
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	e069      	b.n	800c6cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d103      	bne.n	800c606 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c5fe:	f002 f995 	bl	800e92c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c602:	2300      	movs	r3, #0
 800c604:	e062      	b.n	800c6cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d106      	bne.n	800c61a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c60c:	f107 0310 	add.w	r3, r7, #16
 800c610:	4618      	mov	r0, r3
 800c612:	f001 f8d3 	bl	800d7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c616:	2301      	movs	r3, #1
 800c618:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c61a:	f002 f987 	bl	800e92c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c61e:	f000 fe43 	bl	800d2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c622:	f002 f951 	bl	800e8c8 <vPortEnterCritical>
 800c626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c628:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c62c:	b25b      	sxtb	r3, r3
 800c62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c632:	d103      	bne.n	800c63c <xQueueReceive+0x128>
 800c634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c636:	2200      	movs	r2, #0
 800c638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c63e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c642:	b25b      	sxtb	r3, r3
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c648:	d103      	bne.n	800c652 <xQueueReceive+0x13e>
 800c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c652:	f002 f96b 	bl	800e92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c656:	1d3a      	adds	r2, r7, #4
 800c658:	f107 0310 	add.w	r3, r7, #16
 800c65c:	4611      	mov	r1, r2
 800c65e:	4618      	mov	r0, r3
 800c660:	f001 f8c2 	bl	800d7e8 <xTaskCheckForTimeOut>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d123      	bne.n	800c6b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c66a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c66c:	f000 fb22 	bl	800ccb4 <prvIsQueueEmpty>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d017      	beq.n	800c6a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c678:	3324      	adds	r3, #36	@ 0x24
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	4611      	mov	r1, r2
 800c67e:	4618      	mov	r0, r3
 800c680:	f000 ffe6 	bl	800d650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c684:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c686:	f000 fac3 	bl	800cc10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c68a:	f000 fe1b 	bl	800d2c4 <xTaskResumeAll>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b00      	cmp	r3, #0
 800c692:	d189      	bne.n	800c5a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c694:	4b0f      	ldr	r3, [pc, #60]	@ (800c6d4 <xQueueReceive+0x1c0>)
 800c696:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c69a:	601a      	str	r2, [r3, #0]
 800c69c:	f3bf 8f4f 	dsb	sy
 800c6a0:	f3bf 8f6f 	isb	sy
 800c6a4:	e780      	b.n	800c5a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6a8:	f000 fab2 	bl	800cc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c6ac:	f000 fe0a 	bl	800d2c4 <xTaskResumeAll>
 800c6b0:	e77a      	b.n	800c5a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c6b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6b4:	f000 faac 	bl	800cc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c6b8:	f000 fe04 	bl	800d2c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c6bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6be:	f000 faf9 	bl	800ccb4 <prvIsQueueEmpty>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f43f af6f 	beq.w	800c5a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c6ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	3730      	adds	r7, #48	@ 0x30
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	e000ed04 	.word	0xe000ed04

0800c6d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b08e      	sub	sp, #56	@ 0x38
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d10b      	bne.n	800c70c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	623b      	str	r3, [r7, #32]
}
 800c706:	bf00      	nop
 800c708:	bf00      	nop
 800c70a:	e7fd      	b.n	800c708 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c70c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c710:	2b00      	cmp	r3, #0
 800c712:	d00b      	beq.n	800c72c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c718:	f383 8811 	msr	BASEPRI, r3
 800c71c:	f3bf 8f6f 	isb	sy
 800c720:	f3bf 8f4f 	dsb	sy
 800c724:	61fb      	str	r3, [r7, #28]
}
 800c726:	bf00      	nop
 800c728:	bf00      	nop
 800c72a:	e7fd      	b.n	800c728 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c72c:	f001 f9a2 	bl	800da74 <xTaskGetSchedulerState>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d102      	bne.n	800c73c <xQueueSemaphoreTake+0x64>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <xQueueSemaphoreTake+0x68>
 800c73c:	2301      	movs	r3, #1
 800c73e:	e000      	b.n	800c742 <xQueueSemaphoreTake+0x6a>
 800c740:	2300      	movs	r3, #0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10b      	bne.n	800c75e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	61bb      	str	r3, [r7, #24]
}
 800c758:	bf00      	nop
 800c75a:	bf00      	nop
 800c75c:	e7fd      	b.n	800c75a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c75e:	f002 f8b3 	bl	800e8c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c766:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d024      	beq.n	800c7b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c76e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c770:	1e5a      	subs	r2, r3, #1
 800c772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c774:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d104      	bne.n	800c788 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c77e:	f001 faf3 	bl	800dd68 <pvTaskIncrementMutexHeldCount>
 800c782:	4602      	mov	r2, r0
 800c784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c786:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c78a:	691b      	ldr	r3, [r3, #16]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00f      	beq.n	800c7b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c792:	3310      	adds	r3, #16
 800c794:	4618      	mov	r0, r3
 800c796:	f000 ffad 	bl	800d6f4 <xTaskRemoveFromEventList>
 800c79a:	4603      	mov	r3, r0
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d007      	beq.n	800c7b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c7a0:	4b54      	ldr	r3, [pc, #336]	@ (800c8f4 <xQueueSemaphoreTake+0x21c>)
 800c7a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7a6:	601a      	str	r2, [r3, #0]
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c7b0:	f002 f8bc 	bl	800e92c <vPortExitCritical>
				return pdPASS;
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e098      	b.n	800c8ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d112      	bne.n	800c7e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	617b      	str	r3, [r7, #20]
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	e7fd      	b.n	800c7d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c7dc:	f002 f8a6 	bl	800e92c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	e082      	b.n	800c8ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d106      	bne.n	800c7f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7ea:	f107 030c 	add.w	r3, r7, #12
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 ffe4 	bl	800d7bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7f8:	f002 f898 	bl	800e92c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7fc:	f000 fd54 	bl	800d2a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c800:	f002 f862 	bl	800e8c8 <vPortEnterCritical>
 800c804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c806:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c80a:	b25b      	sxtb	r3, r3
 800c80c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c810:	d103      	bne.n	800c81a <xQueueSemaphoreTake+0x142>
 800c812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c814:	2200      	movs	r2, #0
 800c816:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c81a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c820:	b25b      	sxtb	r3, r3
 800c822:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c826:	d103      	bne.n	800c830 <xQueueSemaphoreTake+0x158>
 800c828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82a:	2200      	movs	r2, #0
 800c82c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c830:	f002 f87c 	bl	800e92c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c834:	463a      	mov	r2, r7
 800c836:	f107 030c 	add.w	r3, r7, #12
 800c83a:	4611      	mov	r1, r2
 800c83c:	4618      	mov	r0, r3
 800c83e:	f000 ffd3 	bl	800d7e8 <xTaskCheckForTimeOut>
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d132      	bne.n	800c8ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c848:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c84a:	f000 fa33 	bl	800ccb4 <prvIsQueueEmpty>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d026      	beq.n	800c8a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d109      	bne.n	800c870 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c85c:	f002 f834 	bl	800e8c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	4618      	mov	r0, r3
 800c866:	f001 f923 	bl	800dab0 <xTaskPriorityInherit>
 800c86a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c86c:	f002 f85e 	bl	800e92c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c872:	3324      	adds	r3, #36	@ 0x24
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	4611      	mov	r1, r2
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fee9 	bl	800d650 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c87e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c880:	f000 f9c6 	bl	800cc10 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c884:	f000 fd1e 	bl	800d2c4 <xTaskResumeAll>
 800c888:	4603      	mov	r3, r0
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f47f af67 	bne.w	800c75e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c890:	4b18      	ldr	r3, [pc, #96]	@ (800c8f4 <xQueueSemaphoreTake+0x21c>)
 800c892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c896:	601a      	str	r2, [r3, #0]
 800c898:	f3bf 8f4f 	dsb	sy
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	e75d      	b.n	800c75e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c8a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8a4:	f000 f9b4 	bl	800cc10 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c8a8:	f000 fd0c 	bl	800d2c4 <xTaskResumeAll>
 800c8ac:	e757      	b.n	800c75e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c8ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8b0:	f000 f9ae 	bl	800cc10 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c8b4:	f000 fd06 	bl	800d2c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8ba:	f000 f9fb 	bl	800ccb4 <prvIsQueueEmpty>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	f43f af4c 	beq.w	800c75e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d00d      	beq.n	800c8e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c8cc:	f001 fffc 	bl	800e8c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c8d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c8d2:	f000 f8f5 	bl	800cac0 <prvGetDisinheritPriorityAfterTimeout>
 800c8d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f001 f9be 	bl	800dc60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c8e4:	f002 f822 	bl	800e92c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c8e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3738      	adds	r7, #56	@ 0x38
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	e000ed04 	.word	0xe000ed04

0800c8f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08e      	sub	sp, #56	@ 0x38
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10b      	bne.n	800c926 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	623b      	str	r3, [r7, #32]
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	e7fd      	b.n	800c922 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d103      	bne.n	800c934 <xQueueReceiveFromISR+0x3c>
 800c92c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <xQueueReceiveFromISR+0x40>
 800c934:	2301      	movs	r3, #1
 800c936:	e000      	b.n	800c93a <xQueueReceiveFromISR+0x42>
 800c938:	2300      	movs	r3, #0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d10b      	bne.n	800c956 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c942:	f383 8811 	msr	BASEPRI, r3
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	f3bf 8f4f 	dsb	sy
 800c94e:	61fb      	str	r3, [r7, #28]
}
 800c950:	bf00      	nop
 800c952:	bf00      	nop
 800c954:	e7fd      	b.n	800c952 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c956:	f002 f897 	bl	800ea88 <vPortValidateInterruptPriority>
	__asm volatile
 800c95a:	f3ef 8211 	mrs	r2, BASEPRI
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	61ba      	str	r2, [r7, #24]
 800c970:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c972:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c97a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c97c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d02f      	beq.n	800c9e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c98c:	68b9      	ldr	r1, [r7, #8]
 800c98e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c990:	f000 f918 	bl	800cbc4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c996:	1e5a      	subs	r2, r3, #1
 800c998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c99a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c99c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a4:	d112      	bne.n	800c9cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9a8:	691b      	ldr	r3, [r3, #16]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d016      	beq.n	800c9dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9b0:	3310      	adds	r3, #16
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f000 fe9e 	bl	800d6f4 <xTaskRemoveFromEventList>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00e      	beq.n	800c9dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d00b      	beq.n	800c9dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	601a      	str	r2, [r3, #0]
 800c9ca:	e007      	b.n	800c9dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c9cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	b25a      	sxtb	r2, r3
 800c9d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c9d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e0:	e001      	b.n	800c9e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	637b      	str	r3, [r7, #52]	@ 0x34
 800c9e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c9e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	f383 8811 	msr	BASEPRI, r3
}
 800c9f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c9f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3738      	adds	r7, #56	@ 0x38
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10b      	bne.n	800ca22 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800ca0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	60bb      	str	r3, [r7, #8]
}
 800ca1c:	bf00      	nop
 800ca1e:	bf00      	nop
 800ca20:	e7fd      	b.n	800ca1e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ca22:	f001 ff51 	bl	800e8c8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca2a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ca2c:	f001 ff7e 	bl	800e92c <vPortExitCritical>

	return uxReturn;
 800ca30:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ca3a:	b480      	push	{r7}
 800ca3c:	b087      	sub	sp, #28
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d10b      	bne.n	800ca64 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800ca4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca50:	f383 8811 	msr	BASEPRI, r3
 800ca54:	f3bf 8f6f 	isb	sy
 800ca58:	f3bf 8f4f 	dsb	sy
 800ca5c:	60fb      	str	r3, [r7, #12]
}
 800ca5e:	bf00      	nop
 800ca60:	bf00      	nop
 800ca62:	e7fd      	b.n	800ca60 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca68:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ca6a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	371c      	adds	r7, #28
 800ca70:	46bd      	mov	sp, r7
 800ca72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca76:	4770      	bx	lr

0800ca78 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b084      	sub	sp, #16
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d10b      	bne.n	800caa2 <vQueueDelete+0x2a>
	__asm volatile
 800ca8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8e:	f383 8811 	msr	BASEPRI, r3
 800ca92:	f3bf 8f6f 	isb	sy
 800ca96:	f3bf 8f4f 	dsb	sy
 800ca9a:	60bb      	str	r3, [r7, #8]
}
 800ca9c:	bf00      	nop
 800ca9e:	bf00      	nop
 800caa0:	e7fd      	b.n	800ca9e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800caa2:	68f8      	ldr	r0, [r7, #12]
 800caa4:	f000 f95e 	bl	800cd64 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d102      	bne.n	800cab8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800cab2:	68f8      	ldr	r0, [r7, #12]
 800cab4:	f002 f8f8 	bl	800eca8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cab8:	bf00      	nop
 800caba:	3710      	adds	r7, #16
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d006      	beq.n	800cade <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	e001      	b.n	800cae2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cade:	2300      	movs	r3, #0
 800cae0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cae2:	68fb      	ldr	r3, [r7, #12]
	}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3714      	adds	r7, #20
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb04:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d10d      	bne.n	800cb2a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d14d      	bne.n	800cbb2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	689b      	ldr	r3, [r3, #8]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f001 f830 	bl	800db80 <xTaskPriorityDisinherit>
 800cb20:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	2200      	movs	r2, #0
 800cb26:	609a      	str	r2, [r3, #8]
 800cb28:	e043      	b.n	800cbb2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d119      	bne.n	800cb64 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	6858      	ldr	r0, [r3, #4]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb38:	461a      	mov	r2, r3
 800cb3a:	68b9      	ldr	r1, [r7, #8]
 800cb3c:	f002 ff52 	bl	800f9e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	685a      	ldr	r2, [r3, #4]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb48:	441a      	add	r2, r3
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	685a      	ldr	r2, [r3, #4]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	689b      	ldr	r3, [r3, #8]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d32b      	bcc.n	800cbb2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681a      	ldr	r2, [r3, #0]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	605a      	str	r2, [r3, #4]
 800cb62:	e026      	b.n	800cbb2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	68d8      	ldr	r0, [r3, #12]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb6c:	461a      	mov	r2, r3
 800cb6e:	68b9      	ldr	r1, [r7, #8]
 800cb70:	f002 ff38 	bl	800f9e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	68da      	ldr	r2, [r3, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb7c:	425b      	negs	r3, r3
 800cb7e:	441a      	add	r2, r3
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	68da      	ldr	r2, [r3, #12]
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	429a      	cmp	r2, r3
 800cb8e:	d207      	bcs.n	800cba0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	689a      	ldr	r2, [r3, #8]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb98:	425b      	negs	r3, r3
 800cb9a:	441a      	add	r2, r3
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2b02      	cmp	r3, #2
 800cba4:	d105      	bne.n	800cbb2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cba6:	693b      	ldr	r3, [r7, #16]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	3b01      	subs	r3, #1
 800cbb0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	1c5a      	adds	r2, r3, #1
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cbba:	697b      	ldr	r3, [r7, #20]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d018      	beq.n	800cc08 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbde:	441a      	add	r2, r3
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	68da      	ldr	r2, [r3, #12]
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	689b      	ldr	r3, [r3, #8]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d303      	bcc.n	800cbf8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681a      	ldr	r2, [r3, #0]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68d9      	ldr	r1, [r3, #12]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc00:	461a      	mov	r2, r3
 800cc02:	6838      	ldr	r0, [r7, #0]
 800cc04:	f002 feee 	bl	800f9e4 <memcpy>
	}
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cc18:	f001 fe56 	bl	800e8c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc22:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc24:	e011      	b.n	800cc4a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d012      	beq.n	800cc54 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3324      	adds	r3, #36	@ 0x24
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 fd5e 	bl	800d6f4 <xTaskRemoveFromEventList>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d001      	beq.n	800cc42 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cc3e:	f000 fe37 	bl	800d8b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cc42:	7bfb      	ldrb	r3, [r7, #15]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	b2db      	uxtb	r3, r3
 800cc48:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	dce9      	bgt.n	800cc26 <prvUnlockQueue+0x16>
 800cc52:	e000      	b.n	800cc56 <prvUnlockQueue+0x46>
					break;
 800cc54:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	22ff      	movs	r2, #255	@ 0xff
 800cc5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cc5e:	f001 fe65 	bl	800e92c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cc62:	f001 fe31 	bl	800e8c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc6c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc6e:	e011      	b.n	800cc94 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	691b      	ldr	r3, [r3, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d012      	beq.n	800cc9e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3310      	adds	r3, #16
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f000 fd39 	bl	800d6f4 <xTaskRemoveFromEventList>
 800cc82:	4603      	mov	r3, r0
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d001      	beq.n	800cc8c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cc88:	f000 fe12 	bl	800d8b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	dce9      	bgt.n	800cc70 <prvUnlockQueue+0x60>
 800cc9c:	e000      	b.n	800cca0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cc9e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	22ff      	movs	r2, #255	@ 0xff
 800cca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cca8:	f001 fe40 	bl	800e92c <vPortExitCritical>
}
 800ccac:	bf00      	nop
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ccbc:	f001 fe04 	bl	800e8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d102      	bne.n	800ccce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ccc8:	2301      	movs	r3, #1
 800ccca:	60fb      	str	r3, [r7, #12]
 800cccc:	e001      	b.n	800ccd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ccce:	2300      	movs	r3, #0
 800ccd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ccd2:	f001 fe2b 	bl	800e92c <vPortExitCritical>

	return xReturn;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cce8:	f001 fdee 	bl	800e8c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d102      	bne.n	800ccfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	60fb      	str	r3, [r7, #12]
 800ccfc:	e001      	b.n	800cd02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ccfe:	2300      	movs	r3, #0
 800cd00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd02:	f001 fe13 	bl	800e92c <vPortExitCritical>

	return xReturn;
 800cd06:	68fb      	ldr	r3, [r7, #12]
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3710      	adds	r7, #16
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	e014      	b.n	800cd4a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd20:	4a0f      	ldr	r2, [pc, #60]	@ (800cd60 <vQueueAddToRegistry+0x50>)
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10b      	bne.n	800cd44 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd2c:	490c      	ldr	r1, [pc, #48]	@ (800cd60 <vQueueAddToRegistry+0x50>)
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	683a      	ldr	r2, [r7, #0]
 800cd32:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd36:	4a0a      	ldr	r2, [pc, #40]	@ (800cd60 <vQueueAddToRegistry+0x50>)
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	00db      	lsls	r3, r3, #3
 800cd3c:	4413      	add	r3, r2
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cd42:	e006      	b.n	800cd52 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	3301      	adds	r3, #1
 800cd48:	60fb      	str	r3, [r7, #12]
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b07      	cmp	r3, #7
 800cd4e:	d9e7      	bls.n	800cd20 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd50:	bf00      	nop
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	20000b54 	.word	0x20000b54

0800cd64 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cd64:	b480      	push	{r7}
 800cd66:	b085      	sub	sp, #20
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60fb      	str	r3, [r7, #12]
 800cd70:	e016      	b.n	800cda0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cd72:	4a10      	ldr	r2, [pc, #64]	@ (800cdb4 <vQueueUnregisterQueue+0x50>)
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	00db      	lsls	r3, r3, #3
 800cd78:	4413      	add	r3, r2
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	429a      	cmp	r2, r3
 800cd80:	d10b      	bne.n	800cd9a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cd82:	4a0c      	ldr	r2, [pc, #48]	@ (800cdb4 <vQueueUnregisterQueue+0x50>)
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2100      	movs	r1, #0
 800cd88:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cd8c:	4a09      	ldr	r2, [pc, #36]	@ (800cdb4 <vQueueUnregisterQueue+0x50>)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	00db      	lsls	r3, r3, #3
 800cd92:	4413      	add	r3, r2
 800cd94:	2200      	movs	r2, #0
 800cd96:	605a      	str	r2, [r3, #4]
				break;
 800cd98:	e006      	b.n	800cda8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b07      	cmp	r3, #7
 800cda4:	d9e5      	bls.n	800cd72 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cda6:	bf00      	nop
 800cda8:	bf00      	nop
 800cdaa:	3714      	adds	r7, #20
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr
 800cdb4:	20000b54 	.word	0x20000b54

0800cdb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b086      	sub	sp, #24
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	60f8      	str	r0, [r7, #12]
 800cdc0:	60b9      	str	r1, [r7, #8]
 800cdc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cdc8:	f001 fd7e 	bl	800e8c8 <vPortEnterCritical>
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cdd2:	b25b      	sxtb	r3, r3
 800cdd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd8:	d103      	bne.n	800cde2 <vQueueWaitForMessageRestricted+0x2a>
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	2200      	movs	r2, #0
 800cdde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cde8:	b25b      	sxtb	r3, r3
 800cdea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdee:	d103      	bne.n	800cdf8 <vQueueWaitForMessageRestricted+0x40>
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	2200      	movs	r2, #0
 800cdf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cdf8:	f001 fd98 	bl	800e92c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d106      	bne.n	800ce12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	3324      	adds	r3, #36	@ 0x24
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fc45 	bl	800d69c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ce12:	6978      	ldr	r0, [r7, #20]
 800ce14:	f7ff fefc 	bl	800cc10 <prvUnlockQueue>
	}
 800ce18:	bf00      	nop
 800ce1a:	3718      	adds	r7, #24
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b08e      	sub	sp, #56	@ 0x38
 800ce24:	af04      	add	r7, sp, #16
 800ce26:	60f8      	str	r0, [r7, #12]
 800ce28:	60b9      	str	r1, [r7, #8]
 800ce2a:	607a      	str	r2, [r7, #4]
 800ce2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ce2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10b      	bne.n	800ce4c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	623b      	str	r3, [r7, #32]
}
 800ce46:	bf00      	nop
 800ce48:	bf00      	nop
 800ce4a:	e7fd      	b.n	800ce48 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ce4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d10b      	bne.n	800ce6a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ce52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce56:	f383 8811 	msr	BASEPRI, r3
 800ce5a:	f3bf 8f6f 	isb	sy
 800ce5e:	f3bf 8f4f 	dsb	sy
 800ce62:	61fb      	str	r3, [r7, #28]
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop
 800ce68:	e7fd      	b.n	800ce66 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ce6a:	235c      	movs	r3, #92	@ 0x5c
 800ce6c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	2b5c      	cmp	r3, #92	@ 0x5c
 800ce72:	d00b      	beq.n	800ce8c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ce74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce78:	f383 8811 	msr	BASEPRI, r3
 800ce7c:	f3bf 8f6f 	isb	sy
 800ce80:	f3bf 8f4f 	dsb	sy
 800ce84:	61bb      	str	r3, [r7, #24]
}
 800ce86:	bf00      	nop
 800ce88:	bf00      	nop
 800ce8a:	e7fd      	b.n	800ce88 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ce8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ce8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d01e      	beq.n	800ced2 <xTaskCreateStatic+0xb2>
 800ce94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d01b      	beq.n	800ced2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ce9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cea2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea6:	2202      	movs	r2, #2
 800cea8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ceac:	2300      	movs	r3, #0
 800ceae:	9303      	str	r3, [sp, #12]
 800ceb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceb2:	9302      	str	r3, [sp, #8]
 800ceb4:	f107 0314 	add.w	r3, r7, #20
 800ceb8:	9301      	str	r3, [sp, #4]
 800ceba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cebc:	9300      	str	r3, [sp, #0]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	68b9      	ldr	r1, [r7, #8]
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	f000 f850 	bl	800cf6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ceca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cecc:	f000 f8de 	bl	800d08c <prvAddNewTaskToReadyList>
 800ced0:	e001      	b.n	800ced6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ced2:	2300      	movs	r3, #0
 800ced4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ced6:	697b      	ldr	r3, [r7, #20]
	}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3728      	adds	r7, #40	@ 0x28
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b08c      	sub	sp, #48	@ 0x30
 800cee4:	af04      	add	r7, sp, #16
 800cee6:	60f8      	str	r0, [r7, #12]
 800cee8:	60b9      	str	r1, [r7, #8]
 800ceea:	603b      	str	r3, [r7, #0]
 800ceec:	4613      	mov	r3, r2
 800ceee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cef0:	88fb      	ldrh	r3, [r7, #6]
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4618      	mov	r0, r3
 800cef6:	f001 fe09 	bl	800eb0c <pvPortMalloc>
 800cefa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d00e      	beq.n	800cf20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cf02:	205c      	movs	r0, #92	@ 0x5c
 800cf04:	f001 fe02 	bl	800eb0c <pvPortMalloc>
 800cf08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cf0a:	69fb      	ldr	r3, [r7, #28]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d003      	beq.n	800cf18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	697a      	ldr	r2, [r7, #20]
 800cf14:	631a      	str	r2, [r3, #48]	@ 0x30
 800cf16:	e005      	b.n	800cf24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cf18:	6978      	ldr	r0, [r7, #20]
 800cf1a:	f001 fec5 	bl	800eca8 <vPortFree>
 800cf1e:	e001      	b.n	800cf24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cf20:	2300      	movs	r3, #0
 800cf22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d017      	beq.n	800cf5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cf32:	88fa      	ldrh	r2, [r7, #6]
 800cf34:	2300      	movs	r3, #0
 800cf36:	9303      	str	r3, [sp, #12]
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	9302      	str	r3, [sp, #8]
 800cf3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf3e:	9301      	str	r3, [sp, #4]
 800cf40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf42:	9300      	str	r3, [sp, #0]
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	68b9      	ldr	r1, [r7, #8]
 800cf48:	68f8      	ldr	r0, [r7, #12]
 800cf4a:	f000 f80e 	bl	800cf6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf4e:	69f8      	ldr	r0, [r7, #28]
 800cf50:	f000 f89c 	bl	800d08c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cf54:	2301      	movs	r3, #1
 800cf56:	61bb      	str	r3, [r7, #24]
 800cf58:	e002      	b.n	800cf60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cf5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cf5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cf60:	69bb      	ldr	r3, [r7, #24]
	}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3720      	adds	r7, #32
 800cf66:	46bd      	mov	sp, r7
 800cf68:	bd80      	pop	{r7, pc}

0800cf6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cf6a:	b580      	push	{r7, lr}
 800cf6c:	b088      	sub	sp, #32
 800cf6e:	af00      	add	r7, sp, #0
 800cf70:	60f8      	str	r0, [r7, #12]
 800cf72:	60b9      	str	r1, [r7, #8]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cf78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	009b      	lsls	r3, r3, #2
 800cf80:	461a      	mov	r2, r3
 800cf82:	21a5      	movs	r1, #165	@ 0xa5
 800cf84:	f002 fcfa 	bl	800f97c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cf92:	3b01      	subs	r3, #1
 800cf94:	009b      	lsls	r3, r3, #2
 800cf96:	4413      	add	r3, r2
 800cf98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	f023 0307 	bic.w	r3, r3, #7
 800cfa0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cfa2:	69bb      	ldr	r3, [r7, #24]
 800cfa4:	f003 0307 	and.w	r3, r3, #7
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00b      	beq.n	800cfc4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	617b      	str	r3, [r7, #20]
}
 800cfbe:	bf00      	nop
 800cfc0:	bf00      	nop
 800cfc2:	e7fd      	b.n	800cfc0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d01f      	beq.n	800d00a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cfca:	2300      	movs	r3, #0
 800cfcc:	61fb      	str	r3, [r7, #28]
 800cfce:	e012      	b.n	800cff6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cfd0:	68ba      	ldr	r2, [r7, #8]
 800cfd2:	69fb      	ldr	r3, [r7, #28]
 800cfd4:	4413      	add	r3, r2
 800cfd6:	7819      	ldrb	r1, [r3, #0]
 800cfd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cfda:	69fb      	ldr	r3, [r7, #28]
 800cfdc:	4413      	add	r3, r2
 800cfde:	3334      	adds	r3, #52	@ 0x34
 800cfe0:	460a      	mov	r2, r1
 800cfe2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cfe4:	68ba      	ldr	r2, [r7, #8]
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	4413      	add	r3, r2
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d006      	beq.n	800cffe <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	3301      	adds	r3, #1
 800cff4:	61fb      	str	r3, [r7, #28]
 800cff6:	69fb      	ldr	r3, [r7, #28]
 800cff8:	2b0f      	cmp	r3, #15
 800cffa:	d9e9      	bls.n	800cfd0 <prvInitialiseNewTask+0x66>
 800cffc:	e000      	b.n	800d000 <prvInitialiseNewTask+0x96>
			{
				break;
 800cffe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d002:	2200      	movs	r2, #0
 800d004:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d008:	e003      	b.n	800d012 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d00c:	2200      	movs	r2, #0
 800d00e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d014:	2b37      	cmp	r3, #55	@ 0x37
 800d016:	d901      	bls.n	800d01c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d018:	2337      	movs	r3, #55	@ 0x37
 800d01a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d01c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d01e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d020:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d026:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d02a:	2200      	movs	r2, #0
 800d02c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d030:	3304      	adds	r3, #4
 800d032:	4618      	mov	r0, r3
 800d034:	f7fe fdf6 	bl	800bc24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	3318      	adds	r3, #24
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fe fdf1 	bl	800bc24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d046:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d04a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d04e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d050:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d056:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d05a:	2200      	movs	r2, #0
 800d05c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d060:	2200      	movs	r2, #0
 800d062:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d066:	683a      	ldr	r2, [r7, #0]
 800d068:	68f9      	ldr	r1, [r7, #12]
 800d06a:	69b8      	ldr	r0, [r7, #24]
 800d06c:	f001 fafe 	bl	800e66c <pxPortInitialiseStack>
 800d070:	4602      	mov	r2, r0
 800d072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d074:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d002      	beq.n	800d082 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d07e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d082:	bf00      	nop
 800d084:	3720      	adds	r7, #32
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
	...

0800d08c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d094:	f001 fc18 	bl	800e8c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d098:	4b2d      	ldr	r3, [pc, #180]	@ (800d150 <prvAddNewTaskToReadyList+0xc4>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3301      	adds	r3, #1
 800d09e:	4a2c      	ldr	r2, [pc, #176]	@ (800d150 <prvAddNewTaskToReadyList+0xc4>)
 800d0a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d0a2:	4b2c      	ldr	r3, [pc, #176]	@ (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d109      	bne.n	800d0be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d0aa:	4a2a      	ldr	r2, [pc, #168]	@ (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d0b0:	4b27      	ldr	r3, [pc, #156]	@ (800d150 <prvAddNewTaskToReadyList+0xc4>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d110      	bne.n	800d0da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d0b8:	f000 fc1e 	bl	800d8f8 <prvInitialiseTaskLists>
 800d0bc:	e00d      	b.n	800d0da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d0be:	4b26      	ldr	r3, [pc, #152]	@ (800d158 <prvAddNewTaskToReadyList+0xcc>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d109      	bne.n	800d0da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d0c6:	4b23      	ldr	r3, [pc, #140]	@ (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d802      	bhi.n	800d0da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d0d4:	4a1f      	ldr	r2, [pc, #124]	@ (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d0da:	4b20      	ldr	r3, [pc, #128]	@ (800d15c <prvAddNewTaskToReadyList+0xd0>)
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	3301      	adds	r3, #1
 800d0e0:	4a1e      	ldr	r2, [pc, #120]	@ (800d15c <prvAddNewTaskToReadyList+0xd0>)
 800d0e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d0e4:	4b1d      	ldr	r3, [pc, #116]	@ (800d15c <prvAddNewTaskToReadyList+0xd0>)
 800d0e6:	681a      	ldr	r2, [r3, #0]
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d0f0:	4b1b      	ldr	r3, [pc, #108]	@ (800d160 <prvAddNewTaskToReadyList+0xd4>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d903      	bls.n	800d100 <prvAddNewTaskToReadyList+0x74>
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0fc:	4a18      	ldr	r2, [pc, #96]	@ (800d160 <prvAddNewTaskToReadyList+0xd4>)
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d104:	4613      	mov	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	4413      	add	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4a15      	ldr	r2, [pc, #84]	@ (800d164 <prvAddNewTaskToReadyList+0xd8>)
 800d10e:	441a      	add	r2, r3
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3304      	adds	r3, #4
 800d114:	4619      	mov	r1, r3
 800d116:	4610      	mov	r0, r2
 800d118:	f7fe fd91 	bl	800bc3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d11c:	f001 fc06 	bl	800e92c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d120:	4b0d      	ldr	r3, [pc, #52]	@ (800d158 <prvAddNewTaskToReadyList+0xcc>)
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d00e      	beq.n	800d146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d128:	4b0a      	ldr	r3, [pc, #40]	@ (800d154 <prvAddNewTaskToReadyList+0xc8>)
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d132:	429a      	cmp	r2, r3
 800d134:	d207      	bcs.n	800d146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d136:	4b0c      	ldr	r3, [pc, #48]	@ (800d168 <prvAddNewTaskToReadyList+0xdc>)
 800d138:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d13c:	601a      	str	r2, [r3, #0]
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d146:	bf00      	nop
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	20001068 	.word	0x20001068
 800d154:	20000b94 	.word	0x20000b94
 800d158:	20001074 	.word	0x20001074
 800d15c:	20001084 	.word	0x20001084
 800d160:	20001070 	.word	0x20001070
 800d164:	20000b98 	.word	0x20000b98
 800d168:	e000ed04 	.word	0xe000ed04

0800d16c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d174:	2300      	movs	r3, #0
 800d176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d018      	beq.n	800d1b0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d17e:	4b14      	ldr	r3, [pc, #80]	@ (800d1d0 <vTaskDelay+0x64>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d00b      	beq.n	800d19e <vTaskDelay+0x32>
	__asm volatile
 800d186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d18a:	f383 8811 	msr	BASEPRI, r3
 800d18e:	f3bf 8f6f 	isb	sy
 800d192:	f3bf 8f4f 	dsb	sy
 800d196:	60bb      	str	r3, [r7, #8]
}
 800d198:	bf00      	nop
 800d19a:	bf00      	nop
 800d19c:	e7fd      	b.n	800d19a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d19e:	f000 f883 	bl	800d2a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d1a2:	2100      	movs	r1, #0
 800d1a4:	6878      	ldr	r0, [r7, #4]
 800d1a6:	f000 fdf3 	bl	800dd90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d1aa:	f000 f88b 	bl	800d2c4 <xTaskResumeAll>
 800d1ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d107      	bne.n	800d1c6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d1b6:	4b07      	ldr	r3, [pc, #28]	@ (800d1d4 <vTaskDelay+0x68>)
 800d1b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	f3bf 8f4f 	dsb	sy
 800d1c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1c6:	bf00      	nop
 800d1c8:	3710      	adds	r7, #16
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}
 800d1ce:	bf00      	nop
 800d1d0:	20001090 	.word	0x20001090
 800d1d4:	e000ed04 	.word	0xe000ed04

0800d1d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08a      	sub	sp, #40	@ 0x28
 800d1dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1e6:	463a      	mov	r2, r7
 800d1e8:	1d39      	adds	r1, r7, #4
 800d1ea:	f107 0308 	add.w	r3, r7, #8
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f7fe fcc4 	bl	800bb7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	68ba      	ldr	r2, [r7, #8]
 800d1fa:	9202      	str	r2, [sp, #8]
 800d1fc:	9301      	str	r3, [sp, #4]
 800d1fe:	2300      	movs	r3, #0
 800d200:	9300      	str	r3, [sp, #0]
 800d202:	2300      	movs	r3, #0
 800d204:	460a      	mov	r2, r1
 800d206:	4922      	ldr	r1, [pc, #136]	@ (800d290 <vTaskStartScheduler+0xb8>)
 800d208:	4822      	ldr	r0, [pc, #136]	@ (800d294 <vTaskStartScheduler+0xbc>)
 800d20a:	f7ff fe09 	bl	800ce20 <xTaskCreateStatic>
 800d20e:	4603      	mov	r3, r0
 800d210:	4a21      	ldr	r2, [pc, #132]	@ (800d298 <vTaskStartScheduler+0xc0>)
 800d212:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d214:	4b20      	ldr	r3, [pc, #128]	@ (800d298 <vTaskStartScheduler+0xc0>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d21c:	2301      	movs	r3, #1
 800d21e:	617b      	str	r3, [r7, #20]
 800d220:	e001      	b.n	800d226 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d222:	2300      	movs	r3, #0
 800d224:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d102      	bne.n	800d232 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d22c:	f000 fe04 	bl	800de38 <xTimerCreateTimerTask>
 800d230:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d116      	bne.n	800d266 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	613b      	str	r3, [r7, #16]
}
 800d24a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d24c:	4b13      	ldr	r3, [pc, #76]	@ (800d29c <vTaskStartScheduler+0xc4>)
 800d24e:	f04f 32ff 	mov.w	r2, #4294967295
 800d252:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d254:	4b12      	ldr	r3, [pc, #72]	@ (800d2a0 <vTaskStartScheduler+0xc8>)
 800d256:	2201      	movs	r2, #1
 800d258:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d25a:	4b12      	ldr	r3, [pc, #72]	@ (800d2a4 <vTaskStartScheduler+0xcc>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d260:	f001 fa8e 	bl	800e780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d264:	e00f      	b.n	800d286 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d26c:	d10b      	bne.n	800d286 <vTaskStartScheduler+0xae>
	__asm volatile
 800d26e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d272:	f383 8811 	msr	BASEPRI, r3
 800d276:	f3bf 8f6f 	isb	sy
 800d27a:	f3bf 8f4f 	dsb	sy
 800d27e:	60fb      	str	r3, [r7, #12]
}
 800d280:	bf00      	nop
 800d282:	bf00      	nop
 800d284:	e7fd      	b.n	800d282 <vTaskStartScheduler+0xaa>
}
 800d286:	bf00      	nop
 800d288:	3718      	adds	r7, #24
 800d28a:	46bd      	mov	sp, r7
 800d28c:	bd80      	pop	{r7, pc}
 800d28e:	bf00      	nop
 800d290:	0801052c 	.word	0x0801052c
 800d294:	0800d8c9 	.word	0x0800d8c9
 800d298:	2000108c 	.word	0x2000108c
 800d29c:	20001088 	.word	0x20001088
 800d2a0:	20001074 	.word	0x20001074
 800d2a4:	2000106c 	.word	0x2000106c

0800d2a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d2a8:	b480      	push	{r7}
 800d2aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d2ac:	4b04      	ldr	r3, [pc, #16]	@ (800d2c0 <vTaskSuspendAll+0x18>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	4a03      	ldr	r2, [pc, #12]	@ (800d2c0 <vTaskSuspendAll+0x18>)
 800d2b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2b6:	bf00      	nop
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2be:	4770      	bx	lr
 800d2c0:	20001090 	.word	0x20001090

0800d2c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2c4:	b580      	push	{r7, lr}
 800d2c6:	b084      	sub	sp, #16
 800d2c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2d2:	4b42      	ldr	r3, [pc, #264]	@ (800d3dc <xTaskResumeAll+0x118>)
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10b      	bne.n	800d2f2 <xTaskResumeAll+0x2e>
	__asm volatile
 800d2da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2de:	f383 8811 	msr	BASEPRI, r3
 800d2e2:	f3bf 8f6f 	isb	sy
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	603b      	str	r3, [r7, #0]
}
 800d2ec:	bf00      	nop
 800d2ee:	bf00      	nop
 800d2f0:	e7fd      	b.n	800d2ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2f2:	f001 fae9 	bl	800e8c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2f6:	4b39      	ldr	r3, [pc, #228]	@ (800d3dc <xTaskResumeAll+0x118>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	4a37      	ldr	r2, [pc, #220]	@ (800d3dc <xTaskResumeAll+0x118>)
 800d2fe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d300:	4b36      	ldr	r3, [pc, #216]	@ (800d3dc <xTaskResumeAll+0x118>)
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d162      	bne.n	800d3ce <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d308:	4b35      	ldr	r3, [pc, #212]	@ (800d3e0 <xTaskResumeAll+0x11c>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d05e      	beq.n	800d3ce <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d310:	e02f      	b.n	800d372 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d312:	4b34      	ldr	r3, [pc, #208]	@ (800d3e4 <xTaskResumeAll+0x120>)
 800d314:	68db      	ldr	r3, [r3, #12]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	3318      	adds	r3, #24
 800d31e:	4618      	mov	r0, r3
 800d320:	f7fe fcea 	bl	800bcf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3304      	adds	r3, #4
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fe fce5 	bl	800bcf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d332:	4b2d      	ldr	r3, [pc, #180]	@ (800d3e8 <xTaskResumeAll+0x124>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	429a      	cmp	r2, r3
 800d338:	d903      	bls.n	800d342 <xTaskResumeAll+0x7e>
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d33e:	4a2a      	ldr	r2, [pc, #168]	@ (800d3e8 <xTaskResumeAll+0x124>)
 800d340:	6013      	str	r3, [r2, #0]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	4a27      	ldr	r2, [pc, #156]	@ (800d3ec <xTaskResumeAll+0x128>)
 800d350:	441a      	add	r2, r3
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	3304      	adds	r3, #4
 800d356:	4619      	mov	r1, r3
 800d358:	4610      	mov	r0, r2
 800d35a:	f7fe fc70 	bl	800bc3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d362:	4b23      	ldr	r3, [pc, #140]	@ (800d3f0 <xTaskResumeAll+0x12c>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d368:	429a      	cmp	r2, r3
 800d36a:	d302      	bcc.n	800d372 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d36c:	4b21      	ldr	r3, [pc, #132]	@ (800d3f4 <xTaskResumeAll+0x130>)
 800d36e:	2201      	movs	r2, #1
 800d370:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d372:	4b1c      	ldr	r3, [pc, #112]	@ (800d3e4 <xTaskResumeAll+0x120>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1cb      	bne.n	800d312 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d001      	beq.n	800d384 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d380:	f000 fb58 	bl	800da34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d384:	4b1c      	ldr	r3, [pc, #112]	@ (800d3f8 <xTaskResumeAll+0x134>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d010      	beq.n	800d3b2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d390:	f000 f846 	bl	800d420 <xTaskIncrementTick>
 800d394:	4603      	mov	r3, r0
 800d396:	2b00      	cmp	r3, #0
 800d398:	d002      	beq.n	800d3a0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d39a:	4b16      	ldr	r3, [pc, #88]	@ (800d3f4 <xTaskResumeAll+0x130>)
 800d39c:	2201      	movs	r2, #1
 800d39e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3b01      	subs	r3, #1
 800d3a4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1f1      	bne.n	800d390 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d3ac:	4b12      	ldr	r3, [pc, #72]	@ (800d3f8 <xTaskResumeAll+0x134>)
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d3b2:	4b10      	ldr	r3, [pc, #64]	@ (800d3f4 <xTaskResumeAll+0x130>)
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d009      	beq.n	800d3ce <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3be:	4b0f      	ldr	r3, [pc, #60]	@ (800d3fc <xTaskResumeAll+0x138>)
 800d3c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3c4:	601a      	str	r2, [r3, #0]
 800d3c6:	f3bf 8f4f 	dsb	sy
 800d3ca:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3ce:	f001 faad 	bl	800e92c <vPortExitCritical>

	return xAlreadyYielded;
 800d3d2:	68bb      	ldr	r3, [r7, #8]
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	3710      	adds	r7, #16
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	20001090 	.word	0x20001090
 800d3e0:	20001068 	.word	0x20001068
 800d3e4:	20001028 	.word	0x20001028
 800d3e8:	20001070 	.word	0x20001070
 800d3ec:	20000b98 	.word	0x20000b98
 800d3f0:	20000b94 	.word	0x20000b94
 800d3f4:	2000107c 	.word	0x2000107c
 800d3f8:	20001078 	.word	0x20001078
 800d3fc:	e000ed04 	.word	0xe000ed04

0800d400 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d400:	b480      	push	{r7}
 800d402:	b083      	sub	sp, #12
 800d404:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d406:	4b05      	ldr	r3, [pc, #20]	@ (800d41c <xTaskGetTickCount+0x1c>)
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d40c:	687b      	ldr	r3, [r7, #4]
}
 800d40e:	4618      	mov	r0, r3
 800d410:	370c      	adds	r7, #12
 800d412:	46bd      	mov	sp, r7
 800d414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	2000106c 	.word	0x2000106c

0800d420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b086      	sub	sp, #24
 800d424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d426:	2300      	movs	r3, #0
 800d428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d42a:	4b4f      	ldr	r3, [pc, #316]	@ (800d568 <xTaskIncrementTick+0x148>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	f040 8090 	bne.w	800d554 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d434:	4b4d      	ldr	r3, [pc, #308]	@ (800d56c <xTaskIncrementTick+0x14c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3301      	adds	r3, #1
 800d43a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d43c:	4a4b      	ldr	r2, [pc, #300]	@ (800d56c <xTaskIncrementTick+0x14c>)
 800d43e:	693b      	ldr	r3, [r7, #16]
 800d440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d121      	bne.n	800d48c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d448:	4b49      	ldr	r3, [pc, #292]	@ (800d570 <xTaskIncrementTick+0x150>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d00b      	beq.n	800d46a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d456:	f383 8811 	msr	BASEPRI, r3
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	f3bf 8f4f 	dsb	sy
 800d462:	603b      	str	r3, [r7, #0]
}
 800d464:	bf00      	nop
 800d466:	bf00      	nop
 800d468:	e7fd      	b.n	800d466 <xTaskIncrementTick+0x46>
 800d46a:	4b41      	ldr	r3, [pc, #260]	@ (800d570 <xTaskIncrementTick+0x150>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	60fb      	str	r3, [r7, #12]
 800d470:	4b40      	ldr	r3, [pc, #256]	@ (800d574 <xTaskIncrementTick+0x154>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a3e      	ldr	r2, [pc, #248]	@ (800d570 <xTaskIncrementTick+0x150>)
 800d476:	6013      	str	r3, [r2, #0]
 800d478:	4a3e      	ldr	r2, [pc, #248]	@ (800d574 <xTaskIncrementTick+0x154>)
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	6013      	str	r3, [r2, #0]
 800d47e:	4b3e      	ldr	r3, [pc, #248]	@ (800d578 <xTaskIncrementTick+0x158>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	3301      	adds	r3, #1
 800d484:	4a3c      	ldr	r2, [pc, #240]	@ (800d578 <xTaskIncrementTick+0x158>)
 800d486:	6013      	str	r3, [r2, #0]
 800d488:	f000 fad4 	bl	800da34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d48c:	4b3b      	ldr	r3, [pc, #236]	@ (800d57c <xTaskIncrementTick+0x15c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	693a      	ldr	r2, [r7, #16]
 800d492:	429a      	cmp	r2, r3
 800d494:	d349      	bcc.n	800d52a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d496:	4b36      	ldr	r3, [pc, #216]	@ (800d570 <xTaskIncrementTick+0x150>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d104      	bne.n	800d4aa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4a0:	4b36      	ldr	r3, [pc, #216]	@ (800d57c <xTaskIncrementTick+0x15c>)
 800d4a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a6:	601a      	str	r2, [r3, #0]
					break;
 800d4a8:	e03f      	b.n	800d52a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4aa:	4b31      	ldr	r3, [pc, #196]	@ (800d570 <xTaskIncrementTick+0x150>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	68db      	ldr	r3, [r3, #12]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4ba:	693a      	ldr	r2, [r7, #16]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d203      	bcs.n	800d4ca <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4c2:	4a2e      	ldr	r2, [pc, #184]	@ (800d57c <xTaskIncrementTick+0x15c>)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4c8:	e02f      	b.n	800d52a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	3304      	adds	r3, #4
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fe fc12 	bl	800bcf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d004      	beq.n	800d4e6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	3318      	adds	r3, #24
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	f7fe fc09 	bl	800bcf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ea:	4b25      	ldr	r3, [pc, #148]	@ (800d580 <xTaskIncrementTick+0x160>)
 800d4ec:	681b      	ldr	r3, [r3, #0]
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d903      	bls.n	800d4fa <xTaskIncrementTick+0xda>
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4f6:	4a22      	ldr	r2, [pc, #136]	@ (800d580 <xTaskIncrementTick+0x160>)
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4fe:	4613      	mov	r3, r2
 800d500:	009b      	lsls	r3, r3, #2
 800d502:	4413      	add	r3, r2
 800d504:	009b      	lsls	r3, r3, #2
 800d506:	4a1f      	ldr	r2, [pc, #124]	@ (800d584 <xTaskIncrementTick+0x164>)
 800d508:	441a      	add	r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	3304      	adds	r3, #4
 800d50e:	4619      	mov	r1, r3
 800d510:	4610      	mov	r0, r2
 800d512:	f7fe fb94 	bl	800bc3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d51a:	4b1b      	ldr	r3, [pc, #108]	@ (800d588 <xTaskIncrementTick+0x168>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d520:	429a      	cmp	r2, r3
 800d522:	d3b8      	bcc.n	800d496 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d524:	2301      	movs	r3, #1
 800d526:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d528:	e7b5      	b.n	800d496 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d52a:	4b17      	ldr	r3, [pc, #92]	@ (800d588 <xTaskIncrementTick+0x168>)
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d530:	4914      	ldr	r1, [pc, #80]	@ (800d584 <xTaskIncrementTick+0x164>)
 800d532:	4613      	mov	r3, r2
 800d534:	009b      	lsls	r3, r3, #2
 800d536:	4413      	add	r3, r2
 800d538:	009b      	lsls	r3, r3, #2
 800d53a:	440b      	add	r3, r1
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	2b01      	cmp	r3, #1
 800d540:	d901      	bls.n	800d546 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d542:	2301      	movs	r3, #1
 800d544:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d546:	4b11      	ldr	r3, [pc, #68]	@ (800d58c <xTaskIncrementTick+0x16c>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d007      	beq.n	800d55e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d54e:	2301      	movs	r3, #1
 800d550:	617b      	str	r3, [r7, #20]
 800d552:	e004      	b.n	800d55e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d554:	4b0e      	ldr	r3, [pc, #56]	@ (800d590 <xTaskIncrementTick+0x170>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	3301      	adds	r3, #1
 800d55a:	4a0d      	ldr	r2, [pc, #52]	@ (800d590 <xTaskIncrementTick+0x170>)
 800d55c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d55e:	697b      	ldr	r3, [r7, #20]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3718      	adds	r7, #24
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}
 800d568:	20001090 	.word	0x20001090
 800d56c:	2000106c 	.word	0x2000106c
 800d570:	20001020 	.word	0x20001020
 800d574:	20001024 	.word	0x20001024
 800d578:	20001080 	.word	0x20001080
 800d57c:	20001088 	.word	0x20001088
 800d580:	20001070 	.word	0x20001070
 800d584:	20000b98 	.word	0x20000b98
 800d588:	20000b94 	.word	0x20000b94
 800d58c:	2000107c 	.word	0x2000107c
 800d590:	20001078 	.word	0x20001078

0800d594 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d594:	b480      	push	{r7}
 800d596:	b085      	sub	sp, #20
 800d598:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d59a:	4b28      	ldr	r3, [pc, #160]	@ (800d63c <vTaskSwitchContext+0xa8>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d003      	beq.n	800d5aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5a2:	4b27      	ldr	r3, [pc, #156]	@ (800d640 <vTaskSwitchContext+0xac>)
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5a8:	e042      	b.n	800d630 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d5aa:	4b25      	ldr	r3, [pc, #148]	@ (800d640 <vTaskSwitchContext+0xac>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5b0:	4b24      	ldr	r3, [pc, #144]	@ (800d644 <vTaskSwitchContext+0xb0>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	60fb      	str	r3, [r7, #12]
 800d5b6:	e011      	b.n	800d5dc <vTaskSwitchContext+0x48>
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d10b      	bne.n	800d5d6 <vTaskSwitchContext+0x42>
	__asm volatile
 800d5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5c2:	f383 8811 	msr	BASEPRI, r3
 800d5c6:	f3bf 8f6f 	isb	sy
 800d5ca:	f3bf 8f4f 	dsb	sy
 800d5ce:	607b      	str	r3, [r7, #4]
}
 800d5d0:	bf00      	nop
 800d5d2:	bf00      	nop
 800d5d4:	e7fd      	b.n	800d5d2 <vTaskSwitchContext+0x3e>
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	3b01      	subs	r3, #1
 800d5da:	60fb      	str	r3, [r7, #12]
 800d5dc:	491a      	ldr	r1, [pc, #104]	@ (800d648 <vTaskSwitchContext+0xb4>)
 800d5de:	68fa      	ldr	r2, [r7, #12]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	009b      	lsls	r3, r3, #2
 800d5e8:	440b      	add	r3, r1
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d0e3      	beq.n	800d5b8 <vTaskSwitchContext+0x24>
 800d5f0:	68fa      	ldr	r2, [r7, #12]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4a13      	ldr	r2, [pc, #76]	@ (800d648 <vTaskSwitchContext+0xb4>)
 800d5fc:	4413      	add	r3, r2
 800d5fe:	60bb      	str	r3, [r7, #8]
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	685a      	ldr	r2, [r3, #4]
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	605a      	str	r2, [r3, #4]
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	3308      	adds	r3, #8
 800d612:	429a      	cmp	r2, r3
 800d614:	d104      	bne.n	800d620 <vTaskSwitchContext+0x8c>
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	685b      	ldr	r3, [r3, #4]
 800d61a:	685a      	ldr	r2, [r3, #4]
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	605a      	str	r2, [r3, #4]
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	68db      	ldr	r3, [r3, #12]
 800d626:	4a09      	ldr	r2, [pc, #36]	@ (800d64c <vTaskSwitchContext+0xb8>)
 800d628:	6013      	str	r3, [r2, #0]
 800d62a:	4a06      	ldr	r2, [pc, #24]	@ (800d644 <vTaskSwitchContext+0xb0>)
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6013      	str	r3, [r2, #0]
}
 800d630:	bf00      	nop
 800d632:	3714      	adds	r7, #20
 800d634:	46bd      	mov	sp, r7
 800d636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63a:	4770      	bx	lr
 800d63c:	20001090 	.word	0x20001090
 800d640:	2000107c 	.word	0x2000107c
 800d644:	20001070 	.word	0x20001070
 800d648:	20000b98 	.word	0x20000b98
 800d64c:	20000b94 	.word	0x20000b94

0800d650 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d10b      	bne.n	800d678 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	60fb      	str	r3, [r7, #12]
}
 800d672:	bf00      	nop
 800d674:	bf00      	nop
 800d676:	e7fd      	b.n	800d674 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d678:	4b07      	ldr	r3, [pc, #28]	@ (800d698 <vTaskPlaceOnEventList+0x48>)
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	3318      	adds	r3, #24
 800d67e:	4619      	mov	r1, r3
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f7fe fb00 	bl	800bc86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d686:	2101      	movs	r1, #1
 800d688:	6838      	ldr	r0, [r7, #0]
 800d68a:	f000 fb81 	bl	800dd90 <prvAddCurrentTaskToDelayedList>
}
 800d68e:	bf00      	nop
 800d690:	3710      	adds	r7, #16
 800d692:	46bd      	mov	sp, r7
 800d694:	bd80      	pop	{r7, pc}
 800d696:	bf00      	nop
 800d698:	20000b94 	.word	0x20000b94

0800d69c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b086      	sub	sp, #24
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	60f8      	str	r0, [r7, #12]
 800d6a4:	60b9      	str	r1, [r7, #8]
 800d6a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10b      	bne.n	800d6c6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6b2:	f383 8811 	msr	BASEPRI, r3
 800d6b6:	f3bf 8f6f 	isb	sy
 800d6ba:	f3bf 8f4f 	dsb	sy
 800d6be:	617b      	str	r3, [r7, #20]
}
 800d6c0:	bf00      	nop
 800d6c2:	bf00      	nop
 800d6c4:	e7fd      	b.n	800d6c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d6f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	3318      	adds	r3, #24
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f7fe fab5 	bl	800bc3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d002      	beq.n	800d6e0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d6da:	f04f 33ff 	mov.w	r3, #4294967295
 800d6de:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6e0:	6879      	ldr	r1, [r7, #4]
 800d6e2:	68b8      	ldr	r0, [r7, #8]
 800d6e4:	f000 fb54 	bl	800dd90 <prvAddCurrentTaskToDelayedList>
	}
 800d6e8:	bf00      	nop
 800d6ea:	3718      	adds	r7, #24
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}
 800d6f0:	20000b94 	.word	0x20000b94

0800d6f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b086      	sub	sp, #24
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	68db      	ldr	r3, [r3, #12]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	60fb      	str	r3, [r7, #12]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	3318      	adds	r3, #24
 800d726:	4618      	mov	r0, r3
 800d728:	f7fe fae6 	bl	800bcf8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d72c:	4b1d      	ldr	r3, [pc, #116]	@ (800d7a4 <xTaskRemoveFromEventList+0xb0>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d11d      	bne.n	800d770 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d734:	693b      	ldr	r3, [r7, #16]
 800d736:	3304      	adds	r3, #4
 800d738:	4618      	mov	r0, r3
 800d73a:	f7fe fadd 	bl	800bcf8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d742:	4b19      	ldr	r3, [pc, #100]	@ (800d7a8 <xTaskRemoveFromEventList+0xb4>)
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	429a      	cmp	r2, r3
 800d748:	d903      	bls.n	800d752 <xTaskRemoveFromEventList+0x5e>
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74e:	4a16      	ldr	r2, [pc, #88]	@ (800d7a8 <xTaskRemoveFromEventList+0xb4>)
 800d750:	6013      	str	r3, [r2, #0]
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d756:	4613      	mov	r3, r2
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	4413      	add	r3, r2
 800d75c:	009b      	lsls	r3, r3, #2
 800d75e:	4a13      	ldr	r2, [pc, #76]	@ (800d7ac <xTaskRemoveFromEventList+0xb8>)
 800d760:	441a      	add	r2, r3
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	3304      	adds	r3, #4
 800d766:	4619      	mov	r1, r3
 800d768:	4610      	mov	r0, r2
 800d76a:	f7fe fa68 	bl	800bc3e <vListInsertEnd>
 800d76e:	e005      	b.n	800d77c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d770:	693b      	ldr	r3, [r7, #16]
 800d772:	3318      	adds	r3, #24
 800d774:	4619      	mov	r1, r3
 800d776:	480e      	ldr	r0, [pc, #56]	@ (800d7b0 <xTaskRemoveFromEventList+0xbc>)
 800d778:	f7fe fa61 	bl	800bc3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d780:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b4 <xTaskRemoveFromEventList+0xc0>)
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d786:	429a      	cmp	r2, r3
 800d788:	d905      	bls.n	800d796 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d78a:	2301      	movs	r3, #1
 800d78c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d78e:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b8 <xTaskRemoveFromEventList+0xc4>)
 800d790:	2201      	movs	r2, #1
 800d792:	601a      	str	r2, [r3, #0]
 800d794:	e001      	b.n	800d79a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d796:	2300      	movs	r3, #0
 800d798:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d79a:	697b      	ldr	r3, [r7, #20]
}
 800d79c:	4618      	mov	r0, r3
 800d79e:	3718      	adds	r7, #24
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}
 800d7a4:	20001090 	.word	0x20001090
 800d7a8:	20001070 	.word	0x20001070
 800d7ac:	20000b98 	.word	0x20000b98
 800d7b0:	20001028 	.word	0x20001028
 800d7b4:	20000b94 	.word	0x20000b94
 800d7b8:	2000107c 	.word	0x2000107c

0800d7bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7c4:	4b06      	ldr	r3, [pc, #24]	@ (800d7e0 <vTaskInternalSetTimeOutState+0x24>)
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7cc:	4b05      	ldr	r3, [pc, #20]	@ (800d7e4 <vTaskInternalSetTimeOutState+0x28>)
 800d7ce:	681a      	ldr	r2, [r3, #0]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	605a      	str	r2, [r3, #4]
}
 800d7d4:	bf00      	nop
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr
 800d7e0:	20001080 	.word	0x20001080
 800d7e4:	2000106c 	.word	0x2000106c

0800d7e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7e8:	b580      	push	{r7, lr}
 800d7ea:	b088      	sub	sp, #32
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
 800d7f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d10b      	bne.n	800d810 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fc:	f383 8811 	msr	BASEPRI, r3
 800d800:	f3bf 8f6f 	isb	sy
 800d804:	f3bf 8f4f 	dsb	sy
 800d808:	613b      	str	r3, [r7, #16]
}
 800d80a:	bf00      	nop
 800d80c:	bf00      	nop
 800d80e:	e7fd      	b.n	800d80c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d10b      	bne.n	800d82e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d81a:	f383 8811 	msr	BASEPRI, r3
 800d81e:	f3bf 8f6f 	isb	sy
 800d822:	f3bf 8f4f 	dsb	sy
 800d826:	60fb      	str	r3, [r7, #12]
}
 800d828:	bf00      	nop
 800d82a:	bf00      	nop
 800d82c:	e7fd      	b.n	800d82a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d82e:	f001 f84b 	bl	800e8c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d832:	4b1d      	ldr	r3, [pc, #116]	@ (800d8a8 <xTaskCheckForTimeOut+0xc0>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	685b      	ldr	r3, [r3, #4]
 800d83c:	69ba      	ldr	r2, [r7, #24]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d84a:	d102      	bne.n	800d852 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d84c:	2300      	movs	r3, #0
 800d84e:	61fb      	str	r3, [r7, #28]
 800d850:	e023      	b.n	800d89a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	4b15      	ldr	r3, [pc, #84]	@ (800d8ac <xTaskCheckForTimeOut+0xc4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	429a      	cmp	r2, r3
 800d85c:	d007      	beq.n	800d86e <xTaskCheckForTimeOut+0x86>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	685b      	ldr	r3, [r3, #4]
 800d862:	69ba      	ldr	r2, [r7, #24]
 800d864:	429a      	cmp	r2, r3
 800d866:	d302      	bcc.n	800d86e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d868:	2301      	movs	r3, #1
 800d86a:	61fb      	str	r3, [r7, #28]
 800d86c:	e015      	b.n	800d89a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	429a      	cmp	r2, r3
 800d876:	d20b      	bcs.n	800d890 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	681a      	ldr	r2, [r3, #0]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	1ad2      	subs	r2, r2, r3
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f7ff ff99 	bl	800d7bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	61fb      	str	r3, [r7, #28]
 800d88e:	e004      	b.n	800d89a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2200      	movs	r2, #0
 800d894:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d896:	2301      	movs	r3, #1
 800d898:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d89a:	f001 f847 	bl	800e92c <vPortExitCritical>

	return xReturn;
 800d89e:	69fb      	ldr	r3, [r7, #28]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3720      	adds	r7, #32
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	2000106c 	.word	0x2000106c
 800d8ac:	20001080 	.word	0x20001080

0800d8b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8b4:	4b03      	ldr	r3, [pc, #12]	@ (800d8c4 <vTaskMissedYield+0x14>)
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	601a      	str	r2, [r3, #0]
}
 800d8ba:	bf00      	nop
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c2:	4770      	bx	lr
 800d8c4:	2000107c 	.word	0x2000107c

0800d8c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8d0:	f000 f852 	bl	800d978 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8d4:	4b06      	ldr	r3, [pc, #24]	@ (800d8f0 <prvIdleTask+0x28>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d9f9      	bls.n	800d8d0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8dc:	4b05      	ldr	r3, [pc, #20]	@ (800d8f4 <prvIdleTask+0x2c>)
 800d8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8e2:	601a      	str	r2, [r3, #0]
 800d8e4:	f3bf 8f4f 	dsb	sy
 800d8e8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8ec:	e7f0      	b.n	800d8d0 <prvIdleTask+0x8>
 800d8ee:	bf00      	nop
 800d8f0:	20000b98 	.word	0x20000b98
 800d8f4:	e000ed04 	.word	0xe000ed04

0800d8f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8fe:	2300      	movs	r3, #0
 800d900:	607b      	str	r3, [r7, #4]
 800d902:	e00c      	b.n	800d91e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d904:	687a      	ldr	r2, [r7, #4]
 800d906:	4613      	mov	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4413      	add	r3, r2
 800d90c:	009b      	lsls	r3, r3, #2
 800d90e:	4a12      	ldr	r2, [pc, #72]	@ (800d958 <prvInitialiseTaskLists+0x60>)
 800d910:	4413      	add	r3, r2
 800d912:	4618      	mov	r0, r3
 800d914:	f7fe f966 	bl	800bbe4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	3301      	adds	r3, #1
 800d91c:	607b      	str	r3, [r7, #4]
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2b37      	cmp	r3, #55	@ 0x37
 800d922:	d9ef      	bls.n	800d904 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d924:	480d      	ldr	r0, [pc, #52]	@ (800d95c <prvInitialiseTaskLists+0x64>)
 800d926:	f7fe f95d 	bl	800bbe4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d92a:	480d      	ldr	r0, [pc, #52]	@ (800d960 <prvInitialiseTaskLists+0x68>)
 800d92c:	f7fe f95a 	bl	800bbe4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d930:	480c      	ldr	r0, [pc, #48]	@ (800d964 <prvInitialiseTaskLists+0x6c>)
 800d932:	f7fe f957 	bl	800bbe4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d936:	480c      	ldr	r0, [pc, #48]	@ (800d968 <prvInitialiseTaskLists+0x70>)
 800d938:	f7fe f954 	bl	800bbe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d93c:	480b      	ldr	r0, [pc, #44]	@ (800d96c <prvInitialiseTaskLists+0x74>)
 800d93e:	f7fe f951 	bl	800bbe4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d942:	4b0b      	ldr	r3, [pc, #44]	@ (800d970 <prvInitialiseTaskLists+0x78>)
 800d944:	4a05      	ldr	r2, [pc, #20]	@ (800d95c <prvInitialiseTaskLists+0x64>)
 800d946:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d948:	4b0a      	ldr	r3, [pc, #40]	@ (800d974 <prvInitialiseTaskLists+0x7c>)
 800d94a:	4a05      	ldr	r2, [pc, #20]	@ (800d960 <prvInitialiseTaskLists+0x68>)
 800d94c:	601a      	str	r2, [r3, #0]
}
 800d94e:	bf00      	nop
 800d950:	3708      	adds	r7, #8
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}
 800d956:	bf00      	nop
 800d958:	20000b98 	.word	0x20000b98
 800d95c:	20000ff8 	.word	0x20000ff8
 800d960:	2000100c 	.word	0x2000100c
 800d964:	20001028 	.word	0x20001028
 800d968:	2000103c 	.word	0x2000103c
 800d96c:	20001054 	.word	0x20001054
 800d970:	20001020 	.word	0x20001020
 800d974:	20001024 	.word	0x20001024

0800d978 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d97e:	e019      	b.n	800d9b4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d980:	f000 ffa2 	bl	800e8c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d984:	4b10      	ldr	r3, [pc, #64]	@ (800d9c8 <prvCheckTasksWaitingTermination+0x50>)
 800d986:	68db      	ldr	r3, [r3, #12]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	3304      	adds	r3, #4
 800d990:	4618      	mov	r0, r3
 800d992:	f7fe f9b1 	bl	800bcf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d996:	4b0d      	ldr	r3, [pc, #52]	@ (800d9cc <prvCheckTasksWaitingTermination+0x54>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	3b01      	subs	r3, #1
 800d99c:	4a0b      	ldr	r2, [pc, #44]	@ (800d9cc <prvCheckTasksWaitingTermination+0x54>)
 800d99e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9a0:	4b0b      	ldr	r3, [pc, #44]	@ (800d9d0 <prvCheckTasksWaitingTermination+0x58>)
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	3b01      	subs	r3, #1
 800d9a6:	4a0a      	ldr	r2, [pc, #40]	@ (800d9d0 <prvCheckTasksWaitingTermination+0x58>)
 800d9a8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9aa:	f000 ffbf 	bl	800e92c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 f810 	bl	800d9d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9b4:	4b06      	ldr	r3, [pc, #24]	@ (800d9d0 <prvCheckTasksWaitingTermination+0x58>)
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d1e1      	bne.n	800d980 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9bc:	bf00      	nop
 800d9be:	bf00      	nop
 800d9c0:	3708      	adds	r7, #8
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	2000103c 	.word	0x2000103c
 800d9cc:	20001068 	.word	0x20001068
 800d9d0:	20001050 	.word	0x20001050

0800d9d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d108      	bne.n	800d9f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f001 f95c 	bl	800eca8 <vPortFree>
				vPortFree( pxTCB );
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f001 f959 	bl	800eca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9f6:	e019      	b.n	800da2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d103      	bne.n	800da0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800da02:	6878      	ldr	r0, [r7, #4]
 800da04:	f001 f950 	bl	800eca8 <vPortFree>
	}
 800da08:	e010      	b.n	800da2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800da10:	2b02      	cmp	r3, #2
 800da12:	d00b      	beq.n	800da2c <prvDeleteTCB+0x58>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da18:	f383 8811 	msr	BASEPRI, r3
 800da1c:	f3bf 8f6f 	isb	sy
 800da20:	f3bf 8f4f 	dsb	sy
 800da24:	60fb      	str	r3, [r7, #12]
}
 800da26:	bf00      	nop
 800da28:	bf00      	nop
 800da2a:	e7fd      	b.n	800da28 <prvDeleteTCB+0x54>
	}
 800da2c:	bf00      	nop
 800da2e:	3710      	adds	r7, #16
 800da30:	46bd      	mov	sp, r7
 800da32:	bd80      	pop	{r7, pc}

0800da34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da34:	b480      	push	{r7}
 800da36:	b083      	sub	sp, #12
 800da38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da3a:	4b0c      	ldr	r3, [pc, #48]	@ (800da6c <prvResetNextTaskUnblockTime+0x38>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d104      	bne.n	800da4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da44:	4b0a      	ldr	r3, [pc, #40]	@ (800da70 <prvResetNextTaskUnblockTime+0x3c>)
 800da46:	f04f 32ff 	mov.w	r2, #4294967295
 800da4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da4c:	e008      	b.n	800da60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da4e:	4b07      	ldr	r3, [pc, #28]	@ (800da6c <prvResetNextTaskUnblockTime+0x38>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	685b      	ldr	r3, [r3, #4]
 800da5c:	4a04      	ldr	r2, [pc, #16]	@ (800da70 <prvResetNextTaskUnblockTime+0x3c>)
 800da5e:	6013      	str	r3, [r2, #0]
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr
 800da6c:	20001020 	.word	0x20001020
 800da70:	20001088 	.word	0x20001088

0800da74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da74:	b480      	push	{r7}
 800da76:	b083      	sub	sp, #12
 800da78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800da7a:	4b0b      	ldr	r3, [pc, #44]	@ (800daa8 <xTaskGetSchedulerState+0x34>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d102      	bne.n	800da88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da82:	2301      	movs	r3, #1
 800da84:	607b      	str	r3, [r7, #4]
 800da86:	e008      	b.n	800da9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da88:	4b08      	ldr	r3, [pc, #32]	@ (800daac <xTaskGetSchedulerState+0x38>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d102      	bne.n	800da96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800da90:	2302      	movs	r3, #2
 800da92:	607b      	str	r3, [r7, #4]
 800da94:	e001      	b.n	800da9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800da96:	2300      	movs	r3, #0
 800da98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800da9a:	687b      	ldr	r3, [r7, #4]
	}
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	20001074 	.word	0x20001074
 800daac:	20001090 	.word	0x20001090

0800dab0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d051      	beq.n	800db6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dac6:	68bb      	ldr	r3, [r7, #8]
 800dac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daca:	4b2a      	ldr	r3, [pc, #168]	@ (800db74 <xTaskPriorityInherit+0xc4>)
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dad0:	429a      	cmp	r2, r3
 800dad2:	d241      	bcs.n	800db58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	699b      	ldr	r3, [r3, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	db06      	blt.n	800daea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dadc:	4b25      	ldr	r3, [pc, #148]	@ (800db74 <xTaskPriorityInherit+0xc4>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dae2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	6959      	ldr	r1, [r3, #20]
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf2:	4613      	mov	r3, r2
 800daf4:	009b      	lsls	r3, r3, #2
 800daf6:	4413      	add	r3, r2
 800daf8:	009b      	lsls	r3, r3, #2
 800dafa:	4a1f      	ldr	r2, [pc, #124]	@ (800db78 <xTaskPriorityInherit+0xc8>)
 800dafc:	4413      	add	r3, r2
 800dafe:	4299      	cmp	r1, r3
 800db00:	d122      	bne.n	800db48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	3304      	adds	r3, #4
 800db06:	4618      	mov	r0, r3
 800db08:	f7fe f8f6 	bl	800bcf8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db0c:	4b19      	ldr	r3, [pc, #100]	@ (800db74 <xTaskPriorityInherit+0xc4>)
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db1a:	4b18      	ldr	r3, [pc, #96]	@ (800db7c <xTaskPriorityInherit+0xcc>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d903      	bls.n	800db2a <xTaskPriorityInherit+0x7a>
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db26:	4a15      	ldr	r2, [pc, #84]	@ (800db7c <xTaskPriorityInherit+0xcc>)
 800db28:	6013      	str	r3, [r2, #0]
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db2e:	4613      	mov	r3, r2
 800db30:	009b      	lsls	r3, r3, #2
 800db32:	4413      	add	r3, r2
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	4a10      	ldr	r2, [pc, #64]	@ (800db78 <xTaskPriorityInherit+0xc8>)
 800db38:	441a      	add	r2, r3
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	3304      	adds	r3, #4
 800db3e:	4619      	mov	r1, r3
 800db40:	4610      	mov	r0, r2
 800db42:	f7fe f87c 	bl	800bc3e <vListInsertEnd>
 800db46:	e004      	b.n	800db52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db48:	4b0a      	ldr	r3, [pc, #40]	@ (800db74 <xTaskPriorityInherit+0xc4>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db52:	2301      	movs	r3, #1
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	e008      	b.n	800db6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db58:	68bb      	ldr	r3, [r7, #8]
 800db5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db5c:	4b05      	ldr	r3, [pc, #20]	@ (800db74 <xTaskPriorityInherit+0xc4>)
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db62:	429a      	cmp	r2, r3
 800db64:	d201      	bcs.n	800db6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db66:	2301      	movs	r3, #1
 800db68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db6a:	68fb      	ldr	r3, [r7, #12]
	}
 800db6c:	4618      	mov	r0, r3
 800db6e:	3710      	adds	r7, #16
 800db70:	46bd      	mov	sp, r7
 800db72:	bd80      	pop	{r7, pc}
 800db74:	20000b94 	.word	0x20000b94
 800db78:	20000b98 	.word	0x20000b98
 800db7c:	20001070 	.word	0x20001070

0800db80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db80:	b580      	push	{r7, lr}
 800db82:	b086      	sub	sp, #24
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db8c:	2300      	movs	r3, #0
 800db8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d058      	beq.n	800dc48 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db96:	4b2f      	ldr	r3, [pc, #188]	@ (800dc54 <xTaskPriorityDisinherit+0xd4>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	693a      	ldr	r2, [r7, #16]
 800db9c:	429a      	cmp	r2, r3
 800db9e:	d00b      	beq.n	800dbb8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	60fb      	str	r3, [r7, #12]
}
 800dbb2:	bf00      	nop
 800dbb4:	bf00      	nop
 800dbb6:	e7fd      	b.n	800dbb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d10b      	bne.n	800dbd8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbc4:	f383 8811 	msr	BASEPRI, r3
 800dbc8:	f3bf 8f6f 	isb	sy
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	60bb      	str	r3, [r7, #8]
}
 800dbd2:	bf00      	nop
 800dbd4:	bf00      	nop
 800dbd6:	e7fd      	b.n	800dbd4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbdc:	1e5a      	subs	r2, r3, #1
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbe6:	693b      	ldr	r3, [r7, #16]
 800dbe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dbea:	429a      	cmp	r2, r3
 800dbec:	d02c      	beq.n	800dc48 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dbee:	693b      	ldr	r3, [r7, #16]
 800dbf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d128      	bne.n	800dc48 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe f87c 	bl	800bcf8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc0c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc18:	4b0f      	ldr	r3, [pc, #60]	@ (800dc58 <xTaskPriorityDisinherit+0xd8>)
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d903      	bls.n	800dc28 <xTaskPriorityDisinherit+0xa8>
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc24:	4a0c      	ldr	r2, [pc, #48]	@ (800dc58 <xTaskPriorityDisinherit+0xd8>)
 800dc26:	6013      	str	r3, [r2, #0]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	009b      	lsls	r3, r3, #2
 800dc34:	4a09      	ldr	r2, [pc, #36]	@ (800dc5c <xTaskPriorityDisinherit+0xdc>)
 800dc36:	441a      	add	r2, r3
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	3304      	adds	r3, #4
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	4610      	mov	r0, r2
 800dc40:	f7fd fffd 	bl	800bc3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc44:	2301      	movs	r3, #1
 800dc46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc48:	697b      	ldr	r3, [r7, #20]
	}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3718      	adds	r7, #24
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	20000b94 	.word	0x20000b94
 800dc58:	20001070 	.word	0x20001070
 800dc5c:	20000b98 	.word	0x20000b98

0800dc60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d06c      	beq.n	800dd52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10b      	bne.n	800dc98 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	60fb      	str	r3, [r7, #12]
}
 800dc92:	bf00      	nop
 800dc94:	bf00      	nop
 800dc96:	e7fd      	b.n	800dc94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dc98:	69bb      	ldr	r3, [r7, #24]
 800dc9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc9c:	683a      	ldr	r2, [r7, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d902      	bls.n	800dca8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	61fb      	str	r3, [r7, #28]
 800dca6:	e002      	b.n	800dcae <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dca8:	69bb      	ldr	r3, [r7, #24]
 800dcaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcb2:	69fa      	ldr	r2, [r7, #28]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d04c      	beq.n	800dd52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dcbc:	697a      	ldr	r2, [r7, #20]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d147      	bne.n	800dd52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dcc2:	4b26      	ldr	r3, [pc, #152]	@ (800dd5c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	69ba      	ldr	r2, [r7, #24]
 800dcc8:	429a      	cmp	r2, r3
 800dcca:	d10b      	bne.n	800dce4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcd0:	f383 8811 	msr	BASEPRI, r3
 800dcd4:	f3bf 8f6f 	isb	sy
 800dcd8:	f3bf 8f4f 	dsb	sy
 800dcdc:	60bb      	str	r3, [r7, #8]
}
 800dcde:	bf00      	nop
 800dce0:	bf00      	nop
 800dce2:	e7fd      	b.n	800dce0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dce4:	69bb      	ldr	r3, [r7, #24]
 800dce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dce8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	69fa      	ldr	r2, [r7, #28]
 800dcee:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dcf0:	69bb      	ldr	r3, [r7, #24]
 800dcf2:	699b      	ldr	r3, [r3, #24]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	db04      	blt.n	800dd02 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dcf8:	69fb      	ldr	r3, [r7, #28]
 800dcfa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	6959      	ldr	r1, [r3, #20]
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	4613      	mov	r3, r2
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	4413      	add	r3, r2
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	4a13      	ldr	r2, [pc, #76]	@ (800dd60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd12:	4413      	add	r3, r2
 800dd14:	4299      	cmp	r1, r3
 800dd16:	d11c      	bne.n	800dd52 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	3304      	adds	r3, #4
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	f7fd ffeb 	bl	800bcf8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd26:	4b0f      	ldr	r3, [pc, #60]	@ (800dd64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	429a      	cmp	r2, r3
 800dd2c:	d903      	bls.n	800dd36 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dd2e:	69bb      	ldr	r3, [r7, #24]
 800dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd32:	4a0c      	ldr	r2, [pc, #48]	@ (800dd64 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	69bb      	ldr	r3, [r7, #24]
 800dd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4a07      	ldr	r2, [pc, #28]	@ (800dd60 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd44:	441a      	add	r2, r3
 800dd46:	69bb      	ldr	r3, [r7, #24]
 800dd48:	3304      	adds	r3, #4
 800dd4a:	4619      	mov	r1, r3
 800dd4c:	4610      	mov	r0, r2
 800dd4e:	f7fd ff76 	bl	800bc3e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd52:	bf00      	nop
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	20000b94 	.word	0x20000b94
 800dd60:	20000b98 	.word	0x20000b98
 800dd64:	20001070 	.word	0x20001070

0800dd68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd68:	b480      	push	{r7}
 800dd6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd6c:	4b07      	ldr	r3, [pc, #28]	@ (800dd8c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d004      	beq.n	800dd7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd74:	4b05      	ldr	r3, [pc, #20]	@ (800dd8c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd7a:	3201      	adds	r2, #1
 800dd7c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dd7e:	4b03      	ldr	r3, [pc, #12]	@ (800dd8c <pvTaskIncrementMutexHeldCount+0x24>)
 800dd80:	681b      	ldr	r3, [r3, #0]
	}
 800dd82:	4618      	mov	r0, r3
 800dd84:	46bd      	mov	sp, r7
 800dd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8a:	4770      	bx	lr
 800dd8c:	20000b94 	.word	0x20000b94

0800dd90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b084      	sub	sp, #16
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dd9a:	4b21      	ldr	r3, [pc, #132]	@ (800de20 <prvAddCurrentTaskToDelayedList+0x90>)
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dda0:	4b20      	ldr	r3, [pc, #128]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3304      	adds	r3, #4
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7fd ffa6 	bl	800bcf8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb2:	d10a      	bne.n	800ddca <prvAddCurrentTaskToDelayedList+0x3a>
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d007      	beq.n	800ddca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddba:	4b1a      	ldr	r3, [pc, #104]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	3304      	adds	r3, #4
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	4819      	ldr	r0, [pc, #100]	@ (800de28 <prvAddCurrentTaskToDelayedList+0x98>)
 800ddc4:	f7fd ff3b 	bl	800bc3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddc8:	e026      	b.n	800de18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddca:	68fa      	ldr	r2, [r7, #12]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4413      	add	r3, r2
 800ddd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddd2:	4b14      	ldr	r3, [pc, #80]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ddda:	68ba      	ldr	r2, [r7, #8]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d209      	bcs.n	800ddf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde2:	4b12      	ldr	r3, [pc, #72]	@ (800de2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800dde4:	681a      	ldr	r2, [r3, #0]
 800dde6:	4b0f      	ldr	r3, [pc, #60]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4610      	mov	r0, r2
 800ddf0:	f7fd ff49 	bl	800bc86 <vListInsert>
}
 800ddf4:	e010      	b.n	800de18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddf6:	4b0e      	ldr	r3, [pc, #56]	@ (800de30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	4b0a      	ldr	r3, [pc, #40]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	3304      	adds	r3, #4
 800de00:	4619      	mov	r1, r3
 800de02:	4610      	mov	r0, r2
 800de04:	f7fd ff3f 	bl	800bc86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de08:	4b0a      	ldr	r3, [pc, #40]	@ (800de34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d202      	bcs.n	800de18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de12:	4a08      	ldr	r2, [pc, #32]	@ (800de34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	6013      	str	r3, [r2, #0]
}
 800de18:	bf00      	nop
 800de1a:	3710      	adds	r7, #16
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}
 800de20:	2000106c 	.word	0x2000106c
 800de24:	20000b94 	.word	0x20000b94
 800de28:	20001054 	.word	0x20001054
 800de2c:	20001024 	.word	0x20001024
 800de30:	20001020 	.word	0x20001020
 800de34:	20001088 	.word	0x20001088

0800de38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b08a      	sub	sp, #40	@ 0x28
 800de3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de3e:	2300      	movs	r3, #0
 800de40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de42:	f000 fbb1 	bl	800e5a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de46:	4b1d      	ldr	r3, [pc, #116]	@ (800debc <xTimerCreateTimerTask+0x84>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d021      	beq.n	800de92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de52:	2300      	movs	r3, #0
 800de54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de56:	1d3a      	adds	r2, r7, #4
 800de58:	f107 0108 	add.w	r1, r7, #8
 800de5c:	f107 030c 	add.w	r3, r7, #12
 800de60:	4618      	mov	r0, r3
 800de62:	f7fd fea5 	bl	800bbb0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	9202      	str	r2, [sp, #8]
 800de6e:	9301      	str	r3, [sp, #4]
 800de70:	2302      	movs	r3, #2
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	2300      	movs	r3, #0
 800de76:	460a      	mov	r2, r1
 800de78:	4911      	ldr	r1, [pc, #68]	@ (800dec0 <xTimerCreateTimerTask+0x88>)
 800de7a:	4812      	ldr	r0, [pc, #72]	@ (800dec4 <xTimerCreateTimerTask+0x8c>)
 800de7c:	f7fe ffd0 	bl	800ce20 <xTaskCreateStatic>
 800de80:	4603      	mov	r3, r0
 800de82:	4a11      	ldr	r2, [pc, #68]	@ (800dec8 <xTimerCreateTimerTask+0x90>)
 800de84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800de86:	4b10      	ldr	r3, [pc, #64]	@ (800dec8 <xTimerCreateTimerTask+0x90>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800de8e:	2301      	movs	r3, #1
 800de90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10b      	bne.n	800deb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800de98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de9c:	f383 8811 	msr	BASEPRI, r3
 800dea0:	f3bf 8f6f 	isb	sy
 800dea4:	f3bf 8f4f 	dsb	sy
 800dea8:	613b      	str	r3, [r7, #16]
}
 800deaa:	bf00      	nop
 800deac:	bf00      	nop
 800deae:	e7fd      	b.n	800deac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800deb0:	697b      	ldr	r3, [r7, #20]
}
 800deb2:	4618      	mov	r0, r3
 800deb4:	3718      	adds	r7, #24
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop
 800debc:	200010c4 	.word	0x200010c4
 800dec0:	08010534 	.word	0x08010534
 800dec4:	0800e141 	.word	0x0800e141
 800dec8:	200010c8 	.word	0x200010c8

0800decc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af02      	add	r7, sp, #8
 800ded2:	60f8      	str	r0, [r7, #12]
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800deda:	202c      	movs	r0, #44	@ 0x2c
 800dedc:	f000 fe16 	bl	800eb0c <pvPortMalloc>
 800dee0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800dee2:	697b      	ldr	r3, [r7, #20]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00d      	beq.n	800df04 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	9301      	str	r3, [sp, #4]
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	9300      	str	r3, [sp, #0]
 800def8:	683b      	ldr	r3, [r7, #0]
 800defa:	687a      	ldr	r2, [r7, #4]
 800defc:	68b9      	ldr	r1, [r7, #8]
 800defe:	68f8      	ldr	r0, [r7, #12]
 800df00:	f000 f845 	bl	800df8e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800df04:	697b      	ldr	r3, [r7, #20]
	}
 800df06:	4618      	mov	r0, r3
 800df08:	3718      	adds	r7, #24
 800df0a:	46bd      	mov	sp, r7
 800df0c:	bd80      	pop	{r7, pc}

0800df0e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800df0e:	b580      	push	{r7, lr}
 800df10:	b08a      	sub	sp, #40	@ 0x28
 800df12:	af02      	add	r7, sp, #8
 800df14:	60f8      	str	r0, [r7, #12]
 800df16:	60b9      	str	r1, [r7, #8]
 800df18:	607a      	str	r2, [r7, #4]
 800df1a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800df1c:	232c      	movs	r3, #44	@ 0x2c
 800df1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800df20:	693b      	ldr	r3, [r7, #16]
 800df22:	2b2c      	cmp	r3, #44	@ 0x2c
 800df24:	d00b      	beq.n	800df3e <xTimerCreateStatic+0x30>
	__asm volatile
 800df26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df2a:	f383 8811 	msr	BASEPRI, r3
 800df2e:	f3bf 8f6f 	isb	sy
 800df32:	f3bf 8f4f 	dsb	sy
 800df36:	61bb      	str	r3, [r7, #24]
}
 800df38:	bf00      	nop
 800df3a:	bf00      	nop
 800df3c:	e7fd      	b.n	800df3a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800df3e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800df40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10b      	bne.n	800df5e <xTimerCreateStatic+0x50>
	__asm volatile
 800df46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4a:	f383 8811 	msr	BASEPRI, r3
 800df4e:	f3bf 8f6f 	isb	sy
 800df52:	f3bf 8f4f 	dsb	sy
 800df56:	617b      	str	r3, [r7, #20]
}
 800df58:	bf00      	nop
 800df5a:	bf00      	nop
 800df5c:	e7fd      	b.n	800df5a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800df5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df60:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d00d      	beq.n	800df84 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	2202      	movs	r2, #2
 800df6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	9301      	str	r3, [sp, #4]
 800df74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df76:	9300      	str	r3, [sp, #0]
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	68b9      	ldr	r1, [r7, #8]
 800df7e:	68f8      	ldr	r0, [r7, #12]
 800df80:	f000 f805 	bl	800df8e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800df84:	69fb      	ldr	r3, [r7, #28]
	}
 800df86:	4618      	mov	r0, r3
 800df88:	3720      	adds	r7, #32
 800df8a:	46bd      	mov	sp, r7
 800df8c:	bd80      	pop	{r7, pc}

0800df8e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800df8e:	b580      	push	{r7, lr}
 800df90:	b086      	sub	sp, #24
 800df92:	af00      	add	r7, sp, #0
 800df94:	60f8      	str	r0, [r7, #12]
 800df96:	60b9      	str	r1, [r7, #8]
 800df98:	607a      	str	r2, [r7, #4]
 800df9a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800df9c:	68bb      	ldr	r3, [r7, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10b      	bne.n	800dfba <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800dfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfa6:	f383 8811 	msr	BASEPRI, r3
 800dfaa:	f3bf 8f6f 	isb	sy
 800dfae:	f3bf 8f4f 	dsb	sy
 800dfb2:	617b      	str	r3, [r7, #20]
}
 800dfb4:	bf00      	nop
 800dfb6:	bf00      	nop
 800dfb8:	e7fd      	b.n	800dfb6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800dfba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d01e      	beq.n	800dffe <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800dfc0:	f000 faf2 	bl	800e5a8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800dfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfc6:	68fa      	ldr	r2, [r7, #12]
 800dfc8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800dfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfcc:	68ba      	ldr	r2, [r7, #8]
 800dfce:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd2:	683a      	ldr	r2, [r7, #0]
 800dfd4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800dfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd8:	6a3a      	ldr	r2, [r7, #32]
 800dfda:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfde:	3304      	adds	r3, #4
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	f7fd fe1f 	bl	800bc24 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d008      	beq.n	800dffe <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800dfec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dff2:	f043 0304 	orr.w	r3, r3, #4
 800dff6:	b2da      	uxtb	r2, r3
 800dff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800dffe:	bf00      	nop
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
	...

0800e008 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b08a      	sub	sp, #40	@ 0x28
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e016:	2300      	movs	r3, #0
 800e018:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d10b      	bne.n	800e038 <xTimerGenericCommand+0x30>
	__asm volatile
 800e020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	623b      	str	r3, [r7, #32]
}
 800e032:	bf00      	nop
 800e034:	bf00      	nop
 800e036:	e7fd      	b.n	800e034 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e038:	4b19      	ldr	r3, [pc, #100]	@ (800e0a0 <xTimerGenericCommand+0x98>)
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d02a      	beq.n	800e096 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	2b05      	cmp	r3, #5
 800e050:	dc18      	bgt.n	800e084 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e052:	f7ff fd0f 	bl	800da74 <xTaskGetSchedulerState>
 800e056:	4603      	mov	r3, r0
 800e058:	2b02      	cmp	r3, #2
 800e05a:	d109      	bne.n	800e070 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e05c:	4b10      	ldr	r3, [pc, #64]	@ (800e0a0 <xTimerGenericCommand+0x98>)
 800e05e:	6818      	ldr	r0, [r3, #0]
 800e060:	f107 0110 	add.w	r1, r7, #16
 800e064:	2300      	movs	r3, #0
 800e066:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e068:	f7fe f824 	bl	800c0b4 <xQueueGenericSend>
 800e06c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e06e:	e012      	b.n	800e096 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e070:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a0 <xTimerGenericCommand+0x98>)
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	f107 0110 	add.w	r1, r7, #16
 800e078:	2300      	movs	r3, #0
 800e07a:	2200      	movs	r2, #0
 800e07c:	f7fe f81a 	bl	800c0b4 <xQueueGenericSend>
 800e080:	6278      	str	r0, [r7, #36]	@ 0x24
 800e082:	e008      	b.n	800e096 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e084:	4b06      	ldr	r3, [pc, #24]	@ (800e0a0 <xTimerGenericCommand+0x98>)
 800e086:	6818      	ldr	r0, [r3, #0]
 800e088:	f107 0110 	add.w	r1, r7, #16
 800e08c:	2300      	movs	r3, #0
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	f7fe f912 	bl	800c2b8 <xQueueGenericSendFromISR>
 800e094:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3728      	adds	r7, #40	@ 0x28
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}
 800e0a0:	200010c4 	.word	0x200010c4

0800e0a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af02      	add	r7, sp, #8
 800e0aa:	6078      	str	r0, [r7, #4]
 800e0ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ae:	4b23      	ldr	r3, [pc, #140]	@ (800e13c <prvProcessExpiredTimer+0x98>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	68db      	ldr	r3, [r3, #12]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	3304      	adds	r3, #4
 800e0bc:	4618      	mov	r0, r3
 800e0be:	f7fd fe1b 	bl	800bcf8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0c2:	697b      	ldr	r3, [r7, #20]
 800e0c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0c8:	f003 0304 	and.w	r3, r3, #4
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d023      	beq.n	800e118 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e0d0:	697b      	ldr	r3, [r7, #20]
 800e0d2:	699a      	ldr	r2, [r3, #24]
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	18d1      	adds	r1, r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	683a      	ldr	r2, [r7, #0]
 800e0dc:	6978      	ldr	r0, [r7, #20]
 800e0de:	f000 f8d5 	bl	800e28c <prvInsertTimerInActiveList>
 800e0e2:	4603      	mov	r3, r0
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d020      	beq.n	800e12a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	9300      	str	r3, [sp, #0]
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	6978      	ldr	r0, [r7, #20]
 800e0f4:	f7ff ff88 	bl	800e008 <xTimerGenericCommand>
 800e0f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e0fa:	693b      	ldr	r3, [r7, #16]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d114      	bne.n	800e12a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60fb      	str	r3, [r7, #12]
}
 800e112:	bf00      	nop
 800e114:	bf00      	nop
 800e116:	e7fd      	b.n	800e114 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e11e:	f023 0301 	bic.w	r3, r3, #1
 800e122:	b2da      	uxtb	r2, r3
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	6a1b      	ldr	r3, [r3, #32]
 800e12e:	6978      	ldr	r0, [r7, #20]
 800e130:	4798      	blx	r3
}
 800e132:	bf00      	nop
 800e134:	3718      	adds	r7, #24
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}
 800e13a:	bf00      	nop
 800e13c:	200010bc 	.word	0x200010bc

0800e140 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e148:	f107 0308 	add.w	r3, r7, #8
 800e14c:	4618      	mov	r0, r3
 800e14e:	f000 f859 	bl	800e204 <prvGetNextExpireTime>
 800e152:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	4619      	mov	r1, r3
 800e158:	68f8      	ldr	r0, [r7, #12]
 800e15a:	f000 f805 	bl	800e168 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e15e:	f000 f8d7 	bl	800e310 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e162:	bf00      	nop
 800e164:	e7f0      	b.n	800e148 <prvTimerTask+0x8>
	...

0800e168 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e172:	f7ff f899 	bl	800d2a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e176:	f107 0308 	add.w	r3, r7, #8
 800e17a:	4618      	mov	r0, r3
 800e17c:	f000 f866 	bl	800e24c <prvSampleTimeNow>
 800e180:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d130      	bne.n	800e1ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d10a      	bne.n	800e1a4 <prvProcessTimerOrBlockTask+0x3c>
 800e18e:	687a      	ldr	r2, [r7, #4]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	429a      	cmp	r2, r3
 800e194:	d806      	bhi.n	800e1a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e196:	f7ff f895 	bl	800d2c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e19a:	68f9      	ldr	r1, [r7, #12]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f7ff ff81 	bl	800e0a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e1a2:	e024      	b.n	800e1ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d008      	beq.n	800e1bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e1aa:	4b13      	ldr	r3, [pc, #76]	@ (800e1f8 <prvProcessTimerOrBlockTask+0x90>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d101      	bne.n	800e1b8 <prvProcessTimerOrBlockTask+0x50>
 800e1b4:	2301      	movs	r3, #1
 800e1b6:	e000      	b.n	800e1ba <prvProcessTimerOrBlockTask+0x52>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e1bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e1fc <prvProcessTimerOrBlockTask+0x94>)
 800e1be:	6818      	ldr	r0, [r3, #0]
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	1ad3      	subs	r3, r2, r3
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	f7fe fdf5 	bl	800cdb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e1ce:	f7ff f879 	bl	800d2c4 <xTaskResumeAll>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d10a      	bne.n	800e1ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e1d8:	4b09      	ldr	r3, [pc, #36]	@ (800e200 <prvProcessTimerOrBlockTask+0x98>)
 800e1da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	f3bf 8f4f 	dsb	sy
 800e1e4:	f3bf 8f6f 	isb	sy
}
 800e1e8:	e001      	b.n	800e1ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e1ea:	f7ff f86b 	bl	800d2c4 <xTaskResumeAll>
}
 800e1ee:	bf00      	nop
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	200010c0 	.word	0x200010c0
 800e1fc:	200010c4 	.word	0x200010c4
 800e200:	e000ed04 	.word	0xe000ed04

0800e204 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e204:	b480      	push	{r7}
 800e206:	b085      	sub	sp, #20
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e20c:	4b0e      	ldr	r3, [pc, #56]	@ (800e248 <prvGetNextExpireTime+0x44>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d101      	bne.n	800e21a <prvGetNextExpireTime+0x16>
 800e216:	2201      	movs	r2, #1
 800e218:	e000      	b.n	800e21c <prvGetNextExpireTime+0x18>
 800e21a:	2200      	movs	r2, #0
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d105      	bne.n	800e234 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e228:	4b07      	ldr	r3, [pc, #28]	@ (800e248 <prvGetNextExpireTime+0x44>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	60fb      	str	r3, [r7, #12]
 800e232:	e001      	b.n	800e238 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e234:	2300      	movs	r3, #0
 800e236:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e238:	68fb      	ldr	r3, [r7, #12]
}
 800e23a:	4618      	mov	r0, r3
 800e23c:	3714      	adds	r7, #20
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	200010bc 	.word	0x200010bc

0800e24c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e254:	f7ff f8d4 	bl	800d400 <xTaskGetTickCount>
 800e258:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e25a:	4b0b      	ldr	r3, [pc, #44]	@ (800e288 <prvSampleTimeNow+0x3c>)
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	68fa      	ldr	r2, [r7, #12]
 800e260:	429a      	cmp	r2, r3
 800e262:	d205      	bcs.n	800e270 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e264:	f000 f93a 	bl	800e4dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	e002      	b.n	800e276 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2200      	movs	r2, #0
 800e274:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e276:	4a04      	ldr	r2, [pc, #16]	@ (800e288 <prvSampleTimeNow+0x3c>)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e27c:	68fb      	ldr	r3, [r7, #12]
}
 800e27e:	4618      	mov	r0, r3
 800e280:	3710      	adds	r7, #16
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}
 800e286:	bf00      	nop
 800e288:	200010cc 	.word	0x200010cc

0800e28c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b086      	sub	sp, #24
 800e290:	af00      	add	r7, sp, #0
 800e292:	60f8      	str	r0, [r7, #12]
 800e294:	60b9      	str	r1, [r7, #8]
 800e296:	607a      	str	r2, [r7, #4]
 800e298:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e29a:	2300      	movs	r3, #0
 800e29c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	68fa      	ldr	r2, [r7, #12]
 800e2a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d812      	bhi.n	800e2d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	683b      	ldr	r3, [r7, #0]
 800e2b6:	1ad2      	subs	r2, r2, r3
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d302      	bcc.n	800e2c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e2c0:	2301      	movs	r3, #1
 800e2c2:	617b      	str	r3, [r7, #20]
 800e2c4:	e01b      	b.n	800e2fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e2c6:	4b10      	ldr	r3, [pc, #64]	@ (800e308 <prvInsertTimerInActiveList+0x7c>)
 800e2c8:	681a      	ldr	r2, [r3, #0]
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	f7fd fcd8 	bl	800bc86 <vListInsert>
 800e2d6:	e012      	b.n	800e2fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d206      	bcs.n	800e2ee <prvInsertTimerInActiveList+0x62>
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	d302      	bcc.n	800e2ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e2e8:	2301      	movs	r3, #1
 800e2ea:	617b      	str	r3, [r7, #20]
 800e2ec:	e007      	b.n	800e2fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e2ee:	4b07      	ldr	r3, [pc, #28]	@ (800e30c <prvInsertTimerInActiveList+0x80>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	f7fd fcc4 	bl	800bc86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e2fe:	697b      	ldr	r3, [r7, #20]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3718      	adds	r7, #24
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	200010c0 	.word	0x200010c0
 800e30c:	200010bc 	.word	0x200010bc

0800e310 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08e      	sub	sp, #56	@ 0x38
 800e314:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e316:	e0ce      	b.n	800e4b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	da19      	bge.n	800e352 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e31e:	1d3b      	adds	r3, r7, #4
 800e320:	3304      	adds	r3, #4
 800e322:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e326:	2b00      	cmp	r3, #0
 800e328:	d10b      	bne.n	800e342 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	61fb      	str	r3, [r7, #28]
}
 800e33c:	bf00      	nop
 800e33e:	bf00      	nop
 800e340:	e7fd      	b.n	800e33e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e348:	6850      	ldr	r0, [r2, #4]
 800e34a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e34c:	6892      	ldr	r2, [r2, #8]
 800e34e:	4611      	mov	r1, r2
 800e350:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2b00      	cmp	r3, #0
 800e356:	f2c0 80ae 	blt.w	800e4b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d004      	beq.n	800e370 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e368:	3304      	adds	r3, #4
 800e36a:	4618      	mov	r0, r3
 800e36c:	f7fd fcc4 	bl	800bcf8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e370:	463b      	mov	r3, r7
 800e372:	4618      	mov	r0, r3
 800e374:	f7ff ff6a 	bl	800e24c <prvSampleTimeNow>
 800e378:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	2b09      	cmp	r3, #9
 800e37e:	f200 8097 	bhi.w	800e4b0 <prvProcessReceivedCommands+0x1a0>
 800e382:	a201      	add	r2, pc, #4	@ (adr r2, 800e388 <prvProcessReceivedCommands+0x78>)
 800e384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e388:	0800e3b1 	.word	0x0800e3b1
 800e38c:	0800e3b1 	.word	0x0800e3b1
 800e390:	0800e3b1 	.word	0x0800e3b1
 800e394:	0800e427 	.word	0x0800e427
 800e398:	0800e43b 	.word	0x0800e43b
 800e39c:	0800e487 	.word	0x0800e487
 800e3a0:	0800e3b1 	.word	0x0800e3b1
 800e3a4:	0800e3b1 	.word	0x0800e3b1
 800e3a8:	0800e427 	.word	0x0800e427
 800e3ac:	0800e43b 	.word	0x0800e43b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3b6:	f043 0301 	orr.w	r3, r3, #1
 800e3ba:	b2da      	uxtb	r2, r3
 800e3bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e3c2:	68ba      	ldr	r2, [r7, #8]
 800e3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3c6:	699b      	ldr	r3, [r3, #24]
 800e3c8:	18d1      	adds	r1, r2, r3
 800e3ca:	68bb      	ldr	r3, [r7, #8]
 800e3cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e3ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3d0:	f7ff ff5c 	bl	800e28c <prvInsertTimerInActiveList>
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d06c      	beq.n	800e4b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3e8:	f003 0304 	and.w	r3, r3, #4
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d061      	beq.n	800e4b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e3f0:	68ba      	ldr	r2, [r7, #8]
 800e3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f4:	699b      	ldr	r3, [r3, #24]
 800e3f6:	441a      	add	r2, r3
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	2100      	movs	r1, #0
 800e400:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e402:	f7ff fe01 	bl	800e008 <xTimerGenericCommand>
 800e406:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e408:	6a3b      	ldr	r3, [r7, #32]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d152      	bne.n	800e4b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e412:	f383 8811 	msr	BASEPRI, r3
 800e416:	f3bf 8f6f 	isb	sy
 800e41a:	f3bf 8f4f 	dsb	sy
 800e41e:	61bb      	str	r3, [r7, #24]
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	e7fd      	b.n	800e422 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e42c:	f023 0301 	bic.w	r3, r3, #1
 800e430:	b2da      	uxtb	r2, r3
 800e432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e434:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e438:	e03d      	b.n	800e4b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e43a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e43c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e440:	f043 0301 	orr.w	r3, r3, #1
 800e444:	b2da      	uxtb	r2, r3
 800e446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e448:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e44c:	68ba      	ldr	r2, [r7, #8]
 800e44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e450:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e454:	699b      	ldr	r3, [r3, #24]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d10b      	bne.n	800e472 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e45a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e45e:	f383 8811 	msr	BASEPRI, r3
 800e462:	f3bf 8f6f 	isb	sy
 800e466:	f3bf 8f4f 	dsb	sy
 800e46a:	617b      	str	r3, [r7, #20]
}
 800e46c:	bf00      	nop
 800e46e:	bf00      	nop
 800e470:	e7fd      	b.n	800e46e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e474:	699a      	ldr	r2, [r3, #24]
 800e476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e478:	18d1      	adds	r1, r2, r3
 800e47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e47c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e47e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e480:	f7ff ff04 	bl	800e28c <prvInsertTimerInActiveList>
					break;
 800e484:	e017      	b.n	800e4b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e48c:	f003 0302 	and.w	r3, r3, #2
 800e490:	2b00      	cmp	r3, #0
 800e492:	d103      	bne.n	800e49c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e494:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e496:	f000 fc07 	bl	800eca8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e49a:	e00c      	b.n	800e4b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e49e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e4a2:	f023 0301 	bic.w	r3, r3, #1
 800e4a6:	b2da      	uxtb	r2, r3
 800e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e4ae:	e002      	b.n	800e4b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e4b0:	bf00      	nop
 800e4b2:	e000      	b.n	800e4b6 <prvProcessReceivedCommands+0x1a6>
					break;
 800e4b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e4b6:	4b08      	ldr	r3, [pc, #32]	@ (800e4d8 <prvProcessReceivedCommands+0x1c8>)
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	1d39      	adds	r1, r7, #4
 800e4bc:	2200      	movs	r2, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe f828 	bl	800c514 <xQueueReceive>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	f47f af26 	bne.w	800e318 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e4cc:	bf00      	nop
 800e4ce:	bf00      	nop
 800e4d0:	3730      	adds	r7, #48	@ 0x30
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}
 800e4d6:	bf00      	nop
 800e4d8:	200010c4 	.word	0x200010c4

0800e4dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	b088      	sub	sp, #32
 800e4e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e4e2:	e049      	b.n	800e578 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e4e4:	4b2e      	ldr	r3, [pc, #184]	@ (800e5a0 <prvSwitchTimerLists+0xc4>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4ee:	4b2c      	ldr	r3, [pc, #176]	@ (800e5a0 <prvSwitchTimerLists+0xc4>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	68db      	ldr	r3, [r3, #12]
 800e4f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	3304      	adds	r3, #4
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f7fd fbfb 	bl	800bcf8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6a1b      	ldr	r3, [r3, #32]
 800e506:	68f8      	ldr	r0, [r7, #12]
 800e508:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e510:	f003 0304 	and.w	r3, r3, #4
 800e514:	2b00      	cmp	r3, #0
 800e516:	d02f      	beq.n	800e578 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	699b      	ldr	r3, [r3, #24]
 800e51c:	693a      	ldr	r2, [r7, #16]
 800e51e:	4413      	add	r3, r2
 800e520:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e522:	68ba      	ldr	r2, [r7, #8]
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	429a      	cmp	r2, r3
 800e528:	d90e      	bls.n	800e548 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	68fa      	ldr	r2, [r7, #12]
 800e534:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e536:	4b1a      	ldr	r3, [pc, #104]	@ (800e5a0 <prvSwitchTimerLists+0xc4>)
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	3304      	adds	r3, #4
 800e53e:	4619      	mov	r1, r3
 800e540:	4610      	mov	r0, r2
 800e542:	f7fd fba0 	bl	800bc86 <vListInsert>
 800e546:	e017      	b.n	800e578 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e548:	2300      	movs	r3, #0
 800e54a:	9300      	str	r3, [sp, #0]
 800e54c:	2300      	movs	r3, #0
 800e54e:	693a      	ldr	r2, [r7, #16]
 800e550:	2100      	movs	r1, #0
 800e552:	68f8      	ldr	r0, [r7, #12]
 800e554:	f7ff fd58 	bl	800e008 <xTimerGenericCommand>
 800e558:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d10b      	bne.n	800e578 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	603b      	str	r3, [r7, #0]
}
 800e572:	bf00      	nop
 800e574:	bf00      	nop
 800e576:	e7fd      	b.n	800e574 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e578:	4b09      	ldr	r3, [pc, #36]	@ (800e5a0 <prvSwitchTimerLists+0xc4>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1b0      	bne.n	800e4e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e582:	4b07      	ldr	r3, [pc, #28]	@ (800e5a0 <prvSwitchTimerLists+0xc4>)
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e588:	4b06      	ldr	r3, [pc, #24]	@ (800e5a4 <prvSwitchTimerLists+0xc8>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4a04      	ldr	r2, [pc, #16]	@ (800e5a0 <prvSwitchTimerLists+0xc4>)
 800e58e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e590:	4a04      	ldr	r2, [pc, #16]	@ (800e5a4 <prvSwitchTimerLists+0xc8>)
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	6013      	str	r3, [r2, #0]
}
 800e596:	bf00      	nop
 800e598:	3718      	adds	r7, #24
 800e59a:	46bd      	mov	sp, r7
 800e59c:	bd80      	pop	{r7, pc}
 800e59e:	bf00      	nop
 800e5a0:	200010bc 	.word	0x200010bc
 800e5a4:	200010c0 	.word	0x200010c0

0800e5a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b082      	sub	sp, #8
 800e5ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e5ae:	f000 f98b 	bl	800e8c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e5b2:	4b15      	ldr	r3, [pc, #84]	@ (800e608 <prvCheckForValidListAndQueue+0x60>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d120      	bne.n	800e5fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e5ba:	4814      	ldr	r0, [pc, #80]	@ (800e60c <prvCheckForValidListAndQueue+0x64>)
 800e5bc:	f7fd fb12 	bl	800bbe4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e5c0:	4813      	ldr	r0, [pc, #76]	@ (800e610 <prvCheckForValidListAndQueue+0x68>)
 800e5c2:	f7fd fb0f 	bl	800bbe4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e5c6:	4b13      	ldr	r3, [pc, #76]	@ (800e614 <prvCheckForValidListAndQueue+0x6c>)
 800e5c8:	4a10      	ldr	r2, [pc, #64]	@ (800e60c <prvCheckForValidListAndQueue+0x64>)
 800e5ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e5cc:	4b12      	ldr	r3, [pc, #72]	@ (800e618 <prvCheckForValidListAndQueue+0x70>)
 800e5ce:	4a10      	ldr	r2, [pc, #64]	@ (800e610 <prvCheckForValidListAndQueue+0x68>)
 800e5d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	4b11      	ldr	r3, [pc, #68]	@ (800e61c <prvCheckForValidListAndQueue+0x74>)
 800e5d8:	4a11      	ldr	r2, [pc, #68]	@ (800e620 <prvCheckForValidListAndQueue+0x78>)
 800e5da:	2110      	movs	r1, #16
 800e5dc:	200a      	movs	r0, #10
 800e5de:	f7fd fc1f 	bl	800be20 <xQueueGenericCreateStatic>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	4a08      	ldr	r2, [pc, #32]	@ (800e608 <prvCheckForValidListAndQueue+0x60>)
 800e5e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e5e8:	4b07      	ldr	r3, [pc, #28]	@ (800e608 <prvCheckForValidListAndQueue+0x60>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d005      	beq.n	800e5fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e5f0:	4b05      	ldr	r3, [pc, #20]	@ (800e608 <prvCheckForValidListAndQueue+0x60>)
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	490b      	ldr	r1, [pc, #44]	@ (800e624 <prvCheckForValidListAndQueue+0x7c>)
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7fe fb8a 	bl	800cd10 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e5fc:	f000 f996 	bl	800e92c <vPortExitCritical>
}
 800e600:	bf00      	nop
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
 800e606:	bf00      	nop
 800e608:	200010c4 	.word	0x200010c4
 800e60c:	20001094 	.word	0x20001094
 800e610:	200010a8 	.word	0x200010a8
 800e614:	200010bc 	.word	0x200010bc
 800e618:	200010c0 	.word	0x200010c0
 800e61c:	20001170 	.word	0x20001170
 800e620:	200010d0 	.word	0x200010d0
 800e624:	0801053c 	.word	0x0801053c

0800e628 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b086      	sub	sp, #24
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d10b      	bne.n	800e652 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800e63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e63e:	f383 8811 	msr	BASEPRI, r3
 800e642:	f3bf 8f6f 	isb	sy
 800e646:	f3bf 8f4f 	dsb	sy
 800e64a:	60fb      	str	r3, [r7, #12]
}
 800e64c:	bf00      	nop
 800e64e:	bf00      	nop
 800e650:	e7fd      	b.n	800e64e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800e652:	f000 f939 	bl	800e8c8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	69db      	ldr	r3, [r3, #28]
 800e65a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800e65c:	f000 f966 	bl	800e92c <vPortExitCritical>

	return pvReturn;
 800e660:	693b      	ldr	r3, [r7, #16]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3718      	adds	r7, #24
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}
	...

0800e66c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e66c:	b480      	push	{r7}
 800e66e:	b085      	sub	sp, #20
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	3b04      	subs	r3, #4
 800e67c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	3b04      	subs	r3, #4
 800e68a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	f023 0201 	bic.w	r2, r3, #1
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	3b04      	subs	r3, #4
 800e69a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e69c:	4a0c      	ldr	r2, [pc, #48]	@ (800e6d0 <pxPortInitialiseStack+0x64>)
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	3b14      	subs	r3, #20
 800e6a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3b04      	subs	r3, #4
 800e6b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f06f 0202 	mvn.w	r2, #2
 800e6ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3b20      	subs	r3, #32
 800e6c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
}
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	3714      	adds	r7, #20
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ce:	4770      	bx	lr
 800e6d0:	0800e6d5 	.word	0x0800e6d5

0800e6d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e6de:	4b13      	ldr	r3, [pc, #76]	@ (800e72c <prvTaskExitError+0x58>)
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6e6:	d00b      	beq.n	800e700 <prvTaskExitError+0x2c>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	60fb      	str	r3, [r7, #12]
}
 800e6fa:	bf00      	nop
 800e6fc:	bf00      	nop
 800e6fe:	e7fd      	b.n	800e6fc <prvTaskExitError+0x28>
	__asm volatile
 800e700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e704:	f383 8811 	msr	BASEPRI, r3
 800e708:	f3bf 8f6f 	isb	sy
 800e70c:	f3bf 8f4f 	dsb	sy
 800e710:	60bb      	str	r3, [r7, #8]
}
 800e712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e714:	bf00      	nop
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d0fc      	beq.n	800e716 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e71c:	bf00      	nop
 800e71e:	bf00      	nop
 800e720:	3714      	adds	r7, #20
 800e722:	46bd      	mov	sp, r7
 800e724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e728:	4770      	bx	lr
 800e72a:	bf00      	nop
 800e72c:	20000098 	.word	0x20000098

0800e730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e730:	4b07      	ldr	r3, [pc, #28]	@ (800e750 <pxCurrentTCBConst2>)
 800e732:	6819      	ldr	r1, [r3, #0]
 800e734:	6808      	ldr	r0, [r1, #0]
 800e736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e73a:	f380 8809 	msr	PSP, r0
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f04f 0000 	mov.w	r0, #0
 800e746:	f380 8811 	msr	BASEPRI, r0
 800e74a:	4770      	bx	lr
 800e74c:	f3af 8000 	nop.w

0800e750 <pxCurrentTCBConst2>:
 800e750:	20000b94 	.word	0x20000b94
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e754:	bf00      	nop
 800e756:	bf00      	nop

0800e758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e758:	4808      	ldr	r0, [pc, #32]	@ (800e77c <prvPortStartFirstTask+0x24>)
 800e75a:	6800      	ldr	r0, [r0, #0]
 800e75c:	6800      	ldr	r0, [r0, #0]
 800e75e:	f380 8808 	msr	MSP, r0
 800e762:	f04f 0000 	mov.w	r0, #0
 800e766:	f380 8814 	msr	CONTROL, r0
 800e76a:	b662      	cpsie	i
 800e76c:	b661      	cpsie	f
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	df00      	svc	0
 800e778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e77a:	bf00      	nop
 800e77c:	e000ed08 	.word	0xe000ed08

0800e780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e780:	b580      	push	{r7, lr}
 800e782:	b086      	sub	sp, #24
 800e784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e786:	4b47      	ldr	r3, [pc, #284]	@ (800e8a4 <xPortStartScheduler+0x124>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a47      	ldr	r2, [pc, #284]	@ (800e8a8 <xPortStartScheduler+0x128>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d10b      	bne.n	800e7a8 <xPortStartScheduler+0x28>
	__asm volatile
 800e790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e794:	f383 8811 	msr	BASEPRI, r3
 800e798:	f3bf 8f6f 	isb	sy
 800e79c:	f3bf 8f4f 	dsb	sy
 800e7a0:	613b      	str	r3, [r7, #16]
}
 800e7a2:	bf00      	nop
 800e7a4:	bf00      	nop
 800e7a6:	e7fd      	b.n	800e7a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800e8a4 <xPortStartScheduler+0x124>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	4a3f      	ldr	r2, [pc, #252]	@ (800e8ac <xPortStartScheduler+0x12c>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d10b      	bne.n	800e7ca <xPortStartScheduler+0x4a>
	__asm volatile
 800e7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b6:	f383 8811 	msr	BASEPRI, r3
 800e7ba:	f3bf 8f6f 	isb	sy
 800e7be:	f3bf 8f4f 	dsb	sy
 800e7c2:	60fb      	str	r3, [r7, #12]
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	e7fd      	b.n	800e7c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e7ca:	4b39      	ldr	r3, [pc, #228]	@ (800e8b0 <xPortStartScheduler+0x130>)
 800e7cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e7ce:	697b      	ldr	r3, [r7, #20]
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e7d6:	697b      	ldr	r3, [r7, #20]
 800e7d8:	22ff      	movs	r2, #255	@ 0xff
 800e7da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e7dc:	697b      	ldr	r3, [r7, #20]
 800e7de:	781b      	ldrb	r3, [r3, #0]
 800e7e0:	b2db      	uxtb	r3, r3
 800e7e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e7e4:	78fb      	ldrb	r3, [r7, #3]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e7ec:	b2da      	uxtb	r2, r3
 800e7ee:	4b31      	ldr	r3, [pc, #196]	@ (800e8b4 <xPortStartScheduler+0x134>)
 800e7f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7f2:	4b31      	ldr	r3, [pc, #196]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e7f4:	2207      	movs	r2, #7
 800e7f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7f8:	e009      	b.n	800e80e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	3b01      	subs	r3, #1
 800e800:	4a2d      	ldr	r2, [pc, #180]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e804:	78fb      	ldrb	r3, [r7, #3]
 800e806:	b2db      	uxtb	r3, r3
 800e808:	005b      	lsls	r3, r3, #1
 800e80a:	b2db      	uxtb	r3, r3
 800e80c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e80e:	78fb      	ldrb	r3, [r7, #3]
 800e810:	b2db      	uxtb	r3, r3
 800e812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e816:	2b80      	cmp	r3, #128	@ 0x80
 800e818:	d0ef      	beq.n	800e7fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e81a:	4b27      	ldr	r3, [pc, #156]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f1c3 0307 	rsb	r3, r3, #7
 800e822:	2b04      	cmp	r3, #4
 800e824:	d00b      	beq.n	800e83e <xPortStartScheduler+0xbe>
	__asm volatile
 800e826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	60bb      	str	r3, [r7, #8]
}
 800e838:	bf00      	nop
 800e83a:	bf00      	nop
 800e83c:	e7fd      	b.n	800e83a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e83e:	4b1e      	ldr	r3, [pc, #120]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	021b      	lsls	r3, r3, #8
 800e844:	4a1c      	ldr	r2, [pc, #112]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e848:	4b1b      	ldr	r3, [pc, #108]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e850:	4a19      	ldr	r2, [pc, #100]	@ (800e8b8 <xPortStartScheduler+0x138>)
 800e852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	b2da      	uxtb	r2, r3
 800e858:	697b      	ldr	r3, [r7, #20]
 800e85a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e85c:	4b17      	ldr	r3, [pc, #92]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	4a16      	ldr	r2, [pc, #88]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e868:	4b14      	ldr	r3, [pc, #80]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a13      	ldr	r2, [pc, #76]	@ (800e8bc <xPortStartScheduler+0x13c>)
 800e86e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e874:	f000 f8da 	bl	800ea2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e878:	4b11      	ldr	r3, [pc, #68]	@ (800e8c0 <xPortStartScheduler+0x140>)
 800e87a:	2200      	movs	r2, #0
 800e87c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e87e:	f000 f8f9 	bl	800ea74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e882:	4b10      	ldr	r3, [pc, #64]	@ (800e8c4 <xPortStartScheduler+0x144>)
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	4a0f      	ldr	r2, [pc, #60]	@ (800e8c4 <xPortStartScheduler+0x144>)
 800e888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e88c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e88e:	f7ff ff63 	bl	800e758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e892:	f7fe fe7f 	bl	800d594 <vTaskSwitchContext>
	prvTaskExitError();
 800e896:	f7ff ff1d 	bl	800e6d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e89a:	2300      	movs	r3, #0
}
 800e89c:	4618      	mov	r0, r3
 800e89e:	3718      	adds	r7, #24
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	e000ed00 	.word	0xe000ed00
 800e8a8:	410fc271 	.word	0x410fc271
 800e8ac:	410fc270 	.word	0x410fc270
 800e8b0:	e000e400 	.word	0xe000e400
 800e8b4:	200011c0 	.word	0x200011c0
 800e8b8:	200011c4 	.word	0x200011c4
 800e8bc:	e000ed20 	.word	0xe000ed20
 800e8c0:	20000098 	.word	0x20000098
 800e8c4:	e000ef34 	.word	0xe000ef34

0800e8c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e8c8:	b480      	push	{r7}
 800e8ca:	b083      	sub	sp, #12
 800e8cc:	af00      	add	r7, sp, #0
	__asm volatile
 800e8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8d2:	f383 8811 	msr	BASEPRI, r3
 800e8d6:	f3bf 8f6f 	isb	sy
 800e8da:	f3bf 8f4f 	dsb	sy
 800e8de:	607b      	str	r3, [r7, #4]
}
 800e8e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e8e2:	4b10      	ldr	r3, [pc, #64]	@ (800e924 <vPortEnterCritical+0x5c>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	3301      	adds	r3, #1
 800e8e8:	4a0e      	ldr	r2, [pc, #56]	@ (800e924 <vPortEnterCritical+0x5c>)
 800e8ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e8ec:	4b0d      	ldr	r3, [pc, #52]	@ (800e924 <vPortEnterCritical+0x5c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	2b01      	cmp	r3, #1
 800e8f2:	d110      	bne.n	800e916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e928 <vPortEnterCritical+0x60>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	b2db      	uxtb	r3, r3
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00b      	beq.n	800e916 <vPortEnterCritical+0x4e>
	__asm volatile
 800e8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e902:	f383 8811 	msr	BASEPRI, r3
 800e906:	f3bf 8f6f 	isb	sy
 800e90a:	f3bf 8f4f 	dsb	sy
 800e90e:	603b      	str	r3, [r7, #0]
}
 800e910:	bf00      	nop
 800e912:	bf00      	nop
 800e914:	e7fd      	b.n	800e912 <vPortEnterCritical+0x4a>
	}
}
 800e916:	bf00      	nop
 800e918:	370c      	adds	r7, #12
 800e91a:	46bd      	mov	sp, r7
 800e91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e920:	4770      	bx	lr
 800e922:	bf00      	nop
 800e924:	20000098 	.word	0x20000098
 800e928:	e000ed04 	.word	0xe000ed04

0800e92c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e92c:	b480      	push	{r7}
 800e92e:	b083      	sub	sp, #12
 800e930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e932:	4b12      	ldr	r3, [pc, #72]	@ (800e97c <vPortExitCritical+0x50>)
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d10b      	bne.n	800e952 <vPortExitCritical+0x26>
	__asm volatile
 800e93a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e93e:	f383 8811 	msr	BASEPRI, r3
 800e942:	f3bf 8f6f 	isb	sy
 800e946:	f3bf 8f4f 	dsb	sy
 800e94a:	607b      	str	r3, [r7, #4]
}
 800e94c:	bf00      	nop
 800e94e:	bf00      	nop
 800e950:	e7fd      	b.n	800e94e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e952:	4b0a      	ldr	r3, [pc, #40]	@ (800e97c <vPortExitCritical+0x50>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	3b01      	subs	r3, #1
 800e958:	4a08      	ldr	r2, [pc, #32]	@ (800e97c <vPortExitCritical+0x50>)
 800e95a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e95c:	4b07      	ldr	r3, [pc, #28]	@ (800e97c <vPortExitCritical+0x50>)
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	2b00      	cmp	r3, #0
 800e962:	d105      	bne.n	800e970 <vPortExitCritical+0x44>
 800e964:	2300      	movs	r3, #0
 800e966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	f383 8811 	msr	BASEPRI, r3
}
 800e96e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e970:	bf00      	nop
 800e972:	370c      	adds	r7, #12
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr
 800e97c:	20000098 	.word	0x20000098

0800e980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e980:	f3ef 8009 	mrs	r0, PSP
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4b15      	ldr	r3, [pc, #84]	@ (800e9e0 <pxCurrentTCBConst>)
 800e98a:	681a      	ldr	r2, [r3, #0]
 800e98c:	f01e 0f10 	tst.w	lr, #16
 800e990:	bf08      	it	eq
 800e992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e99a:	6010      	str	r0, [r2, #0]
 800e99c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e9a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e9a4:	f380 8811 	msr	BASEPRI, r0
 800e9a8:	f3bf 8f4f 	dsb	sy
 800e9ac:	f3bf 8f6f 	isb	sy
 800e9b0:	f7fe fdf0 	bl	800d594 <vTaskSwitchContext>
 800e9b4:	f04f 0000 	mov.w	r0, #0
 800e9b8:	f380 8811 	msr	BASEPRI, r0
 800e9bc:	bc09      	pop	{r0, r3}
 800e9be:	6819      	ldr	r1, [r3, #0]
 800e9c0:	6808      	ldr	r0, [r1, #0]
 800e9c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9c6:	f01e 0f10 	tst.w	lr, #16
 800e9ca:	bf08      	it	eq
 800e9cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e9d0:	f380 8809 	msr	PSP, r0
 800e9d4:	f3bf 8f6f 	isb	sy
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	f3af 8000 	nop.w

0800e9e0 <pxCurrentTCBConst>:
 800e9e0:	20000b94 	.word	0x20000b94
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop

0800e9e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
	__asm volatile
 800e9ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f2:	f383 8811 	msr	BASEPRI, r3
 800e9f6:	f3bf 8f6f 	isb	sy
 800e9fa:	f3bf 8f4f 	dsb	sy
 800e9fe:	607b      	str	r3, [r7, #4]
}
 800ea00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ea02:	f7fe fd0d 	bl	800d420 <xTaskIncrementTick>
 800ea06:	4603      	mov	r3, r0
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d003      	beq.n	800ea14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ea0c:	4b06      	ldr	r3, [pc, #24]	@ (800ea28 <xPortSysTickHandler+0x40>)
 800ea0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea12:	601a      	str	r2, [r3, #0]
 800ea14:	2300      	movs	r3, #0
 800ea16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	f383 8811 	msr	BASEPRI, r3
}
 800ea1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ea20:	bf00      	nop
 800ea22:	3708      	adds	r7, #8
 800ea24:	46bd      	mov	sp, r7
 800ea26:	bd80      	pop	{r7, pc}
 800ea28:	e000ed04 	.word	0xe000ed04

0800ea2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ea30:	4b0b      	ldr	r3, [pc, #44]	@ (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea32:	2200      	movs	r2, #0
 800ea34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ea36:	4b0b      	ldr	r3, [pc, #44]	@ (800ea64 <vPortSetupTimerInterrupt+0x38>)
 800ea38:	2200      	movs	r2, #0
 800ea3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ea3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ea68 <vPortSetupTimerInterrupt+0x3c>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	4a0a      	ldr	r2, [pc, #40]	@ (800ea6c <vPortSetupTimerInterrupt+0x40>)
 800ea42:	fba2 2303 	umull	r2, r3, r2, r3
 800ea46:	099b      	lsrs	r3, r3, #6
 800ea48:	4a09      	ldr	r2, [pc, #36]	@ (800ea70 <vPortSetupTimerInterrupt+0x44>)
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ea4e:	4b04      	ldr	r3, [pc, #16]	@ (800ea60 <vPortSetupTimerInterrupt+0x34>)
 800ea50:	2207      	movs	r2, #7
 800ea52:	601a      	str	r2, [r3, #0]
}
 800ea54:	bf00      	nop
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
 800ea5e:	bf00      	nop
 800ea60:	e000e010 	.word	0xe000e010
 800ea64:	e000e018 	.word	0xe000e018
 800ea68:	20000000 	.word	0x20000000
 800ea6c:	10624dd3 	.word	0x10624dd3
 800ea70:	e000e014 	.word	0xe000e014

0800ea74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea84 <vPortEnableVFP+0x10>
 800ea78:	6801      	ldr	r1, [r0, #0]
 800ea7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea7e:	6001      	str	r1, [r0, #0]
 800ea80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea82:	bf00      	nop
 800ea84:	e000ed88 	.word	0xe000ed88

0800ea88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ea8e:	f3ef 8305 	mrs	r3, IPSR
 800ea92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	2b0f      	cmp	r3, #15
 800ea98:	d915      	bls.n	800eac6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ea9a:	4a18      	ldr	r2, [pc, #96]	@ (800eafc <vPortValidateInterruptPriority+0x74>)
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	4413      	add	r3, r2
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800eaa4:	4b16      	ldr	r3, [pc, #88]	@ (800eb00 <vPortValidateInterruptPriority+0x78>)
 800eaa6:	781b      	ldrb	r3, [r3, #0]
 800eaa8:	7afa      	ldrb	r2, [r7, #11]
 800eaaa:	429a      	cmp	r2, r3
 800eaac:	d20b      	bcs.n	800eac6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	607b      	str	r3, [r7, #4]
}
 800eac0:	bf00      	nop
 800eac2:	bf00      	nop
 800eac4:	e7fd      	b.n	800eac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800eac6:	4b0f      	ldr	r3, [pc, #60]	@ (800eb04 <vPortValidateInterruptPriority+0x7c>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800eace:	4b0e      	ldr	r3, [pc, #56]	@ (800eb08 <vPortValidateInterruptPriority+0x80>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d90b      	bls.n	800eaee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ead6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eada:	f383 8811 	msr	BASEPRI, r3
 800eade:	f3bf 8f6f 	isb	sy
 800eae2:	f3bf 8f4f 	dsb	sy
 800eae6:	603b      	str	r3, [r7, #0]
}
 800eae8:	bf00      	nop
 800eaea:	bf00      	nop
 800eaec:	e7fd      	b.n	800eaea <vPortValidateInterruptPriority+0x62>
	}
 800eaee:	bf00      	nop
 800eaf0:	3714      	adds	r7, #20
 800eaf2:	46bd      	mov	sp, r7
 800eaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf8:	4770      	bx	lr
 800eafa:	bf00      	nop
 800eafc:	e000e3f0 	.word	0xe000e3f0
 800eb00:	200011c0 	.word	0x200011c0
 800eb04:	e000ed0c 	.word	0xe000ed0c
 800eb08:	200011c4 	.word	0x200011c4

0800eb0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b08a      	sub	sp, #40	@ 0x28
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800eb14:	2300      	movs	r3, #0
 800eb16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800eb18:	f7fe fbc6 	bl	800d2a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800eb1c:	4b5c      	ldr	r3, [pc, #368]	@ (800ec90 <pvPortMalloc+0x184>)
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d101      	bne.n	800eb28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800eb24:	f000 f924 	bl	800ed70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800eb28:	4b5a      	ldr	r3, [pc, #360]	@ (800ec94 <pvPortMalloc+0x188>)
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	4013      	ands	r3, r2
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	f040 8095 	bne.w	800ec60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d01e      	beq.n	800eb7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800eb3c:	2208      	movs	r2, #8
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	4413      	add	r3, r2
 800eb42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f003 0307 	and.w	r3, r3, #7
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d015      	beq.n	800eb7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	f023 0307 	bic.w	r3, r3, #7
 800eb54:	3308      	adds	r3, #8
 800eb56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f003 0307 	and.w	r3, r3, #7
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00b      	beq.n	800eb7a <pvPortMalloc+0x6e>
	__asm volatile
 800eb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb66:	f383 8811 	msr	BASEPRI, r3
 800eb6a:	f3bf 8f6f 	isb	sy
 800eb6e:	f3bf 8f4f 	dsb	sy
 800eb72:	617b      	str	r3, [r7, #20]
}
 800eb74:	bf00      	nop
 800eb76:	bf00      	nop
 800eb78:	e7fd      	b.n	800eb76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d06f      	beq.n	800ec60 <pvPortMalloc+0x154>
 800eb80:	4b45      	ldr	r3, [pc, #276]	@ (800ec98 <pvPortMalloc+0x18c>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	687a      	ldr	r2, [r7, #4]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d86a      	bhi.n	800ec60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eb8a:	4b44      	ldr	r3, [pc, #272]	@ (800ec9c <pvPortMalloc+0x190>)
 800eb8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eb8e:	4b43      	ldr	r3, [pc, #268]	@ (800ec9c <pvPortMalloc+0x190>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eb94:	e004      	b.n	800eba0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eb96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eb9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eba2:	685b      	ldr	r3, [r3, #4]
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d903      	bls.n	800ebb2 <pvPortMalloc+0xa6>
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d1f1      	bne.n	800eb96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ebb2:	4b37      	ldr	r3, [pc, #220]	@ (800ec90 <pvPortMalloc+0x184>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d051      	beq.n	800ec60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ebbc:	6a3b      	ldr	r3, [r7, #32]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	2208      	movs	r2, #8
 800ebc2:	4413      	add	r3, r2
 800ebc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ebc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	6a3b      	ldr	r3, [r7, #32]
 800ebcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ebce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ebd0:	685a      	ldr	r2, [r3, #4]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	1ad2      	subs	r2, r2, r3
 800ebd6:	2308      	movs	r3, #8
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d920      	bls.n	800ec20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ebde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	4413      	add	r3, r2
 800ebe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ebe6:	69bb      	ldr	r3, [r7, #24]
 800ebe8:	f003 0307 	and.w	r3, r3, #7
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d00b      	beq.n	800ec08 <pvPortMalloc+0xfc>
	__asm volatile
 800ebf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebf4:	f383 8811 	msr	BASEPRI, r3
 800ebf8:	f3bf 8f6f 	isb	sy
 800ebfc:	f3bf 8f4f 	dsb	sy
 800ec00:	613b      	str	r3, [r7, #16]
}
 800ec02:	bf00      	nop
 800ec04:	bf00      	nop
 800ec06:	e7fd      	b.n	800ec04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ec08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	1ad2      	subs	r2, r2, r3
 800ec10:	69bb      	ldr	r3, [r7, #24]
 800ec12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ec14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ec1a:	69b8      	ldr	r0, [r7, #24]
 800ec1c:	f000 f90a 	bl	800ee34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ec20:	4b1d      	ldr	r3, [pc, #116]	@ (800ec98 <pvPortMalloc+0x18c>)
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ec98 <pvPortMalloc+0x18c>)
 800ec2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ec2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ec98 <pvPortMalloc+0x18c>)
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	4b1b      	ldr	r3, [pc, #108]	@ (800eca0 <pvPortMalloc+0x194>)
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d203      	bcs.n	800ec42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ec3a:	4b17      	ldr	r3, [pc, #92]	@ (800ec98 <pvPortMalloc+0x18c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a18      	ldr	r2, [pc, #96]	@ (800eca0 <pvPortMalloc+0x194>)
 800ec40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ec42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec44:	685a      	ldr	r2, [r3, #4]
 800ec46:	4b13      	ldr	r3, [pc, #76]	@ (800ec94 <pvPortMalloc+0x188>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	431a      	orrs	r2, r3
 800ec4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ec50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec52:	2200      	movs	r2, #0
 800ec54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ec56:	4b13      	ldr	r3, [pc, #76]	@ (800eca4 <pvPortMalloc+0x198>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	4a11      	ldr	r2, [pc, #68]	@ (800eca4 <pvPortMalloc+0x198>)
 800ec5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ec60:	f7fe fb30 	bl	800d2c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ec64:	69fb      	ldr	r3, [r7, #28]
 800ec66:	f003 0307 	and.w	r3, r3, #7
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d00b      	beq.n	800ec86 <pvPortMalloc+0x17a>
	__asm volatile
 800ec6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec72:	f383 8811 	msr	BASEPRI, r3
 800ec76:	f3bf 8f6f 	isb	sy
 800ec7a:	f3bf 8f4f 	dsb	sy
 800ec7e:	60fb      	str	r3, [r7, #12]
}
 800ec80:	bf00      	nop
 800ec82:	bf00      	nop
 800ec84:	e7fd      	b.n	800ec82 <pvPortMalloc+0x176>
	return pvReturn;
 800ec86:	69fb      	ldr	r3, [r7, #28]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3728      	adds	r7, #40	@ 0x28
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	20004dd0 	.word	0x20004dd0
 800ec94:	20004de4 	.word	0x20004de4
 800ec98:	20004dd4 	.word	0x20004dd4
 800ec9c:	20004dc8 	.word	0x20004dc8
 800eca0:	20004dd8 	.word	0x20004dd8
 800eca4:	20004ddc 	.word	0x20004ddc

0800eca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b086      	sub	sp, #24
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d04f      	beq.n	800ed5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ecba:	2308      	movs	r3, #8
 800ecbc:	425b      	negs	r3, r3
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	4b25      	ldr	r3, [pc, #148]	@ (800ed64 <vPortFree+0xbc>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d10b      	bne.n	800ecee <vPortFree+0x46>
	__asm volatile
 800ecd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecda:	f383 8811 	msr	BASEPRI, r3
 800ecde:	f3bf 8f6f 	isb	sy
 800ece2:	f3bf 8f4f 	dsb	sy
 800ece6:	60fb      	str	r3, [r7, #12]
}
 800ece8:	bf00      	nop
 800ecea:	bf00      	nop
 800ecec:	e7fd      	b.n	800ecea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ecee:	693b      	ldr	r3, [r7, #16]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d00b      	beq.n	800ed0e <vPortFree+0x66>
	__asm volatile
 800ecf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecfa:	f383 8811 	msr	BASEPRI, r3
 800ecfe:	f3bf 8f6f 	isb	sy
 800ed02:	f3bf 8f4f 	dsb	sy
 800ed06:	60bb      	str	r3, [r7, #8]
}
 800ed08:	bf00      	nop
 800ed0a:	bf00      	nop
 800ed0c:	e7fd      	b.n	800ed0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	685a      	ldr	r2, [r3, #4]
 800ed12:	4b14      	ldr	r3, [pc, #80]	@ (800ed64 <vPortFree+0xbc>)
 800ed14:	681b      	ldr	r3, [r3, #0]
 800ed16:	4013      	ands	r3, r2
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d01e      	beq.n	800ed5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d11a      	bne.n	800ed5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	685a      	ldr	r2, [r3, #4]
 800ed28:	4b0e      	ldr	r3, [pc, #56]	@ (800ed64 <vPortFree+0xbc>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	43db      	mvns	r3, r3
 800ed2e:	401a      	ands	r2, r3
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ed34:	f7fe fab8 	bl	800d2a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	685a      	ldr	r2, [r3, #4]
 800ed3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed68 <vPortFree+0xc0>)
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	4413      	add	r3, r2
 800ed42:	4a09      	ldr	r2, [pc, #36]	@ (800ed68 <vPortFree+0xc0>)
 800ed44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ed46:	6938      	ldr	r0, [r7, #16]
 800ed48:	f000 f874 	bl	800ee34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ed4c:	4b07      	ldr	r3, [pc, #28]	@ (800ed6c <vPortFree+0xc4>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	3301      	adds	r3, #1
 800ed52:	4a06      	ldr	r2, [pc, #24]	@ (800ed6c <vPortFree+0xc4>)
 800ed54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ed56:	f7fe fab5 	bl	800d2c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ed5a:	bf00      	nop
 800ed5c:	3718      	adds	r7, #24
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
 800ed62:	bf00      	nop
 800ed64:	20004de4 	.word	0x20004de4
 800ed68:	20004dd4 	.word	0x20004dd4
 800ed6c:	20004de0 	.word	0x20004de0

0800ed70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b085      	sub	sp, #20
 800ed74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ed76:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ed7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ed7c:	4b27      	ldr	r3, [pc, #156]	@ (800ee1c <prvHeapInit+0xac>)
 800ed7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f003 0307 	and.w	r3, r3, #7
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d00c      	beq.n	800eda4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3307      	adds	r3, #7
 800ed8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f023 0307 	bic.w	r3, r3, #7
 800ed96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ed98:	68ba      	ldr	r2, [r7, #8]
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	4a1f      	ldr	r2, [pc, #124]	@ (800ee1c <prvHeapInit+0xac>)
 800eda0:	4413      	add	r3, r2
 800eda2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800eda8:	4a1d      	ldr	r2, [pc, #116]	@ (800ee20 <prvHeapInit+0xb0>)
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800edae:	4b1c      	ldr	r3, [pc, #112]	@ (800ee20 <prvHeapInit+0xb0>)
 800edb0:	2200      	movs	r2, #0
 800edb2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	4413      	add	r3, r2
 800edba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800edbc:	2208      	movs	r2, #8
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	1a9b      	subs	r3, r3, r2
 800edc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	f023 0307 	bic.w	r3, r3, #7
 800edca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	4a15      	ldr	r2, [pc, #84]	@ (800ee24 <prvHeapInit+0xb4>)
 800edd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800edd2:	4b14      	ldr	r3, [pc, #80]	@ (800ee24 <prvHeapInit+0xb4>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	2200      	movs	r2, #0
 800edd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800edda:	4b12      	ldr	r3, [pc, #72]	@ (800ee24 <prvHeapInit+0xb4>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2200      	movs	r2, #0
 800ede0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	68fa      	ldr	r2, [r7, #12]
 800edea:	1ad2      	subs	r2, r2, r3
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800edf0:	4b0c      	ldr	r3, [pc, #48]	@ (800ee24 <prvHeapInit+0xb4>)
 800edf2:	681a      	ldr	r2, [r3, #0]
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800edf8:	683b      	ldr	r3, [r7, #0]
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	4a0a      	ldr	r2, [pc, #40]	@ (800ee28 <prvHeapInit+0xb8>)
 800edfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	685b      	ldr	r3, [r3, #4]
 800ee04:	4a09      	ldr	r2, [pc, #36]	@ (800ee2c <prvHeapInit+0xbc>)
 800ee06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ee08:	4b09      	ldr	r3, [pc, #36]	@ (800ee30 <prvHeapInit+0xc0>)
 800ee0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ee0e:	601a      	str	r2, [r3, #0]
}
 800ee10:	bf00      	nop
 800ee12:	3714      	adds	r7, #20
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	200011c8 	.word	0x200011c8
 800ee20:	20004dc8 	.word	0x20004dc8
 800ee24:	20004dd0 	.word	0x20004dd0
 800ee28:	20004dd8 	.word	0x20004dd8
 800ee2c:	20004dd4 	.word	0x20004dd4
 800ee30:	20004de4 	.word	0x20004de4

0800ee34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ee34:	b480      	push	{r7}
 800ee36:	b085      	sub	sp, #20
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ee3c:	4b28      	ldr	r3, [pc, #160]	@ (800eee0 <prvInsertBlockIntoFreeList+0xac>)
 800ee3e:	60fb      	str	r3, [r7, #12]
 800ee40:	e002      	b.n	800ee48 <prvInsertBlockIntoFreeList+0x14>
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60fb      	str	r3, [r7, #12]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d8f7      	bhi.n	800ee42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	685b      	ldr	r3, [r3, #4]
 800ee5a:	68ba      	ldr	r2, [r7, #8]
 800ee5c:	4413      	add	r3, r2
 800ee5e:	687a      	ldr	r2, [r7, #4]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d108      	bne.n	800ee76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	685a      	ldr	r2, [r3, #4]
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	685b      	ldr	r3, [r3, #4]
 800ee6c:	441a      	add	r2, r3
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	68ba      	ldr	r2, [r7, #8]
 800ee80:	441a      	add	r2, r3
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d118      	bne.n	800eebc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	681a      	ldr	r2, [r3, #0]
 800ee8e:	4b15      	ldr	r3, [pc, #84]	@ (800eee4 <prvInsertBlockIntoFreeList+0xb0>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d00d      	beq.n	800eeb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685a      	ldr	r2, [r3, #4]
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	685b      	ldr	r3, [r3, #4]
 800eea0:	441a      	add	r2, r3
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	601a      	str	r2, [r3, #0]
 800eeb0:	e008      	b.n	800eec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800eee4 <prvInsertBlockIntoFreeList+0xb0>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	601a      	str	r2, [r3, #0]
 800eeba:	e003      	b.n	800eec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681a      	ldr	r2, [r3, #0]
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eec4:	68fa      	ldr	r2, [r7, #12]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	429a      	cmp	r2, r3
 800eeca:	d002      	beq.n	800eed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eed2:	bf00      	nop
 800eed4:	3714      	adds	r7, #20
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr
 800eede:	bf00      	nop
 800eee0:	20004dc8 	.word	0x20004dc8
 800eee4:	20004dd0 	.word	0x20004dd0

0800eee8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800eeec:	2201      	movs	r2, #1
 800eeee:	4912      	ldr	r1, [pc, #72]	@ (800ef38 <MX_USB_DEVICE_Init+0x50>)
 800eef0:	4812      	ldr	r0, [pc, #72]	@ (800ef3c <MX_USB_DEVICE_Init+0x54>)
 800eef2:	f7fb f807 	bl	8009f04 <USBD_Init>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800eefc:	f7f2 f9e0 	bl	80012c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800ef00:	490f      	ldr	r1, [pc, #60]	@ (800ef40 <MX_USB_DEVICE_Init+0x58>)
 800ef02:	480e      	ldr	r0, [pc, #56]	@ (800ef3c <MX_USB_DEVICE_Init+0x54>)
 800ef04:	f7fb f82e 	bl	8009f64 <USBD_RegisterClass>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d001      	beq.n	800ef12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ef0e:	f7f2 f9d7 	bl	80012c0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800ef12:	490c      	ldr	r1, [pc, #48]	@ (800ef44 <MX_USB_DEVICE_Init+0x5c>)
 800ef14:	4809      	ldr	r0, [pc, #36]	@ (800ef3c <MX_USB_DEVICE_Init+0x54>)
 800ef16:	f7fa ff25 	bl	8009d64 <USBD_CDC_RegisterInterface>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ef20:	f7f2 f9ce 	bl	80012c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800ef24:	4805      	ldr	r0, [pc, #20]	@ (800ef3c <MX_USB_DEVICE_Init+0x54>)
 800ef26:	f7fb f853 	bl	8009fd0 <USBD_Start>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ef30:	f7f2 f9c6 	bl	80012c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ef34:	bf00      	nop
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	200000b0 	.word	0x200000b0
 800ef3c:	20004de8 	.word	0x20004de8
 800ef40:	20000018 	.word	0x20000018
 800ef44:	2000009c 	.word	0x2000009c

0800ef48 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	4905      	ldr	r1, [pc, #20]	@ (800ef64 <CDC_Init_HS+0x1c>)
 800ef50:	4805      	ldr	r0, [pc, #20]	@ (800ef68 <CDC_Init_HS+0x20>)
 800ef52:	f7fa ff21 	bl	8009d98 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800ef56:	4905      	ldr	r1, [pc, #20]	@ (800ef6c <CDC_Init_HS+0x24>)
 800ef58:	4803      	ldr	r0, [pc, #12]	@ (800ef68 <CDC_Init_HS+0x20>)
 800ef5a:	f7fa ff3f 	bl	8009ddc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ef5e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	bd80      	pop	{r7, pc}
 800ef64:	200058c4 	.word	0x200058c4
 800ef68:	20004de8 	.word	0x20004de8
 800ef6c:	200050c4 	.word	0x200050c4

0800ef70 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800ef70:	b480      	push	{r7}
 800ef72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800ef74:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800ef76:	4618      	mov	r0, r3
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef7e:	4770      	bx	lr

0800ef80 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ef80:	b480      	push	{r7}
 800ef82:	b083      	sub	sp, #12
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	4603      	mov	r3, r0
 800ef88:	6039      	str	r1, [r7, #0]
 800ef8a:	71fb      	strb	r3, [r7, #7]
 800ef8c:	4613      	mov	r3, r2
 800ef8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ef90:	79fb      	ldrb	r3, [r7, #7]
 800ef92:	2b23      	cmp	r3, #35	@ 0x23
 800ef94:	d84a      	bhi.n	800f02c <CDC_Control_HS+0xac>
 800ef96:	a201      	add	r2, pc, #4	@ (adr r2, 800ef9c <CDC_Control_HS+0x1c>)
 800ef98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef9c:	0800f02d 	.word	0x0800f02d
 800efa0:	0800f02d 	.word	0x0800f02d
 800efa4:	0800f02d 	.word	0x0800f02d
 800efa8:	0800f02d 	.word	0x0800f02d
 800efac:	0800f02d 	.word	0x0800f02d
 800efb0:	0800f02d 	.word	0x0800f02d
 800efb4:	0800f02d 	.word	0x0800f02d
 800efb8:	0800f02d 	.word	0x0800f02d
 800efbc:	0800f02d 	.word	0x0800f02d
 800efc0:	0800f02d 	.word	0x0800f02d
 800efc4:	0800f02d 	.word	0x0800f02d
 800efc8:	0800f02d 	.word	0x0800f02d
 800efcc:	0800f02d 	.word	0x0800f02d
 800efd0:	0800f02d 	.word	0x0800f02d
 800efd4:	0800f02d 	.word	0x0800f02d
 800efd8:	0800f02d 	.word	0x0800f02d
 800efdc:	0800f02d 	.word	0x0800f02d
 800efe0:	0800f02d 	.word	0x0800f02d
 800efe4:	0800f02d 	.word	0x0800f02d
 800efe8:	0800f02d 	.word	0x0800f02d
 800efec:	0800f02d 	.word	0x0800f02d
 800eff0:	0800f02d 	.word	0x0800f02d
 800eff4:	0800f02d 	.word	0x0800f02d
 800eff8:	0800f02d 	.word	0x0800f02d
 800effc:	0800f02d 	.word	0x0800f02d
 800f000:	0800f02d 	.word	0x0800f02d
 800f004:	0800f02d 	.word	0x0800f02d
 800f008:	0800f02d 	.word	0x0800f02d
 800f00c:	0800f02d 	.word	0x0800f02d
 800f010:	0800f02d 	.word	0x0800f02d
 800f014:	0800f02d 	.word	0x0800f02d
 800f018:	0800f02d 	.word	0x0800f02d
 800f01c:	0800f02d 	.word	0x0800f02d
 800f020:	0800f02d 	.word	0x0800f02d
 800f024:	0800f02d 	.word	0x0800f02d
 800f028:	0800f02d 	.word	0x0800f02d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f02c:	bf00      	nop
  }

  return (USBD_OK);
 800f02e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800f030:	4618      	mov	r0, r3
 800f032:	370c      	adds	r7, #12
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800f046:	6879      	ldr	r1, [r7, #4]
 800f048:	4805      	ldr	r0, [pc, #20]	@ (800f060 <CDC_Receive_HS+0x24>)
 800f04a:	f7fa fec7 	bl	8009ddc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800f04e:	4804      	ldr	r0, [pc, #16]	@ (800f060 <CDC_Receive_HS+0x24>)
 800f050:	f7fa ff22 	bl	8009e98 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f054:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800f056:	4618      	mov	r0, r3
 800f058:	3708      	adds	r7, #8
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop
 800f060:	20004de8 	.word	0x20004de8

0800f064 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	460b      	mov	r3, r1
 800f06e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f070:	2300      	movs	r3, #0
 800f072:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800f074:	4b0d      	ldr	r3, [pc, #52]	@ (800f0ac <CDC_Transmit_HS+0x48>)
 800f076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800f07a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800f082:	2b00      	cmp	r3, #0
 800f084:	d001      	beq.n	800f08a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800f086:	2301      	movs	r3, #1
 800f088:	e00b      	b.n	800f0a2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800f08a:	887b      	ldrh	r3, [r7, #2]
 800f08c:	461a      	mov	r2, r3
 800f08e:	6879      	ldr	r1, [r7, #4]
 800f090:	4806      	ldr	r0, [pc, #24]	@ (800f0ac <CDC_Transmit_HS+0x48>)
 800f092:	f7fa fe81 	bl	8009d98 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800f096:	4805      	ldr	r0, [pc, #20]	@ (800f0ac <CDC_Transmit_HS+0x48>)
 800f098:	f7fa febe 	bl	8009e18 <USBD_CDC_TransmitPacket>
 800f09c:	4603      	mov	r3, r0
 800f09e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800f0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	3710      	adds	r7, #16
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	bd80      	pop	{r7, pc}
 800f0aa:	bf00      	nop
 800f0ac:	20004de8 	.word	0x20004de8

0800f0b0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f0b0:	b480      	push	{r7}
 800f0b2:	b087      	sub	sp, #28
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	60f8      	str	r0, [r7, #12]
 800f0b8:	60b9      	str	r1, [r7, #8]
 800f0ba:	4613      	mov	r3, r2
 800f0bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800f0c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	371c      	adds	r7, #28
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b083      	sub	sp, #12
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	4603      	mov	r3, r0
 800f0dc:	6039      	str	r1, [r7, #0]
 800f0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	2212      	movs	r2, #18
 800f0e4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800f0e6:	4b03      	ldr	r3, [pc, #12]	@ (800f0f4 <USBD_HS_DeviceDescriptor+0x20>)
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr
 800f0f4:	200000cc 	.word	0x200000cc

0800f0f8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b083      	sub	sp, #12
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	4603      	mov	r3, r0
 800f100:	6039      	str	r1, [r7, #0]
 800f102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f104:	683b      	ldr	r3, [r7, #0]
 800f106:	2204      	movs	r2, #4
 800f108:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f10a:	4b03      	ldr	r3, [pc, #12]	@ (800f118 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr
 800f118:	200000e0 	.word	0x200000e0

0800f11c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f11c:	b580      	push	{r7, lr}
 800f11e:	b082      	sub	sp, #8
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	6039      	str	r1, [r7, #0]
 800f126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f128:	79fb      	ldrb	r3, [r7, #7]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d105      	bne.n	800f13a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f12e:	683a      	ldr	r2, [r7, #0]
 800f130:	4907      	ldr	r1, [pc, #28]	@ (800f150 <USBD_HS_ProductStrDescriptor+0x34>)
 800f132:	4808      	ldr	r0, [pc, #32]	@ (800f154 <USBD_HS_ProductStrDescriptor+0x38>)
 800f134:	f7fc f8fc 	bl	800b330 <USBD_GetString>
 800f138:	e004      	b.n	800f144 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800f13a:	683a      	ldr	r2, [r7, #0]
 800f13c:	4904      	ldr	r1, [pc, #16]	@ (800f150 <USBD_HS_ProductStrDescriptor+0x34>)
 800f13e:	4805      	ldr	r0, [pc, #20]	@ (800f154 <USBD_HS_ProductStrDescriptor+0x38>)
 800f140:	f7fc f8f6 	bl	800b330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f144:	4b02      	ldr	r3, [pc, #8]	@ (800f150 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800f146:	4618      	mov	r0, r3
 800f148:	3708      	adds	r7, #8
 800f14a:	46bd      	mov	sp, r7
 800f14c:	bd80      	pop	{r7, pc}
 800f14e:	bf00      	nop
 800f150:	200060c4 	.word	0x200060c4
 800f154:	08010544 	.word	0x08010544

0800f158 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b082      	sub	sp, #8
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	4603      	mov	r3, r0
 800f160:	6039      	str	r1, [r7, #0]
 800f162:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	4904      	ldr	r1, [pc, #16]	@ (800f178 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800f168:	4804      	ldr	r0, [pc, #16]	@ (800f17c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800f16a:	f7fc f8e1 	bl	800b330 <USBD_GetString>
  return USBD_StrDesc;
 800f16e:	4b02      	ldr	r3, [pc, #8]	@ (800f178 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800f170:	4618      	mov	r0, r3
 800f172:	3708      	adds	r7, #8
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	200060c4 	.word	0x200060c4
 800f17c:	0801055c 	.word	0x0801055c

0800f180 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	4603      	mov	r3, r0
 800f188:	6039      	str	r1, [r7, #0]
 800f18a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	221a      	movs	r2, #26
 800f190:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f192:	f000 f843 	bl	800f21c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f196:	4b02      	ldr	r3, [pc, #8]	@ (800f1a0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800f198:	4618      	mov	r0, r3
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	200000e4 	.word	0x200000e4

0800f1a4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	6039      	str	r1, [r7, #0]
 800f1ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f1b0:	79fb      	ldrb	r3, [r7, #7]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d105      	bne.n	800f1c2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	4907      	ldr	r1, [pc, #28]	@ (800f1d8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f1ba:	4808      	ldr	r0, [pc, #32]	@ (800f1dc <USBD_HS_ConfigStrDescriptor+0x38>)
 800f1bc:	f7fc f8b8 	bl	800b330 <USBD_GetString>
 800f1c0:	e004      	b.n	800f1cc <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800f1c2:	683a      	ldr	r2, [r7, #0]
 800f1c4:	4904      	ldr	r1, [pc, #16]	@ (800f1d8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800f1c6:	4805      	ldr	r0, [pc, #20]	@ (800f1dc <USBD_HS_ConfigStrDescriptor+0x38>)
 800f1c8:	f7fc f8b2 	bl	800b330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f1cc:	4b02      	ldr	r3, [pc, #8]	@ (800f1d8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3708      	adds	r7, #8
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	200060c4 	.word	0x200060c4
 800f1dc:	08010570 	.word	0x08010570

0800f1e0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	6039      	str	r1, [r7, #0]
 800f1ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f1ec:	79fb      	ldrb	r3, [r7, #7]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d105      	bne.n	800f1fe <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f1f2:	683a      	ldr	r2, [r7, #0]
 800f1f4:	4907      	ldr	r1, [pc, #28]	@ (800f214 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f1f6:	4808      	ldr	r0, [pc, #32]	@ (800f218 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f1f8:	f7fc f89a 	bl	800b330 <USBD_GetString>
 800f1fc:	e004      	b.n	800f208 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	4904      	ldr	r1, [pc, #16]	@ (800f214 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800f202:	4805      	ldr	r0, [pc, #20]	@ (800f218 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800f204:	f7fc f894 	bl	800b330 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f208:	4b02      	ldr	r3, [pc, #8]	@ (800f214 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	200060c4 	.word	0x200060c4
 800f218:	0801057c 	.word	0x0801057c

0800f21c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b084      	sub	sp, #16
 800f220:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f222:	4b0f      	ldr	r3, [pc, #60]	@ (800f260 <Get_SerialNum+0x44>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f228:	4b0e      	ldr	r3, [pc, #56]	@ (800f264 <Get_SerialNum+0x48>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f22e:	4b0e      	ldr	r3, [pc, #56]	@ (800f268 <Get_SerialNum+0x4c>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f234:	68fa      	ldr	r2, [r7, #12]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4413      	add	r3, r2
 800f23a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d009      	beq.n	800f256 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f242:	2208      	movs	r2, #8
 800f244:	4909      	ldr	r1, [pc, #36]	@ (800f26c <Get_SerialNum+0x50>)
 800f246:	68f8      	ldr	r0, [r7, #12]
 800f248:	f000 f814 	bl	800f274 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f24c:	2204      	movs	r2, #4
 800f24e:	4908      	ldr	r1, [pc, #32]	@ (800f270 <Get_SerialNum+0x54>)
 800f250:	68b8      	ldr	r0, [r7, #8]
 800f252:	f000 f80f 	bl	800f274 <IntToUnicode>
  }
}
 800f256:	bf00      	nop
 800f258:	3710      	adds	r7, #16
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	1fff7a10 	.word	0x1fff7a10
 800f264:	1fff7a14 	.word	0x1fff7a14
 800f268:	1fff7a18 	.word	0x1fff7a18
 800f26c:	200000e6 	.word	0x200000e6
 800f270:	200000f6 	.word	0x200000f6

0800f274 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f274:	b480      	push	{r7}
 800f276:	b087      	sub	sp, #28
 800f278:	af00      	add	r7, sp, #0
 800f27a:	60f8      	str	r0, [r7, #12]
 800f27c:	60b9      	str	r1, [r7, #8]
 800f27e:	4613      	mov	r3, r2
 800f280:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f286:	2300      	movs	r3, #0
 800f288:	75fb      	strb	r3, [r7, #23]
 800f28a:	e027      	b.n	800f2dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	0f1b      	lsrs	r3, r3, #28
 800f290:	2b09      	cmp	r3, #9
 800f292:	d80b      	bhi.n	800f2ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	0f1b      	lsrs	r3, r3, #28
 800f298:	b2da      	uxtb	r2, r3
 800f29a:	7dfb      	ldrb	r3, [r7, #23]
 800f29c:	005b      	lsls	r3, r3, #1
 800f29e:	4619      	mov	r1, r3
 800f2a0:	68bb      	ldr	r3, [r7, #8]
 800f2a2:	440b      	add	r3, r1
 800f2a4:	3230      	adds	r2, #48	@ 0x30
 800f2a6:	b2d2      	uxtb	r2, r2
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	e00a      	b.n	800f2c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	0f1b      	lsrs	r3, r3, #28
 800f2b0:	b2da      	uxtb	r2, r3
 800f2b2:	7dfb      	ldrb	r3, [r7, #23]
 800f2b4:	005b      	lsls	r3, r3, #1
 800f2b6:	4619      	mov	r1, r3
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	440b      	add	r3, r1
 800f2bc:	3237      	adds	r2, #55	@ 0x37
 800f2be:	b2d2      	uxtb	r2, r2
 800f2c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	011b      	lsls	r3, r3, #4
 800f2c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f2c8:	7dfb      	ldrb	r3, [r7, #23]
 800f2ca:	005b      	lsls	r3, r3, #1
 800f2cc:	3301      	adds	r3, #1
 800f2ce:	68ba      	ldr	r2, [r7, #8]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f2d6:	7dfb      	ldrb	r3, [r7, #23]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	75fb      	strb	r3, [r7, #23]
 800f2dc:	7dfa      	ldrb	r2, [r7, #23]
 800f2de:	79fb      	ldrb	r3, [r7, #7]
 800f2e0:	429a      	cmp	r2, r3
 800f2e2:	d3d3      	bcc.n	800f28c <IntToUnicode+0x18>
  }
}
 800f2e4:	bf00      	nop
 800f2e6:	bf00      	nop
 800f2e8:	371c      	adds	r7, #28
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f0:	4770      	bx	lr
	...

0800f2f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b08a      	sub	sp, #40	@ 0x28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f2fc:	f107 0314 	add.w	r3, r7, #20
 800f300:	2200      	movs	r2, #0
 800f302:	601a      	str	r2, [r3, #0]
 800f304:	605a      	str	r2, [r3, #4]
 800f306:	609a      	str	r2, [r3, #8]
 800f308:	60da      	str	r2, [r3, #12]
 800f30a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	4a24      	ldr	r2, [pc, #144]	@ (800f3a4 <HAL_PCD_MspInit+0xb0>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d141      	bne.n	800f39a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f316:	2300      	movs	r3, #0
 800f318:	613b      	str	r3, [r7, #16]
 800f31a:	4b23      	ldr	r3, [pc, #140]	@ (800f3a8 <HAL_PCD_MspInit+0xb4>)
 800f31c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f31e:	4a22      	ldr	r2, [pc, #136]	@ (800f3a8 <HAL_PCD_MspInit+0xb4>)
 800f320:	f043 0302 	orr.w	r3, r3, #2
 800f324:	6313      	str	r3, [r2, #48]	@ 0x30
 800f326:	4b20      	ldr	r3, [pc, #128]	@ (800f3a8 <HAL_PCD_MspInit+0xb4>)
 800f328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f32a:	f003 0302 	and.w	r3, r3, #2
 800f32e:	613b      	str	r3, [r7, #16]
 800f330:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800f332:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800f336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f338:	2302      	movs	r3, #2
 800f33a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f33c:	2300      	movs	r3, #0
 800f33e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f340:	2300      	movs	r3, #0
 800f342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800f344:	230c      	movs	r3, #12
 800f346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f348:	f107 0314 	add.w	r3, r7, #20
 800f34c:	4619      	mov	r1, r3
 800f34e:	4817      	ldr	r0, [pc, #92]	@ (800f3ac <HAL_PCD_MspInit+0xb8>)
 800f350:	f7f2 ffda 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800f354:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f35a:	2300      	movs	r3, #0
 800f35c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f35e:	2300      	movs	r3, #0
 800f360:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800f362:	f107 0314 	add.w	r3, r7, #20
 800f366:	4619      	mov	r1, r3
 800f368:	4810      	ldr	r0, [pc, #64]	@ (800f3ac <HAL_PCD_MspInit+0xb8>)
 800f36a:	f7f2 ffcd 	bl	8002308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800f36e:	2300      	movs	r3, #0
 800f370:	60fb      	str	r3, [r7, #12]
 800f372:	4b0d      	ldr	r3, [pc, #52]	@ (800f3a8 <HAL_PCD_MspInit+0xb4>)
 800f374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f376:	4a0c      	ldr	r2, [pc, #48]	@ (800f3a8 <HAL_PCD_MspInit+0xb4>)
 800f378:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800f37c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f37e:	4b0a      	ldr	r3, [pc, #40]	@ (800f3a8 <HAL_PCD_MspInit+0xb4>)
 800f380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f382:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f386:	60fb      	str	r3, [r7, #12]
 800f388:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800f38a:	2200      	movs	r2, #0
 800f38c:	2105      	movs	r1, #5
 800f38e:	204d      	movs	r0, #77	@ 0x4d
 800f390:	f7f2 fd88 	bl	8001ea4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800f394:	204d      	movs	r0, #77	@ 0x4d
 800f396:	f7f2 fda1 	bl	8001edc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800f39a:	bf00      	nop
 800f39c:	3728      	adds	r7, #40	@ 0x28
 800f39e:	46bd      	mov	sp, r7
 800f3a0:	bd80      	pop	{r7, pc}
 800f3a2:	bf00      	nop
 800f3a4:	40040000 	.word	0x40040000
 800f3a8:	40023800 	.word	0x40023800
 800f3ac:	40020400 	.word	0x40020400

0800f3b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b082      	sub	sp, #8
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f3c4:	4619      	mov	r1, r3
 800f3c6:	4610      	mov	r0, r2
 800f3c8:	f7fa fe4f 	bl	800a06a <USBD_LL_SetupStage>
}
 800f3cc:	bf00      	nop
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	460b      	mov	r3, r1
 800f3de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f3e6:	78fa      	ldrb	r2, [r7, #3]
 800f3e8:	6879      	ldr	r1, [r7, #4]
 800f3ea:	4613      	mov	r3, r2
 800f3ec:	00db      	lsls	r3, r3, #3
 800f3ee:	4413      	add	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	440b      	add	r3, r1
 800f3f4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f3f8:	681a      	ldr	r2, [r3, #0]
 800f3fa:	78fb      	ldrb	r3, [r7, #3]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	f7fa fe89 	bl	800a114 <USBD_LL_DataOutStage>
}
 800f402:	bf00      	nop
 800f404:	3708      	adds	r7, #8
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b082      	sub	sp, #8
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
 800f412:	460b      	mov	r3, r1
 800f414:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f41c:	78fa      	ldrb	r2, [r7, #3]
 800f41e:	6879      	ldr	r1, [r7, #4]
 800f420:	4613      	mov	r3, r2
 800f422:	00db      	lsls	r3, r3, #3
 800f424:	4413      	add	r3, r2
 800f426:	009b      	lsls	r3, r3, #2
 800f428:	440b      	add	r3, r1
 800f42a:	3320      	adds	r3, #32
 800f42c:	681a      	ldr	r2, [r3, #0]
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	4619      	mov	r1, r3
 800f432:	f7fa ff22 	bl	800a27a <USBD_LL_DataInStage>
}
 800f436:	bf00      	nop
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f43e:	b580      	push	{r7, lr}
 800f440:	b082      	sub	sp, #8
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7fb f85c 	bl	800a50a <USBD_LL_SOF>
}
 800f452:	bf00      	nop
 800f454:	3708      	adds	r7, #8
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f45a:	b580      	push	{r7, lr}
 800f45c:	b084      	sub	sp, #16
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f462:	2301      	movs	r3, #1
 800f464:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	79db      	ldrb	r3, [r3, #7]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d102      	bne.n	800f474 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f46e:	2300      	movs	r3, #0
 800f470:	73fb      	strb	r3, [r7, #15]
 800f472:	e008      	b.n	800f486 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	79db      	ldrb	r3, [r3, #7]
 800f478:	2b02      	cmp	r3, #2
 800f47a:	d102      	bne.n	800f482 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f47c:	2301      	movs	r3, #1
 800f47e:	73fb      	strb	r3, [r7, #15]
 800f480:	e001      	b.n	800f486 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f482:	f7f1 ff1d 	bl	80012c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f48c:	7bfa      	ldrb	r2, [r7, #15]
 800f48e:	4611      	mov	r1, r2
 800f490:	4618      	mov	r0, r3
 800f492:	f7fa fff6 	bl	800a482 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fa ff9e 	bl	800a3de <USBD_LL_Reset>
}
 800f4a2:	bf00      	nop
 800f4a4:	3710      	adds	r7, #16
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
	...

0800f4ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fa fff1 	bl	800a4a2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	687a      	ldr	r2, [r7, #4]
 800f4cc:	6812      	ldr	r2, [r2, #0]
 800f4ce:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f4d2:	f043 0301 	orr.w	r3, r3, #1
 800f4d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	7adb      	ldrb	r3, [r3, #11]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d005      	beq.n	800f4ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f4e0:	4b04      	ldr	r3, [pc, #16]	@ (800f4f4 <HAL_PCD_SuspendCallback+0x48>)
 800f4e2:	691b      	ldr	r3, [r3, #16]
 800f4e4:	4a03      	ldr	r2, [pc, #12]	@ (800f4f4 <HAL_PCD_SuspendCallback+0x48>)
 800f4e6:	f043 0306 	orr.w	r3, r3, #6
 800f4ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f4ec:	bf00      	nop
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	e000ed00 	.word	0xe000ed00

0800f4f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f506:	4618      	mov	r0, r3
 800f508:	f7fa ffe7 	bl	800a4da <USBD_LL_Resume>
}
 800f50c:	bf00      	nop
 800f50e:	3708      	adds	r7, #8
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b082      	sub	sp, #8
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	460b      	mov	r3, r1
 800f51e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f526:	78fa      	ldrb	r2, [r7, #3]
 800f528:	4611      	mov	r1, r2
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fb f83f 	bl	800a5ae <USBD_LL_IsoOUTIncomplete>
}
 800f530:	bf00      	nop
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	460b      	mov	r3, r1
 800f542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f54a:	78fa      	ldrb	r2, [r7, #3]
 800f54c:	4611      	mov	r1, r2
 800f54e:	4618      	mov	r0, r3
 800f550:	f7fa fffb 	bl	800a54a <USBD_LL_IsoINIncomplete>
}
 800f554:	bf00      	nop
 800f556:	3708      	adds	r7, #8
 800f558:	46bd      	mov	sp, r7
 800f55a:	bd80      	pop	{r7, pc}

0800f55c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fb f851 	bl	800a612 <USBD_LL_DevConnected>
}
 800f570:	bf00      	nop
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}

0800f578 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f586:	4618      	mov	r0, r3
 800f588:	f7fb f84e 	bl	800a628 <USBD_LL_DevDisconnected>
}
 800f58c:	bf00      	nop
 800f58e:	3708      	adds	r7, #8
 800f590:	46bd      	mov	sp, r7
 800f592:	bd80      	pop	{r7, pc}

0800f594 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b082      	sub	sp, #8
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	781b      	ldrb	r3, [r3, #0]
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d140      	bne.n	800f626 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800f5a4:	4a22      	ldr	r2, [pc, #136]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a20      	ldr	r2, [pc, #128]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5b0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800f5b4:	4b1e      	ldr	r3, [pc, #120]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f634 <USBD_LL_Init+0xa0>)
 800f5b8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800f5ba:	4b1d      	ldr	r3, [pc, #116]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5bc:	2206      	movs	r2, #6
 800f5be:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800f5c0:	4b1b      	ldr	r3, [pc, #108]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5c2:	2202      	movs	r2, #2
 800f5c4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800f5c6:	4b1a      	ldr	r3, [pc, #104]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5c8:	2200      	movs	r2, #0
 800f5ca:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800f5cc:	4b18      	ldr	r3, [pc, #96]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5ce:	2202      	movs	r2, #2
 800f5d0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800f5d2:	4b17      	ldr	r3, [pc, #92]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800f5d8:	4b15      	ldr	r3, [pc, #84]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5da:	2200      	movs	r2, #0
 800f5dc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800f5de:	4b14      	ldr	r3, [pc, #80]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800f5e4:	4b12      	ldr	r3, [pc, #72]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800f5ea:	4b11      	ldr	r3, [pc, #68]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800f5f0:	4b0f      	ldr	r3, [pc, #60]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800f5f6:	480e      	ldr	r0, [pc, #56]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f5f8:	f7f4 fd89 	bl	800410e <HAL_PCD_Init>
 800f5fc:	4603      	mov	r3, r0
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d001      	beq.n	800f606 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f602:	f7f1 fe5d 	bl	80012c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800f606:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800f60a:	4809      	ldr	r0, [pc, #36]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f60c:	f7f5 ffb5 	bl	800557a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800f610:	2280      	movs	r2, #128	@ 0x80
 800f612:	2100      	movs	r1, #0
 800f614:	4806      	ldr	r0, [pc, #24]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f616:	f7f5 ff69 	bl	80054ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800f61a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800f61e:	2101      	movs	r1, #1
 800f620:	4803      	ldr	r0, [pc, #12]	@ (800f630 <USBD_LL_Init+0x9c>)
 800f622:	f7f5 ff63 	bl	80054ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3708      	adds	r7, #8
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	200062c4 	.word	0x200062c4
 800f634:	40040000 	.word	0x40040000

0800f638 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f644:	2300      	movs	r3, #0
 800f646:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f4 fe6c 	bl	800432c <HAL_PCD_Start>
 800f654:	4603      	mov	r3, r0
 800f656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f942 	bl	800f8e4 <USBD_Get_USB_Status>
 800f660:	4603      	mov	r3, r0
 800f662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f664:	7bbb      	ldrb	r3, [r7, #14]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	4608      	mov	r0, r1
 800f678:	4611      	mov	r1, r2
 800f67a:	461a      	mov	r2, r3
 800f67c:	4603      	mov	r3, r0
 800f67e:	70fb      	strb	r3, [r7, #3]
 800f680:	460b      	mov	r3, r1
 800f682:	70bb      	strb	r3, [r7, #2]
 800f684:	4613      	mov	r3, r2
 800f686:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f688:	2300      	movs	r3, #0
 800f68a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f696:	78bb      	ldrb	r3, [r7, #2]
 800f698:	883a      	ldrh	r2, [r7, #0]
 800f69a:	78f9      	ldrb	r1, [r7, #3]
 800f69c:	f7f5 fb40 	bl	8004d20 <HAL_PCD_EP_Open>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6a4:	7bfb      	ldrb	r3, [r7, #15]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f000 f91c 	bl	800f8e4 <USBD_Get_USB_Status>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}

0800f6ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6ba:	b580      	push	{r7, lr}
 800f6bc:	b084      	sub	sp, #16
 800f6be:	af00      	add	r7, sp, #0
 800f6c0:	6078      	str	r0, [r7, #4]
 800f6c2:	460b      	mov	r3, r1
 800f6c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6c6:	2300      	movs	r3, #0
 800f6c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6d4:	78fa      	ldrb	r2, [r7, #3]
 800f6d6:	4611      	mov	r1, r2
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7f5 fb8b 	bl	8004df4 <HAL_PCD_EP_Close>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	f000 f8fd 	bl	800f8e4 <USBD_Get_USB_Status>
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	3710      	adds	r7, #16
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	bd80      	pop	{r7, pc}

0800f6f8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b084      	sub	sp, #16
 800f6fc:	af00      	add	r7, sp, #0
 800f6fe:	6078      	str	r0, [r7, #4]
 800f700:	460b      	mov	r3, r1
 800f702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f704:	2300      	movs	r3, #0
 800f706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f708:	2300      	movs	r3, #0
 800f70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f712:	78fa      	ldrb	r2, [r7, #3]
 800f714:	4611      	mov	r1, r2
 800f716:	4618      	mov	r0, r3
 800f718:	f7f5 fc43 	bl	8004fa2 <HAL_PCD_EP_SetStall>
 800f71c:	4603      	mov	r3, r0
 800f71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f720:	7bfb      	ldrb	r3, [r7, #15]
 800f722:	4618      	mov	r0, r3
 800f724:	f000 f8de 	bl	800f8e4 <USBD_Get_USB_Status>
 800f728:	4603      	mov	r3, r0
 800f72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3710      	adds	r7, #16
 800f732:	46bd      	mov	sp, r7
 800f734:	bd80      	pop	{r7, pc}

0800f736 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f736:	b580      	push	{r7, lr}
 800f738:	b084      	sub	sp, #16
 800f73a:	af00      	add	r7, sp, #0
 800f73c:	6078      	str	r0, [r7, #4]
 800f73e:	460b      	mov	r3, r1
 800f740:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f742:	2300      	movs	r3, #0
 800f744:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f746:	2300      	movs	r3, #0
 800f748:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f750:	78fa      	ldrb	r2, [r7, #3]
 800f752:	4611      	mov	r1, r2
 800f754:	4618      	mov	r0, r3
 800f756:	f7f5 fc87 	bl	8005068 <HAL_PCD_EP_ClrStall>
 800f75a:	4603      	mov	r3, r0
 800f75c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f75e:	7bfb      	ldrb	r3, [r7, #15]
 800f760:	4618      	mov	r0, r3
 800f762:	f000 f8bf 	bl	800f8e4 <USBD_Get_USB_Status>
 800f766:	4603      	mov	r3, r0
 800f768:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f76a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3710      	adds	r7, #16
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f774:	b480      	push	{r7}
 800f776:	b085      	sub	sp, #20
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	460b      	mov	r3, r1
 800f77e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f786:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f788:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	da0b      	bge.n	800f7a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f790:	78fb      	ldrb	r3, [r7, #3]
 800f792:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f796:	68f9      	ldr	r1, [r7, #12]
 800f798:	4613      	mov	r3, r2
 800f79a:	00db      	lsls	r3, r3, #3
 800f79c:	4413      	add	r3, r2
 800f79e:	009b      	lsls	r3, r3, #2
 800f7a0:	440b      	add	r3, r1
 800f7a2:	3316      	adds	r3, #22
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	e00b      	b.n	800f7c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f7a8:	78fb      	ldrb	r3, [r7, #3]
 800f7aa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f7ae:	68f9      	ldr	r1, [r7, #12]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	4413      	add	r3, r2
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	440b      	add	r3, r1
 800f7ba:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f7be:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	3714      	adds	r7, #20
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr

0800f7cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7d8:	2300      	movs	r3, #0
 800f7da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7dc:	2300      	movs	r3, #0
 800f7de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7e6:	78fa      	ldrb	r2, [r7, #3]
 800f7e8:	4611      	mov	r1, r2
 800f7ea:	4618      	mov	r0, r3
 800f7ec:	f7f5 fa74 	bl	8004cd8 <HAL_PCD_SetAddress>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7f4:	7bfb      	ldrb	r3, [r7, #15]
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f000 f874 	bl	800f8e4 <USBD_Get_USB_Status>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f800:	7bbb      	ldrb	r3, [r7, #14]
}
 800f802:	4618      	mov	r0, r3
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}

0800f80a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f80a:	b580      	push	{r7, lr}
 800f80c:	b086      	sub	sp, #24
 800f80e:	af00      	add	r7, sp, #0
 800f810:	60f8      	str	r0, [r7, #12]
 800f812:	607a      	str	r2, [r7, #4]
 800f814:	603b      	str	r3, [r7, #0]
 800f816:	460b      	mov	r3, r1
 800f818:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f81a:	2300      	movs	r3, #0
 800f81c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f81e:	2300      	movs	r3, #0
 800f820:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f828:	7af9      	ldrb	r1, [r7, #11]
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	f7f5 fb7e 	bl	8004f2e <HAL_PCD_EP_Transmit>
 800f832:	4603      	mov	r3, r0
 800f834:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	4618      	mov	r0, r3
 800f83a:	f000 f853 	bl	800f8e4 <USBD_Get_USB_Status>
 800f83e:	4603      	mov	r3, r0
 800f840:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f842:	7dbb      	ldrb	r3, [r7, #22]
}
 800f844:	4618      	mov	r0, r3
 800f846:	3718      	adds	r7, #24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	60f8      	str	r0, [r7, #12]
 800f854:	607a      	str	r2, [r7, #4]
 800f856:	603b      	str	r3, [r7, #0]
 800f858:	460b      	mov	r3, r1
 800f85a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f85c:	2300      	movs	r3, #0
 800f85e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f860:	2300      	movs	r3, #0
 800f862:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f86a:	7af9      	ldrb	r1, [r7, #11]
 800f86c:	683b      	ldr	r3, [r7, #0]
 800f86e:	687a      	ldr	r2, [r7, #4]
 800f870:	f7f5 fb0a 	bl	8004e88 <HAL_PCD_EP_Receive>
 800f874:	4603      	mov	r3, r0
 800f876:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f878:	7dfb      	ldrb	r3, [r7, #23]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f000 f832 	bl	800f8e4 <USBD_Get_USB_Status>
 800f880:	4603      	mov	r3, r0
 800f882:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f884:	7dbb      	ldrb	r3, [r7, #22]
}
 800f886:	4618      	mov	r0, r3
 800f888:	3718      	adds	r7, #24
 800f88a:	46bd      	mov	sp, r7
 800f88c:	bd80      	pop	{r7, pc}

0800f88e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f88e:	b580      	push	{r7, lr}
 800f890:	b082      	sub	sp, #8
 800f892:	af00      	add	r7, sp, #0
 800f894:	6078      	str	r0, [r7, #4]
 800f896:	460b      	mov	r3, r1
 800f898:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f8a0:	78fa      	ldrb	r2, [r7, #3]
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7f5 fb2a 	bl	8004efe <HAL_PCD_EP_GetRxCount>
 800f8aa:	4603      	mov	r3, r0
}
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	3708      	adds	r7, #8
 800f8b0:	46bd      	mov	sp, r7
 800f8b2:	bd80      	pop	{r7, pc}

0800f8b4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f8b4:	b480      	push	{r7}
 800f8b6:	b083      	sub	sp, #12
 800f8b8:	af00      	add	r7, sp, #0
 800f8ba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f8bc:	4b03      	ldr	r3, [pc, #12]	@ (800f8cc <USBD_static_malloc+0x18>)
}
 800f8be:	4618      	mov	r0, r3
 800f8c0:	370c      	adds	r7, #12
 800f8c2:	46bd      	mov	sp, r7
 800f8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c8:	4770      	bx	lr
 800f8ca:	bf00      	nop
 800f8cc:	200067a8 	.word	0x200067a8

0800f8d0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f8d0:	b480      	push	{r7}
 800f8d2:	b083      	sub	sp, #12
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]

}
 800f8d8:	bf00      	nop
 800f8da:	370c      	adds	r7, #12
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e2:	4770      	bx	lr

0800f8e4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f8f2:	79fb      	ldrb	r3, [r7, #7]
 800f8f4:	2b03      	cmp	r3, #3
 800f8f6:	d817      	bhi.n	800f928 <USBD_Get_USB_Status+0x44>
 800f8f8:	a201      	add	r2, pc, #4	@ (adr r2, 800f900 <USBD_Get_USB_Status+0x1c>)
 800f8fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fe:	bf00      	nop
 800f900:	0800f911 	.word	0x0800f911
 800f904:	0800f917 	.word	0x0800f917
 800f908:	0800f91d 	.word	0x0800f91d
 800f90c:	0800f923 	.word	0x0800f923
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f910:	2300      	movs	r3, #0
 800f912:	73fb      	strb	r3, [r7, #15]
    break;
 800f914:	e00b      	b.n	800f92e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f916:	2303      	movs	r3, #3
 800f918:	73fb      	strb	r3, [r7, #15]
    break;
 800f91a:	e008      	b.n	800f92e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f91c:	2301      	movs	r3, #1
 800f91e:	73fb      	strb	r3, [r7, #15]
    break;
 800f920:	e005      	b.n	800f92e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f922:	2303      	movs	r3, #3
 800f924:	73fb      	strb	r3, [r7, #15]
    break;
 800f926:	e002      	b.n	800f92e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f928:	2303      	movs	r3, #3
 800f92a:	73fb      	strb	r3, [r7, #15]
    break;
 800f92c:	bf00      	nop
  }
  return usb_status;
 800f92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f930:	4618      	mov	r0, r3
 800f932:	3714      	adds	r7, #20
 800f934:	46bd      	mov	sp, r7
 800f936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f93a:	4770      	bx	lr

0800f93c <siprintf>:
 800f93c:	b40e      	push	{r1, r2, r3}
 800f93e:	b500      	push	{lr}
 800f940:	b09c      	sub	sp, #112	@ 0x70
 800f942:	ab1d      	add	r3, sp, #116	@ 0x74
 800f944:	9002      	str	r0, [sp, #8]
 800f946:	9006      	str	r0, [sp, #24]
 800f948:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f94c:	4809      	ldr	r0, [pc, #36]	@ (800f974 <siprintf+0x38>)
 800f94e:	9107      	str	r1, [sp, #28]
 800f950:	9104      	str	r1, [sp, #16]
 800f952:	4909      	ldr	r1, [pc, #36]	@ (800f978 <siprintf+0x3c>)
 800f954:	f853 2b04 	ldr.w	r2, [r3], #4
 800f958:	9105      	str	r1, [sp, #20]
 800f95a:	6800      	ldr	r0, [r0, #0]
 800f95c:	9301      	str	r3, [sp, #4]
 800f95e:	a902      	add	r1, sp, #8
 800f960:	f000 f9a2 	bl	800fca8 <_svfiprintf_r>
 800f964:	9b02      	ldr	r3, [sp, #8]
 800f966:	2200      	movs	r2, #0
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	b01c      	add	sp, #112	@ 0x70
 800f96c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f970:	b003      	add	sp, #12
 800f972:	4770      	bx	lr
 800f974:	20000100 	.word	0x20000100
 800f978:	ffff0208 	.word	0xffff0208

0800f97c <memset>:
 800f97c:	4402      	add	r2, r0
 800f97e:	4603      	mov	r3, r0
 800f980:	4293      	cmp	r3, r2
 800f982:	d100      	bne.n	800f986 <memset+0xa>
 800f984:	4770      	bx	lr
 800f986:	f803 1b01 	strb.w	r1, [r3], #1
 800f98a:	e7f9      	b.n	800f980 <memset+0x4>

0800f98c <__errno>:
 800f98c:	4b01      	ldr	r3, [pc, #4]	@ (800f994 <__errno+0x8>)
 800f98e:	6818      	ldr	r0, [r3, #0]
 800f990:	4770      	bx	lr
 800f992:	bf00      	nop
 800f994:	20000100 	.word	0x20000100

0800f998 <__libc_init_array>:
 800f998:	b570      	push	{r4, r5, r6, lr}
 800f99a:	4d0d      	ldr	r5, [pc, #52]	@ (800f9d0 <__libc_init_array+0x38>)
 800f99c:	4c0d      	ldr	r4, [pc, #52]	@ (800f9d4 <__libc_init_array+0x3c>)
 800f99e:	1b64      	subs	r4, r4, r5
 800f9a0:	10a4      	asrs	r4, r4, #2
 800f9a2:	2600      	movs	r6, #0
 800f9a4:	42a6      	cmp	r6, r4
 800f9a6:	d109      	bne.n	800f9bc <__libc_init_array+0x24>
 800f9a8:	4d0b      	ldr	r5, [pc, #44]	@ (800f9d8 <__libc_init_array+0x40>)
 800f9aa:	4c0c      	ldr	r4, [pc, #48]	@ (800f9dc <__libc_init_array+0x44>)
 800f9ac:	f000 fc66 	bl	801027c <_init>
 800f9b0:	1b64      	subs	r4, r4, r5
 800f9b2:	10a4      	asrs	r4, r4, #2
 800f9b4:	2600      	movs	r6, #0
 800f9b6:	42a6      	cmp	r6, r4
 800f9b8:	d105      	bne.n	800f9c6 <__libc_init_array+0x2e>
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9c0:	4798      	blx	r3
 800f9c2:	3601      	adds	r6, #1
 800f9c4:	e7ee      	b.n	800f9a4 <__libc_init_array+0xc>
 800f9c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9ca:	4798      	blx	r3
 800f9cc:	3601      	adds	r6, #1
 800f9ce:	e7f2      	b.n	800f9b6 <__libc_init_array+0x1e>
 800f9d0:	080106a0 	.word	0x080106a0
 800f9d4:	080106a0 	.word	0x080106a0
 800f9d8:	080106a0 	.word	0x080106a0
 800f9dc:	080106a4 	.word	0x080106a4

0800f9e0 <__retarget_lock_acquire_recursive>:
 800f9e0:	4770      	bx	lr

0800f9e2 <__retarget_lock_release_recursive>:
 800f9e2:	4770      	bx	lr

0800f9e4 <memcpy>:
 800f9e4:	440a      	add	r2, r1
 800f9e6:	4291      	cmp	r1, r2
 800f9e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9ec:	d100      	bne.n	800f9f0 <memcpy+0xc>
 800f9ee:	4770      	bx	lr
 800f9f0:	b510      	push	{r4, lr}
 800f9f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9fa:	4291      	cmp	r1, r2
 800f9fc:	d1f9      	bne.n	800f9f2 <memcpy+0xe>
 800f9fe:	bd10      	pop	{r4, pc}

0800fa00 <_free_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4605      	mov	r5, r0
 800fa04:	2900      	cmp	r1, #0
 800fa06:	d041      	beq.n	800fa8c <_free_r+0x8c>
 800fa08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa0c:	1f0c      	subs	r4, r1, #4
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bfb8      	it	lt
 800fa12:	18e4      	addlt	r4, r4, r3
 800fa14:	f000 f8e0 	bl	800fbd8 <__malloc_lock>
 800fa18:	4a1d      	ldr	r2, [pc, #116]	@ (800fa90 <_free_r+0x90>)
 800fa1a:	6813      	ldr	r3, [r2, #0]
 800fa1c:	b933      	cbnz	r3, 800fa2c <_free_r+0x2c>
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	6014      	str	r4, [r2, #0]
 800fa22:	4628      	mov	r0, r5
 800fa24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa28:	f000 b8dc 	b.w	800fbe4 <__malloc_unlock>
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	d908      	bls.n	800fa42 <_free_r+0x42>
 800fa30:	6820      	ldr	r0, [r4, #0]
 800fa32:	1821      	adds	r1, r4, r0
 800fa34:	428b      	cmp	r3, r1
 800fa36:	bf01      	itttt	eq
 800fa38:	6819      	ldreq	r1, [r3, #0]
 800fa3a:	685b      	ldreq	r3, [r3, #4]
 800fa3c:	1809      	addeq	r1, r1, r0
 800fa3e:	6021      	streq	r1, [r4, #0]
 800fa40:	e7ed      	b.n	800fa1e <_free_r+0x1e>
 800fa42:	461a      	mov	r2, r3
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	b10b      	cbz	r3, 800fa4c <_free_r+0x4c>
 800fa48:	42a3      	cmp	r3, r4
 800fa4a:	d9fa      	bls.n	800fa42 <_free_r+0x42>
 800fa4c:	6811      	ldr	r1, [r2, #0]
 800fa4e:	1850      	adds	r0, r2, r1
 800fa50:	42a0      	cmp	r0, r4
 800fa52:	d10b      	bne.n	800fa6c <_free_r+0x6c>
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	4401      	add	r1, r0
 800fa58:	1850      	adds	r0, r2, r1
 800fa5a:	4283      	cmp	r3, r0
 800fa5c:	6011      	str	r1, [r2, #0]
 800fa5e:	d1e0      	bne.n	800fa22 <_free_r+0x22>
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	6053      	str	r3, [r2, #4]
 800fa66:	4408      	add	r0, r1
 800fa68:	6010      	str	r0, [r2, #0]
 800fa6a:	e7da      	b.n	800fa22 <_free_r+0x22>
 800fa6c:	d902      	bls.n	800fa74 <_free_r+0x74>
 800fa6e:	230c      	movs	r3, #12
 800fa70:	602b      	str	r3, [r5, #0]
 800fa72:	e7d6      	b.n	800fa22 <_free_r+0x22>
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	1821      	adds	r1, r4, r0
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	bf04      	itt	eq
 800fa7c:	6819      	ldreq	r1, [r3, #0]
 800fa7e:	685b      	ldreq	r3, [r3, #4]
 800fa80:	6063      	str	r3, [r4, #4]
 800fa82:	bf04      	itt	eq
 800fa84:	1809      	addeq	r1, r1, r0
 800fa86:	6021      	streq	r1, [r4, #0]
 800fa88:	6054      	str	r4, [r2, #4]
 800fa8a:	e7ca      	b.n	800fa22 <_free_r+0x22>
 800fa8c:	bd38      	pop	{r3, r4, r5, pc}
 800fa8e:	bf00      	nop
 800fa90:	20006b0c 	.word	0x20006b0c

0800fa94 <sbrk_aligned>:
 800fa94:	b570      	push	{r4, r5, r6, lr}
 800fa96:	4e0f      	ldr	r6, [pc, #60]	@ (800fad4 <sbrk_aligned+0x40>)
 800fa98:	460c      	mov	r4, r1
 800fa9a:	6831      	ldr	r1, [r6, #0]
 800fa9c:	4605      	mov	r5, r0
 800fa9e:	b911      	cbnz	r1, 800faa6 <sbrk_aligned+0x12>
 800faa0:	f000 fba6 	bl	80101f0 <_sbrk_r>
 800faa4:	6030      	str	r0, [r6, #0]
 800faa6:	4621      	mov	r1, r4
 800faa8:	4628      	mov	r0, r5
 800faaa:	f000 fba1 	bl	80101f0 <_sbrk_r>
 800faae:	1c43      	adds	r3, r0, #1
 800fab0:	d103      	bne.n	800faba <sbrk_aligned+0x26>
 800fab2:	f04f 34ff 	mov.w	r4, #4294967295
 800fab6:	4620      	mov	r0, r4
 800fab8:	bd70      	pop	{r4, r5, r6, pc}
 800faba:	1cc4      	adds	r4, r0, #3
 800fabc:	f024 0403 	bic.w	r4, r4, #3
 800fac0:	42a0      	cmp	r0, r4
 800fac2:	d0f8      	beq.n	800fab6 <sbrk_aligned+0x22>
 800fac4:	1a21      	subs	r1, r4, r0
 800fac6:	4628      	mov	r0, r5
 800fac8:	f000 fb92 	bl	80101f0 <_sbrk_r>
 800facc:	3001      	adds	r0, #1
 800face:	d1f2      	bne.n	800fab6 <sbrk_aligned+0x22>
 800fad0:	e7ef      	b.n	800fab2 <sbrk_aligned+0x1e>
 800fad2:	bf00      	nop
 800fad4:	20006b08 	.word	0x20006b08

0800fad8 <_malloc_r>:
 800fad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fadc:	1ccd      	adds	r5, r1, #3
 800fade:	f025 0503 	bic.w	r5, r5, #3
 800fae2:	3508      	adds	r5, #8
 800fae4:	2d0c      	cmp	r5, #12
 800fae6:	bf38      	it	cc
 800fae8:	250c      	movcc	r5, #12
 800faea:	2d00      	cmp	r5, #0
 800faec:	4606      	mov	r6, r0
 800faee:	db01      	blt.n	800faf4 <_malloc_r+0x1c>
 800faf0:	42a9      	cmp	r1, r5
 800faf2:	d904      	bls.n	800fafe <_malloc_r+0x26>
 800faf4:	230c      	movs	r3, #12
 800faf6:	6033      	str	r3, [r6, #0]
 800faf8:	2000      	movs	r0, #0
 800fafa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fafe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fbd4 <_malloc_r+0xfc>
 800fb02:	f000 f869 	bl	800fbd8 <__malloc_lock>
 800fb06:	f8d8 3000 	ldr.w	r3, [r8]
 800fb0a:	461c      	mov	r4, r3
 800fb0c:	bb44      	cbnz	r4, 800fb60 <_malloc_r+0x88>
 800fb0e:	4629      	mov	r1, r5
 800fb10:	4630      	mov	r0, r6
 800fb12:	f7ff ffbf 	bl	800fa94 <sbrk_aligned>
 800fb16:	1c43      	adds	r3, r0, #1
 800fb18:	4604      	mov	r4, r0
 800fb1a:	d158      	bne.n	800fbce <_malloc_r+0xf6>
 800fb1c:	f8d8 4000 	ldr.w	r4, [r8]
 800fb20:	4627      	mov	r7, r4
 800fb22:	2f00      	cmp	r7, #0
 800fb24:	d143      	bne.n	800fbae <_malloc_r+0xd6>
 800fb26:	2c00      	cmp	r4, #0
 800fb28:	d04b      	beq.n	800fbc2 <_malloc_r+0xea>
 800fb2a:	6823      	ldr	r3, [r4, #0]
 800fb2c:	4639      	mov	r1, r7
 800fb2e:	4630      	mov	r0, r6
 800fb30:	eb04 0903 	add.w	r9, r4, r3
 800fb34:	f000 fb5c 	bl	80101f0 <_sbrk_r>
 800fb38:	4581      	cmp	r9, r0
 800fb3a:	d142      	bne.n	800fbc2 <_malloc_r+0xea>
 800fb3c:	6821      	ldr	r1, [r4, #0]
 800fb3e:	1a6d      	subs	r5, r5, r1
 800fb40:	4629      	mov	r1, r5
 800fb42:	4630      	mov	r0, r6
 800fb44:	f7ff ffa6 	bl	800fa94 <sbrk_aligned>
 800fb48:	3001      	adds	r0, #1
 800fb4a:	d03a      	beq.n	800fbc2 <_malloc_r+0xea>
 800fb4c:	6823      	ldr	r3, [r4, #0]
 800fb4e:	442b      	add	r3, r5
 800fb50:	6023      	str	r3, [r4, #0]
 800fb52:	f8d8 3000 	ldr.w	r3, [r8]
 800fb56:	685a      	ldr	r2, [r3, #4]
 800fb58:	bb62      	cbnz	r2, 800fbb4 <_malloc_r+0xdc>
 800fb5a:	f8c8 7000 	str.w	r7, [r8]
 800fb5e:	e00f      	b.n	800fb80 <_malloc_r+0xa8>
 800fb60:	6822      	ldr	r2, [r4, #0]
 800fb62:	1b52      	subs	r2, r2, r5
 800fb64:	d420      	bmi.n	800fba8 <_malloc_r+0xd0>
 800fb66:	2a0b      	cmp	r2, #11
 800fb68:	d917      	bls.n	800fb9a <_malloc_r+0xc2>
 800fb6a:	1961      	adds	r1, r4, r5
 800fb6c:	42a3      	cmp	r3, r4
 800fb6e:	6025      	str	r5, [r4, #0]
 800fb70:	bf18      	it	ne
 800fb72:	6059      	strne	r1, [r3, #4]
 800fb74:	6863      	ldr	r3, [r4, #4]
 800fb76:	bf08      	it	eq
 800fb78:	f8c8 1000 	streq.w	r1, [r8]
 800fb7c:	5162      	str	r2, [r4, r5]
 800fb7e:	604b      	str	r3, [r1, #4]
 800fb80:	4630      	mov	r0, r6
 800fb82:	f000 f82f 	bl	800fbe4 <__malloc_unlock>
 800fb86:	f104 000b 	add.w	r0, r4, #11
 800fb8a:	1d23      	adds	r3, r4, #4
 800fb8c:	f020 0007 	bic.w	r0, r0, #7
 800fb90:	1ac2      	subs	r2, r0, r3
 800fb92:	bf1c      	itt	ne
 800fb94:	1a1b      	subne	r3, r3, r0
 800fb96:	50a3      	strne	r3, [r4, r2]
 800fb98:	e7af      	b.n	800fafa <_malloc_r+0x22>
 800fb9a:	6862      	ldr	r2, [r4, #4]
 800fb9c:	42a3      	cmp	r3, r4
 800fb9e:	bf0c      	ite	eq
 800fba0:	f8c8 2000 	streq.w	r2, [r8]
 800fba4:	605a      	strne	r2, [r3, #4]
 800fba6:	e7eb      	b.n	800fb80 <_malloc_r+0xa8>
 800fba8:	4623      	mov	r3, r4
 800fbaa:	6864      	ldr	r4, [r4, #4]
 800fbac:	e7ae      	b.n	800fb0c <_malloc_r+0x34>
 800fbae:	463c      	mov	r4, r7
 800fbb0:	687f      	ldr	r7, [r7, #4]
 800fbb2:	e7b6      	b.n	800fb22 <_malloc_r+0x4a>
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	685b      	ldr	r3, [r3, #4]
 800fbb8:	42a3      	cmp	r3, r4
 800fbba:	d1fb      	bne.n	800fbb4 <_malloc_r+0xdc>
 800fbbc:	2300      	movs	r3, #0
 800fbbe:	6053      	str	r3, [r2, #4]
 800fbc0:	e7de      	b.n	800fb80 <_malloc_r+0xa8>
 800fbc2:	230c      	movs	r3, #12
 800fbc4:	6033      	str	r3, [r6, #0]
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f000 f80c 	bl	800fbe4 <__malloc_unlock>
 800fbcc:	e794      	b.n	800faf8 <_malloc_r+0x20>
 800fbce:	6005      	str	r5, [r0, #0]
 800fbd0:	e7d6      	b.n	800fb80 <_malloc_r+0xa8>
 800fbd2:	bf00      	nop
 800fbd4:	20006b0c 	.word	0x20006b0c

0800fbd8 <__malloc_lock>:
 800fbd8:	4801      	ldr	r0, [pc, #4]	@ (800fbe0 <__malloc_lock+0x8>)
 800fbda:	f7ff bf01 	b.w	800f9e0 <__retarget_lock_acquire_recursive>
 800fbde:	bf00      	nop
 800fbe0:	20006b04 	.word	0x20006b04

0800fbe4 <__malloc_unlock>:
 800fbe4:	4801      	ldr	r0, [pc, #4]	@ (800fbec <__malloc_unlock+0x8>)
 800fbe6:	f7ff befc 	b.w	800f9e2 <__retarget_lock_release_recursive>
 800fbea:	bf00      	nop
 800fbec:	20006b04 	.word	0x20006b04

0800fbf0 <__ssputs_r>:
 800fbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf4:	688e      	ldr	r6, [r1, #8]
 800fbf6:	461f      	mov	r7, r3
 800fbf8:	42be      	cmp	r6, r7
 800fbfa:	680b      	ldr	r3, [r1, #0]
 800fbfc:	4682      	mov	sl, r0
 800fbfe:	460c      	mov	r4, r1
 800fc00:	4690      	mov	r8, r2
 800fc02:	d82d      	bhi.n	800fc60 <__ssputs_r+0x70>
 800fc04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc08:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc0c:	d026      	beq.n	800fc5c <__ssputs_r+0x6c>
 800fc0e:	6965      	ldr	r5, [r4, #20]
 800fc10:	6909      	ldr	r1, [r1, #16]
 800fc12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc16:	eba3 0901 	sub.w	r9, r3, r1
 800fc1a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc1e:	1c7b      	adds	r3, r7, #1
 800fc20:	444b      	add	r3, r9
 800fc22:	106d      	asrs	r5, r5, #1
 800fc24:	429d      	cmp	r5, r3
 800fc26:	bf38      	it	cc
 800fc28:	461d      	movcc	r5, r3
 800fc2a:	0553      	lsls	r3, r2, #21
 800fc2c:	d527      	bpl.n	800fc7e <__ssputs_r+0x8e>
 800fc2e:	4629      	mov	r1, r5
 800fc30:	f7ff ff52 	bl	800fad8 <_malloc_r>
 800fc34:	4606      	mov	r6, r0
 800fc36:	b360      	cbz	r0, 800fc92 <__ssputs_r+0xa2>
 800fc38:	6921      	ldr	r1, [r4, #16]
 800fc3a:	464a      	mov	r2, r9
 800fc3c:	f7ff fed2 	bl	800f9e4 <memcpy>
 800fc40:	89a3      	ldrh	r3, [r4, #12]
 800fc42:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc4a:	81a3      	strh	r3, [r4, #12]
 800fc4c:	6126      	str	r6, [r4, #16]
 800fc4e:	6165      	str	r5, [r4, #20]
 800fc50:	444e      	add	r6, r9
 800fc52:	eba5 0509 	sub.w	r5, r5, r9
 800fc56:	6026      	str	r6, [r4, #0]
 800fc58:	60a5      	str	r5, [r4, #8]
 800fc5a:	463e      	mov	r6, r7
 800fc5c:	42be      	cmp	r6, r7
 800fc5e:	d900      	bls.n	800fc62 <__ssputs_r+0x72>
 800fc60:	463e      	mov	r6, r7
 800fc62:	6820      	ldr	r0, [r4, #0]
 800fc64:	4632      	mov	r2, r6
 800fc66:	4641      	mov	r1, r8
 800fc68:	f000 faa8 	bl	80101bc <memmove>
 800fc6c:	68a3      	ldr	r3, [r4, #8]
 800fc6e:	1b9b      	subs	r3, r3, r6
 800fc70:	60a3      	str	r3, [r4, #8]
 800fc72:	6823      	ldr	r3, [r4, #0]
 800fc74:	4433      	add	r3, r6
 800fc76:	6023      	str	r3, [r4, #0]
 800fc78:	2000      	movs	r0, #0
 800fc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc7e:	462a      	mov	r2, r5
 800fc80:	f000 fac6 	bl	8010210 <_realloc_r>
 800fc84:	4606      	mov	r6, r0
 800fc86:	2800      	cmp	r0, #0
 800fc88:	d1e0      	bne.n	800fc4c <__ssputs_r+0x5c>
 800fc8a:	6921      	ldr	r1, [r4, #16]
 800fc8c:	4650      	mov	r0, sl
 800fc8e:	f7ff feb7 	bl	800fa00 <_free_r>
 800fc92:	230c      	movs	r3, #12
 800fc94:	f8ca 3000 	str.w	r3, [sl]
 800fc98:	89a3      	ldrh	r3, [r4, #12]
 800fc9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc9e:	81a3      	strh	r3, [r4, #12]
 800fca0:	f04f 30ff 	mov.w	r0, #4294967295
 800fca4:	e7e9      	b.n	800fc7a <__ssputs_r+0x8a>
	...

0800fca8 <_svfiprintf_r>:
 800fca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcac:	4698      	mov	r8, r3
 800fcae:	898b      	ldrh	r3, [r1, #12]
 800fcb0:	061b      	lsls	r3, r3, #24
 800fcb2:	b09d      	sub	sp, #116	@ 0x74
 800fcb4:	4607      	mov	r7, r0
 800fcb6:	460d      	mov	r5, r1
 800fcb8:	4614      	mov	r4, r2
 800fcba:	d510      	bpl.n	800fcde <_svfiprintf_r+0x36>
 800fcbc:	690b      	ldr	r3, [r1, #16]
 800fcbe:	b973      	cbnz	r3, 800fcde <_svfiprintf_r+0x36>
 800fcc0:	2140      	movs	r1, #64	@ 0x40
 800fcc2:	f7ff ff09 	bl	800fad8 <_malloc_r>
 800fcc6:	6028      	str	r0, [r5, #0]
 800fcc8:	6128      	str	r0, [r5, #16]
 800fcca:	b930      	cbnz	r0, 800fcda <_svfiprintf_r+0x32>
 800fccc:	230c      	movs	r3, #12
 800fcce:	603b      	str	r3, [r7, #0]
 800fcd0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcd4:	b01d      	add	sp, #116	@ 0x74
 800fcd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcda:	2340      	movs	r3, #64	@ 0x40
 800fcdc:	616b      	str	r3, [r5, #20]
 800fcde:	2300      	movs	r3, #0
 800fce0:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce2:	2320      	movs	r3, #32
 800fce4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fce8:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcec:	2330      	movs	r3, #48	@ 0x30
 800fcee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fe8c <_svfiprintf_r+0x1e4>
 800fcf2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcf6:	f04f 0901 	mov.w	r9, #1
 800fcfa:	4623      	mov	r3, r4
 800fcfc:	469a      	mov	sl, r3
 800fcfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd02:	b10a      	cbz	r2, 800fd08 <_svfiprintf_r+0x60>
 800fd04:	2a25      	cmp	r2, #37	@ 0x25
 800fd06:	d1f9      	bne.n	800fcfc <_svfiprintf_r+0x54>
 800fd08:	ebba 0b04 	subs.w	fp, sl, r4
 800fd0c:	d00b      	beq.n	800fd26 <_svfiprintf_r+0x7e>
 800fd0e:	465b      	mov	r3, fp
 800fd10:	4622      	mov	r2, r4
 800fd12:	4629      	mov	r1, r5
 800fd14:	4638      	mov	r0, r7
 800fd16:	f7ff ff6b 	bl	800fbf0 <__ssputs_r>
 800fd1a:	3001      	adds	r0, #1
 800fd1c:	f000 80a7 	beq.w	800fe6e <_svfiprintf_r+0x1c6>
 800fd20:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd22:	445a      	add	r2, fp
 800fd24:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd26:	f89a 3000 	ldrb.w	r3, [sl]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	f000 809f 	beq.w	800fe6e <_svfiprintf_r+0x1c6>
 800fd30:	2300      	movs	r3, #0
 800fd32:	f04f 32ff 	mov.w	r2, #4294967295
 800fd36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd3a:	f10a 0a01 	add.w	sl, sl, #1
 800fd3e:	9304      	str	r3, [sp, #16]
 800fd40:	9307      	str	r3, [sp, #28]
 800fd42:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd46:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd48:	4654      	mov	r4, sl
 800fd4a:	2205      	movs	r2, #5
 800fd4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd50:	484e      	ldr	r0, [pc, #312]	@ (800fe8c <_svfiprintf_r+0x1e4>)
 800fd52:	f7f0 fa55 	bl	8000200 <memchr>
 800fd56:	9a04      	ldr	r2, [sp, #16]
 800fd58:	b9d8      	cbnz	r0, 800fd92 <_svfiprintf_r+0xea>
 800fd5a:	06d0      	lsls	r0, r2, #27
 800fd5c:	bf44      	itt	mi
 800fd5e:	2320      	movmi	r3, #32
 800fd60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd64:	0711      	lsls	r1, r2, #28
 800fd66:	bf44      	itt	mi
 800fd68:	232b      	movmi	r3, #43	@ 0x2b
 800fd6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd6e:	f89a 3000 	ldrb.w	r3, [sl]
 800fd72:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd74:	d015      	beq.n	800fda2 <_svfiprintf_r+0xfa>
 800fd76:	9a07      	ldr	r2, [sp, #28]
 800fd78:	4654      	mov	r4, sl
 800fd7a:	2000      	movs	r0, #0
 800fd7c:	f04f 0c0a 	mov.w	ip, #10
 800fd80:	4621      	mov	r1, r4
 800fd82:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd86:	3b30      	subs	r3, #48	@ 0x30
 800fd88:	2b09      	cmp	r3, #9
 800fd8a:	d94b      	bls.n	800fe24 <_svfiprintf_r+0x17c>
 800fd8c:	b1b0      	cbz	r0, 800fdbc <_svfiprintf_r+0x114>
 800fd8e:	9207      	str	r2, [sp, #28]
 800fd90:	e014      	b.n	800fdbc <_svfiprintf_r+0x114>
 800fd92:	eba0 0308 	sub.w	r3, r0, r8
 800fd96:	fa09 f303 	lsl.w	r3, r9, r3
 800fd9a:	4313      	orrs	r3, r2
 800fd9c:	9304      	str	r3, [sp, #16]
 800fd9e:	46a2      	mov	sl, r4
 800fda0:	e7d2      	b.n	800fd48 <_svfiprintf_r+0xa0>
 800fda2:	9b03      	ldr	r3, [sp, #12]
 800fda4:	1d19      	adds	r1, r3, #4
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	9103      	str	r1, [sp, #12]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	bfbb      	ittet	lt
 800fdae:	425b      	neglt	r3, r3
 800fdb0:	f042 0202 	orrlt.w	r2, r2, #2
 800fdb4:	9307      	strge	r3, [sp, #28]
 800fdb6:	9307      	strlt	r3, [sp, #28]
 800fdb8:	bfb8      	it	lt
 800fdba:	9204      	strlt	r2, [sp, #16]
 800fdbc:	7823      	ldrb	r3, [r4, #0]
 800fdbe:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdc0:	d10a      	bne.n	800fdd8 <_svfiprintf_r+0x130>
 800fdc2:	7863      	ldrb	r3, [r4, #1]
 800fdc4:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdc6:	d132      	bne.n	800fe2e <_svfiprintf_r+0x186>
 800fdc8:	9b03      	ldr	r3, [sp, #12]
 800fdca:	1d1a      	adds	r2, r3, #4
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	9203      	str	r2, [sp, #12]
 800fdd0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdd4:	3402      	adds	r4, #2
 800fdd6:	9305      	str	r3, [sp, #20]
 800fdd8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fe9c <_svfiprintf_r+0x1f4>
 800fddc:	7821      	ldrb	r1, [r4, #0]
 800fdde:	2203      	movs	r2, #3
 800fde0:	4650      	mov	r0, sl
 800fde2:	f7f0 fa0d 	bl	8000200 <memchr>
 800fde6:	b138      	cbz	r0, 800fdf8 <_svfiprintf_r+0x150>
 800fde8:	9b04      	ldr	r3, [sp, #16]
 800fdea:	eba0 000a 	sub.w	r0, r0, sl
 800fdee:	2240      	movs	r2, #64	@ 0x40
 800fdf0:	4082      	lsls	r2, r0
 800fdf2:	4313      	orrs	r3, r2
 800fdf4:	3401      	adds	r4, #1
 800fdf6:	9304      	str	r3, [sp, #16]
 800fdf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fdfc:	4824      	ldr	r0, [pc, #144]	@ (800fe90 <_svfiprintf_r+0x1e8>)
 800fdfe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe02:	2206      	movs	r2, #6
 800fe04:	f7f0 f9fc 	bl	8000200 <memchr>
 800fe08:	2800      	cmp	r0, #0
 800fe0a:	d036      	beq.n	800fe7a <_svfiprintf_r+0x1d2>
 800fe0c:	4b21      	ldr	r3, [pc, #132]	@ (800fe94 <_svfiprintf_r+0x1ec>)
 800fe0e:	bb1b      	cbnz	r3, 800fe58 <_svfiprintf_r+0x1b0>
 800fe10:	9b03      	ldr	r3, [sp, #12]
 800fe12:	3307      	adds	r3, #7
 800fe14:	f023 0307 	bic.w	r3, r3, #7
 800fe18:	3308      	adds	r3, #8
 800fe1a:	9303      	str	r3, [sp, #12]
 800fe1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe1e:	4433      	add	r3, r6
 800fe20:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe22:	e76a      	b.n	800fcfa <_svfiprintf_r+0x52>
 800fe24:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe28:	460c      	mov	r4, r1
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	e7a8      	b.n	800fd80 <_svfiprintf_r+0xd8>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	3401      	adds	r4, #1
 800fe32:	9305      	str	r3, [sp, #20]
 800fe34:	4619      	mov	r1, r3
 800fe36:	f04f 0c0a 	mov.w	ip, #10
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe40:	3a30      	subs	r2, #48	@ 0x30
 800fe42:	2a09      	cmp	r2, #9
 800fe44:	d903      	bls.n	800fe4e <_svfiprintf_r+0x1a6>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d0c6      	beq.n	800fdd8 <_svfiprintf_r+0x130>
 800fe4a:	9105      	str	r1, [sp, #20]
 800fe4c:	e7c4      	b.n	800fdd8 <_svfiprintf_r+0x130>
 800fe4e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe52:	4604      	mov	r4, r0
 800fe54:	2301      	movs	r3, #1
 800fe56:	e7f0      	b.n	800fe3a <_svfiprintf_r+0x192>
 800fe58:	ab03      	add	r3, sp, #12
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	462a      	mov	r2, r5
 800fe5e:	4b0e      	ldr	r3, [pc, #56]	@ (800fe98 <_svfiprintf_r+0x1f0>)
 800fe60:	a904      	add	r1, sp, #16
 800fe62:	4638      	mov	r0, r7
 800fe64:	f3af 8000 	nop.w
 800fe68:	1c42      	adds	r2, r0, #1
 800fe6a:	4606      	mov	r6, r0
 800fe6c:	d1d6      	bne.n	800fe1c <_svfiprintf_r+0x174>
 800fe6e:	89ab      	ldrh	r3, [r5, #12]
 800fe70:	065b      	lsls	r3, r3, #25
 800fe72:	f53f af2d 	bmi.w	800fcd0 <_svfiprintf_r+0x28>
 800fe76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe78:	e72c      	b.n	800fcd4 <_svfiprintf_r+0x2c>
 800fe7a:	ab03      	add	r3, sp, #12
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	462a      	mov	r2, r5
 800fe80:	4b05      	ldr	r3, [pc, #20]	@ (800fe98 <_svfiprintf_r+0x1f0>)
 800fe82:	a904      	add	r1, sp, #16
 800fe84:	4638      	mov	r0, r7
 800fe86:	f000 f879 	bl	800ff7c <_printf_i>
 800fe8a:	e7ed      	b.n	800fe68 <_svfiprintf_r+0x1c0>
 800fe8c:	08010664 	.word	0x08010664
 800fe90:	0801066e 	.word	0x0801066e
 800fe94:	00000000 	.word	0x00000000
 800fe98:	0800fbf1 	.word	0x0800fbf1
 800fe9c:	0801066a 	.word	0x0801066a

0800fea0 <_printf_common>:
 800fea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea4:	4616      	mov	r6, r2
 800fea6:	4698      	mov	r8, r3
 800fea8:	688a      	ldr	r2, [r1, #8]
 800feaa:	690b      	ldr	r3, [r1, #16]
 800feac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800feb0:	4293      	cmp	r3, r2
 800feb2:	bfb8      	it	lt
 800feb4:	4613      	movlt	r3, r2
 800feb6:	6033      	str	r3, [r6, #0]
 800feb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800febc:	4607      	mov	r7, r0
 800febe:	460c      	mov	r4, r1
 800fec0:	b10a      	cbz	r2, 800fec6 <_printf_common+0x26>
 800fec2:	3301      	adds	r3, #1
 800fec4:	6033      	str	r3, [r6, #0]
 800fec6:	6823      	ldr	r3, [r4, #0]
 800fec8:	0699      	lsls	r1, r3, #26
 800feca:	bf42      	ittt	mi
 800fecc:	6833      	ldrmi	r3, [r6, #0]
 800fece:	3302      	addmi	r3, #2
 800fed0:	6033      	strmi	r3, [r6, #0]
 800fed2:	6825      	ldr	r5, [r4, #0]
 800fed4:	f015 0506 	ands.w	r5, r5, #6
 800fed8:	d106      	bne.n	800fee8 <_printf_common+0x48>
 800feda:	f104 0a19 	add.w	sl, r4, #25
 800fede:	68e3      	ldr	r3, [r4, #12]
 800fee0:	6832      	ldr	r2, [r6, #0]
 800fee2:	1a9b      	subs	r3, r3, r2
 800fee4:	42ab      	cmp	r3, r5
 800fee6:	dc26      	bgt.n	800ff36 <_printf_common+0x96>
 800fee8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800feec:	6822      	ldr	r2, [r4, #0]
 800feee:	3b00      	subs	r3, #0
 800fef0:	bf18      	it	ne
 800fef2:	2301      	movne	r3, #1
 800fef4:	0692      	lsls	r2, r2, #26
 800fef6:	d42b      	bmi.n	800ff50 <_printf_common+0xb0>
 800fef8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fefc:	4641      	mov	r1, r8
 800fefe:	4638      	mov	r0, r7
 800ff00:	47c8      	blx	r9
 800ff02:	3001      	adds	r0, #1
 800ff04:	d01e      	beq.n	800ff44 <_printf_common+0xa4>
 800ff06:	6823      	ldr	r3, [r4, #0]
 800ff08:	6922      	ldr	r2, [r4, #16]
 800ff0a:	f003 0306 	and.w	r3, r3, #6
 800ff0e:	2b04      	cmp	r3, #4
 800ff10:	bf02      	ittt	eq
 800ff12:	68e5      	ldreq	r5, [r4, #12]
 800ff14:	6833      	ldreq	r3, [r6, #0]
 800ff16:	1aed      	subeq	r5, r5, r3
 800ff18:	68a3      	ldr	r3, [r4, #8]
 800ff1a:	bf0c      	ite	eq
 800ff1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff20:	2500      	movne	r5, #0
 800ff22:	4293      	cmp	r3, r2
 800ff24:	bfc4      	itt	gt
 800ff26:	1a9b      	subgt	r3, r3, r2
 800ff28:	18ed      	addgt	r5, r5, r3
 800ff2a:	2600      	movs	r6, #0
 800ff2c:	341a      	adds	r4, #26
 800ff2e:	42b5      	cmp	r5, r6
 800ff30:	d11a      	bne.n	800ff68 <_printf_common+0xc8>
 800ff32:	2000      	movs	r0, #0
 800ff34:	e008      	b.n	800ff48 <_printf_common+0xa8>
 800ff36:	2301      	movs	r3, #1
 800ff38:	4652      	mov	r2, sl
 800ff3a:	4641      	mov	r1, r8
 800ff3c:	4638      	mov	r0, r7
 800ff3e:	47c8      	blx	r9
 800ff40:	3001      	adds	r0, #1
 800ff42:	d103      	bne.n	800ff4c <_printf_common+0xac>
 800ff44:	f04f 30ff 	mov.w	r0, #4294967295
 800ff48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff4c:	3501      	adds	r5, #1
 800ff4e:	e7c6      	b.n	800fede <_printf_common+0x3e>
 800ff50:	18e1      	adds	r1, r4, r3
 800ff52:	1c5a      	adds	r2, r3, #1
 800ff54:	2030      	movs	r0, #48	@ 0x30
 800ff56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff5a:	4422      	add	r2, r4
 800ff5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff64:	3302      	adds	r3, #2
 800ff66:	e7c7      	b.n	800fef8 <_printf_common+0x58>
 800ff68:	2301      	movs	r3, #1
 800ff6a:	4622      	mov	r2, r4
 800ff6c:	4641      	mov	r1, r8
 800ff6e:	4638      	mov	r0, r7
 800ff70:	47c8      	blx	r9
 800ff72:	3001      	adds	r0, #1
 800ff74:	d0e6      	beq.n	800ff44 <_printf_common+0xa4>
 800ff76:	3601      	adds	r6, #1
 800ff78:	e7d9      	b.n	800ff2e <_printf_common+0x8e>
	...

0800ff7c <_printf_i>:
 800ff7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff80:	7e0f      	ldrb	r7, [r1, #24]
 800ff82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff84:	2f78      	cmp	r7, #120	@ 0x78
 800ff86:	4691      	mov	r9, r2
 800ff88:	4680      	mov	r8, r0
 800ff8a:	460c      	mov	r4, r1
 800ff8c:	469a      	mov	sl, r3
 800ff8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff92:	d807      	bhi.n	800ffa4 <_printf_i+0x28>
 800ff94:	2f62      	cmp	r7, #98	@ 0x62
 800ff96:	d80a      	bhi.n	800ffae <_printf_i+0x32>
 800ff98:	2f00      	cmp	r7, #0
 800ff9a:	f000 80d2 	beq.w	8010142 <_printf_i+0x1c6>
 800ff9e:	2f58      	cmp	r7, #88	@ 0x58
 800ffa0:	f000 80b9 	beq.w	8010116 <_printf_i+0x19a>
 800ffa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffac:	e03a      	b.n	8010024 <_printf_i+0xa8>
 800ffae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffb2:	2b15      	cmp	r3, #21
 800ffb4:	d8f6      	bhi.n	800ffa4 <_printf_i+0x28>
 800ffb6:	a101      	add	r1, pc, #4	@ (adr r1, 800ffbc <_printf_i+0x40>)
 800ffb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffbc:	08010015 	.word	0x08010015
 800ffc0:	08010029 	.word	0x08010029
 800ffc4:	0800ffa5 	.word	0x0800ffa5
 800ffc8:	0800ffa5 	.word	0x0800ffa5
 800ffcc:	0800ffa5 	.word	0x0800ffa5
 800ffd0:	0800ffa5 	.word	0x0800ffa5
 800ffd4:	08010029 	.word	0x08010029
 800ffd8:	0800ffa5 	.word	0x0800ffa5
 800ffdc:	0800ffa5 	.word	0x0800ffa5
 800ffe0:	0800ffa5 	.word	0x0800ffa5
 800ffe4:	0800ffa5 	.word	0x0800ffa5
 800ffe8:	08010129 	.word	0x08010129
 800ffec:	08010053 	.word	0x08010053
 800fff0:	080100e3 	.word	0x080100e3
 800fff4:	0800ffa5 	.word	0x0800ffa5
 800fff8:	0800ffa5 	.word	0x0800ffa5
 800fffc:	0801014b 	.word	0x0801014b
 8010000:	0800ffa5 	.word	0x0800ffa5
 8010004:	08010053 	.word	0x08010053
 8010008:	0800ffa5 	.word	0x0800ffa5
 801000c:	0800ffa5 	.word	0x0800ffa5
 8010010:	080100eb 	.word	0x080100eb
 8010014:	6833      	ldr	r3, [r6, #0]
 8010016:	1d1a      	adds	r2, r3, #4
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	6032      	str	r2, [r6, #0]
 801001c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010024:	2301      	movs	r3, #1
 8010026:	e09d      	b.n	8010164 <_printf_i+0x1e8>
 8010028:	6833      	ldr	r3, [r6, #0]
 801002a:	6820      	ldr	r0, [r4, #0]
 801002c:	1d19      	adds	r1, r3, #4
 801002e:	6031      	str	r1, [r6, #0]
 8010030:	0606      	lsls	r6, r0, #24
 8010032:	d501      	bpl.n	8010038 <_printf_i+0xbc>
 8010034:	681d      	ldr	r5, [r3, #0]
 8010036:	e003      	b.n	8010040 <_printf_i+0xc4>
 8010038:	0645      	lsls	r5, r0, #25
 801003a:	d5fb      	bpl.n	8010034 <_printf_i+0xb8>
 801003c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010040:	2d00      	cmp	r5, #0
 8010042:	da03      	bge.n	801004c <_printf_i+0xd0>
 8010044:	232d      	movs	r3, #45	@ 0x2d
 8010046:	426d      	negs	r5, r5
 8010048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801004c:	4859      	ldr	r0, [pc, #356]	@ (80101b4 <_printf_i+0x238>)
 801004e:	230a      	movs	r3, #10
 8010050:	e011      	b.n	8010076 <_printf_i+0xfa>
 8010052:	6821      	ldr	r1, [r4, #0]
 8010054:	6833      	ldr	r3, [r6, #0]
 8010056:	0608      	lsls	r0, r1, #24
 8010058:	f853 5b04 	ldr.w	r5, [r3], #4
 801005c:	d402      	bmi.n	8010064 <_printf_i+0xe8>
 801005e:	0649      	lsls	r1, r1, #25
 8010060:	bf48      	it	mi
 8010062:	b2ad      	uxthmi	r5, r5
 8010064:	2f6f      	cmp	r7, #111	@ 0x6f
 8010066:	4853      	ldr	r0, [pc, #332]	@ (80101b4 <_printf_i+0x238>)
 8010068:	6033      	str	r3, [r6, #0]
 801006a:	bf14      	ite	ne
 801006c:	230a      	movne	r3, #10
 801006e:	2308      	moveq	r3, #8
 8010070:	2100      	movs	r1, #0
 8010072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010076:	6866      	ldr	r6, [r4, #4]
 8010078:	60a6      	str	r6, [r4, #8]
 801007a:	2e00      	cmp	r6, #0
 801007c:	bfa2      	ittt	ge
 801007e:	6821      	ldrge	r1, [r4, #0]
 8010080:	f021 0104 	bicge.w	r1, r1, #4
 8010084:	6021      	strge	r1, [r4, #0]
 8010086:	b90d      	cbnz	r5, 801008c <_printf_i+0x110>
 8010088:	2e00      	cmp	r6, #0
 801008a:	d04b      	beq.n	8010124 <_printf_i+0x1a8>
 801008c:	4616      	mov	r6, r2
 801008e:	fbb5 f1f3 	udiv	r1, r5, r3
 8010092:	fb03 5711 	mls	r7, r3, r1, r5
 8010096:	5dc7      	ldrb	r7, [r0, r7]
 8010098:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801009c:	462f      	mov	r7, r5
 801009e:	42bb      	cmp	r3, r7
 80100a0:	460d      	mov	r5, r1
 80100a2:	d9f4      	bls.n	801008e <_printf_i+0x112>
 80100a4:	2b08      	cmp	r3, #8
 80100a6:	d10b      	bne.n	80100c0 <_printf_i+0x144>
 80100a8:	6823      	ldr	r3, [r4, #0]
 80100aa:	07df      	lsls	r7, r3, #31
 80100ac:	d508      	bpl.n	80100c0 <_printf_i+0x144>
 80100ae:	6923      	ldr	r3, [r4, #16]
 80100b0:	6861      	ldr	r1, [r4, #4]
 80100b2:	4299      	cmp	r1, r3
 80100b4:	bfde      	ittt	le
 80100b6:	2330      	movle	r3, #48	@ 0x30
 80100b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100c0:	1b92      	subs	r2, r2, r6
 80100c2:	6122      	str	r2, [r4, #16]
 80100c4:	f8cd a000 	str.w	sl, [sp]
 80100c8:	464b      	mov	r3, r9
 80100ca:	aa03      	add	r2, sp, #12
 80100cc:	4621      	mov	r1, r4
 80100ce:	4640      	mov	r0, r8
 80100d0:	f7ff fee6 	bl	800fea0 <_printf_common>
 80100d4:	3001      	adds	r0, #1
 80100d6:	d14a      	bne.n	801016e <_printf_i+0x1f2>
 80100d8:	f04f 30ff 	mov.w	r0, #4294967295
 80100dc:	b004      	add	sp, #16
 80100de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	f043 0320 	orr.w	r3, r3, #32
 80100e8:	6023      	str	r3, [r4, #0]
 80100ea:	4833      	ldr	r0, [pc, #204]	@ (80101b8 <_printf_i+0x23c>)
 80100ec:	2778      	movs	r7, #120	@ 0x78
 80100ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	6831      	ldr	r1, [r6, #0]
 80100f6:	061f      	lsls	r7, r3, #24
 80100f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80100fc:	d402      	bmi.n	8010104 <_printf_i+0x188>
 80100fe:	065f      	lsls	r7, r3, #25
 8010100:	bf48      	it	mi
 8010102:	b2ad      	uxthmi	r5, r5
 8010104:	6031      	str	r1, [r6, #0]
 8010106:	07d9      	lsls	r1, r3, #31
 8010108:	bf44      	itt	mi
 801010a:	f043 0320 	orrmi.w	r3, r3, #32
 801010e:	6023      	strmi	r3, [r4, #0]
 8010110:	b11d      	cbz	r5, 801011a <_printf_i+0x19e>
 8010112:	2310      	movs	r3, #16
 8010114:	e7ac      	b.n	8010070 <_printf_i+0xf4>
 8010116:	4827      	ldr	r0, [pc, #156]	@ (80101b4 <_printf_i+0x238>)
 8010118:	e7e9      	b.n	80100ee <_printf_i+0x172>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	f023 0320 	bic.w	r3, r3, #32
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	e7f6      	b.n	8010112 <_printf_i+0x196>
 8010124:	4616      	mov	r6, r2
 8010126:	e7bd      	b.n	80100a4 <_printf_i+0x128>
 8010128:	6833      	ldr	r3, [r6, #0]
 801012a:	6825      	ldr	r5, [r4, #0]
 801012c:	6961      	ldr	r1, [r4, #20]
 801012e:	1d18      	adds	r0, r3, #4
 8010130:	6030      	str	r0, [r6, #0]
 8010132:	062e      	lsls	r6, r5, #24
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	d501      	bpl.n	801013c <_printf_i+0x1c0>
 8010138:	6019      	str	r1, [r3, #0]
 801013a:	e002      	b.n	8010142 <_printf_i+0x1c6>
 801013c:	0668      	lsls	r0, r5, #25
 801013e:	d5fb      	bpl.n	8010138 <_printf_i+0x1bc>
 8010140:	8019      	strh	r1, [r3, #0]
 8010142:	2300      	movs	r3, #0
 8010144:	6123      	str	r3, [r4, #16]
 8010146:	4616      	mov	r6, r2
 8010148:	e7bc      	b.n	80100c4 <_printf_i+0x148>
 801014a:	6833      	ldr	r3, [r6, #0]
 801014c:	1d1a      	adds	r2, r3, #4
 801014e:	6032      	str	r2, [r6, #0]
 8010150:	681e      	ldr	r6, [r3, #0]
 8010152:	6862      	ldr	r2, [r4, #4]
 8010154:	2100      	movs	r1, #0
 8010156:	4630      	mov	r0, r6
 8010158:	f7f0 f852 	bl	8000200 <memchr>
 801015c:	b108      	cbz	r0, 8010162 <_printf_i+0x1e6>
 801015e:	1b80      	subs	r0, r0, r6
 8010160:	6060      	str	r0, [r4, #4]
 8010162:	6863      	ldr	r3, [r4, #4]
 8010164:	6123      	str	r3, [r4, #16]
 8010166:	2300      	movs	r3, #0
 8010168:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801016c:	e7aa      	b.n	80100c4 <_printf_i+0x148>
 801016e:	6923      	ldr	r3, [r4, #16]
 8010170:	4632      	mov	r2, r6
 8010172:	4649      	mov	r1, r9
 8010174:	4640      	mov	r0, r8
 8010176:	47d0      	blx	sl
 8010178:	3001      	adds	r0, #1
 801017a:	d0ad      	beq.n	80100d8 <_printf_i+0x15c>
 801017c:	6823      	ldr	r3, [r4, #0]
 801017e:	079b      	lsls	r3, r3, #30
 8010180:	d413      	bmi.n	80101aa <_printf_i+0x22e>
 8010182:	68e0      	ldr	r0, [r4, #12]
 8010184:	9b03      	ldr	r3, [sp, #12]
 8010186:	4298      	cmp	r0, r3
 8010188:	bfb8      	it	lt
 801018a:	4618      	movlt	r0, r3
 801018c:	e7a6      	b.n	80100dc <_printf_i+0x160>
 801018e:	2301      	movs	r3, #1
 8010190:	4632      	mov	r2, r6
 8010192:	4649      	mov	r1, r9
 8010194:	4640      	mov	r0, r8
 8010196:	47d0      	blx	sl
 8010198:	3001      	adds	r0, #1
 801019a:	d09d      	beq.n	80100d8 <_printf_i+0x15c>
 801019c:	3501      	adds	r5, #1
 801019e:	68e3      	ldr	r3, [r4, #12]
 80101a0:	9903      	ldr	r1, [sp, #12]
 80101a2:	1a5b      	subs	r3, r3, r1
 80101a4:	42ab      	cmp	r3, r5
 80101a6:	dcf2      	bgt.n	801018e <_printf_i+0x212>
 80101a8:	e7eb      	b.n	8010182 <_printf_i+0x206>
 80101aa:	2500      	movs	r5, #0
 80101ac:	f104 0619 	add.w	r6, r4, #25
 80101b0:	e7f5      	b.n	801019e <_printf_i+0x222>
 80101b2:	bf00      	nop
 80101b4:	08010675 	.word	0x08010675
 80101b8:	08010686 	.word	0x08010686

080101bc <memmove>:
 80101bc:	4288      	cmp	r0, r1
 80101be:	b510      	push	{r4, lr}
 80101c0:	eb01 0402 	add.w	r4, r1, r2
 80101c4:	d902      	bls.n	80101cc <memmove+0x10>
 80101c6:	4284      	cmp	r4, r0
 80101c8:	4623      	mov	r3, r4
 80101ca:	d807      	bhi.n	80101dc <memmove+0x20>
 80101cc:	1e43      	subs	r3, r0, #1
 80101ce:	42a1      	cmp	r1, r4
 80101d0:	d008      	beq.n	80101e4 <memmove+0x28>
 80101d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101da:	e7f8      	b.n	80101ce <memmove+0x12>
 80101dc:	4402      	add	r2, r0
 80101de:	4601      	mov	r1, r0
 80101e0:	428a      	cmp	r2, r1
 80101e2:	d100      	bne.n	80101e6 <memmove+0x2a>
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101ee:	e7f7      	b.n	80101e0 <memmove+0x24>

080101f0 <_sbrk_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	4d06      	ldr	r5, [pc, #24]	@ (801020c <_sbrk_r+0x1c>)
 80101f4:	2300      	movs	r3, #0
 80101f6:	4604      	mov	r4, r0
 80101f8:	4608      	mov	r0, r1
 80101fa:	602b      	str	r3, [r5, #0]
 80101fc:	f7f1 fcc2 	bl	8001b84 <_sbrk>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d102      	bne.n	801020a <_sbrk_r+0x1a>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	b103      	cbz	r3, 801020a <_sbrk_r+0x1a>
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	bd38      	pop	{r3, r4, r5, pc}
 801020c:	20006b00 	.word	0x20006b00

08010210 <_realloc_r>:
 8010210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010214:	4680      	mov	r8, r0
 8010216:	4615      	mov	r5, r2
 8010218:	460c      	mov	r4, r1
 801021a:	b921      	cbnz	r1, 8010226 <_realloc_r+0x16>
 801021c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010220:	4611      	mov	r1, r2
 8010222:	f7ff bc59 	b.w	800fad8 <_malloc_r>
 8010226:	b92a      	cbnz	r2, 8010234 <_realloc_r+0x24>
 8010228:	f7ff fbea 	bl	800fa00 <_free_r>
 801022c:	2400      	movs	r4, #0
 801022e:	4620      	mov	r0, r4
 8010230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010234:	f000 f81a 	bl	801026c <_malloc_usable_size_r>
 8010238:	4285      	cmp	r5, r0
 801023a:	4606      	mov	r6, r0
 801023c:	d802      	bhi.n	8010244 <_realloc_r+0x34>
 801023e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010242:	d8f4      	bhi.n	801022e <_realloc_r+0x1e>
 8010244:	4629      	mov	r1, r5
 8010246:	4640      	mov	r0, r8
 8010248:	f7ff fc46 	bl	800fad8 <_malloc_r>
 801024c:	4607      	mov	r7, r0
 801024e:	2800      	cmp	r0, #0
 8010250:	d0ec      	beq.n	801022c <_realloc_r+0x1c>
 8010252:	42b5      	cmp	r5, r6
 8010254:	462a      	mov	r2, r5
 8010256:	4621      	mov	r1, r4
 8010258:	bf28      	it	cs
 801025a:	4632      	movcs	r2, r6
 801025c:	f7ff fbc2 	bl	800f9e4 <memcpy>
 8010260:	4621      	mov	r1, r4
 8010262:	4640      	mov	r0, r8
 8010264:	f7ff fbcc 	bl	800fa00 <_free_r>
 8010268:	463c      	mov	r4, r7
 801026a:	e7e0      	b.n	801022e <_realloc_r+0x1e>

0801026c <_malloc_usable_size_r>:
 801026c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010270:	1f18      	subs	r0, r3, #4
 8010272:	2b00      	cmp	r3, #0
 8010274:	bfbc      	itt	lt
 8010276:	580b      	ldrlt	r3, [r1, r0]
 8010278:	18c0      	addlt	r0, r0, r3
 801027a:	4770      	bx	lr

0801027c <_init>:
 801027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801027e:	bf00      	nop
 8010280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010282:	bc08      	pop	{r3}
 8010284:	469e      	mov	lr, r3
 8010286:	4770      	bx	lr

08010288 <_fini>:
 8010288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028a:	bf00      	nop
 801028c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801028e:	bc08      	pop	{r3}
 8010290:	469e      	mov	lr, r3
 8010292:	4770      	bx	lr
