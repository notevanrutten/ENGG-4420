
Home-Security-System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da38  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  0800dbe8  0800dbe8  0000ebe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df60  0800df60  0000f100  2**0
                  CONTENTS
  4 .ARM          00000008  0800df60  0800df60  0000ef60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df68  0800df68  0000f100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df68  0800df68  0000ef68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800df6c  0800df6c  0000ef6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800df70  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f100  2**0
                  CONTENTS
 10 .bss          00006874  20000100  20000100  0000f100  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006974  20006974  0000f100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002bea8  00000000  00000000  0000f130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e3b  00000000  00000000  0003afd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002598  00000000  00000000  00040e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001d26  00000000  00000000  000433b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008995  00000000  00000000  000450d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e2c5  00000000  00000000  0004da6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5948  00000000  00000000  0007bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00171678  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a0b8  00000000  00000000  001716bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0017b774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000100 	.word	0x20000100
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dbd0 	.word	0x0800dbd0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000104 	.word	0x20000104
 80001ec:	0800dbd0 	.word	0x0800dbd0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b96a 	b.w	80004ec <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	460c      	mov	r4, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14e      	bne.n	80002da <__udivmoddi4+0xaa>
 800023c:	4694      	mov	ip, r2
 800023e:	458c      	cmp	ip, r1
 8000240:	4686      	mov	lr, r0
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	d962      	bls.n	800030e <__udivmoddi4+0xde>
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0320 	rsb	r3, r2, #32
 800024e:	4091      	lsls	r1, r2
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	fa0c fc02 	lsl.w	ip, ip, r2
 8000258:	4319      	orrs	r1, r3
 800025a:	fa00 fe02 	lsl.w	lr, r0, r2
 800025e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000262:	fa1f f68c 	uxth.w	r6, ip
 8000266:	fbb1 f4f7 	udiv	r4, r1, r7
 800026a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800026e:	fb07 1114 	mls	r1, r7, r4, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb04 f106 	mul.w	r1, r4, r6
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f104 30ff 	add.w	r0, r4, #4294967295
 8000286:	f080 8112 	bcs.w	80004ae <__udivmoddi4+0x27e>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 810f 	bls.w	80004ae <__udivmoddi4+0x27e>
 8000290:	3c02      	subs	r4, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a59      	subs	r1, r3, r1
 8000296:	fa1f f38e 	uxth.w	r3, lr
 800029a:	fbb1 f0f7 	udiv	r0, r1, r7
 800029e:	fb07 1110 	mls	r1, r7, r0, r1
 80002a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002a6:	fb00 f606 	mul.w	r6, r0, r6
 80002aa:	429e      	cmp	r6, r3
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x94>
 80002ae:	eb1c 0303 	adds.w	r3, ip, r3
 80002b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80002b6:	f080 80fc 	bcs.w	80004b2 <__udivmoddi4+0x282>
 80002ba:	429e      	cmp	r6, r3
 80002bc:	f240 80f9 	bls.w	80004b2 <__udivmoddi4+0x282>
 80002c0:	4463      	add	r3, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	1b9b      	subs	r3, r3, r6
 80002c6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa6>
 80002ce:	40d3      	lsrs	r3, r2
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xba>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb4>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa6>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x150>
 80002f2:	42a3      	cmp	r3, r4
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xcc>
 80002f6:	4290      	cmp	r0, r2
 80002f8:	f0c0 80f0 	bcc.w	80004dc <__udivmoddi4+0x2ac>
 80002fc:	1a86      	subs	r6, r0, r2
 80002fe:	eb64 0303 	sbc.w	r3, r4, r3
 8000302:	2001      	movs	r0, #1
 8000304:	2d00      	cmp	r5, #0
 8000306:	d0e6      	beq.n	80002d6 <__udivmoddi4+0xa6>
 8000308:	e9c5 6300 	strd	r6, r3, [r5]
 800030c:	e7e3      	b.n	80002d6 <__udivmoddi4+0xa6>
 800030e:	2a00      	cmp	r2, #0
 8000310:	f040 8090 	bne.w	8000434 <__udivmoddi4+0x204>
 8000314:	eba1 040c 	sub.w	r4, r1, ip
 8000318:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800031c:	fa1f f78c 	uxth.w	r7, ip
 8000320:	2101      	movs	r1, #1
 8000322:	fbb4 f6f8 	udiv	r6, r4, r8
 8000326:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032a:	fb08 4416 	mls	r4, r8, r6, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb07 f006 	mul.w	r0, r7, r6
 8000336:	4298      	cmp	r0, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x11c>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x11a>
 8000344:	4298      	cmp	r0, r3
 8000346:	f200 80cd 	bhi.w	80004e4 <__udivmoddi4+0x2b4>
 800034a:	4626      	mov	r6, r4
 800034c:	1a1c      	subs	r4, r3, r0
 800034e:	fa1f f38e 	uxth.w	r3, lr
 8000352:	fbb4 f0f8 	udiv	r0, r4, r8
 8000356:	fb08 4410 	mls	r4, r8, r0, r4
 800035a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800035e:	fb00 f707 	mul.w	r7, r0, r7
 8000362:	429f      	cmp	r7, r3
 8000364:	d908      	bls.n	8000378 <__udivmoddi4+0x148>
 8000366:	eb1c 0303 	adds.w	r3, ip, r3
 800036a:	f100 34ff 	add.w	r4, r0, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x146>
 8000370:	429f      	cmp	r7, r3
 8000372:	f200 80b0 	bhi.w	80004d6 <__udivmoddi4+0x2a6>
 8000376:	4620      	mov	r0, r4
 8000378:	1bdb      	subs	r3, r3, r7
 800037a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x9c>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000390:	fa04 f301 	lsl.w	r3, r4, r1
 8000394:	ea43 030c 	orr.w	r3, r3, ip
 8000398:	40f4      	lsrs	r4, r6
 800039a:	fa00 f801 	lsl.w	r8, r0, r1
 800039e:	0c38      	lsrs	r0, r7, #16
 80003a0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a4:	fbb4 fef0 	udiv	lr, r4, r0
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	fb00 441e 	mls	r4, r0, lr, r4
 80003b0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b4:	fb0e f90c 	mul.w	r9, lr, ip
 80003b8:	45a1      	cmp	r9, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d90a      	bls.n	80003d6 <__udivmoddi4+0x1a6>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003c6:	f080 8084 	bcs.w	80004d2 <__udivmoddi4+0x2a2>
 80003ca:	45a1      	cmp	r9, r4
 80003cc:	f240 8081 	bls.w	80004d2 <__udivmoddi4+0x2a2>
 80003d0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	eba4 0409 	sub.w	r4, r4, r9
 80003da:	fa1f f983 	uxth.w	r9, r3
 80003de:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e2:	fb00 4413 	mls	r4, r0, r3, r4
 80003e6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ea:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d907      	bls.n	8000402 <__udivmoddi4+0x1d2>
 80003f2:	193c      	adds	r4, r7, r4
 80003f4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003f8:	d267      	bcs.n	80004ca <__udivmoddi4+0x29a>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d965      	bls.n	80004ca <__udivmoddi4+0x29a>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000406:	fba0 9302 	umull	r9, r3, r0, r2
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	429c      	cmp	r4, r3
 8000410:	46ce      	mov	lr, r9
 8000412:	469c      	mov	ip, r3
 8000414:	d351      	bcc.n	80004ba <__udivmoddi4+0x28a>
 8000416:	d04e      	beq.n	80004b6 <__udivmoddi4+0x286>
 8000418:	b155      	cbz	r5, 8000430 <__udivmoddi4+0x200>
 800041a:	ebb8 030e 	subs.w	r3, r8, lr
 800041e:	eb64 040c 	sbc.w	r4, r4, ip
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	40cb      	lsrs	r3, r1
 8000428:	431e      	orrs	r6, r3
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c5 6400 	strd	r6, r4, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	e750      	b.n	80002d6 <__udivmoddi4+0xa6>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f103 	lsr.w	r1, r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa24 f303 	lsr.w	r3, r4, r3
 8000444:	4094      	lsls	r4, r2
 8000446:	430c      	orrs	r4, r1
 8000448:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800044c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000450:	fa1f f78c 	uxth.w	r7, ip
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3110 	mls	r1, r8, r0, r3
 800045c:	0c23      	lsrs	r3, r4, #16
 800045e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000462:	fb00 f107 	mul.w	r1, r0, r7
 8000466:	4299      	cmp	r1, r3
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x24c>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000472:	d22c      	bcs.n	80004ce <__udivmoddi4+0x29e>
 8000474:	4299      	cmp	r1, r3
 8000476:	d92a      	bls.n	80004ce <__udivmoddi4+0x29e>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb3 f1f8 	udiv	r1, r3, r8
 8000484:	fb08 3311 	mls	r3, r8, r1, r3
 8000488:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800048c:	fb01 f307 	mul.w	r3, r1, r7
 8000490:	42a3      	cmp	r3, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x276>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f101 36ff 	add.w	r6, r1, #4294967295
 800049c:	d213      	bcs.n	80004c6 <__udivmoddi4+0x296>
 800049e:	42a3      	cmp	r3, r4
 80004a0:	d911      	bls.n	80004c6 <__udivmoddi4+0x296>
 80004a2:	3902      	subs	r1, #2
 80004a4:	4464      	add	r4, ip
 80004a6:	1ae4      	subs	r4, r4, r3
 80004a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004ac:	e739      	b.n	8000322 <__udivmoddi4+0xf2>
 80004ae:	4604      	mov	r4, r0
 80004b0:	e6f0      	b.n	8000294 <__udivmoddi4+0x64>
 80004b2:	4608      	mov	r0, r1
 80004b4:	e706      	b.n	80002c4 <__udivmoddi4+0x94>
 80004b6:	45c8      	cmp	r8, r9
 80004b8:	d2ae      	bcs.n	8000418 <__udivmoddi4+0x1e8>
 80004ba:	ebb9 0e02 	subs.w	lr, r9, r2
 80004be:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c2:	3801      	subs	r0, #1
 80004c4:	e7a8      	b.n	8000418 <__udivmoddi4+0x1e8>
 80004c6:	4631      	mov	r1, r6
 80004c8:	e7ed      	b.n	80004a6 <__udivmoddi4+0x276>
 80004ca:	4603      	mov	r3, r0
 80004cc:	e799      	b.n	8000402 <__udivmoddi4+0x1d2>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e7d4      	b.n	800047c <__udivmoddi4+0x24c>
 80004d2:	46d6      	mov	lr, sl
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1a6>
 80004d6:	4463      	add	r3, ip
 80004d8:	3802      	subs	r0, #2
 80004da:	e74d      	b.n	8000378 <__udivmoddi4+0x148>
 80004dc:	4606      	mov	r6, r0
 80004de:	4623      	mov	r3, r4
 80004e0:	4608      	mov	r0, r1
 80004e2:	e70f      	b.n	8000304 <__udivmoddi4+0xd4>
 80004e4:	3e02      	subs	r6, #2
 80004e6:	4463      	add	r3, ip
 80004e8:	e730      	b.n	800034c <__udivmoddi4+0x11c>
 80004ea:	bf00      	nop

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004f4:	f001 f9f6 	bl	80018e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004f8:	f000 f87a 	bl	80005f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004fc:	f000 fb1e 	bl	8000b3c <MX_GPIO_Init>
	MX_CRC_Init();
 8000500:	f000 f8e0 	bl	80006c4 <MX_CRC_Init>
	MX_DMA2D_Init();
 8000504:	f000 f8f2 	bl	80006ec <MX_DMA2D_Init>
	MX_FMC_Init();
 8000508:	f000 fac8 	bl	8000a9c <MX_FMC_Init>
	MX_I2C3_Init();
 800050c:	f000 f920 	bl	8000750 <MX_I2C3_Init>
	MX_LTDC_Init();
 8000510:	f000 f95e 	bl	80007d0 <MX_LTDC_Init>
	MX_SPI5_Init();
 8000514:	f000 fa12 	bl	800093c <MX_SPI5_Init>
	MX_TIM1_Init();
 8000518:	f000 fa46 	bl	80009a8 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 800051c:	f000 fa94 	bl	8000a48 <MX_USART1_UART_Init>
	MX_SPI4_Init();
 8000520:	f000 f9d6 	bl	80008d0 <MX_SPI4_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000524:	f009 f944 	bl	80097b0 <osKernelInitialize>
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of motionSem */
	motionSemHandle = osSemaphoreNew(1, 0, &motionSem_attributes);
 8000528:	4a1e      	ldr	r2, [pc, #120]	@ (80005a4 <main+0xb4>)
 800052a:	2100      	movs	r1, #0
 800052c:	2001      	movs	r0, #1
 800052e:	f009 faf5 	bl	8009b1c <osSemaphoreNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a1c      	ldr	r2, [pc, #112]	@ (80005a8 <main+0xb8>)
 8000536:	6013      	str	r3, [r2, #0]

	/* creation of alertSem */
	alertSemHandle = osSemaphoreNew(3, 0, &alertSem_attributes);
 8000538:	4a1c      	ldr	r2, [pc, #112]	@ (80005ac <main+0xbc>)
 800053a:	2100      	movs	r1, #0
 800053c:	2003      	movs	r0, #3
 800053e:	f009 faed 	bl	8009b1c <osSemaphoreNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a1a      	ldr	r2, [pc, #104]	@ (80005b0 <main+0xc0>)
 8000546:	6013      	str	r3, [r2, #0]
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* creation of alertTimer */
	alertTimerHandle = osTimerNew(alertTimerCallback, osTimerOnce, NULL,
 8000548:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <main+0xc4>)
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	481a      	ldr	r0, [pc, #104]	@ (80005b8 <main+0xc8>)
 8000550:	f009 fa3a 	bl	80099c8 <osTimerNew>
 8000554:	4603      	mov	r3, r0
 8000556:	4a19      	ldr	r2, [pc, #100]	@ (80005bc <main+0xcc>)
 8000558:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 800055a:	4a19      	ldr	r2, [pc, #100]	@ (80005c0 <main+0xd0>)
 800055c:	2100      	movs	r1, #0
 800055e:	4819      	ldr	r0, [pc, #100]	@ (80005c4 <main+0xd4>)
 8000560:	f009 f970 	bl	8009844 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <main+0xd8>)
 8000568:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of motionTask */
	motionTaskHandle = osThreadNew(StartMotionTask, NULL,
 800056a:	4a18      	ldr	r2, [pc, #96]	@ (80005cc <main+0xdc>)
 800056c:	2100      	movs	r1, #0
 800056e:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <main+0xe0>)
 8000570:	f009 f968 	bl	8009844 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a17      	ldr	r2, [pc, #92]	@ (80005d4 <main+0xe4>)
 8000578:	6013      	str	r3, [r2, #0]
			&motionTask_attributes);

	/* creation of captureTask */
	captureTaskHandle = osThreadNew(StartCaptureTask, NULL,
 800057a:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <main+0xe8>)
 800057c:	2100      	movs	r1, #0
 800057e:	4817      	ldr	r0, [pc, #92]	@ (80005dc <main+0xec>)
 8000580:	f009 f960 	bl	8009844 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <main+0xf0>)
 8000588:	6013      	str	r3, [r2, #0]
			&captureTask_attributes);

	/* creation of alertTask */
	alertTaskHandle = osThreadNew(StartAlertTask, NULL, &alertTask_attributes);
 800058a:	4a16      	ldr	r2, [pc, #88]	@ (80005e4 <main+0xf4>)
 800058c:	2100      	movs	r1, #0
 800058e:	4816      	ldr	r0, [pc, #88]	@ (80005e8 <main+0xf8>)
 8000590:	f009 f958 	bl	8009844 <osThreadNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <main+0xfc>)
 8000598:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800059a:	f009 f92d 	bl	80097f8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800059e:	bf00      	nop
 80005a0:	e7fd      	b.n	800059e <main+0xae>
 80005a2:	bf00      	nop
 80005a4:	0800df28 	.word	0x0800df28
 80005a8:	200003e8 	.word	0x200003e8
 80005ac:	0800df38 	.word	0x0800df38
 80005b0:	200003ec 	.word	0x200003ec
 80005b4:	0800df18 	.word	0x0800df18
 80005b8:	08000f51 	.word	0x08000f51
 80005bc:	200003e4 	.word	0x200003e4
 80005c0:	0800de88 	.word	0x0800de88
 80005c4:	08000df1 	.word	0x08000df1
 80005c8:	200003d4 	.word	0x200003d4
 80005cc:	0800deac 	.word	0x0800deac
 80005d0:	08000e09 	.word	0x08000e09
 80005d4:	200003d8 	.word	0x200003d8
 80005d8:	0800ded0 	.word	0x0800ded0
 80005dc:	08000e99 	.word	0x08000e99
 80005e0:	200003dc 	.word	0x200003dc
 80005e4:	0800def4 	.word	0x0800def4
 80005e8:	08000eed 	.word	0x08000eed
 80005ec:	200003e0 	.word	0x200003e0

080005f0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	@ 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f00d faac 	bl	800db5c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <SystemClock_Config+0xcc>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <SystemClock_Config+0xcc>)
 800061e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000622:	6413      	str	r3, [r2, #64]	@ 0x40
 8000624:	4b25      	ldr	r3, [pc, #148]	@ (80006bc <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000630:	2300      	movs	r3, #0
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	4b22      	ldr	r3, [pc, #136]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800063c:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <SystemClock_Config+0xd0>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000642:	6013      	str	r3, [r2, #0]
 8000644:	4b1e      	ldr	r3, [pc, #120]	@ (80006c0 <SystemClock_Config+0xd0>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000650:	2301      	movs	r3, #1
 8000652:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800065e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8000664:	2304      	movs	r3, #4
 8000666:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000668:	2348      	movs	r3, #72	@ 0x48
 800066a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 8000670:	2303      	movs	r3, #3
 8000672:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f003 fdf5 	bl	8004268 <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x98>
		Error_Handler();
 8000684:	f000 fc90 	bl	8000fa8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068c:	2302      	movs	r3, #2
 800068e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000694:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2102      	movs	r1, #2
 80006a4:	4618      	mov	r0, r3
 80006a6:	f004 f857 	bl	8004758 <HAL_RCC_ClockConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0xc4>
		Error_Handler();
 80006b0:	f000 fc7a 	bl	8000fa8 <Error_Handler>
	}
}
 80006b4:	bf00      	nop
 80006b6:	3750      	adds	r7, #80	@ 0x50
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 80006c8:	4b06      	ldr	r3, [pc, #24]	@ (80006e4 <MX_CRC_Init+0x20>)
 80006ca:	4a07      	ldr	r2, [pc, #28]	@ (80006e8 <MX_CRC_Init+0x24>)
 80006cc:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 80006ce:	4805      	ldr	r0, [pc, #20]	@ (80006e4 <MX_CRC_Init+0x20>)
 80006d0:	f001 fa50 	bl	8001b74 <HAL_CRC_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_CRC_Init+0x1a>
		Error_Handler();
 80006da:	f000 fc65 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2000011c 	.word	0x2000011c
 80006e8:	40023000 	.word	0x40023000

080006ec <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80006f0:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 80006f2:	4a16      	ldr	r2, [pc, #88]	@ (800074c <MX_DMA2D_Init+0x60>)
 80006f4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80006f6:	4b14      	ldr	r3, [pc, #80]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80006fc:	4b12      	ldr	r3, [pc, #72]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 8000702:	4b11      	ldr	r3, [pc, #68]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800070e:	4b0e      	ldr	r3, [pc, #56]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000714:	4b0c      	ldr	r3, [pc, #48]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800071a:	4b0b      	ldr	r3, [pc, #44]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8000720:	4809      	ldr	r0, [pc, #36]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 8000722:	f001 fa43 	bl	8001bac <HAL_DMA2D_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_DMA2D_Init+0x44>
		Error_Handler();
 800072c:	f000 fc3c 	bl	8000fa8 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8000730:	2101      	movs	r1, #1
 8000732:	4805      	ldr	r0, [pc, #20]	@ (8000748 <MX_DMA2D_Init+0x5c>)
 8000734:	f001 fb94 	bl	8001e60 <HAL_DMA2D_ConfigLayer>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_DMA2D_Init+0x56>
		Error_Handler();
 800073e:	f000 fc33 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000124 	.word	0x20000124
 800074c:	4002b000 	.word	0x4002b000

08000750 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_I2C3_Init+0x74>)
 8000756:	4a1c      	ldr	r2, [pc, #112]	@ (80007c8 <MX_I2C3_Init+0x78>)
 8000758:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_I2C3_Init+0x74>)
 800075c:	4a1b      	ldr	r2, [pc, #108]	@ (80007cc <MX_I2C3_Init+0x7c>)
 800075e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000760:	4b18      	ldr	r3, [pc, #96]	@ (80007c4 <MX_I2C3_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8000766:	4b17      	ldr	r3, [pc, #92]	@ (80007c4 <MX_I2C3_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800076c:	4b15      	ldr	r3, [pc, #84]	@ (80007c4 <MX_I2C3_Init+0x74>)
 800076e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000772:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000774:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 800077a:	4b12      	ldr	r3, [pc, #72]	@ (80007c4 <MX_I2C3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000780:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000786:	4b0f      	ldr	r3, [pc, #60]	@ (80007c4 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800078c:	480d      	ldr	r0, [pc, #52]	@ (80007c4 <MX_I2C3_Init+0x74>)
 800078e:	f001 fdf1 	bl	8002374 <HAL_I2C_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_I2C3_Init+0x4c>
		Error_Handler();
 8000798:	f000 fc06 	bl	8000fa8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 800079c:	2100      	movs	r1, #0
 800079e:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <MX_I2C3_Init+0x74>)
 80007a0:	f001 ff2c 	bl	80025fc <HAL_I2CEx_ConfigAnalogFilter>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80007aa:	f000 fbfd 	bl	8000fa8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80007ae:	2100      	movs	r1, #0
 80007b0:	4804      	ldr	r0, [pc, #16]	@ (80007c4 <MX_I2C3_Init+0x74>)
 80007b2:	f001 ff5f 	bl	8002674 <HAL_I2CEx_ConfigDigitalFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x70>
		Error_Handler();
 80007bc:	f000 fbf4 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000164 	.word	0x20000164
 80007c8:	40005c00 	.word	0x40005c00
 80007cc:	000186a0 	.word	0x000186a0

080007d0 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	@ 0x38
 80007d4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2234      	movs	r2, #52	@ 0x34
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f00d f9bd 	bl	800db5c <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80007e2:	4b39      	ldr	r3, [pc, #228]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 80007e4:	4a39      	ldr	r2, [pc, #228]	@ (80008cc <MX_LTDC_Init+0xfc>)
 80007e6:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80007e8:	4b37      	ldr	r3, [pc, #220]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80007ee:	4b36      	ldr	r3, [pc, #216]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80007f4:	4b34      	ldr	r3, [pc, #208]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80007fa:	4b33      	ldr	r3, [pc, #204]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 9;
 8000800:	4b31      	ldr	r3, [pc, #196]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000802:	2209      	movs	r2, #9
 8000804:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 1;
 8000806:	4b30      	ldr	r3, [pc, #192]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000808:	2201      	movs	r2, #1
 800080a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 29;
 800080c:	4b2e      	ldr	r3, [pc, #184]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 800080e:	221d      	movs	r2, #29
 8000810:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 3;
 8000812:	4b2d      	ldr	r3, [pc, #180]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000814:	2203      	movs	r2, #3
 8000816:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 269;
 8000818:	4b2b      	ldr	r3, [pc, #172]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 800081a:	f240 120d 	movw	r2, #269	@ 0x10d
 800081e:	625a      	str	r2, [r3, #36]	@ 0x24
	hltdc.Init.AccumulatedActiveH = 323;
 8000820:	4b29      	ldr	r3, [pc, #164]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000822:	f240 1243 	movw	r2, #323	@ 0x143
 8000826:	629a      	str	r2, [r3, #40]	@ 0x28
	hltdc.Init.TotalWidth = 279;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 800082a:	f240 1217 	movw	r2, #279	@ 0x117
 800082e:	62da      	str	r2, [r3, #44]	@ 0x2c
	hltdc.Init.TotalHeigh = 327;
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000832:	f240 1247 	movw	r2, #327	@ 0x147
 8000836:	631a      	str	r2, [r3, #48]	@ 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8000838:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000840:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	hltdc.Init.Backcolor.Red = 0;
 8000848:	4b1f      	ldr	r3, [pc, #124]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 800084a:	2200      	movs	r2, #0
 800084c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 8000850:	481d      	ldr	r0, [pc, #116]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 8000852:	f001 ff4f 	bl	80026f4 <HAL_LTDC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LTDC_Init+0x90>
		Error_Handler();
 800085c:	f000 fba4 	bl	8000fa8 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 240;
 8000864:	23f0      	movs	r3, #240	@ 0xf0
 8000866:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 320;
 800086c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000870:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000872:	2302      	movs	r3, #2
 8000874:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8000876:	23ff      	movs	r3, #255	@ 0xff
 8000878:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800087e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000882:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000884:	2307      	movs	r3, #7
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.FBStartAdress = 0xD0000000;
 8000888:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.ImageWidth = 240;
 800088e:	23f0      	movs	r3, #240	@ 0xf0
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pLayerCfg.ImageHeight = 320;
 8000892:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000896:	633b      	str	r3, [r7, #48]	@ 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8000898:	2300      	movs	r3, #0
 800089a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	pLayerCfg.Backcolor.Green = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	pLayerCfg.Backcolor.Red = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_LTDC_Init+0xf8>)
 80008b2:	f002 f8b1 	bl	8002a18 <HAL_LTDC_ConfigLayer>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_LTDC_Init+0xf0>
		Error_Handler();
 80008bc:	f000 fb74 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3738      	adds	r7, #56	@ 0x38
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200001b8 	.word	0x200001b8
 80008cc:	40016800 	.word	0x40016800

080008d0 <MX_SPI4_Init>:
/**
 * @brief SPI4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI4_Init(void) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI4_Init 1 */

	/* USER CODE END SPI4_Init 1 */
	/* SPI4 parameter configuration*/
	hspi4.Instance = SPI4;
 80008d4:	4b17      	ldr	r3, [pc, #92]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008d6:	4a18      	ldr	r2, [pc, #96]	@ (8000938 <MX_SPI4_Init+0x68>)
 80008d8:	601a      	str	r2, [r3, #0]
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80008da:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80008e0:	605a      	str	r2, [r3, #4]
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80008e2:	4b14      	ldr	r3, [pc, #80]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	609a      	str	r2, [r3, #8]
	hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	60da      	str	r2, [r3, #12]
	hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b11      	ldr	r3, [pc, #68]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
	hspi4.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000934 <MX_SPI4_Init+0x64>)
 80008fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000900:	619a      	str	r2, [r3, #24]
	hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000902:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <MX_SPI4_Init+0x64>)
 8000904:	2200      	movs	r2, #0
 8000906:	61da      	str	r2, [r3, #28]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000908:	4b0a      	ldr	r3, [pc, #40]	@ (8000934 <MX_SPI4_Init+0x64>)
 800090a:	2200      	movs	r2, #0
 800090c:	621a      	str	r2, [r3, #32]
	hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800090e:	4b09      	ldr	r3, [pc, #36]	@ (8000934 <MX_SPI4_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000914:	4b07      	ldr	r3, [pc, #28]	@ (8000934 <MX_SPI4_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi4.Init.CRCPolynomial = 10;
 800091a:	4b06      	ldr	r3, [pc, #24]	@ (8000934 <MX_SPI4_Init+0x64>)
 800091c:	220a      	movs	r2, #10
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8000920:	4804      	ldr	r0, [pc, #16]	@ (8000934 <MX_SPI4_Init+0x64>)
 8000922:	f004 fb5f 	bl	8004fe4 <HAL_SPI_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_SPI4_Init+0x60>
		Error_Handler();
 800092c:	f000 fb3c 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI4_Init 2 */

	/* USER CODE END SPI4_Init 2 */

}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000260 	.word	0x20000260
 8000938:	40013400 	.word	0x40013400

0800093c <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 8000940:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000942:	4a18      	ldr	r2, [pc, #96]	@ (80009a4 <MX_SPI5_Init+0x68>)
 8000944:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 8000946:	4b16      	ldr	r3, [pc, #88]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000948:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800094c:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_SPI5_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800096c:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800096e:	4b0c      	ldr	r3, [pc, #48]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000970:	2218      	movs	r2, #24
 8000972:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000974:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800097a:	4b09      	ldr	r3, [pc, #36]	@ (80009a0 <MX_SPI5_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000980:	4b07      	ldr	r3, [pc, #28]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi5.Init.CRCPolynomial = 10;
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_SPI5_Init+0x64>)
 8000988:	220a      	movs	r2, #10
 800098a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_SPI5_Init+0x64>)
 800098e:	f004 fb29 	bl	8004fe4 <HAL_SPI_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_SPI5_Init+0x60>
		Error_Handler();
 8000998:	f000 fb06 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200002b8 	.word	0x200002b8
 80009a4:	40015000 	.word	0x40015000

080009a8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80009ae:	f107 0308 	add.w	r3, r7, #8
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009c6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a44 <MX_TIM1_Init+0x9c>)
 80009c8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009dc:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80009e4:	4b16      	ldr	r3, [pc, #88]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80009f0:	4813      	ldr	r0, [pc, #76]	@ (8000a40 <MX_TIM1_Init+0x98>)
 80009f2:	f004 fb80 	bl	80050f6 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x58>
		Error_Handler();
 80009fc:	f000 fad4 	bl	8000fa8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a04:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	480c      	ldr	r0, [pc, #48]	@ (8000a40 <MX_TIM1_Init+0x98>)
 8000a0e:	f004 fd21 	bl	8005454 <HAL_TIM_ConfigClockSource>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM1_Init+0x74>
		Error_Handler();
 8000a18:	f000 fac6 	bl	8000fa8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <MX_TIM1_Init+0x98>)
 8000a2a:	f004 ff49 	bl	80058c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 8000a34:	f000 fab8 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000310 	.word	0x20000310
 8000a44:	40010000 	.word	0x40010000

08000a48 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <MX_USART1_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a7e:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a80:	f004 ffae 	bl	80059e0 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a8a:	f000 fa8d 	bl	8000fa8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000358 	.word	0x20000358
 8000a98:	40011000 	.word	0x40011000

08000a9c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
 8000ab0:	615a      	str	r2, [r3, #20]
 8000ab2:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ab6:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <MX_FMC_Init+0x9c>)
 8000ab8:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000aba:	4b1e      	ldr	r3, [pc, #120]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000ac6:	4b1b      	ldr	r3, [pc, #108]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ace:	2210      	movs	r2, #16
 8000ad0:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ad4:	2240      	movs	r2, #64	@ 0x40
 8000ad6:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ada:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000ade:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ae0:	4b14      	ldr	r3, [pc, #80]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000ae8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000aec:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000aee:	4b11      	ldr	r3, [pc, #68]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	625a      	str	r2, [r3, #36]	@ 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000af6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000afa:	629a      	str	r2, [r3, #40]	@ 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 2;
 8000afc:	2302      	movs	r3, #2
 8000afe:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 7;
 8000b00:	2307      	movs	r3, #7
 8000b02:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 4;
 8000b04:	2304      	movs	r3, #4
 8000b06:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 7;
 8000b08:	2307      	movs	r3, #7
 8000b0a:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 3;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 2;
 8000b14:	2302      	movs	r3, #2
 8000b16:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <MX_FMC_Init+0x98>)
 8000b1e:	f004 fa2d 	bl	8004f7c <HAL_SDRAM_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_FMC_Init+0x90>
		Error_Handler();
 8000b28:	f000 fa3e 	bl	8000fa8 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	200003a0 	.word	0x200003a0
 8000b38:	a0000140 	.word	0xa0000140

08000b3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	@ 0x38
 8000b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
 8000b56:	4b86      	ldr	r3, [pc, #536]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a85      	ldr	r2, [pc, #532]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b5c:	f043 0310 	orr.w	r3, r3, #16
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b83      	ldr	r3, [pc, #524]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0310 	and.w	r3, r3, #16
 8000b6a:	623b      	str	r3, [r7, #32]
 8000b6c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
 8000b72:	4b7f      	ldr	r3, [pc, #508]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a7e      	ldr	r2, [pc, #504]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b78:	f043 0304 	orr.w	r3, r3, #4
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b7c      	ldr	r3, [pc, #496]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	61fb      	str	r3, [r7, #28]
 8000b88:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
 8000b8e:	4b78      	ldr	r3, [pc, #480]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a77      	ldr	r2, [pc, #476]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b94:	f043 0320 	orr.w	r3, r3, #32
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b75      	ldr	r3, [pc, #468]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	61bb      	str	r3, [r7, #24]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	4b71      	ldr	r3, [pc, #452]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a70      	ldr	r2, [pc, #448]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b6e      	ldr	r3, [pc, #440]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bca:	4a69      	ldr	r2, [pc, #420]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd2:	4b67      	ldr	r3, [pc, #412]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b63      	ldr	r3, [pc, #396]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	4a62      	ldr	r2, [pc, #392]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bee:	4b60      	ldr	r3, [pc, #384]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c02:	4a5b      	ldr	r2, [pc, #364]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c0a:	4b59      	ldr	r3, [pc, #356]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	4b55      	ldr	r3, [pc, #340]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	4a54      	ldr	r2, [pc, #336]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000c20:	f043 0308 	orr.w	r3, r3, #8
 8000c24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c26:	4b52      	ldr	r3, [pc, #328]	@ (8000d70 <MX_GPIO_Init+0x234>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	f003 0308 	and.w	r3, r3, #8
 8000c2e:	607b      	str	r3, [r7, #4]
 8000c30:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin,
 8000c32:	2200      	movs	r2, #0
 8000c34:	2116      	movs	r1, #22
 8000c36:	484f      	ldr	r0, [pc, #316]	@ (8000d74 <MX_GPIO_Init+0x238>)
 8000c38:	f001 fb50 	bl	80022dc <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2180      	movs	r1, #128	@ 0x80
 8000c40:	484d      	ldr	r0, [pc, #308]	@ (8000d78 <MX_GPIO_Init+0x23c>)
 8000c42:	f001 fb4b 	bl	80022dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, RDX_Pin | WRX_DCX_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c4c:	484b      	ldr	r0, [pc, #300]	@ (8000d7c <MX_GPIO_Init+0x240>)
 8000c4e:	f001 fb45 	bl	80022dc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LD3_Pin | LD4_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000c58:	4849      	ldr	r0, [pc, #292]	@ (8000d80 <MX_GPIO_Init+0x244>)
 8000c5a:	f001 fb3f 	bl	80022dc <HAL_GPIO_WritePin>

	/*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
	GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin | CSX_Pin | OTG_FS_PSO_Pin;
 8000c5e:	2316      	movs	r3, #22
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	483f      	ldr	r0, [pc, #252]	@ (8000d74 <MX_GPIO_Init+0x238>)
 8000c76:	f001 f985 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
	GPIO_InitStruct.Pin = B1_Pin | MEMS_INT1_Pin | MEMS_INT2_Pin | TP_INT1_Pin;
 8000c7a:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c7e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c80:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4839      	ldr	r0, [pc, #228]	@ (8000d78 <MX_GPIO_Init+0x23c>)
 8000c92:	f001 f977 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : ACP_RST_Pin */
	GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c96:	2380      	movs	r3, #128	@ 0x80
 8000c98:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000caa:	4619      	mov	r1, r3
 8000cac:	4832      	ldr	r0, [pc, #200]	@ (8000d78 <MX_GPIO_Init+0x23c>)
 8000cae:	f001 f969 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OC_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000cb2:	2320      	movs	r3, #32
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cb6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	482b      	ldr	r0, [pc, #172]	@ (8000d74 <MX_GPIO_Init+0x238>)
 8000cc8:	f001 f95c 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ccc:	2304      	movs	r3, #4
 8000cce:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4829      	ldr	r0, [pc, #164]	@ (8000d84 <MX_GPIO_Init+0x248>)
 8000ce0:	f001 f950 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : TE_Pin */
	GPIO_InitStruct.Pin = TE_Pin;
 8000ce4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ce8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4820      	ldr	r0, [pc, #128]	@ (8000d7c <MX_GPIO_Init+0x240>)
 8000cfa:	f001 f943 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
	GPIO_InitStruct.Pin = RDX_Pin | WRX_DCX_Pin;
 8000cfe:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d04:	2301      	movs	r3, #1
 8000d06:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d14:	4619      	mov	r1, r3
 8000d16:	4819      	ldr	r0, [pc, #100]	@ (8000d7c <MX_GPIO_Init+0x240>)
 8000d18:	f001 f934 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pin : PC8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d22:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d26:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d30:	4619      	mov	r1, r3
 8000d32:	4810      	ldr	r0, [pc, #64]	@ (8000d74 <MX_GPIO_Init+0x238>)
 8000d34:	f001 f926 	bl	8001f84 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD4_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD4_Pin;
 8000d38:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d3c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62bb      	str	r3, [r7, #40]	@ 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	633b      	str	r3, [r7, #48]	@ 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480b      	ldr	r0, [pc, #44]	@ (8000d80 <MX_GPIO_Init+0x244>)
 8000d52:	f001 f917 	bl	8001f84 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000d56:	2200      	movs	r2, #0
 8000d58:	2105      	movs	r1, #5
 8000d5a:	2017      	movs	r0, #23
 8000d5c:	f000 fee0 	bl	8001b20 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d60:	2017      	movs	r0, #23
 8000d62:	f000 fef9 	bl	8001b58 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d66:	bf00      	nop
 8000d68:	3738      	adds	r7, #56	@ 0x38
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020800 	.word	0x40020800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	40021800 	.word	0x40021800
 8000d84:	40020400 	.word	0x40020400

08000d88 <CDC_Print>:

/* USER CODE BEGIN 4 */
void CDC_Print(const char *msg) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	while (CDC_Transmit_HS((uint8_t*) msg, strlen(msg)) != USBD_OK) {
 8000d90:	e002      	b.n	8000d98 <CDC_Print+0x10>
		osDelay(1);
 8000d92:	2001      	movs	r0, #1
 8000d94:	f008 fde8 	bl	8009968 <osDelay>
	while (CDC_Transmit_HS((uint8_t*) msg, strlen(msg)) != USBD_OK) {
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff fa29 	bl	80001f0 <strlen>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4619      	mov	r1, r3
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f00c fa6d 	bl	800d284 <CDC_Transmit_HS>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d1f0      	bne.n	8000d92 <CDC_Print+0xa>
	}
}
 8000db0:	bf00      	nop
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	80fb      	strh	r3, [r7, #6]
	CDC_Print("\r\n\r\nInterrupt triggered!\r\n");
 8000dc6:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000dc8:	f7ff ffde 	bl	8000d88 <CDC_Print>

	if (GPIO_Pin == GPIO_PIN_8) {
 8000dcc:	88fb      	ldrh	r3, [r7, #6]
 8000dce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dd2:	d104      	bne.n	8000dde <HAL_GPIO_EXTI_Callback+0x22>
		osSemaphoreRelease(motionSemHandle);
 8000dd4:	4b05      	ldr	r3, [pc, #20]	@ (8000dec <HAL_GPIO_EXTI_Callback+0x30>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f008 ff7b 	bl	8009cd4 <osSemaphoreRelease>
	}
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	0800dc3c 	.word	0x0800dc3c
 8000dec:	200003e8 	.word	0x200003e8

08000df0 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
	/* init code for USB_DEVICE */
	MX_USB_DEVICE_Init();
 8000df8:	f00c f986 	bl	800d108 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8000dfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e00:	f008 fdb2 	bl	8009968 <osDelay>
 8000e04:	e7fa      	b.n	8000dfc <StartDefaultTask+0xc>
	...

08000e08 <StartMotionTask>:
 * @brief  Function implementing the motionTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMotionTask */
void StartMotionTask(void *argument) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartMotionTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(motionSemHandle, osWaitForever);
 8000e10:	4b18      	ldr	r3, [pc, #96]	@ (8000e74 <StartMotionTask+0x6c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f04f 31ff 	mov.w	r1, #4294967295
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f008 ff09 	bl	8009c30 <osSemaphoreAcquire>
		CDC_Print("Released motionSem (binary, count=1)\r\n\r\n");
 8000e1e:	4816      	ldr	r0, [pc, #88]	@ (8000e78 <StartMotionTask+0x70>)
 8000e20:	f7ff ffb2 	bl	8000d88 <CDC_Print>

		CDC_Print("Acquired motionSem (binary, count=0)\r\n");
 8000e24:	4815      	ldr	r0, [pc, #84]	@ (8000e7c <StartMotionTask+0x74>)
 8000e26:	f7ff ffaf 	bl	8000d88 <CDC_Print>
		CDC_Print("Started motionTask\r\n");
 8000e2a:	4815      	ldr	r0, [pc, #84]	@ (8000e80 <StartMotionTask+0x78>)
 8000e2c:	f7ff ffac 	bl	8000d88 <CDC_Print>

		CDC_Print("Interrupt timeout reset! (10 seconds)\r\n");
 8000e30:	4814      	ldr	r0, [pc, #80]	@ (8000e84 <StartMotionTask+0x7c>)
 8000e32:	f7ff ffa9 	bl	8000d88 <CDC_Print>
		osTimerStart(alertTimerHandle, 10000);
 8000e36:	4b14      	ldr	r3, [pc, #80]	@ (8000e88 <StartMotionTask+0x80>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 fe3e 	bl	8009ac0 <osTimerStart>

		CDC_Print("Released alertSem (counting, count=3)\r\n");
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <StartMotionTask+0x84>)
 8000e46:	f7ff ff9f 	bl	8000d88 <CDC_Print>
		CDC_Print("Ended motionTask\r\n\r\n");
 8000e4a:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <StartMotionTask+0x88>)
 8000e4c:	f7ff ff9c 	bl	8000d88 <CDC_Print>

		osSemaphoreRelease(alertSemHandle); // count = 1
 8000e50:	4b10      	ldr	r3, [pc, #64]	@ (8000e94 <StartMotionTask+0x8c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f008 ff3d 	bl	8009cd4 <osSemaphoreRelease>
		osSemaphoreRelease(alertSemHandle); // count = 2
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <StartMotionTask+0x8c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f008 ff38 	bl	8009cd4 <osSemaphoreRelease>
		osSemaphoreRelease(alertSemHandle); // count = 3
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <StartMotionTask+0x8c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f008 ff33 	bl	8009cd4 <osSemaphoreRelease>
		osSemaphoreAcquire(motionSemHandle, osWaitForever);
 8000e6e:	bf00      	nop
 8000e70:	e7ce      	b.n	8000e10 <StartMotionTask+0x8>
 8000e72:	bf00      	nop
 8000e74:	200003e8 	.word	0x200003e8
 8000e78:	0800dc58 	.word	0x0800dc58
 8000e7c:	0800dc84 	.word	0x0800dc84
 8000e80:	0800dcac 	.word	0x0800dcac
 8000e84:	0800dcc4 	.word	0x0800dcc4
 8000e88:	200003e4 	.word	0x200003e4
 8000e8c:	0800dcec 	.word	0x0800dcec
 8000e90:	0800dd14 	.word	0x0800dd14
 8000e94:	200003ec 	.word	0x200003ec

08000e98 <StartCaptureTask>:
 * @brief Function implementing the captureTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartCaptureTask */
void StartCaptureTask(void *argument) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartCaptureTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <StartCaptureTask+0x44>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f008 fec1 	bl	8009c30 <osSemaphoreAcquire>

		CDC_Print("Acquired alertSem (counting, count=1)\r\n");
 8000eae:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <StartCaptureTask+0x48>)
 8000eb0:	f7ff ff6a 	bl	8000d88 <CDC_Print>
		CDC_Print("Started captureTask\r\n\r\n");
 8000eb4:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <StartCaptureTask+0x4c>)
 8000eb6:	f7ff ff67 	bl	8000d88 <CDC_Print>

		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 8000eba:	e002      	b.n	8000ec2 <StartCaptureTask+0x2a>
			// capture image
			// display image
			osDelay(100);
 8000ebc:	2064      	movs	r0, #100	@ 0x64
 8000ebe:	f008 fd53 	bl	8009968 <osDelay>
		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <StartCaptureTask+0x44>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f008 ff48 	bl	8009d5c <osSemaphoreGetCount>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f4      	bne.n	8000ebc <StartCaptureTask+0x24>
		}

		CDC_Print("Ended captureTask\r\n");
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <StartCaptureTask+0x50>)
 8000ed4:	f7ff ff58 	bl	8000d88 <CDC_Print>
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 8000ed8:	e7e2      	b.n	8000ea0 <StartCaptureTask+0x8>
 8000eda:	bf00      	nop
 8000edc:	200003ec 	.word	0x200003ec
 8000ee0:	0800dd2c 	.word	0x0800dd2c
 8000ee4:	0800dd54 	.word	0x0800dd54
 8000ee8:	0800dd6c 	.word	0x0800dd6c

08000eec <StartAlertTask>:
 * @brief Function implementing the alertTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAlertTask */
void StartAlertTask(void *argument) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartAlertTask */
	/* Infinite loop */
	for (;;) {
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 8000ef4:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <StartAlertTask+0x50>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8000efc:	4618      	mov	r0, r3
 8000efe:	f008 fe97 	bl	8009c30 <osSemaphoreAcquire>

		CDC_Print("Acquired alertSem (counting, count=2)\r\n");
 8000f02:	480f      	ldr	r0, [pc, #60]	@ (8000f40 <StartAlertTask+0x54>)
 8000f04:	f7ff ff40 	bl	8000d88 <CDC_Print>
		CDC_Print("Started alertTask\r\n");
 8000f08:	480e      	ldr	r0, [pc, #56]	@ (8000f44 <StartAlertTask+0x58>)
 8000f0a:	f7ff ff3d 	bl	8000d88 <CDC_Print>

		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 8000f0e:	e008      	b.n	8000f22 <StartAlertTask+0x36>
			HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000f10:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <StartAlertTask+0x5c>)
 8000f16:	f001 f9fa 	bl	800230e <HAL_GPIO_TogglePin>
			osDelay(500);
 8000f1a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f1e:	f008 fd23 	bl	8009968 <osDelay>
		while (osSemaphoreGetCount(alertSemHandle) > 0) {
 8000f22:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <StartAlertTask+0x50>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f008 ff18 	bl	8009d5c <osSemaphoreGetCount>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1ee      	bne.n	8000f10 <StartAlertTask+0x24>
		}

		CDC_Print("Ended alertTask\r\n");
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <StartAlertTask+0x60>)
 8000f34:	f7ff ff28 	bl	8000d88 <CDC_Print>
		osSemaphoreAcquire(alertSemHandle, osWaitForever);
 8000f38:	e7dc      	b.n	8000ef4 <StartAlertTask+0x8>
 8000f3a:	bf00      	nop
 8000f3c:	200003ec 	.word	0x200003ec
 8000f40:	0800dd80 	.word	0x0800dd80
 8000f44:	0800dda8 	.word	0x0800dda8
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	0800ddbc 	.word	0x0800ddbc

08000f50 <alertTimerCallback>:
	}
	/* USER CODE END StartAlertTask */
}

/* alertTimerCallback function */
void alertTimerCallback(void *argument) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN alertTimerCallback */
	CDC_Print("Interrupt timeout expired! (10 seconds)\r\n");
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <alertTimerCallback+0x28>)
 8000f5a:	f7ff ff15 	bl	8000d88 <CDC_Print>
	CDC_Print("Acquired alertSem (counting, count=0)\r\n\r\n");
 8000f5e:	4807      	ldr	r0, [pc, #28]	@ (8000f7c <alertTimerCallback+0x2c>)
 8000f60:	f7ff ff12 	bl	8000d88 <CDC_Print>
	osSemaphoreAcquire(alertSemHandle, 0);
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <alertTimerCallback+0x30>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 fe60 	bl	8009c30 <osSemaphoreAcquire>
	/* USER CODE END alertTimerCallback */
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	0800ddd0 	.word	0x0800ddd0
 8000f7c:	0800ddfc 	.word	0x0800ddfc
 8000f80:	200003ec 	.word	0x200003ec

08000f84 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000f96:	f000 fcc7 	bl	8001928 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40001000 	.word	0x40001000

08000fa8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fac:	b672      	cpsid	i
}
 8000fae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <Error_Handler+0x8>

08000fb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	607b      	str	r3, [r7, #4]
 8000fbe:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_MspInit+0x54>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc2:	4a11      	ldr	r2, [pc, #68]	@ (8001008 <HAL_MspInit+0x54>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_MspInit+0x54>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	4b0b      	ldr	r3, [pc, #44]	@ (8001008 <HAL_MspInit+0x54>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <HAL_MspInit+0x54>)
 8000fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b08      	ldr	r3, [pc, #32]	@ (8001008 <HAL_MspInit+0x54>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	210f      	movs	r1, #15
 8000ff6:	f06f 0001 	mvn.w	r0, #1
 8000ffa:	f000 fd91 	bl	8001b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800

0800100c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_CRC_MspInit+0x3c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10d      	bne.n	800103a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_CRC_MspInit+0x40>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001026:	4a09      	ldr	r2, [pc, #36]	@ (800104c <HAL_CRC_MspInit+0x40>)
 8001028:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800102c:	6313      	str	r3, [r2, #48]	@ 0x30
 800102e:	4b07      	ldr	r3, [pc, #28]	@ (800104c <HAL_CRC_MspInit+0x40>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023000 	.word	0x40023000
 800104c:	40023800 	.word	0x40023800

08001050 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a0e      	ldr	r2, [pc, #56]	@ (8001098 <HAL_DMA2D_MspInit+0x48>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d115      	bne.n	800108e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b0d      	ldr	r3, [pc, #52]	@ (800109c <HAL_DMA2D_MspInit+0x4c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a0c      	ldr	r2, [pc, #48]	@ (800109c <HAL_DMA2D_MspInit+0x4c>)
 800106c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b0a      	ldr	r3, [pc, #40]	@ (800109c <HAL_DMA2D_MspInit+0x4c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2105      	movs	r1, #5
 8001082:	205a      	movs	r0, #90	@ 0x5a
 8001084:	f000 fd4c 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001088:	205a      	movs	r0, #90	@ 0x5a
 800108a:	f000 fd65 	bl	8001b58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	4002b000 	.word	0x4002b000
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08a      	sub	sp, #40	@ 0x28
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0314 	add.w	r3, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a29      	ldr	r2, [pc, #164]	@ (8001164 <HAL_I2C_MspInit+0xc4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d14b      	bne.n	800115a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a27      	ldr	r2, [pc, #156]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a20      	ldr	r2, [pc, #128]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80010fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001100:	2312      	movs	r3, #18
 8001102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800110c:	2304      	movs	r3, #4
 800110e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4815      	ldr	r0, [pc, #84]	@ (800116c <HAL_I2C_MspInit+0xcc>)
 8001118:	f000 ff34 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800111c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001122:	2312      	movs	r3, #18
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001126:	2301      	movs	r3, #1
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800112e:	2304      	movs	r3, #4
 8001130:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <HAL_I2C_MspInit+0xd0>)
 800113a:	f000 ff23 	bl	8001f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	4b09      	ldr	r3, [pc, #36]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001146:	4a08      	ldr	r2, [pc, #32]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 8001148:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800114c:	6413      	str	r3, [r2, #64]	@ 0x40
 800114e:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <HAL_I2C_MspInit+0xc8>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001156:	60bb      	str	r3, [r7, #8]
 8001158:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	@ 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40005c00 	.word	0x40005c00
 8001168:	40023800 	.word	0x40023800
 800116c:	40020800 	.word	0x40020800
 8001170:	40020000 	.word	0x40020000

08001174 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b09a      	sub	sp, #104	@ 0x68
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800118c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001190:	2230      	movs	r2, #48	@ 0x30
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00c fce1 	bl	800db5c <memset>
  if(hltdc->Instance==LTDC)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a85      	ldr	r2, [pc, #532]	@ (80013b4 <HAL_LTDC_MspInit+0x240>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	f040 8102 	bne.w	80013aa <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011a6:	2308      	movs	r3, #8
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011aa:	2332      	movs	r3, #50	@ 0x32
 80011ac:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011b2:	2300      	movs	r3, #0
 80011b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fd1e 	bl	8004bfc <HAL_RCCEx_PeriphCLKConfig>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80011c6:	f7ff feef 	bl	8000fa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
 80011ce:	4b7a      	ldr	r3, [pc, #488]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a79      	ldr	r2, [pc, #484]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 80011d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b77      	ldr	r3, [pc, #476]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011e2:	623b      	str	r3, [r7, #32]
 80011e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
 80011ea:	4b73      	ldr	r3, [pc, #460]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	4a72      	ldr	r2, [pc, #456]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 80011f0:	f043 0320 	orr.w	r3, r3, #32
 80011f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f6:	4b70      	ldr	r3, [pc, #448]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	4b6c      	ldr	r3, [pc, #432]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a6b      	ldr	r2, [pc, #428]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b69      	ldr	r3, [pc, #420]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	61bb      	str	r3, [r7, #24]
 800121c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
 8001222:	4b65      	ldr	r3, [pc, #404]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a64      	ldr	r2, [pc, #400]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b62      	ldr	r3, [pc, #392]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
 800123e:	4b5e      	ldr	r3, [pc, #376]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a5d      	ldr	r2, [pc, #372]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001244:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b5b      	ldr	r3, [pc, #364]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	4b57      	ldr	r3, [pc, #348]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a56      	ldr	r2, [pc, #344]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b54      	ldr	r3, [pc, #336]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	4b50      	ldr	r3, [pc, #320]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a4f      	ldr	r2, [pc, #316]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b4d      	ldr	r3, [pc, #308]	@ (80013b8 <HAL_LTDC_MspInit+0x244>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	60bb      	str	r3, [r7, #8]
 800128c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800128e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a8:	4619      	mov	r1, r3
 80012aa:	4844      	ldr	r0, [pc, #272]	@ (80013bc <HAL_LTDC_MspInit+0x248>)
 80012ac:	f000 fe6a 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012b0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c2:	230e      	movs	r3, #14
 80012c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ca:	4619      	mov	r1, r3
 80012cc:	483c      	ldr	r0, [pc, #240]	@ (80013c0 <HAL_LTDC_MspInit+0x24c>)
 80012ce:	f000 fe59 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80012d2:	2303      	movs	r3, #3
 80012d4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012e2:	2309      	movs	r3, #9
 80012e4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ea:	4619      	mov	r1, r3
 80012ec:	4835      	ldr	r0, [pc, #212]	@ (80013c4 <HAL_LTDC_MspInit+0x250>)
 80012ee:	f000 fe49 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012f2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001304:	230e      	movs	r3, #14
 8001306:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130c:	4619      	mov	r1, r3
 800130e:	482d      	ldr	r0, [pc, #180]	@ (80013c4 <HAL_LTDC_MspInit+0x250>)
 8001310:	f000 fe38 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001314:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001318:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001326:	230e      	movs	r3, #14
 8001328:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800132a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800132e:	4619      	mov	r1, r3
 8001330:	4825      	ldr	r0, [pc, #148]	@ (80013c8 <HAL_LTDC_MspInit+0x254>)
 8001332:	f000 fe27 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001336:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800133a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001348:	230e      	movs	r3, #14
 800134a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001350:	4619      	mov	r1, r3
 8001352:	481e      	ldr	r0, [pc, #120]	@ (80013cc <HAL_LTDC_MspInit+0x258>)
 8001354:	f000 fe16 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001358:	2348      	movs	r3, #72	@ 0x48
 800135a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	2302      	movs	r3, #2
 800135e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001368:	230e      	movs	r3, #14
 800136a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800136c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001370:	4619      	mov	r1, r3
 8001372:	4817      	ldr	r0, [pc, #92]	@ (80013d0 <HAL_LTDC_MspInit+0x25c>)
 8001374:	f000 fe06 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001378:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800137c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001386:	2300      	movs	r3, #0
 8001388:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800138a:	2309      	movs	r3, #9
 800138c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800138e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001392:	4619      	mov	r1, r3
 8001394:	480c      	ldr	r0, [pc, #48]	@ (80013c8 <HAL_LTDC_MspInit+0x254>)
 8001396:	f000 fdf5 	bl	8001f84 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2105      	movs	r1, #5
 800139e:	2058      	movs	r0, #88	@ 0x58
 80013a0:	f000 fbbe 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013a4:	2058      	movs	r0, #88	@ 0x58
 80013a6:	f000 fbd7 	bl	8001b58 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80013aa:	bf00      	nop
 80013ac:	3768      	adds	r7, #104	@ 0x68
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40016800 	.word	0x40016800
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40021400 	.word	0x40021400
 80013c0:	40020000 	.word	0x40020000
 80013c4:	40020400 	.word	0x40020400
 80013c8:	40021800 	.word	0x40021800
 80013cc:	40020800 	.word	0x40020800
 80013d0:	40020c00 	.word	0x40020c00

080013d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	@ 0x30
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 031c 	add.w	r3, r7, #28
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI4)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a32      	ldr	r2, [pc, #200]	@ (80014bc <HAL_SPI_MspInit+0xe8>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12c      	bne.n	8001450 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
 80013fa:	4b31      	ldr	r3, [pc, #196]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 80013fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fe:	4a30      	ldr	r2, [pc, #192]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001400:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001404:	6453      	str	r3, [r2, #68]	@ 0x44
 8001406:	4b2e      	ldr	r3, [pc, #184]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800140a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800140e:	61bb      	str	r3, [r7, #24]
 8001410:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	4b2a      	ldr	r3, [pc, #168]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a29      	ldr	r2, [pc, #164]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b27      	ldr	r3, [pc, #156]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800142e:	2364      	movs	r3, #100	@ 0x64
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143a:	2303      	movs	r3, #3
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800143e:	2305      	movs	r3, #5
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	481e      	ldr	r0, [pc, #120]	@ (80014c4 <HAL_SPI_MspInit+0xf0>)
 800144a:	f000 fd9b 	bl	8001f84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 800144e:	e031      	b.n	80014b4 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI5)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <HAL_SPI_MspInit+0xf4>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d12c      	bne.n	80014b4 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001462:	4a17      	ldr	r2, [pc, #92]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001464:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001468:	6453      	str	r3, [r2, #68]	@ 0x44
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800146e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001472:	613b      	str	r3, [r7, #16]
 8001474:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
 800147a:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	4a10      	ldr	r2, [pc, #64]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001480:	f043 0320 	orr.w	r3, r3, #32
 8001484:	6313      	str	r3, [r2, #48]	@ 0x30
 8001486:	4b0e      	ldr	r3, [pc, #56]	@ (80014c0 <HAL_SPI_MspInit+0xec>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800148a:	f003 0320 	and.w	r3, r3, #32
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001492:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001496:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a0:	2300      	movs	r3, #0
 80014a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80014a4:	2305      	movs	r3, #5
 80014a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	@ (80014cc <HAL_SPI_MspInit+0xf8>)
 80014b0:	f000 fd68 	bl	8001f84 <HAL_GPIO_Init>
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	@ 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40013400 	.word	0x40013400
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40015000 	.word	0x40015000
 80014cc:	40021400 	.word	0x40021400

080014d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a0b      	ldr	r2, [pc, #44]	@ (800150c <HAL_TIM_Base_MspInit+0x3c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d10d      	bne.n	80014fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001510 <HAL_TIM_Base_MspInit+0x40>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a09      	ldr	r2, [pc, #36]	@ (8001510 <HAL_TIM_Base_MspInit+0x40>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <HAL_TIM_Base_MspInit+0x40>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	40010000 	.word	0x40010000
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	@ 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a19      	ldr	r2, [pc, #100]	@ (8001598 <HAL_UART_MspInit+0x84>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12c      	bne.n	8001590 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <HAL_UART_MspInit+0x88>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	4a17      	ldr	r2, [pc, #92]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001540:	f043 0310 	orr.w	r3, r3, #16
 8001544:	6453      	str	r3, [r2, #68]	@ 0x44
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155a:	4a10      	ldr	r2, [pc, #64]	@ (800159c <HAL_UART_MspInit+0x88>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	@ 0x30
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_UART_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800156e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001572:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001580:	2307      	movs	r3, #7
 8001582:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	@ (80015a0 <HAL_UART_MspInit+0x8c>)
 800158c:	f000 fcfa 	bl	8001f84 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	@ 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40011000 	.word	0x40011000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
 80015b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015b8:	4b3b      	ldr	r3, [pc, #236]	@ (80016a8 <HAL_FMC_MspInit+0x104>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d16f      	bne.n	80016a0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015c0:	4b39      	ldr	r3, [pc, #228]	@ (80016a8 <HAL_FMC_MspInit+0x104>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <HAL_FMC_MspInit+0x108>)
 80015cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ce:	4a37      	ldr	r2, [pc, #220]	@ (80016ac <HAL_FMC_MspInit+0x108>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6393      	str	r3, [r2, #56]	@ 0x38
 80015d6:	4b35      	ldr	r3, [pc, #212]	@ (80016ac <HAL_FMC_MspInit+0x108>)
 80015d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	603b      	str	r3, [r7, #0]
 80015e0:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015e2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015e6:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e8:	2302      	movs	r3, #2
 80015ea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f0:	2303      	movs	r3, #3
 80015f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f4:	230c      	movs	r3, #12
 80015f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015f8:	1d3b      	adds	r3, r7, #4
 80015fa:	4619      	mov	r1, r3
 80015fc:	482c      	ldr	r0, [pc, #176]	@ (80016b0 <HAL_FMC_MspInit+0x10c>)
 80015fe:	f000 fcc1 	bl	8001f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001602:	2301      	movs	r3, #1
 8001604:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160e:	2303      	movs	r3, #3
 8001610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001612:	230c      	movs	r3, #12
 8001614:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4826      	ldr	r0, [pc, #152]	@ (80016b4 <HAL_FMC_MspInit+0x110>)
 800161c:	f000 fcb2 	bl	8001f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001620:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001624:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4619      	mov	r1, r3
 800163a:	481f      	ldr	r0, [pc, #124]	@ (80016b8 <HAL_FMC_MspInit+0x114>)
 800163c:	f000 fca2 	bl	8001f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001640:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001644:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164e:	2303      	movs	r3, #3
 8001650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001652:	230c      	movs	r3, #12
 8001654:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4619      	mov	r1, r3
 800165a:	4818      	ldr	r0, [pc, #96]	@ (80016bc <HAL_FMC_MspInit+0x118>)
 800165c:	f000 fc92 	bl	8001f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001660:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001664:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001666:	2302      	movs	r3, #2
 8001668:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001672:	230c      	movs	r3, #12
 8001674:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <HAL_FMC_MspInit+0x11c>)
 800167c:	f000 fc82 	bl	8001f84 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001680:	2360      	movs	r3, #96	@ 0x60
 8001682:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001690:	230c      	movs	r3, #12
 8001692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4619      	mov	r1, r3
 8001698:	480a      	ldr	r0, [pc, #40]	@ (80016c4 <HAL_FMC_MspInit+0x120>)
 800169a:	f000 fc73 	bl	8001f84 <HAL_GPIO_Init>
 800169e:	e000      	b.n	80016a2 <HAL_FMC_MspInit+0xfe>
    return;
 80016a0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	200003f0 	.word	0x200003f0
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40021400 	.word	0x40021400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40021800 	.word	0x40021800
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40020c00 	.word	0x40020c00
 80016c4:	40020400 	.word	0x40020400

080016c8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016d0:	f7ff ff68 	bl	80015a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08e      	sub	sp, #56	@ 0x38
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <HAL_InitTick+0xe4>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	4a32      	ldr	r2, [pc, #200]	@ (80017c0 <HAL_InitTick+0xe4>)
 80016f6:	f043 0310 	orr.w	r3, r3, #16
 80016fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fc:	4b30      	ldr	r3, [pc, #192]	@ (80017c0 <HAL_InitTick+0xe4>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001708:	f107 0210 	add.w	r2, r7, #16
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f003 fa40 	bl	8004b98 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800171e:	2b00      	cmp	r3, #0
 8001720:	d103      	bne.n	800172a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001722:	f003 fa11 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8001726:	6378      	str	r0, [r7, #52]	@ 0x34
 8001728:	e004      	b.n	8001734 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800172a:	f003 fa0d 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 800172e:	4603      	mov	r3, r0
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001736:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <HAL_InitTick+0xe8>)
 8001738:	fba2 2303 	umull	r2, r3, r2, r3
 800173c:	0c9b      	lsrs	r3, r3, #18
 800173e:	3b01      	subs	r3, #1
 8001740:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001742:	4b21      	ldr	r3, [pc, #132]	@ (80017c8 <HAL_InitTick+0xec>)
 8001744:	4a21      	ldr	r2, [pc, #132]	@ (80017cc <HAL_InitTick+0xf0>)
 8001746:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <HAL_InitTick+0xec>)
 800174a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800174e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001750:	4a1d      	ldr	r2, [pc, #116]	@ (80017c8 <HAL_InitTick+0xec>)
 8001752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001754:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001756:	4b1c      	ldr	r3, [pc, #112]	@ (80017c8 <HAL_InitTick+0xec>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175c:	4b1a      	ldr	r3, [pc, #104]	@ (80017c8 <HAL_InitTick+0xec>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001762:	4b19      	ldr	r3, [pc, #100]	@ (80017c8 <HAL_InitTick+0xec>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001768:	4817      	ldr	r0, [pc, #92]	@ (80017c8 <HAL_InitTick+0xec>)
 800176a:	f003 fcc4 	bl	80050f6 <HAL_TIM_Base_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001774:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11b      	bne.n	80017b4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800177c:	4812      	ldr	r0, [pc, #72]	@ (80017c8 <HAL_InitTick+0xec>)
 800177e:	f003 fd09 	bl	8005194 <HAL_TIM_Base_Start_IT>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001788:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800178c:	2b00      	cmp	r3, #0
 800178e:	d111      	bne.n	80017b4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001790:	2036      	movs	r0, #54	@ 0x36
 8001792:	f000 f9e1 	bl	8001b58 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2b0f      	cmp	r3, #15
 800179a:	d808      	bhi.n	80017ae <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800179c:	2200      	movs	r2, #0
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	2036      	movs	r0, #54	@ 0x36
 80017a2:	f000 f9bd 	bl	8001b20 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <HAL_InitTick+0xf4>)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	e002      	b.n	80017b4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3738      	adds	r7, #56	@ 0x38
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	200003f4 	.word	0x200003f4
 80017cc:	40001000 	.word	0x40001000
 80017d0:	20000004 	.word	0x20000004

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <NMI_Handler+0x4>

080017dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <MemManage_Handler+0x4>

080017ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800180e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001812:	f000 fd97 	bl	8002344 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001820:	4802      	ldr	r0, [pc, #8]	@ (800182c <TIM6_DAC_IRQHandler+0x10>)
 8001822:	f003 fd27 	bl	8005274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200003f4 	.word	0x200003f4

08001830 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <OTG_HS_IRQHandler+0x10>)
 8001836:	f001 fc08 	bl	800304a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20006270 	.word	0x20006270

08001844 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001848:	4802      	ldr	r0, [pc, #8]	@ (8001854 <LTDC_IRQHandler+0x10>)
 800184a:	f001 f823 	bl	8002894 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200001b8 	.word	0x200001b8

08001858 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800185c:	4802      	ldr	r0, [pc, #8]	@ (8001868 <DMA2D_IRQHandler+0x10>)
 800185e:	f000 f9ee 	bl	8001c3e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000124 	.word	0x20000124

0800186c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001870:	4b06      	ldr	r3, [pc, #24]	@ (800188c <SystemInit+0x20>)
 8001872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001876:	4a05      	ldr	r2, [pc, #20]	@ (800188c <SystemInit+0x20>)
 8001878:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800187c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001894:	f7ff ffea 	bl	800186c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001898:	480c      	ldr	r0, [pc, #48]	@ (80018cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800189a:	490d      	ldr	r1, [pc, #52]	@ (80018d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0a      	ldr	r2, [pc, #40]	@ (80018d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018b0:	4c0a      	ldr	r4, [pc, #40]	@ (80018dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018be:	f00c f955 	bl	800db6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7fe fe15 	bl	80004f0 <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d0:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 80018d4:	0800df70 	.word	0x0800df70
  ldr r2, =_sbss
 80018d8:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80018dc:	20006974 	.word	0x20006974

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>
	...

080018e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_Init+0x40>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001924 <HAL_Init+0x40>)
 80018ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001924 <HAL_Init+0x40>)
 80018fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001900:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a07      	ldr	r2, [pc, #28]	@ (8001924 <HAL_Init+0x40>)
 8001906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800190a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800190c:	2003      	movs	r0, #3
 800190e:	f000 f8fc 	bl	8001b0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001912:	2000      	movs	r0, #0
 8001914:	f7ff fee2 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001918:	f7ff fb4c 	bl	8000fb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40023c00 	.word	0x40023c00

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	@ (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000008 	.word	0x20000008
 800194c:	2000043c 	.word	0x2000043c

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	@ (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000043c 	.word	0x2000043c

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	@ (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000008 	.word	0x20000008

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	@ (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	@ (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	@ (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	@ (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	@ 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	@ 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b082      	sub	sp, #8
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff ff4c 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
 8001b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b32:	f7ff ff61 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	68b9      	ldr	r1, [r7, #8]
 8001b3c:	6978      	ldr	r0, [r7, #20]
 8001b3e:	f7ff ffb1 	bl	8001aa4 <NVIC_EncodePriority>
 8001b42:	4602      	mov	r2, r0
 8001b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b48:	4611      	mov	r1, r2
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff80 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff54 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001b6c:	bf00      	nop
 8001b6e:	3708      	adds	r7, #8
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e00e      	b.n	8001ba4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	795b      	ldrb	r3, [r3, #5]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff fa38 	bl	800100c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e03b      	b.n	8001c36 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff fa3c 	bl	8001050 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bfc:	f023 0107 	bic.w	r1, r3, #7
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d1      	ldr	r1, [r2, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	6812      	ldr	r2, [r2, #0]
 8001c22:	430b      	orrs	r3, r1
 8001c24:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f003 0301 	and.w	r3, r3, #1
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d026      	beq.n	8001cae <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d021      	beq.n	8001cae <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c78:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2204      	movs	r2, #4
 8001c92:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f003 0320 	and.w	r3, r3, #32
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d026      	beq.n	8001d06 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d021      	beq.n	8001d06 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cd0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2220      	movs	r2, #32
 8001cd8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cde:	f043 0202 	orr.w	r2, r3, #2
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2204      	movs	r2, #4
 8001cea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d003      	beq.n	8001d06 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d026      	beq.n	8001d5e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d021      	beq.n	8001d5e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d28:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2208      	movs	r2, #8
 8001d30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d36:	f043 0204 	orr.w	r2, r3, #4
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2204      	movs	r2, #4
 8001d42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d013      	beq.n	8001d90 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00e      	beq.n	8001d90 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d80:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2204      	movs	r2, #4
 8001d88:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f853 	bl	8001e36 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d024      	beq.n	8001de4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d01f      	beq.n	8001de4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001db2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2202      	movs	r2, #2
 8001dba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d01f      	beq.n	8001e2e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01a      	beq.n	8001e2e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e06:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2200      	movs	r2, #0
 8001e24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f80e 	bl	8001e4a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b083      	sub	sp, #12
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
	...

08001e60 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b087      	sub	sp, #28
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_DMA2D_ConfigLayer+0x20>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e079      	b.n	8001f74 <HAL_DMA2D_ConfigLayer+0x114>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	011b      	lsls	r3, r3, #4
 8001e94:	3318      	adds	r3, #24
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	4413      	add	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	041b      	lsls	r3, r3, #16
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001eaa:	4b35      	ldr	r3, [pc, #212]	@ (8001f80 <HAL_DMA2D_ConfigLayer+0x120>)
 8001eac:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b0a      	cmp	r3, #10
 8001eb4:	d003      	beq.n	8001ebe <HAL_DMA2D_ConfigLayer+0x5e>
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d107      	bne.n	8001ece <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	617b      	str	r3, [r7, #20]
 8001ecc:	e005      	b.n	8001eda <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	061b      	lsls	r3, r3, #24
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d120      	bne.n	8001f22 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	ea02 0103 	and.w	r1, r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	6812      	ldr	r2, [r2, #0]
 8001f00:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b0a      	cmp	r3, #10
 8001f08:	d003      	beq.n	8001f12 <HAL_DMA2D_ConfigLayer+0xb2>
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	d127      	bne.n	8001f62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f1e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f20:	e01f      	b.n	8001f62 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69da      	ldr	r2, [r3, #28]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	ea02 0103 	and.w	r1, r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	2b0a      	cmp	r3, #10
 8001f4a:	d003      	beq.n	8001f54 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b09      	cmp	r3, #9
 8001f52:	d106      	bne.n	8001f62 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f60:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001f72:	2300      	movs	r3, #0
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	ff03000f 	.word	0xff03000f

08001f84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b089      	sub	sp, #36	@ 0x24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	e177      	b.n	8002290 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	f040 8166 	bne.w	800228a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d005      	beq.n	8001fd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d130      	bne.n	8002038 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	2203      	movs	r2, #3
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800200c:	2201      	movs	r2, #1
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43db      	mvns	r3, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4013      	ands	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	091b      	lsrs	r3, r3, #4
 8002022:	f003 0201 	and.w	r2, r3, #1
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b03      	cmp	r3, #3
 8002042:	d017      	beq.n	8002074 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0303 	and.w	r3, r3, #3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d123      	bne.n	80020c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	08da      	lsrs	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3208      	adds	r2, #8
 8002088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	220f      	movs	r2, #15
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	08da      	lsrs	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3208      	adds	r2, #8
 80020c2:	69b9      	ldr	r1, [r7, #24]
 80020c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0203 	and.w	r2, r3, #3
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 80c0 	beq.w	800228a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b66      	ldr	r3, [pc, #408]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002112:	4a65      	ldr	r2, [pc, #404]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002118:	6453      	str	r3, [r2, #68]	@ 0x44
 800211a:	4b63      	ldr	r3, [pc, #396]	@ (80022a8 <HAL_GPIO_Init+0x324>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002126:	4a61      	ldr	r2, [pc, #388]	@ (80022ac <HAL_GPIO_Init+0x328>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	220f      	movs	r2, #15
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	@ (80022b0 <HAL_GPIO_Init+0x32c>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d037      	beq.n	80021c2 <HAL_GPIO_Init+0x23e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a57      	ldr	r2, [pc, #348]	@ (80022b4 <HAL_GPIO_Init+0x330>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d031      	beq.n	80021be <HAL_GPIO_Init+0x23a>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a56      	ldr	r2, [pc, #344]	@ (80022b8 <HAL_GPIO_Init+0x334>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02b      	beq.n	80021ba <HAL_GPIO_Init+0x236>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a55      	ldr	r2, [pc, #340]	@ (80022bc <HAL_GPIO_Init+0x338>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d025      	beq.n	80021b6 <HAL_GPIO_Init+0x232>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a54      	ldr	r2, [pc, #336]	@ (80022c0 <HAL_GPIO_Init+0x33c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d01f      	beq.n	80021b2 <HAL_GPIO_Init+0x22e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a53      	ldr	r2, [pc, #332]	@ (80022c4 <HAL_GPIO_Init+0x340>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d019      	beq.n	80021ae <HAL_GPIO_Init+0x22a>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a52      	ldr	r2, [pc, #328]	@ (80022c8 <HAL_GPIO_Init+0x344>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d013      	beq.n	80021aa <HAL_GPIO_Init+0x226>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a51      	ldr	r2, [pc, #324]	@ (80022cc <HAL_GPIO_Init+0x348>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d00d      	beq.n	80021a6 <HAL_GPIO_Init+0x222>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a50      	ldr	r2, [pc, #320]	@ (80022d0 <HAL_GPIO_Init+0x34c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d007      	beq.n	80021a2 <HAL_GPIO_Init+0x21e>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a4f      	ldr	r2, [pc, #316]	@ (80022d4 <HAL_GPIO_Init+0x350>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d101      	bne.n	800219e <HAL_GPIO_Init+0x21a>
 800219a:	2309      	movs	r3, #9
 800219c:	e012      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 800219e:	230a      	movs	r3, #10
 80021a0:	e010      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e00e      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021a6:	2307      	movs	r3, #7
 80021a8:	e00c      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021aa:	2306      	movs	r3, #6
 80021ac:	e00a      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021ae:	2305      	movs	r3, #5
 80021b0:	e008      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021b2:	2304      	movs	r3, #4
 80021b4:	e006      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021b6:	2303      	movs	r3, #3
 80021b8:	e004      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e002      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021be:	2301      	movs	r3, #1
 80021c0:	e000      	b.n	80021c4 <HAL_GPIO_Init+0x240>
 80021c2:	2300      	movs	r3, #0
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f002 0203 	and.w	r2, r2, #3
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	4093      	lsls	r3, r2
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d4:	4935      	ldr	r1, [pc, #212]	@ (80022ac <HAL_GPIO_Init+0x328>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	3302      	adds	r3, #2
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e2:	4b3d      	ldr	r3, [pc, #244]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021fe:	69ba      	ldr	r2, [r7, #24]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002206:	4a34      	ldr	r2, [pc, #208]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220c:	4b32      	ldr	r3, [pc, #200]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	43db      	mvns	r3, r3
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4013      	ands	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d003      	beq.n	8002230 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002230:	4a29      	ldr	r2, [pc, #164]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002236:	4b28      	ldr	r3, [pc, #160]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800225a:	4a1f      	ldr	r2, [pc, #124]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002260:	4b1d      	ldr	r3, [pc, #116]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002284:	4a14      	ldr	r2, [pc, #80]	@ (80022d8 <HAL_GPIO_Init+0x354>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	3301      	adds	r3, #1
 800228e:	61fb      	str	r3, [r7, #28]
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	f67f ae84 	bls.w	8001fa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002298:	bf00      	nop
 800229a:	bf00      	nop
 800229c:	3724      	adds	r7, #36	@ 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800
 80022b0:	40020000 	.word	0x40020000
 80022b4:	40020400 	.word	0x40020400
 80022b8:	40020800 	.word	0x40020800
 80022bc:	40020c00 	.word	0x40020c00
 80022c0:	40021000 	.word	0x40021000
 80022c4:	40021400 	.word	0x40021400
 80022c8:	40021800 	.word	0x40021800
 80022cc:	40021c00 	.word	0x40021c00
 80022d0:	40022000 	.word	0x40022000
 80022d4:	40022400 	.word	0x40022400
 80022d8:	40013c00 	.word	0x40013c00

080022dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	807b      	strh	r3, [r7, #2]
 80022e8:	4613      	mov	r3, r2
 80022ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022ec:	787b      	ldrb	r3, [r7, #1]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022f8:	e003      	b.n	8002302 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022fa:	887b      	ldrh	r3, [r7, #2]
 80022fc:	041a      	lsls	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	619a      	str	r2, [r3, #24]
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800230e:	b480      	push	{r7}
 8002310:	b085      	sub	sp, #20
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	460b      	mov	r3, r1
 8002318:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002320:	887a      	ldrh	r2, [r7, #2]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	4013      	ands	r3, r2
 8002326:	041a      	lsls	r2, r3, #16
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	43d9      	mvns	r1, r3
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	400b      	ands	r3, r1
 8002330:	431a      	orrs	r2, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	619a      	str	r2, [r3, #24]
}
 8002336:	bf00      	nop
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	4603      	mov	r3, r0
 800234c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800234e:	4b08      	ldr	r3, [pc, #32]	@ (8002370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	88fb      	ldrh	r3, [r7, #6]
 8002354:	4013      	ands	r3, r2
 8002356:	2b00      	cmp	r3, #0
 8002358:	d006      	beq.n	8002368 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800235a:	4a05      	ldr	r2, [pc, #20]	@ (8002370 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002360:	88fb      	ldrh	r3, [r7, #6]
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fd2a 	bl	8000dbc <HAL_GPIO_EXTI_Callback>
  }
}
 8002368:	bf00      	nop
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40013c00 	.word	0x40013c00

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e12b      	b.n	80025de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fe80 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	@ 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d8:	f002 fbb6 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a81      	ldr	r2, [pc, #516]	@ (80025e8 <HAL_I2C_Init+0x274>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d807      	bhi.n	80023f8 <HAL_I2C_Init+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a80      	ldr	r2, [pc, #512]	@ (80025ec <HAL_I2C_Init+0x278>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e006      	b.n	8002406 <HAL_I2C_Init+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a7d      	ldr	r2, [pc, #500]	@ (80025f0 <HAL_I2C_Init+0x27c>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0e7      	b.n	80025de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a78      	ldr	r2, [pc, #480]	@ (80025f4 <HAL_I2C_Init+0x280>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a6a      	ldr	r2, [pc, #424]	@ (80025e8 <HAL_I2C_Init+0x274>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d802      	bhi.n	8002448 <HAL_I2C_Init+0xd4>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	e009      	b.n	800245c <HAL_I2C_Init+0xe8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a69      	ldr	r2, [pc, #420]	@ (80025f8 <HAL_I2C_Init+0x284>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800246e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	495c      	ldr	r1, [pc, #368]	@ (80025e8 <HAL_I2C_Init+0x274>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d819      	bhi.n	80024b0 <HAL_I2C_Init+0x13c>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fbb1 f3f3 	udiv	r3, r1, r3
 800248a:	1c59      	adds	r1, r3, #1
 800248c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002490:	400b      	ands	r3, r1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_I2C_Init+0x138>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	1e59      	subs	r1, r3, #1
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024aa:	e051      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e04f      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d111      	bne.n	80024dc <HAL_I2C_Init+0x168>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	440b      	add	r3, r1
 80024c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ca:	3301      	adds	r3, #1
 80024cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e012      	b.n	8002502 <HAL_I2C_Init+0x18e>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_I2C_Init+0x196>
 8002506:	2301      	movs	r3, #1
 8002508:	e022      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10e      	bne.n	8002530 <HAL_I2C_Init+0x1bc>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	1e58      	subs	r0, r3, #1
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	440b      	add	r3, r1
 8002520:	fbb0 f3f3 	udiv	r3, r0, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800252a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800252e:	e00f      	b.n	8002550 <HAL_I2C_Init+0x1dc>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	0099      	lsls	r1, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	fbb0 f3f3 	udiv	r3, r0, r3
 8002546:	3301      	adds	r3, #1
 8002548:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002550:	6879      	ldr	r1, [r7, #4]
 8002552:	6809      	ldr	r1, [r1, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69da      	ldr	r2, [r3, #28]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800257e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	6911      	ldr	r1, [r2, #16]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68d2      	ldr	r2, [r2, #12]
 800258a:	4311      	orrs	r1, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	695a      	ldr	r2, [r3, #20]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2220      	movs	r2, #32
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3710      	adds	r7, #16
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	000186a0 	.word	0x000186a0
 80025ec:	001e847f 	.word	0x001e847f
 80025f0:	003d08ff 	.word	0x003d08ff
 80025f4:	431bde83 	.word	0x431bde83
 80025f8:	10624dd3 	.word	0x10624dd3

080025fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b20      	cmp	r3, #32
 8002610:	d129      	bne.n	8002666 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2224      	movs	r2, #36	@ 0x24
 8002616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0201 	bic.w	r2, r2, #1
 8002628:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0210 	bic.w	r2, r2, #16
 8002638:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	430a      	orrs	r2, r1
 8002648:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2220      	movs	r2, #32
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	e000      	b.n	8002668 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002666:	2302      	movs	r3, #2
  }
}
 8002668:	4618      	mov	r0, r3
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b20      	cmp	r3, #32
 800268c:	d12a      	bne.n	80026e4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2224      	movs	r2, #36	@ 0x24
 8002692:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0201 	bic.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80026ae:	89fb      	ldrh	r3, [r7, #14]
 80026b0:	f023 030f 	bic.w	r3, r3, #15
 80026b4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	89fb      	ldrh	r3, [r7, #14]
 80026bc:	4313      	orrs	r3, r2
 80026be:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	89fa      	ldrh	r2, [r7, #14]
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0201 	orr.w	r2, r2, #1
 80026d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80026e0:	2300      	movs	r3, #0
 80026e2:	e000      	b.n	80026e6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80026e4:	2302      	movs	r3, #2
  }
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
	...

080026f4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d101      	bne.n	8002706 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e0bf      	b.n	8002886 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d106      	bne.n	8002720 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7fe fd2a 	bl	8001174 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002736:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800274c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	430a      	orrs	r2, r1
 800275a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	6899      	ldr	r1, [r3, #8]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_LTDC_Init+0x19c>)
 8002768:	400b      	ands	r3, r1
 800276a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	695b      	ldr	r3, [r3, #20]
 8002770:	041b      	lsls	r3, r3, #16
 8002772:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	431a      	orrs	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68d9      	ldr	r1, [r3, #12]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b3e      	ldr	r3, [pc, #248]	@ (8002890 <HAL_LTDC_Init+0x19c>)
 8002796:	400b      	ands	r3, r1
 8002798:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68d9      	ldr	r1, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	431a      	orrs	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	4b33      	ldr	r3, [pc, #204]	@ (8002890 <HAL_LTDC_Init+0x19c>)
 80027c4:	400b      	ands	r3, r1
 80027c6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027cc:	041b      	lsls	r3, r3, #16
 80027ce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6919      	ldr	r1, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6959      	ldr	r1, [r3, #20]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	4b27      	ldr	r3, [pc, #156]	@ (8002890 <HAL_LTDC_Init+0x19c>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fa:	041b      	lsls	r3, r3, #16
 80027fc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6959      	ldr	r1, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002824:	041b      	lsls	r3, r3, #16
 8002826:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800283e:	68ba      	ldr	r2, [r7, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0206 	orr.w	r2, r2, #6
 8002862:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f042 0201 	orr.w	r2, r2, #1
 8002872:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	f000f800 	.word	0xf000f800

08002894 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028aa:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d023      	beq.n	80028fe <HAL_LTDC_IRQHandler+0x6a>
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	f003 0304 	and.w	r3, r3, #4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d01e      	beq.n	80028fe <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0204 	bic.w	r2, r2, #4
 80028ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2204      	movs	r2, #4
 80028d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2204      	movs	r2, #4
 80028ec:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f86f 	bl	80029dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d023      	beq.n	8002950 <HAL_LTDC_IRQHandler+0xbc>
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01e      	beq.n	8002950 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0202 	bic.w	r2, r2, #2
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2202      	movs	r2, #2
 8002928:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002930:	f043 0202 	orr.w	r2, r3, #2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2204      	movs	r2, #4
 800293e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f846 	bl	80029dc <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d01b      	beq.n	8002992 <HAL_LTDC_IRQHandler+0xfe>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	2201      	movs	r2, #1
 800297a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f82f 	bl	80029f0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_LTDC_IRQHandler+0x140>
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d016      	beq.n	80029d4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0208 	bic.w	r2, r2, #8
 80029b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2208      	movs	r2, #8
 80029bc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2201      	movs	r2, #1
 80029c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 f818 	bl	8002a04 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr

08002a04 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8002a0c:	bf00      	nop
 8002a0e:	370c      	adds	r7, #12
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr

08002a18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a18:	b5b0      	push	{r4, r5, r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_LTDC_ConfigLayer+0x1a>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e02c      	b.n	8002a8c <HAL_LTDC_ConfigLayer+0x74>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002a42:	68fa      	ldr	r2, [r7, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2134      	movs	r1, #52	@ 0x34
 8002a48:	fb01 f303 	mul.w	r3, r1, r3
 8002a4c:	4413      	add	r3, r2
 8002a4e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f811 	bl	8002a94 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2201      	movs	r2, #1
 8002a78:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bdb0      	pop	{r4, r5, r7, pc}

08002a94 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	0c1b      	lsrs	r3, r3, #16
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	4413      	add	r3, r2
 8002ab2:	041b      	lsls	r3, r3, #16
 8002ab4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	01db      	lsls	r3, r3, #7
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3384      	adds	r3, #132	@ 0x84
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4611      	mov	r1, r2
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	01d2      	lsls	r2, r2, #7
 8002ad0:	440a      	add	r2, r1
 8002ad2:	3284      	adds	r2, #132	@ 0x84
 8002ad4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ad8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002aea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002aec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4619      	mov	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	01db      	lsls	r3, r3, #7
 8002af8:	440b      	add	r3, r1
 8002afa:	3384      	adds	r3, #132	@ 0x84
 8002afc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002b02:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b12:	4413      	add	r3, r2
 8002b14:	041b      	lsls	r3, r3, #16
 8002b16:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	01db      	lsls	r3, r3, #7
 8002b22:	4413      	add	r3, r2
 8002b24:	3384      	adds	r3, #132	@ 0x84
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	4611      	mov	r1, r2
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	01d2      	lsls	r2, r2, #7
 8002b32:	440a      	add	r2, r1
 8002b34:	3284      	adds	r2, #132	@ 0x84
 8002b36:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002b3a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4a:	4413      	add	r3, r2
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4619      	mov	r1, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	01db      	lsls	r3, r3, #7
 8002b58:	440b      	add	r3, r1
 8002b5a:	3384      	adds	r3, #132	@ 0x84
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	01db      	lsls	r3, r3, #7
 8002b6e:	4413      	add	r3, r2
 8002b70:	3384      	adds	r3, #132	@ 0x84
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	01d2      	lsls	r2, r2, #7
 8002b7e:	440a      	add	r2, r1
 8002b80:	3284      	adds	r2, #132	@ 0x84
 8002b82:	f023 0307 	bic.w	r3, r3, #7
 8002b86:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	01db      	lsls	r3, r3, #7
 8002b92:	4413      	add	r3, r2
 8002b94:	3384      	adds	r3, #132	@ 0x84
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002bae:	041b      	lsls	r3, r3, #16
 8002bb0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	061b      	lsls	r3, r3, #24
 8002bb8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	01db      	lsls	r3, r3, #7
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3384      	adds	r3, #132	@ 0x84
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3384      	adds	r3, #132	@ 0x84
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2300      	movs	r3, #0
 8002bdc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002be4:	461a      	mov	r2, r3
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	431a      	orrs	r2, r3
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	01db      	lsls	r3, r3, #7
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3384      	adds	r3, #132	@ 0x84
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	461a      	mov	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	01db      	lsls	r3, r3, #7
 8002c0e:	4413      	add	r3, r2
 8002c10:	3384      	adds	r3, #132	@ 0x84
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	68fa      	ldr	r2, [r7, #12]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	01d2      	lsls	r2, r2, #7
 8002c1e:	440a      	add	r2, r1
 8002c20:	3284      	adds	r2, #132	@ 0x84
 8002c22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002c26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	01db      	lsls	r3, r3, #7
 8002c32:	4413      	add	r3, r2
 8002c34:	3384      	adds	r3, #132	@ 0x84
 8002c36:	461a      	mov	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	01db      	lsls	r3, r3, #7
 8002c48:	4413      	add	r3, r2
 8002c4a:	3384      	adds	r3, #132	@ 0x84
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6812      	ldr	r2, [r2, #0]
 8002c52:	4611      	mov	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	01d2      	lsls	r2, r2, #7
 8002c58:	440a      	add	r2, r1
 8002c5a:	3284      	adds	r2, #132	@ 0x84
 8002c5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c60:	f023 0307 	bic.w	r3, r3, #7
 8002c64:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	69da      	ldr	r2, [r3, #28]
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	68f9      	ldr	r1, [r7, #12]
 8002c70:	6809      	ldr	r1, [r1, #0]
 8002c72:	4608      	mov	r0, r1
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	01c9      	lsls	r1, r1, #7
 8002c78:	4401      	add	r1, r0
 8002c7a:	3184      	adds	r1, #132	@ 0x84
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	461a      	mov	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	01db      	lsls	r3, r3, #7
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3384      	adds	r3, #132	@ 0x84
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	01db      	lsls	r3, r3, #7
 8002c9a:	4413      	add	r3, r2
 8002c9c:	3384      	adds	r3, #132	@ 0x84
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	01db      	lsls	r3, r3, #7
 8002cae:	4413      	add	r3, r2
 8002cb0:	3384      	adds	r3, #132	@ 0x84
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002cc2:	2304      	movs	r3, #4
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	e01b      	b.n	8002d00 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d102      	bne.n	8002cd6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	e014      	b.n	8002d00 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d00b      	beq.n	8002cf6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d007      	beq.n	8002cf6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002cea:	2b03      	cmp	r3, #3
 8002cec:	d003      	beq.n	8002cf6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002cf2:	2b07      	cmp	r3, #7
 8002cf4:	d102      	bne.n	8002cfc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	e001      	b.n	8002d00 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	01db      	lsls	r3, r3, #7
 8002d0a:	4413      	add	r3, r2
 8002d0c:	3384      	adds	r3, #132	@ 0x84
 8002d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	6812      	ldr	r2, [r2, #0]
 8002d14:	4611      	mov	r1, r2
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	01d2      	lsls	r2, r2, #7
 8002d1a:	440a      	add	r2, r1
 8002d1c:	3284      	adds	r2, #132	@ 0x84
 8002d1e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002d22:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	fb02 f303 	mul.w	r3, r2, r3
 8002d2e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	1acb      	subs	r3, r1, r3
 8002d3a:	69f9      	ldr	r1, [r7, #28]
 8002d3c:	fb01 f303 	mul.w	r3, r1, r3
 8002d40:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002d42:	68f9      	ldr	r1, [r7, #12]
 8002d44:	6809      	ldr	r1, [r1, #0]
 8002d46:	4608      	mov	r0, r1
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	01c9      	lsls	r1, r1, #7
 8002d4c:	4401      	add	r1, r0
 8002d4e:	3184      	adds	r1, #132	@ 0x84
 8002d50:	4313      	orrs	r3, r2
 8002d52:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	01db      	lsls	r3, r3, #7
 8002d5e:	4413      	add	r3, r2
 8002d60:	3384      	adds	r3, #132	@ 0x84
 8002d62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	01d2      	lsls	r2, r2, #7
 8002d6e:	440a      	add	r2, r1
 8002d70:	3284      	adds	r2, #132	@ 0x84
 8002d72:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002d76:	f023 0307 	bic.w	r3, r3, #7
 8002d7a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	01db      	lsls	r3, r3, #7
 8002d86:	4413      	add	r3, r2
 8002d88:	3384      	adds	r3, #132	@ 0x84
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3384      	adds	r3, #132	@ 0x84
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	4611      	mov	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	01d2      	lsls	r2, r2, #7
 8002dac:	440a      	add	r2, r1
 8002dae:	3284      	adds	r2, #132	@ 0x84
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	6013      	str	r3, [r2, #0]
}
 8002db6:	bf00      	nop
 8002db8:	3724      	adds	r7, #36	@ 0x24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b086      	sub	sp, #24
 8002dc6:	af02      	add	r7, sp, #8
 8002dc8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e101      	b.n	8002fd8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d106      	bne.n	8002df4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f00a fb90 	bl	800d514 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2203      	movs	r2, #3
 8002df8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e02:	d102      	bne.n	8002e0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f003 fa87 	bl	8006322 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6818      	ldr	r0, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7c1a      	ldrb	r2, [r3, #16]
 8002e1c:	f88d 2000 	strb.w	r2, [sp]
 8002e20:	3304      	adds	r3, #4
 8002e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e24:	f003 f966 	bl	80060f4 <USB_CoreInit>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2202      	movs	r2, #2
 8002e32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e0ce      	b.n	8002fd8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2100      	movs	r1, #0
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fa7f 	bl	8006344 <USB_SetCurrentMode>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0bf      	b.n	8002fd8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e58:	2300      	movs	r3, #0
 8002e5a:	73fb      	strb	r3, [r7, #15]
 8002e5c:	e04a      	b.n	8002ef4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3315      	adds	r3, #21
 8002e6e:	2201      	movs	r2, #1
 8002e70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e72:	7bfa      	ldrb	r2, [r7, #15]
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3314      	adds	r3, #20
 8002e82:	7bfa      	ldrb	r2, [r7, #15]
 8002e84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e86:	7bfa      	ldrb	r2, [r7, #15]
 8002e88:	7bfb      	ldrb	r3, [r7, #15]
 8002e8a:	b298      	uxth	r0, r3
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	00db      	lsls	r3, r3, #3
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	332e      	adds	r3, #46	@ 0x2e
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3318      	adds	r3, #24
 8002eae:	2200      	movs	r2, #0
 8002eb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002eb2:	7bfa      	ldrb	r2, [r7, #15]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4413      	add	r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	331c      	adds	r3, #28
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ec6:	7bfa      	ldrb	r2, [r7, #15]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	00db      	lsls	r3, r3, #3
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3320      	adds	r3, #32
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002eda:	7bfa      	ldrb	r2, [r7, #15]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3324      	adds	r3, #36	@ 0x24
 8002eea:	2200      	movs	r2, #0
 8002eec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	791b      	ldrb	r3, [r3, #4]
 8002ef8:	7bfa      	ldrb	r2, [r7, #15]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3af      	bcc.n	8002e5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002efe:	2300      	movs	r3, #0
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	e044      	b.n	8002f8e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f04:	7bfa      	ldrb	r2, [r7, #15]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f1a:	7bfa      	ldrb	r2, [r7, #15]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	00db      	lsls	r3, r3, #3
 8002f22:	4413      	add	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002f2c:	7bfa      	ldrb	r2, [r7, #15]
 8002f2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002f46:	7bfa      	ldrb	r2, [r7, #15]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002f5c:	7bfa      	ldrb	r2, [r7, #15]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002f6e:	2200      	movs	r2, #0
 8002f70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f72:	7bfa      	ldrb	r2, [r7, #15]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f88:	7bfb      	ldrb	r3, [r7, #15]
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	791b      	ldrb	r3, [r3, #4]
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d3b5      	bcc.n	8002f04 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6818      	ldr	r0, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	7c1a      	ldrb	r2, [r3, #16]
 8002fa0:	f88d 2000 	strb.w	r2, [sp]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fa8:	f003 fa18 	bl	80063dc <USB_DevInit>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e00c      	b.n	8002fd8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f004 fa62 	bl	800749a <USB_DevDisconnect>

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_PCD_Start+0x1c>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e022      	b.n	8003042 <HAL_PCD_Start+0x62>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003014:	2b01      	cmp	r3, #1
 8003016:	d105      	bne.n	8003024 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800301c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f003 f969 	bl	8006300 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f004 fa10 	bl	8007458 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b08d      	sub	sp, #52	@ 0x34
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f004 face 	bl	8007602 <USB_GetMode>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	f040 848c 	bne.w	8003986 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fa32 	bl	80074dc <USB_ReadInterrupts>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 8482 	beq.w	8003984 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4618      	mov	r0, r3
 800309a:	f004 fa1f 	bl	80074dc <USB_ReadInterrupts>
 800309e:	4603      	mov	r3, r0
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d107      	bne.n	80030b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	695a      	ldr	r2, [r3, #20]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f002 0202 	and.w	r2, r2, #2
 80030b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f004 fa0d 	bl	80074dc <USB_ReadInterrupts>
 80030c2:	4603      	mov	r3, r0
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d161      	bne.n	8003190 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	699a      	ldr	r2, [r3, #24]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0210 	bic.w	r2, r2, #16
 80030da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f003 020f 	and.w	r2, r3, #15
 80030e8:	4613      	mov	r3, r2
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4413      	add	r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	3304      	adds	r3, #4
 80030fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	0c5b      	lsrs	r3, r3, #17
 8003100:	f003 030f 	and.w	r3, r3, #15
 8003104:	2b02      	cmp	r3, #2
 8003106:	d124      	bne.n	8003152 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800310e:	4013      	ands	r3, r2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d035      	beq.n	8003180 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	091b      	lsrs	r3, r3, #4
 800311c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800311e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003122:	b29b      	uxth	r3, r3
 8003124:	461a      	mov	r2, r3
 8003126:	6a38      	ldr	r0, [r7, #32]
 8003128:	f004 f844 	bl	80071b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003138:	441a      	add	r2, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	091b      	lsrs	r3, r3, #4
 8003146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800314a:	441a      	add	r2, r3
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	615a      	str	r2, [r3, #20]
 8003150:	e016      	b.n	8003180 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	0c5b      	lsrs	r3, r3, #17
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	2b06      	cmp	r3, #6
 800315c:	d110      	bne.n	8003180 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003164:	2208      	movs	r2, #8
 8003166:	4619      	mov	r1, r3
 8003168:	6a38      	ldr	r0, [r7, #32]
 800316a:	f004 f823 	bl	80071b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	695a      	ldr	r2, [r3, #20]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	091b      	lsrs	r3, r3, #4
 8003176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800317a:	441a      	add	r2, r3
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0210 	orr.w	r2, r2, #16
 800318e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f004 f9a1 	bl	80074dc <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031a4:	f040 80a7 	bne.w	80032f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f004 f9a6 	bl	8007502 <USB_ReadDevAllOutEpInterrupt>
 80031b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80031b8:	e099      	b.n	80032ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80031ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031bc:	f003 0301 	and.w	r3, r3, #1
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 808e 	beq.w	80032e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	4611      	mov	r1, r2
 80031d0:	4618      	mov	r0, r3
 80031d2:	f004 f9ca 	bl	800756a <USB_ReadDevOutEPInterrupt>
 80031d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80031e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031ee:	461a      	mov	r2, r3
 80031f0:	2301      	movs	r3, #1
 80031f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80031f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fea4 	bl	8003f44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	015a      	lsls	r2, r3, #5
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003212:	461a      	mov	r2, r3
 8003214:	2308      	movs	r3, #8
 8003216:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003218:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 ff7a 	bl	8004114 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800322a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322c:	015a      	lsls	r2, r3, #5
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	4413      	add	r3, r2
 8003232:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003236:	461a      	mov	r2, r3
 8003238:	2310      	movs	r3, #16
 800323a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d030      	beq.n	80032a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324e:	2b80      	cmp	r3, #128	@ 0x80
 8003250:	d109      	bne.n	8003266 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	69fa      	ldr	r2, [r7, #28]
 800325c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003260:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003264:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003268:	4613      	mov	r3, r2
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	4413      	add	r3, r2
 8003278:	3304      	adds	r3, #4
 800327a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d108      	bne.n	8003296 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2200      	movs	r2, #0
 8003288:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800328a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328c:	b2db      	uxtb	r3, r3
 800328e:	4619      	mov	r1, r3
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f00a fa4f 	bl	800d734 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	015a      	lsls	r2, r3, #5
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	4413      	add	r3, r2
 800329e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032a2:	461a      	mov	r2, r3
 80032a4:	2302      	movs	r3, #2
 80032a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d008      	beq.n	80032c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	015a      	lsls	r2, r3, #5
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	4413      	add	r3, r2
 80032ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032be:	461a      	mov	r2, r3
 80032c0:	2320      	movs	r3, #32
 80032c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d009      	beq.n	80032e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	015a      	lsls	r2, r3, #5
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	4413      	add	r3, r2
 80032d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80032da:	461a      	mov	r2, r3
 80032dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80032e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	3301      	adds	r3, #1
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80032e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ea:	085b      	lsrs	r3, r3, #1
 80032ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80032ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f47f af62 	bne.w	80031ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f8ee 	bl	80074dc <USB_ReadInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003306:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800330a:	f040 80db 	bne.w	80034c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f004 f90f 	bl	8007536 <USB_ReadDevAllInEpInterrupt>
 8003318:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800331e:	e0cd      	b.n	80034bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80c2 	beq.w	80034b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003332:	b2d2      	uxtb	r2, r2
 8003334:	4611      	mov	r1, r2
 8003336:	4618      	mov	r0, r3
 8003338:	f004 f935 	bl	80075a6 <USB_ReadDevInEPInterrupt>
 800333c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d057      	beq.n	80033f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	f003 030f 	and.w	r3, r3, #15
 800334e:	2201      	movs	r2, #1
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800335c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	43db      	mvns	r3, r3
 8003362:	69f9      	ldr	r1, [r7, #28]
 8003364:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003368:	4013      	ands	r3, r2
 800336a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800336c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003378:	461a      	mov	r2, r3
 800337a:	2301      	movs	r3, #1
 800337c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	799b      	ldrb	r3, [r3, #6]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d132      	bne.n	80033ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	3320      	adds	r3, #32
 8003396:	6819      	ldr	r1, [r3, #0]
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4403      	add	r3, r0
 80033a6:	331c      	adds	r3, #28
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4419      	add	r1, r3
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033b0:	4613      	mov	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4403      	add	r3, r0
 80033ba:	3320      	adds	r3, #32
 80033bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80033be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d113      	bne.n	80033ec <HAL_PCD_IRQHandler+0x3a2>
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3324      	adds	r3, #36	@ 0x24
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80033e4:	461a      	mov	r2, r3
 80033e6:	2101      	movs	r1, #1
 80033e8:	f004 f93c 	bl	8007664 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	4619      	mov	r1, r3
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f00a f919 	bl	800d62a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	4413      	add	r3, r2
 800340a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800340e:	461a      	mov	r2, r3
 8003410:	2308      	movs	r3, #8
 8003412:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b00      	cmp	r3, #0
 800341c:	d008      	beq.n	8003430 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800341e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800342a:	461a      	mov	r2, r3
 800342c:	2310      	movs	r3, #16
 800342e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d008      	beq.n	800344c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800343a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800343c:	015a      	lsls	r2, r3, #5
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	4413      	add	r3, r2
 8003442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003446:	461a      	mov	r2, r3
 8003448:	2340      	movs	r3, #64	@ 0x40
 800344a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d023      	beq.n	800349e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003456:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003458:	6a38      	ldr	r0, [r7, #32]
 800345a:	f003 f923 	bl	80066a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800345e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003460:	4613      	mov	r3, r2
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	3310      	adds	r3, #16
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	4413      	add	r3, r2
 800346e:	3304      	adds	r3, #4
 8003470:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	78db      	ldrb	r3, [r3, #3]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d108      	bne.n	800348c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	2200      	movs	r2, #0
 800347e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f00a f966 	bl	800d758 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003498:	461a      	mov	r2, r3
 800349a:	2302      	movs	r3, #2
 800349c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fcbd 	bl	8003e2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b2:	3301      	adds	r3, #1
 80034b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80034b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b8:	085b      	lsrs	r3, r3, #1
 80034ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80034bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034be:	2b00      	cmp	r3, #0
 80034c0:	f47f af2e 	bne.w	8003320 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 f807 	bl	80074dc <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034d8:	d122      	bne.n	8003520 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	69fa      	ldr	r2, [r7, #28]
 80034e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d108      	bne.n	800350a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003500:	2100      	movs	r1, #0
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f000 fea4 	bl	8004250 <HAL_PCDEx_LPM_Callback>
 8003508:	e002      	b.n	8003510 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f00a f904 	bl	800d718 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800351e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4618      	mov	r0, r3
 8003526:	f003 ffd9 	bl	80074dc <USB_ReadInterrupts>
 800352a:	4603      	mov	r3, r0
 800352c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003530:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003534:	d112      	bne.n	800355c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f00a f8c0 	bl	800d6cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800355a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f003 ffbb 	bl	80074dc <USB_ReadInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800356c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003570:	f040 80b7 	bne.w	80036e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003582:	f023 0301 	bic.w	r3, r3, #1
 8003586:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2110      	movs	r1, #16
 800358e:	4618      	mov	r0, r3
 8003590:	f003 f888 	bl	80066a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003594:	2300      	movs	r3, #0
 8003596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003598:	e046      	b.n	8003628 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800359a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800359c:	015a      	lsls	r2, r3, #5
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	4413      	add	r3, r2
 80035a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035a6:	461a      	mov	r2, r3
 80035a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035be:	0151      	lsls	r1, r2, #5
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	440a      	add	r2, r1
 80035c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80035c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80035cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035da:	461a      	mov	r2, r3
 80035dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035f2:	0151      	lsls	r1, r2, #5
 80035f4:	69fa      	ldr	r2, [r7, #28]
 80035f6:	440a      	add	r2, r1
 80035f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80035fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003600:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003612:	0151      	lsls	r1, r2, #5
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	440a      	add	r2, r1
 8003618:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800361c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003620:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	3301      	adds	r3, #1
 8003626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	791b      	ldrb	r3, [r3, #4]
 800362c:	461a      	mov	r2, r3
 800362e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003630:	4293      	cmp	r3, r2
 8003632:	d3b2      	bcc.n	800359a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	69fa      	ldr	r2, [r7, #28]
 800363e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003642:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003646:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7bdb      	ldrb	r3, [r3, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d016      	beq.n	800367e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003660:	f043 030b 	orr.w	r3, r3, #11
 8003664:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800366e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003670:	69fa      	ldr	r2, [r7, #28]
 8003672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003676:	f043 030b 	orr.w	r3, r3, #11
 800367a:	6453      	str	r3, [r2, #68]	@ 0x44
 800367c:	e015      	b.n	80036aa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	69fa      	ldr	r2, [r7, #28]
 8003688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800368c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003690:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003694:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036a4:	f043 030b 	orr.w	r3, r3, #11
 80036a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69fa      	ldr	r2, [r7, #28]
 80036b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80036b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80036bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036cc:	461a      	mov	r2, r3
 80036ce:	f003 ffc9 	bl	8007664 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	695a      	ldr	r2, [r3, #20]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80036e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fef8 	bl	80074dc <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f6:	d123      	bne.n	8003740 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f003 ff8e 	bl	800761e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 f845 	bl	8006796 <USB_GetDevSpeed>
 800370c:	4603      	mov	r3, r0
 800370e:	461a      	mov	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681c      	ldr	r4, [r3, #0]
 8003718:	f001 fa0a 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 800371c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003722:	461a      	mov	r2, r3
 8003724:	4620      	mov	r0, r4
 8003726:	f002 fd49 	bl	80061bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f009 ffa5 	bl	800d67a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800373e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fec9 	bl	80074dc <USB_ReadInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f003 0308 	and.w	r3, r3, #8
 8003750:	2b08      	cmp	r3, #8
 8003752:	d10a      	bne.n	800376a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f009 ff82 	bl	800d65e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695a      	ldr	r2, [r3, #20]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f002 0208 	and.w	r2, r2, #8
 8003768:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f003 feb4 	bl	80074dc <USB_ReadInterrupts>
 8003774:	4603      	mov	r3, r0
 8003776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800377a:	2b80      	cmp	r3, #128	@ 0x80
 800377c:	d123      	bne.n	80037c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800378a:	2301      	movs	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
 800378e:	e014      	b.n	80037ba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003794:	4613      	mov	r3, r2
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d105      	bne.n	80037b4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	4619      	mov	r1, r3
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fb0a 	bl	8003dc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	3301      	adds	r3, #1
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	791b      	ldrb	r3, [r3, #4]
 80037be:	461a      	mov	r2, r3
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d3e4      	bcc.n	8003790 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f003 fe86 	bl	80074dc <USB_ReadInterrupts>
 80037d0:	4603      	mov	r3, r0
 80037d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037da:	d13c      	bne.n	8003856 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037dc:	2301      	movs	r3, #1
 80037de:	627b      	str	r3, [r7, #36]	@ 0x24
 80037e0:	e02b      	b.n	800383a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	015a      	lsls	r2, r3, #5
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	4413      	add	r3, r2
 80037ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f6:	4613      	mov	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	4413      	add	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	3318      	adds	r3, #24
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d115      	bne.n	8003834 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003808:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800380a:	2b00      	cmp	r3, #0
 800380c:	da12      	bge.n	8003834 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	440b      	add	r3, r1
 800381c:	3317      	adds	r3, #23
 800381e:	2201      	movs	r2, #1
 8003820:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800382a:	b2db      	uxtb	r3, r3
 800382c:	4619      	mov	r1, r3
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 faca 	bl	8003dc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	3301      	adds	r3, #1
 8003838:	627b      	str	r3, [r7, #36]	@ 0x24
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	791b      	ldrb	r3, [r3, #4]
 800383e:	461a      	mov	r2, r3
 8003840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003842:	4293      	cmp	r3, r2
 8003844:	d3cd      	bcc.n	80037e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695a      	ldr	r2, [r3, #20]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003854:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4618      	mov	r0, r3
 800385c:	f003 fe3e 	bl	80074dc <USB_ReadInterrupts>
 8003860:	4603      	mov	r3, r0
 8003862:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800386a:	d156      	bne.n	800391a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800386c:	2301      	movs	r3, #1
 800386e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003870:	e045      	b.n	80038fe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003886:	4613      	mov	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d12e      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800389a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800389c:	2b00      	cmp	r3, #0
 800389e:	da2b      	bge.n	80038f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80038ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d121      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b8:	4613      	mov	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	69fa      	ldr	r2, [r7, #28]
 80038ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80038f4:	6053      	str	r3, [r2, #4]
            break;
 80038f6:	e008      	b.n	800390a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fa:	3301      	adds	r3, #1
 80038fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	791b      	ldrb	r3, [r3, #4]
 8003902:	461a      	mov	r2, r3
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	4293      	cmp	r3, r2
 8003908:	d3b3      	bcc.n	8003872 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	695a      	ldr	r2, [r3, #20]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003918:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4618      	mov	r0, r3
 8003920:	f003 fddc 	bl	80074dc <USB_ReadInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800392e:	d10a      	bne.n	8003946 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f009 ff23 	bl	800d77c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695a      	ldr	r2, [r3, #20]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4618      	mov	r0, r3
 800394c:	f003 fdc6 	bl	80074dc <USB_ReadInterrupts>
 8003950:	4603      	mov	r3, r0
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d115      	bne.n	8003986 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f009 ff13 	bl	800d798 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6859      	ldr	r1, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	430a      	orrs	r2, r1
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	e000      	b.n	8003986 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003984:	bf00      	nop
    }
  }
}
 8003986:	3734      	adds	r7, #52	@ 0x34
 8003988:	46bd      	mov	sp, r7
 800398a:	bd90      	pop	{r4, r7, pc}

0800398c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d101      	bne.n	80039a6 <HAL_PCD_SetAddress+0x1a>
 80039a2:	2302      	movs	r3, #2
 80039a4:	e012      	b.n	80039cc <HAL_PCD_SetAddress+0x40>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 fd25 	bl	800740c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3708      	adds	r7, #8
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	4608      	mov	r0, r1
 80039de:	4611      	mov	r1, r2
 80039e0:	461a      	mov	r2, r3
 80039e2:	4603      	mov	r3, r0
 80039e4:	70fb      	strb	r3, [r7, #3]
 80039e6:	460b      	mov	r3, r1
 80039e8:	803b      	strh	r3, [r7, #0]
 80039ea:	4613      	mov	r3, r2
 80039ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	da0f      	bge.n	8003a1a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 020f 	and.w	r2, r3, #15
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	3310      	adds	r3, #16
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3304      	adds	r3, #4
 8003a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	705a      	strb	r2, [r3, #1]
 8003a18:	e00f      	b.n	8003a3a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a1a:	78fb      	ldrb	r3, [r7, #3]
 8003a1c:	f003 020f 	and.w	r2, r3, #15
 8003a20:	4613      	mov	r3, r2
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	3304      	adds	r3, #4
 8003a32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a3a:	78fb      	ldrb	r3, [r7, #3]
 8003a3c:	f003 030f 	and.w	r3, r3, #15
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003a46:	883b      	ldrh	r3, [r7, #0]
 8003a48:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	78ba      	ldrb	r2, [r7, #2]
 8003a54:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d004      	beq.n	8003a68 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a68:	78bb      	ldrb	r3, [r7, #2]
 8003a6a:	2b02      	cmp	r3, #2
 8003a6c:	d102      	bne.n	8003a74 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_PCD_EP_Open+0xae>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e00e      	b.n	8003aa0 <HAL_PCD_EP_Open+0xcc>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68f9      	ldr	r1, [r7, #12]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 fea5 	bl	80067e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003a9e:	7afb      	ldrb	r3, [r7, #11]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	da0f      	bge.n	8003adc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003abc:	78fb      	ldrb	r3, [r7, #3]
 8003abe:	f003 020f 	and.w	r2, r3, #15
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	3310      	adds	r3, #16
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	4413      	add	r3, r2
 8003ad0:	3304      	adds	r3, #4
 8003ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	705a      	strb	r2, [r3, #1]
 8003ada:	e00f      	b.n	8003afc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003adc:	78fb      	ldrb	r3, [r7, #3]
 8003ade:	f003 020f 	and.w	r2, r3, #15
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	3304      	adds	r3, #4
 8003af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2200      	movs	r2, #0
 8003afa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003afc:	78fb      	ldrb	r3, [r7, #3]
 8003afe:	f003 030f 	and.w	r3, r3, #15
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_PCD_EP_Close+0x6e>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e00e      	b.n	8003b34 <HAL_PCD_EP_Close+0x8c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68f9      	ldr	r1, [r7, #12]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f002 fee3 	bl	80068f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	607a      	str	r2, [r7, #4]
 8003b46:	603b      	str	r3, [r7, #0]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b4c:	7afb      	ldrb	r3, [r7, #11]
 8003b4e:	f003 020f 	and.w	r2, r3, #15
 8003b52:	4613      	mov	r3, r2
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4413      	add	r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b7e:	7afb      	ldrb	r3, [r7, #11]
 8003b80:	f003 030f 	and.w	r3, r3, #15
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	799b      	ldrb	r3, [r3, #6]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d102      	bne.n	8003b98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	799b      	ldrb	r3, [r3, #6]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6979      	ldr	r1, [r7, #20]
 8003ba4:	f002 ff80 	bl	8006aa8 <USB_EPStartXfer>

  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}

08003bb2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003bb2:	b480      	push	{r7}
 8003bb4:	b083      	sub	sp, #12
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	460b      	mov	r3, r1
 8003bbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4413      	add	r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003bd4:	681b      	ldr	r3, [r3, #0]
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b086      	sub	sp, #24
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	460b      	mov	r3, r1
 8003bf0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bf2:	7afb      	ldrb	r3, [r7, #11]
 8003bf4:	f003 020f 	and.w	r2, r3, #15
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	00db      	lsls	r3, r3, #3
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	3310      	adds	r3, #16
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4413      	add	r3, r2
 8003c06:	3304      	adds	r3, #4
 8003c08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	799b      	ldrb	r3, [r3, #6]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d102      	bne.n	8003c3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	799b      	ldrb	r3, [r3, #6]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6979      	ldr	r1, [r7, #20]
 8003c48:	f002 ff2e 	bl	8006aa8 <USB_EPStartXfer>

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}

08003c56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	460b      	mov	r3, r1
 8003c60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	7912      	ldrb	r2, [r2, #4]
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d901      	bls.n	8003c74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e04f      	b.n	8003d14 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	da0f      	bge.n	8003c9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	f003 020f 	and.w	r2, r3, #15
 8003c82:	4613      	mov	r3, r2
 8003c84:	00db      	lsls	r3, r3, #3
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	3310      	adds	r3, #16
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	4413      	add	r3, r2
 8003c90:	3304      	adds	r3, #4
 8003c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2201      	movs	r2, #1
 8003c98:	705a      	strb	r2, [r3, #1]
 8003c9a:	e00d      	b.n	8003cb8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	4413      	add	r3, r2
 8003cae:	3304      	adds	r3, #4
 8003cb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbe:	78fb      	ldrb	r3, [r7, #3]
 8003cc0:	f003 030f 	and.w	r3, r3, #15
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_PCD_EP_SetStall+0x82>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e01d      	b.n	8003d14 <HAL_PCD_EP_SetStall+0xbe>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f003 fabc 	bl	8007264 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	7999      	ldrb	r1, [r3, #6]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003d04:	461a      	mov	r2, r3
 8003d06:	f003 fcad 	bl	8007664 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	460b      	mov	r3, r1
 8003d26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d28:	78fb      	ldrb	r3, [r7, #3]
 8003d2a:	f003 030f 	and.w	r3, r3, #15
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	7912      	ldrb	r2, [r2, #4]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e042      	b.n	8003dc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da0f      	bge.n	8003d62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 020f 	and.w	r2, r3, #15
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	3310      	adds	r3, #16
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	3304      	adds	r3, #4
 8003d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	705a      	strb	r2, [r3, #1]
 8003d60:	e00f      	b.n	8003d82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 020f 	and.w	r2, r3, #15
 8003d68:	4613      	mov	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	4413      	add	r3, r2
 8003d78:	3304      	adds	r3, #4
 8003d7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d88:	78fb      	ldrb	r3, [r7, #3]
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d101      	bne.n	8003da2 <HAL_PCD_EP_ClrStall+0x86>
 8003d9e:	2302      	movs	r3, #2
 8003da0:	e00e      	b.n	8003dc0 <HAL_PCD_EP_ClrStall+0xa4>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68f9      	ldr	r1, [r7, #12]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f003 fac5 	bl	8007340 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3710      	adds	r7, #16
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003dd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	da0c      	bge.n	8003df6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ddc:	78fb      	ldrb	r3, [r7, #3]
 8003dde:	f003 020f 	and.w	r2, r3, #15
 8003de2:	4613      	mov	r3, r2
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	3310      	adds	r3, #16
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	4413      	add	r3, r2
 8003df0:	3304      	adds	r3, #4
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	e00c      	b.n	8003e10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003df6:	78fb      	ldrb	r3, [r7, #3]
 8003df8:	f003 020f 	and.w	r2, r3, #15
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	3304      	adds	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f003 f8e4 	bl	8006fe4 <USB_EPStopXfer>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e20:	7afb      	ldrb	r3, [r7, #11]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b08a      	sub	sp, #40	@ 0x28
 8003e2e:	af02      	add	r7, sp, #8
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e3e:	683a      	ldr	r2, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	00db      	lsls	r3, r3, #3
 8003e44:	4413      	add	r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	3310      	adds	r3, #16
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3304      	adds	r3, #4
 8003e50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	695a      	ldr	r2, [r3, #20]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d901      	bls.n	8003e62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06b      	b.n	8003f3a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d902      	bls.n	8003e7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3303      	adds	r3, #3
 8003e82:	089b      	lsrs	r3, r3, #2
 8003e84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e86:	e02a      	b.n	8003ede <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	691a      	ldr	r2, [r3, #16]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	695b      	ldr	r3, [r3, #20]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d902      	bls.n	8003ea4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3303      	adds	r3, #3
 8003ea8:	089b      	lsrs	r3, r3, #2
 8003eaa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	68d9      	ldr	r1, [r3, #12]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	6978      	ldr	r0, [r7, #20]
 8003ec2:	f003 f939 	bl	8007138 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	441a      	add	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	441a      	add	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	015a      	lsls	r2, r3, #5
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d809      	bhi.n	8003f08 <PCD_WriteEmptyTxFifo+0xde>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	695a      	ldr	r2, [r3, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d203      	bcs.n	8003f08 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1bf      	bne.n	8003e88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d811      	bhi.n	8003f38 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f34:	4013      	ands	r3, r2
 8003f36:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b088      	sub	sp, #32
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	333c      	adds	r3, #60	@ 0x3c
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	015a      	lsls	r2, r3, #5
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	799b      	ldrb	r3, [r3, #6]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d17b      	bne.n	8004072 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d015      	beq.n	8003fb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	4a61      	ldr	r2, [pc, #388]	@ (800410c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	f240 80b9 	bls.w	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 80b3 	beq.w	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fac:	6093      	str	r3, [r2, #8]
 8003fae:	e0a7      	b.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d009      	beq.n	8003fce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	69bb      	ldr	r3, [r7, #24]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	2320      	movs	r3, #32
 8003fca:	6093      	str	r3, [r2, #8]
 8003fcc:	e098      	b.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f040 8093 	bne.w	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800410c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d90f      	bls.n	8004002 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00a      	beq.n	8004002 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ffe:	6093      	str	r3, [r2, #8]
 8004000:	e07e      	b.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	00db      	lsls	r3, r3, #3
 8004008:	4413      	add	r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004010:	687a      	ldr	r2, [r7, #4]
 8004012:	4413      	add	r3, r2
 8004014:	3304      	adds	r3, #4
 8004016:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6a1a      	ldr	r2, [r3, #32]
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	0159      	lsls	r1, r3, #5
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	440b      	add	r3, r1
 8004024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d114      	bne.n	8004064 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d109      	bne.n	8004056 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6818      	ldr	r0, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800404c:	461a      	mov	r2, r3
 800404e:	2101      	movs	r1, #1
 8004050:	f003 fb08 	bl	8007664 <USB_EP0_OutStart>
 8004054:	e006      	b.n	8004064 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	441a      	add	r2, r3
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b2db      	uxtb	r3, r3
 8004068:	4619      	mov	r1, r3
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f009 fac2 	bl	800d5f4 <HAL_PCD_DataOutStageCallback>
 8004070:	e046      	b.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d124      	bne.n	80040c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004096:	6093      	str	r3, [r2, #8]
 8004098:	e032      	b.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d008      	beq.n	80040b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040b0:	461a      	mov	r2, r3
 80040b2:	2320      	movs	r3, #32
 80040b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	4619      	mov	r1, r3
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f009 fa99 	bl	800d5f4 <HAL_PCD_DataOutStageCallback>
 80040c2:	e01d      	b.n	8004100 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d114      	bne.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80040ca:	6879      	ldr	r1, [r7, #4]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	4413      	add	r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	440b      	add	r3, r1
 80040d8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d108      	bne.n	80040f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80040ec:	461a      	mov	r2, r3
 80040ee:	2100      	movs	r1, #0
 80040f0:	f003 fab8 	bl	8007664 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	4619      	mov	r1, r3
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f009 fa7a 	bl	800d5f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	4f54300a 	.word	0x4f54300a
 8004110:	4f54310a 	.word	0x4f54310a

08004114 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	333c      	adds	r3, #60	@ 0x3c
 800412c:	3304      	adds	r3, #4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	4a15      	ldr	r2, [pc, #84]	@ (800419c <PCD_EP_OutSetupPacket_int+0x88>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d90e      	bls.n	8004168 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004150:	2b00      	cmp	r3, #0
 8004152:	d009      	beq.n	8004168 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004160:	461a      	mov	r2, r3
 8004162:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004166:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f009 fa31 	bl	800d5d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	4a0a      	ldr	r2, [pc, #40]	@ (800419c <PCD_EP_OutSetupPacket_int+0x88>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d90c      	bls.n	8004190 <PCD_EP_OutSetupPacket_int+0x7c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	799b      	ldrb	r3, [r3, #6]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d108      	bne.n	8004190 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004188:	461a      	mov	r2, r3
 800418a:	2101      	movs	r1, #1
 800418c:	f003 fa6a 	bl	8007664 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	4f54300a 	.word	0x4f54300a

080041a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
 80041ac:	4613      	mov	r3, r2
 80041ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041b8:	78fb      	ldrb	r3, [r7, #3]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d107      	bne.n	80041ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041be:	883b      	ldrh	r3, [r7, #0]
 80041c0:	0419      	lsls	r1, r3, #16
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68ba      	ldr	r2, [r7, #8]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	629a      	str	r2, [r3, #40]	@ 0x28
 80041cc:	e028      	b.n	8004220 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041d4:	0c1b      	lsrs	r3, r3, #16
 80041d6:	68ba      	ldr	r2, [r7, #8]
 80041d8:	4413      	add	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e00d      	b.n	80041fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	7bfb      	ldrb	r3, [r7, #15]
 80041e8:	3340      	adds	r3, #64	@ 0x40
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4413      	add	r3, r2
 80041f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
 80041fa:	3301      	adds	r3, #1
 80041fc:	73fb      	strb	r3, [r7, #15]
 80041fe:	7bfa      	ldrb	r2, [r7, #15]
 8004200:	78fb      	ldrb	r3, [r7, #3]
 8004202:	3b01      	subs	r3, #1
 8004204:	429a      	cmp	r2, r3
 8004206:	d3ec      	bcc.n	80041e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004208:	883b      	ldrh	r3, [r7, #0]
 800420a:	0418      	lsls	r0, r3, #16
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6819      	ldr	r1, [r3, #0]
 8004210:	78fb      	ldrb	r3, [r7, #3]
 8004212:	3b01      	subs	r3, #1
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	4302      	orrs	r2, r0
 8004218:	3340      	adds	r3, #64	@ 0x40
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	460b      	mov	r3, r1
 8004238:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	460b      	mov	r3, r1
 800425a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800425c:	bf00      	nop
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004266:	4770      	bx	lr

08004268 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e267      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	d075      	beq.n	8004372 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004286:	4b88      	ldr	r3, [pc, #544]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b04      	cmp	r3, #4
 8004290:	d00c      	beq.n	80042ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004292:	4b85      	ldr	r3, [pc, #532]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800429a:	2b08      	cmp	r3, #8
 800429c:	d112      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4b82      	ldr	r3, [pc, #520]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042aa:	d10b      	bne.n	80042c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042ac:	4b7e      	ldr	r3, [pc, #504]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d05b      	beq.n	8004370 <HAL_RCC_OscConfig+0x108>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d157      	bne.n	8004370 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e242      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042cc:	d106      	bne.n	80042dc <HAL_RCC_OscConfig+0x74>
 80042ce:	4b76      	ldr	r3, [pc, #472]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a75      	ldr	r2, [pc, #468]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e01d      	b.n	8004318 <HAL_RCC_OscConfig+0xb0>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042e4:	d10c      	bne.n	8004300 <HAL_RCC_OscConfig+0x98>
 80042e6:	4b70      	ldr	r3, [pc, #448]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a6f      	ldr	r2, [pc, #444]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	4b6d      	ldr	r3, [pc, #436]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6c      	ldr	r2, [pc, #432]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80042f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	e00b      	b.n	8004318 <HAL_RCC_OscConfig+0xb0>
 8004300:	4b69      	ldr	r3, [pc, #420]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a68      	ldr	r2, [pc, #416]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800430a:	6013      	str	r3, [r2, #0]
 800430c:	4b66      	ldr	r3, [pc, #408]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a65      	ldr	r2, [pc, #404]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fd fb16 	bl	8001950 <HAL_GetTick>
 8004324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004326:	e008      	b.n	800433a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004328:	f7fd fb12 	bl	8001950 <HAL_GetTick>
 800432c:	4602      	mov	r2, r0
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1ad3      	subs	r3, r2, r3
 8004332:	2b64      	cmp	r3, #100	@ 0x64
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e207      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800433a:	4b5b      	ldr	r3, [pc, #364]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d0f0      	beq.n	8004328 <HAL_RCC_OscConfig+0xc0>
 8004346:	e014      	b.n	8004372 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004348:	f7fd fb02 	bl	8001950 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004350:	f7fd fafe 	bl	8001950 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b64      	cmp	r3, #100	@ 0x64
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e1f3      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004362:	4b51      	ldr	r3, [pc, #324]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0xe8>
 800436e:	e000      	b.n	8004372 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d063      	beq.n	8004446 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800437e:	4b4a      	ldr	r3, [pc, #296]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00b      	beq.n	80043a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800438a:	4b47      	ldr	r3, [pc, #284]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004392:	2b08      	cmp	r3, #8
 8004394:	d11c      	bne.n	80043d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b44      	ldr	r3, [pc, #272]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d116      	bne.n	80043d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043a2:	4b41      	ldr	r3, [pc, #260]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d005      	beq.n	80043ba <HAL_RCC_OscConfig+0x152>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e1c7      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ba:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	4937      	ldr	r1, [pc, #220]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ce:	e03a      	b.n	8004446 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d020      	beq.n	800441a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043d8:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <HAL_RCC_OscConfig+0x244>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043de:	f7fd fab7 	bl	8001950 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043e6:	f7fd fab3 	bl	8001950 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e1a8      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f8:	4b2b      	ldr	r3, [pc, #172]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0302 	and.w	r3, r3, #2
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004404:	4b28      	ldr	r3, [pc, #160]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4925      	ldr	r1, [pc, #148]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 8004414:	4313      	orrs	r3, r2
 8004416:	600b      	str	r3, [r1, #0]
 8004418:	e015      	b.n	8004446 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800441a:	4b24      	ldr	r3, [pc, #144]	@ (80044ac <HAL_RCC_OscConfig+0x244>)
 800441c:	2200      	movs	r2, #0
 800441e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fa96 	bl	8001950 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004428:	f7fd fa92 	bl	8001950 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b02      	cmp	r3, #2
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e187      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443a:	4b1b      	ldr	r3, [pc, #108]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d036      	beq.n	80044c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d016      	beq.n	8004488 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800445a:	4b15      	ldr	r3, [pc, #84]	@ (80044b0 <HAL_RCC_OscConfig+0x248>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004460:	f7fd fa76 	bl	8001950 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004468:	f7fd fa72 	bl	8001950 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b02      	cmp	r3, #2
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e167      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <HAL_RCC_OscConfig+0x240>)
 800447c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d0f0      	beq.n	8004468 <HAL_RCC_OscConfig+0x200>
 8004486:	e01b      	b.n	80044c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004488:	4b09      	ldr	r3, [pc, #36]	@ (80044b0 <HAL_RCC_OscConfig+0x248>)
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800448e:	f7fd fa5f 	bl	8001950 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004494:	e00e      	b.n	80044b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004496:	f7fd fa5b 	bl	8001950 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d907      	bls.n	80044b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e150      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
 80044a8:	40023800 	.word	0x40023800
 80044ac:	42470000 	.word	0x42470000
 80044b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	4b88      	ldr	r3, [pc, #544]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ea      	bne.n	8004496 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 8097 	beq.w	80045fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ce:	2300      	movs	r3, #0
 80044d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044d2:	4b81      	ldr	r3, [pc, #516]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10f      	bne.n	80044fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b7d      	ldr	r3, [pc, #500]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e6:	4a7c      	ldr	r2, [pc, #496]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ee:	4b7a      	ldr	r3, [pc, #488]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044fa:	2301      	movs	r3, #1
 80044fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b77      	ldr	r3, [pc, #476]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d118      	bne.n	800453c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800450a:	4b74      	ldr	r3, [pc, #464]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a73      	ldr	r2, [pc, #460]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 8004510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004514:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004516:	f7fd fa1b 	bl	8001950 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451e:	f7fd fa17 	bl	8001950 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e10c      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	4b6a      	ldr	r3, [pc, #424]	@ (80046dc <HAL_RCC_OscConfig+0x474>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2b01      	cmp	r3, #1
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x2ea>
 8004544:	4b64      	ldr	r3, [pc, #400]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004548:	4a63      	ldr	r2, [pc, #396]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800454a:	f043 0301 	orr.w	r3, r3, #1
 800454e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004550:	e01c      	b.n	800458c <HAL_RCC_OscConfig+0x324>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	2b05      	cmp	r3, #5
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x30c>
 800455a:	4b5f      	ldr	r3, [pc, #380]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800455c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455e:	4a5e      	ldr	r2, [pc, #376]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004560:	f043 0304 	orr.w	r3, r3, #4
 8004564:	6713      	str	r3, [r2, #112]	@ 0x70
 8004566:	4b5c      	ldr	r3, [pc, #368]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	4a5b      	ldr	r2, [pc, #364]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800456c:	f043 0301 	orr.w	r3, r3, #1
 8004570:	6713      	str	r3, [r2, #112]	@ 0x70
 8004572:	e00b      	b.n	800458c <HAL_RCC_OscConfig+0x324>
 8004574:	4b58      	ldr	r3, [pc, #352]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004578:	4a57      	ldr	r2, [pc, #348]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800457a:	f023 0301 	bic.w	r3, r3, #1
 800457e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004580:	4b55      	ldr	r3, [pc, #340]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a54      	ldr	r2, [pc, #336]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004586:	f023 0304 	bic.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d015      	beq.n	80045c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004594:	f7fd f9dc 	bl	8001950 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800459a:	e00a      	b.n	80045b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800459c:	f7fd f9d8 	bl	8001950 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e0cb      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045b2:	4b49      	ldr	r3, [pc, #292]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0ee      	beq.n	800459c <HAL_RCC_OscConfig+0x334>
 80045be:	e014      	b.n	80045ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c0:	f7fd f9c6 	bl	8001950 <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045c6:	e00a      	b.n	80045de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c8:	f7fd f9c2 	bl	8001950 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d901      	bls.n	80045de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045da:	2303      	movs	r3, #3
 80045dc:	e0b5      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045de:	4b3e      	ldr	r3, [pc, #248]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1ee      	bne.n	80045c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045ea:	7dfb      	ldrb	r3, [r7, #23]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045f0:	4b39      	ldr	r3, [pc, #228]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80045f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b00      	cmp	r3, #0
 8004602:	f000 80a1 	beq.w	8004748 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004606:	4b34      	ldr	r3, [pc, #208]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d05c      	beq.n	80046cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	2b02      	cmp	r3, #2
 8004618:	d141      	bne.n	800469e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800461a:	4b31      	ldr	r3, [pc, #196]	@ (80046e0 <HAL_RCC_OscConfig+0x478>)
 800461c:	2200      	movs	r2, #0
 800461e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004620:	f7fd f996 	bl	8001950 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004628:	f7fd f992 	bl	8001950 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e087      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800463a:	4b27      	ldr	r3, [pc, #156]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1f0      	bne.n	8004628 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	69da      	ldr	r2, [r3, #28]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004654:	019b      	lsls	r3, r3, #6
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465c:	085b      	lsrs	r3, r3, #1
 800465e:	3b01      	subs	r3, #1
 8004660:	041b      	lsls	r3, r3, #16
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	491b      	ldr	r1, [pc, #108]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x478>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fd f96b 	bl	8001950 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fd f967 	bl	8001950 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e05c      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x416>
 800469c:	e054      	b.n	8004748 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <HAL_RCC_OscConfig+0x478>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fd f954 	bl	8001950 <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fd f950 	bl	8001950 <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e045      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_OscConfig+0x470>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x444>
 80046ca:	e03d      	b.n	8004748 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e038      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
 80046d8:	40023800 	.word	0x40023800
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004754 <HAL_RCC_OscConfig+0x4ec>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d028      	beq.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d121      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800470a:	429a      	cmp	r2, r3
 800470c:	d11a      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004714:	4013      	ands	r3, r2
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800471a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800471c:	4293      	cmp	r3, r2
 800471e:	d111      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	3b01      	subs	r3, #1
 800472e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004730:	429a      	cmp	r2, r3
 8004732:	d107      	bne.n	8004744 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d001      	beq.n	8004748 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40023800 	.word	0x40023800

08004758 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d101      	bne.n	800476c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e0cc      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800476c:	4b68      	ldr	r3, [pc, #416]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 030f 	and.w	r3, r3, #15
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d90c      	bls.n	8004794 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800477a:	4b65      	ldr	r3, [pc, #404]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 030f 	and.w	r3, r3, #15
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	4a58      	ldr	r2, [pc, #352]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	4a52      	ldr	r2, [pc, #328]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d044      	beq.n	8004878 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d119      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d003      	beq.n	8004816 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004812:	2b03      	cmp	r3, #3
 8004814:	d107      	bne.n	8004826 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004816:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d109      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e06f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004826:	4b3b      	ldr	r3, [pc, #236]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e067      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004836:	4b37      	ldr	r3, [pc, #220]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f023 0203 	bic.w	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	4934      	ldr	r1, [pc, #208]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	4313      	orrs	r3, r2
 8004846:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004848:	f7fd f882 	bl	8001950 <HAL_GetTick>
 800484c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800484e:	e00a      	b.n	8004866 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004850:	f7fd f87e 	bl	8001950 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e04f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004866:	4b2b      	ldr	r3, [pc, #172]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 020c 	and.w	r2, r3, #12
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	429a      	cmp	r2, r3
 8004876:	d1eb      	bne.n	8004850 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004878:	4b25      	ldr	r3, [pc, #148]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 030f 	and.w	r3, r3, #15
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	429a      	cmp	r2, r3
 8004884:	d20c      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004886:	4b22      	ldr	r3, [pc, #136]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	b2d2      	uxtb	r2, r2
 800488c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <HAL_RCC_ClockConfig+0x1b8>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048ca:	4b12      	ldr	r3, [pc, #72]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f821 	bl	8004924 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004914 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	@ (8004918 <HAL_RCC_ClockConfig+0x1c0>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	@ (800491c <HAL_RCC_ClockConfig+0x1c4>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	@ (8004920 <HAL_RCC_ClockConfig+0x1c8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fc feec 	bl	80016dc <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40023c00 	.word	0x40023c00
 8004914:	40023800 	.word	0x40023800
 8004918:	0800df48 	.word	0x0800df48
 800491c:	20000000 	.word	0x20000000
 8004920:	20000004 	.word	0x20000004

08004924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004924:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004928:	b094      	sub	sp, #80	@ 0x50
 800492a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800492c:	2300      	movs	r3, #0
 800492e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004930:	2300      	movs	r3, #0
 8004932:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800493c:	4b79      	ldr	r3, [pc, #484]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 030c 	and.w	r3, r3, #12
 8004944:	2b08      	cmp	r3, #8
 8004946:	d00d      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x40>
 8004948:	2b08      	cmp	r3, #8
 800494a:	f200 80e1 	bhi.w	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_RCC_GetSysClockFreq+0x34>
 8004952:	2b04      	cmp	r3, #4
 8004954:	d003      	beq.n	800495e <HAL_RCC_GetSysClockFreq+0x3a>
 8004956:	e0db      	b.n	8004b10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004958:	4b73      	ldr	r3, [pc, #460]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 800495a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800495c:	e0db      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800495e:	4b73      	ldr	r3, [pc, #460]	@ (8004b2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004960:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004962:	e0d8      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004964:	4b6f      	ldr	r3, [pc, #444]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800496e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d063      	beq.n	8004a42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800497a:	4b6a      	ldr	r3, [pc, #424]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	099b      	lsrs	r3, r3, #6
 8004980:	2200      	movs	r2, #0
 8004982:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004984:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004988:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
 800498e:	2300      	movs	r3, #0
 8004990:	637b      	str	r3, [r7, #52]	@ 0x34
 8004992:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004996:	4622      	mov	r2, r4
 8004998:	462b      	mov	r3, r5
 800499a:	f04f 0000 	mov.w	r0, #0
 800499e:	f04f 0100 	mov.w	r1, #0
 80049a2:	0159      	lsls	r1, r3, #5
 80049a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049a8:	0150      	lsls	r0, r2, #5
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4621      	mov	r1, r4
 80049b0:	1a51      	subs	r1, r2, r1
 80049b2:	6139      	str	r1, [r7, #16]
 80049b4:	4629      	mov	r1, r5
 80049b6:	eb63 0301 	sbc.w	r3, r3, r1
 80049ba:	617b      	str	r3, [r7, #20]
 80049bc:	f04f 0200 	mov.w	r2, #0
 80049c0:	f04f 0300 	mov.w	r3, #0
 80049c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049c8:	4659      	mov	r1, fp
 80049ca:	018b      	lsls	r3, r1, #6
 80049cc:	4651      	mov	r1, sl
 80049ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049d2:	4651      	mov	r1, sl
 80049d4:	018a      	lsls	r2, r1, #6
 80049d6:	4651      	mov	r1, sl
 80049d8:	ebb2 0801 	subs.w	r8, r2, r1
 80049dc:	4659      	mov	r1, fp
 80049de:	eb63 0901 	sbc.w	r9, r3, r1
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049f6:	4690      	mov	r8, r2
 80049f8:	4699      	mov	r9, r3
 80049fa:	4623      	mov	r3, r4
 80049fc:	eb18 0303 	adds.w	r3, r8, r3
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	462b      	mov	r3, r5
 8004a04:	eb49 0303 	adc.w	r3, r9, r3
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a16:	4629      	mov	r1, r5
 8004a18:	024b      	lsls	r3, r1, #9
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a20:	4621      	mov	r1, r4
 8004a22:	024a      	lsls	r2, r1, #9
 8004a24:	4610      	mov	r0, r2
 8004a26:	4619      	mov	r1, r3
 8004a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a34:	f7fb fbe4 	bl	8000200 <__aeabi_uldivmod>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	460b      	mov	r3, r1
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a40:	e058      	b.n	8004af4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a42:	4b38      	ldr	r3, [pc, #224]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	099b      	lsrs	r3, r3, #6
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	4611      	mov	r1, r2
 8004a4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a52:	623b      	str	r3, [r7, #32]
 8004a54:	2300      	movs	r3, #0
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a5c:	4642      	mov	r2, r8
 8004a5e:	464b      	mov	r3, r9
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	0159      	lsls	r1, r3, #5
 8004a6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a6e:	0150      	lsls	r0, r2, #5
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4641      	mov	r1, r8
 8004a76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a80:	f04f 0200 	mov.w	r2, #0
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a94:	ebb2 040a 	subs.w	r4, r2, sl
 8004a98:	eb63 050b 	sbc.w	r5, r3, fp
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	00eb      	lsls	r3, r5, #3
 8004aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aaa:	00e2      	lsls	r2, r4, #3
 8004aac:	4614      	mov	r4, r2
 8004aae:	461d      	mov	r5, r3
 8004ab0:	4643      	mov	r3, r8
 8004ab2:	18e3      	adds	r3, r4, r3
 8004ab4:	603b      	str	r3, [r7, #0]
 8004ab6:	464b      	mov	r3, r9
 8004ab8:	eb45 0303 	adc.w	r3, r5, r3
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aca:	4629      	mov	r1, r5
 8004acc:	028b      	lsls	r3, r1, #10
 8004ace:	4621      	mov	r1, r4
 8004ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ad4:	4621      	mov	r1, r4
 8004ad6:	028a      	lsls	r2, r1, #10
 8004ad8:	4610      	mov	r0, r2
 8004ada:	4619      	mov	r1, r3
 8004adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ade:	2200      	movs	r2, #0
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	61fa      	str	r2, [r7, #28]
 8004ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ae8:	f7fb fb8a 	bl	8000200 <__aeabi_uldivmod>
 8004aec:	4602      	mov	r2, r0
 8004aee:	460b      	mov	r3, r1
 8004af0:	4613      	mov	r3, r2
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	f003 0303 	and.w	r3, r3, #3
 8004afe:	3301      	adds	r3, #1
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b0c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3750      	adds	r7, #80	@ 0x50
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b22:	bf00      	nop
 8004b24:	40023800 	.word	0x40023800
 8004b28:	00f42400 	.word	0x00f42400
 8004b2c:	007a1200 	.word	0x007a1200

08004b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b36:	681b      	ldr	r3, [r3, #0]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	20000000 	.word	0x20000000

08004b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b4c:	f7ff fff0 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b50:	4602      	mov	r2, r0
 8004b52:	4b05      	ldr	r3, [pc, #20]	@ (8004b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	0a9b      	lsrs	r3, r3, #10
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	4903      	ldr	r1, [pc, #12]	@ (8004b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b5e:	5ccb      	ldrb	r3, [r1, r3]
 8004b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	bd80      	pop	{r7, pc}
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	0800df58 	.word	0x0800df58

08004b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b74:	f7ff ffdc 	bl	8004b30 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0b5b      	lsrs	r3, r3, #13
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	@ (8004b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	0800df58 	.word	0x0800df58

08004b98 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	220f      	movs	r2, #15
 8004ba6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ba8:	4b12      	ldr	r3, [pc, #72]	@ (8004bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0203 	and.w	r2, r3, #3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004bcc:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <HAL_RCC_GetClockConfig+0x5c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	08db      	lsrs	r3, r3, #3
 8004bd2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bda:	4b07      	ldr	r3, [pc, #28]	@ (8004bf8 <HAL_RCC_GetClockConfig+0x60>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 020f 	and.w	r2, r3, #15
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	601a      	str	r2, [r3, #0]
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800
 8004bf8:	40023c00 	.word	0x40023c00

08004bfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c04:	2300      	movs	r3, #0
 8004c06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10b      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d105      	bne.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d075      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c30:	4b91      	ldr	r3, [pc, #580]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c36:	f7fc fe8b 	bl	8001950 <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c3e:	f7fc fe87 	bl	8001950 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e189      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c50:	4b8a      	ldr	r3, [pc, #552]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d009      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	019a      	lsls	r2, r3, #6
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	071b      	lsls	r3, r3, #28
 8004c74:	4981      	ldr	r1, [pc, #516]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d01f      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004c88:	4b7c      	ldr	r3, [pc, #496]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c8e:	0f1b      	lsrs	r3, r3, #28
 8004c90:	f003 0307 	and.w	r3, r3, #7
 8004c94:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	019a      	lsls	r2, r3, #6
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	061b      	lsls	r3, r3, #24
 8004ca2:	431a      	orrs	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	071b      	lsls	r3, r3, #28
 8004ca8:	4974      	ldr	r1, [pc, #464]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cb0:	4b72      	ldr	r3, [pc, #456]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004cb6:	f023 021f 	bic.w	r2, r3, #31
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	496e      	ldr	r1, [pc, #440]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	019a      	lsls	r2, r3, #6
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	431a      	orrs	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	071b      	lsls	r3, r3, #28
 8004ce8:	4964      	ldr	r1, [pc, #400]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004cf0:	4b61      	ldr	r3, [pc, #388]	@ (8004e78 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fe2b 	bl	8001950 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004cfc:	e008      	b.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004cfe:	f7fc fe27 	bl	8001950 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e129      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d10:	4b5a      	ldr	r3, [pc, #360]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d105      	bne.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d079      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d34:	4b52      	ldr	r3, [pc, #328]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d3a:	f7fc fe09 	bl	8001950 <HAL_GetTick>
 8004d3e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d40:	e008      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d42:	f7fc fe05 	bl	8001950 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e107      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004d54:	4b49      	ldr	r3, [pc, #292]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d60:	d0ef      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0304 	and.w	r3, r3, #4
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d020      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004d6e:	4b43      	ldr	r3, [pc, #268]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d74:	0f1b      	lsrs	r3, r3, #28
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	019a      	lsls	r2, r3, #6
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	071b      	lsls	r3, r3, #28
 8004d8e:	493b      	ldr	r1, [pc, #236]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004d96:	4b39      	ldr	r3, [pc, #228]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d9c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	021b      	lsls	r3, r3, #8
 8004da8:	4934      	ldr	r1, [pc, #208]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01e      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc2:	0e1b      	lsrs	r3, r3, #24
 8004dc4:	f003 030f 	and.w	r3, r3, #15
 8004dc8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	019a      	lsls	r2, r3, #6
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	061b      	lsls	r3, r3, #24
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	071b      	lsls	r3, r3, #28
 8004ddc:	4927      	ldr	r1, [pc, #156]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004de4:	4b25      	ldr	r3, [pc, #148]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dea:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	4922      	ldr	r1, [pc, #136]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004dfa:	4b21      	ldr	r3, [pc, #132]	@ (8004e80 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e00:	f7fc fda6 	bl	8001950 <HAL_GetTick>
 8004e04:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004e08:	f7fc fda2 	bl	8001950 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e0a4      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004e1a:	4b18      	ldr	r3, [pc, #96]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e26:	d1ef      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 808b 	beq.w	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e36:	2300      	movs	r3, #0
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e46:	4b0d      	ldr	r3, [pc, #52]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	60fb      	str	r3, [r7, #12]
 8004e50:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e52:	4b0c      	ldr	r3, [pc, #48]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a0b      	ldr	r2, [pc, #44]	@ (8004e84 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e5c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e5e:	f7fc fd77 	bl	8001950 <HAL_GetTick>
 8004e62:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e64:	e010      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e66:	f7fc fd73 	bl	8001950 <HAL_GetTick>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d909      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e075      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004e78:	42470068 	.word	0x42470068
 8004e7c:	40023800 	.word	0x40023800
 8004e80:	42470070 	.word	0x42470070
 8004e84:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e88:	4b38      	ldr	r3, [pc, #224]	@ (8004f6c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d0e8      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e94:	4b36      	ldr	r3, [pc, #216]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e9c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d02f      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d028      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004eb2:	4b2f      	ldr	r3, [pc, #188]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004eba:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ec2:	4b2c      	ldr	r3, [pc, #176]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ec8:	4a29      	ldr	r2, [pc, #164]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ece:	4b28      	ldr	r3, [pc, #160]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	f003 0301 	and.w	r3, r3, #1
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d114      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004eda:	f7fc fd39 	bl	8001950 <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fc fd35 	bl	8001950 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e035      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004efa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0ee      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f0c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f10:	d10d      	bne.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004f12:	4b17      	ldr	r3, [pc, #92]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f1e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004f22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f26:	4912      	ldr	r1, [pc, #72]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	608b      	str	r3, [r1, #8]
 8004f2c:	e005      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004f2e:	4b10      	ldr	r3, [pc, #64]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	4a0f      	ldr	r2, [pc, #60]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f34:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004f38:	6093      	str	r3, [r2, #8]
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f3c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f46:	490a      	ldr	r1, [pc, #40]	@ (8004f70 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0310 	and.w	r3, r3, #16
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d004      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004f60:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40007000 	.word	0x40007000
 8004f70:	40023800 	.word	0x40023800
 8004f74:	42470e40 	.word	0x42470e40
 8004f78:	424711e0 	.word	0x424711e0

08004f7c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d101      	bne.n	8004f90 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e025      	b.n	8004fdc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d106      	bne.n	8004faa <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7fc fb8f 	bl	80016c8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2202      	movs	r2, #2
 8004fae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4610      	mov	r0, r2
 8004fbe:	f000 ffd3 	bl	8005f68 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6839      	ldr	r1, [r7, #0]
 8004fce:	f001 f828 	bl	8006022 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3708      	adds	r7, #8
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e07b      	b.n	80050ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d108      	bne.n	8005010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005006:	d009      	beq.n	800501c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	61da      	str	r2, [r3, #28]
 800500e:	e005      	b.n	800501c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2200      	movs	r2, #0
 8005020:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005028:	b2db      	uxtb	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d106      	bne.n	800503c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fc f9cc 	bl	80013d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005064:	431a      	orrs	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	695b      	ldr	r3, [r3, #20]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	699b      	ldr	r3, [r3, #24]
 8005088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800508c:	431a      	orrs	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005096:	431a      	orrs	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050a0:	ea42 0103 	orr.w	r1, r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	430a      	orrs	r2, r1
 80050b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	f003 0104 	and.w	r1, r3, #4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c2:	f003 0210 	and.w	r2, r3, #16
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69da      	ldr	r2, [r3, #28]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b082      	sub	sp, #8
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d101      	bne.n	8005108 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e041      	b.n	800518c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b00      	cmp	r3, #0
 8005112:	d106      	bne.n	8005122 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7fc f9d7 	bl	80014d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2202      	movs	r2, #2
 8005126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3304      	adds	r3, #4
 8005132:	4619      	mov	r1, r3
 8005134:	4610      	mov	r0, r2
 8005136:	f000 fa7d 	bl	8005634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3708      	adds	r7, #8
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}

08005194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d001      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e04e      	b.n	800524a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a23      	ldr	r2, [pc, #140]	@ (8005258 <HAL_TIM_Base_Start_IT+0xc4>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d022      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051d6:	d01d      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1f      	ldr	r2, [pc, #124]	@ (800525c <HAL_TIM_Base_Start_IT+0xc8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d018      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a1e      	ldr	r2, [pc, #120]	@ (8005260 <HAL_TIM_Base_Start_IT+0xcc>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d013      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a1c      	ldr	r2, [pc, #112]	@ (8005264 <HAL_TIM_Base_Start_IT+0xd0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d00e      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005268 <HAL_TIM_Base_Start_IT+0xd4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d009      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a19      	ldr	r2, [pc, #100]	@ (800526c <HAL_TIM_Base_Start_IT+0xd8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d004      	beq.n	8005214 <HAL_TIM_Base_Start_IT+0x80>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a18      	ldr	r2, [pc, #96]	@ (8005270 <HAL_TIM_Base_Start_IT+0xdc>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d111      	bne.n	8005238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2b06      	cmp	r3, #6
 8005224:	d010      	beq.n	8005248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0201 	orr.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005236:	e007      	b.n	8005248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f042 0201 	orr.w	r2, r2, #1
 8005246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40010000 	.word	0x40010000
 800525c:	40000400 	.word	0x40000400
 8005260:	40000800 	.word	0x40000800
 8005264:	40000c00 	.word	0x40000c00
 8005268:	40010400 	.word	0x40010400
 800526c:	40014000 	.word	0x40014000
 8005270:	40001800 	.word	0x40001800

08005274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d020      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	f003 0302 	and.w	r3, r3, #2
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0202 	mvn.w	r2, #2
 80052a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f000 f999 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 80052c4:	e005      	b.n	80052d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f98b 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 f99c 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d020      	beq.n	8005324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d01b      	beq.n	8005324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f06f 0204 	mvn.w	r2, #4
 80052f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f973 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 8005310:	e005      	b.n	800531e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f965 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f976 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f003 0308 	and.w	r3, r3, #8
 800532a:	2b00      	cmp	r3, #0
 800532c:	d020      	beq.n	8005370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d01b      	beq.n	8005370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f06f 0208 	mvn.w	r2, #8
 8005340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	69db      	ldr	r3, [r3, #28]
 800534e:	f003 0303 	and.w	r3, r3, #3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f94d 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 800535c:	e005      	b.n	800536a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f93f 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f950 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	f003 0310 	and.w	r3, r3, #16
 8005376:	2b00      	cmp	r3, #0
 8005378:	d020      	beq.n	80053bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01b      	beq.n	80053bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0210 	mvn.w	r2, #16
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2208      	movs	r2, #8
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f927 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f919 	bl	80055e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f92a 	bl	800560a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00c      	beq.n	80053e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0201 	mvn.w	r2, #1
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fb fdd2 	bl	8000f84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00c      	beq.n	8005404 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d007      	beq.n	8005404 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fae4 	bl	80059cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00c      	beq.n	8005428 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d007      	beq.n	8005428 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8fb 	bl	800561e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	f003 0320 	and.w	r3, r3, #32
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00c      	beq.n	800544c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f003 0320 	and.w	r3, r3, #32
 8005438:	2b00      	cmp	r3, #0
 800543a:	d007      	beq.n	800544c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f06f 0220 	mvn.w	r2, #32
 8005444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f000 fab6 	bl	80059b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800545e:	2300      	movs	r3, #0
 8005460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d101      	bne.n	8005470 <HAL_TIM_ConfigClockSource+0x1c>
 800546c:	2302      	movs	r3, #2
 800546e:	e0b4      	b.n	80055da <HAL_TIM_ConfigClockSource+0x186>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800548e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054a8:	d03e      	beq.n	8005528 <HAL_TIM_ConfigClockSource+0xd4>
 80054aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80054ae:	f200 8087 	bhi.w	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b6:	f000 8086 	beq.w	80055c6 <HAL_TIM_ConfigClockSource+0x172>
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054be:	d87f      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c0:	2b70      	cmp	r3, #112	@ 0x70
 80054c2:	d01a      	beq.n	80054fa <HAL_TIM_ConfigClockSource+0xa6>
 80054c4:	2b70      	cmp	r3, #112	@ 0x70
 80054c6:	d87b      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054c8:	2b60      	cmp	r3, #96	@ 0x60
 80054ca:	d050      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x11a>
 80054cc:	2b60      	cmp	r3, #96	@ 0x60
 80054ce:	d877      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d0:	2b50      	cmp	r3, #80	@ 0x50
 80054d2:	d03c      	beq.n	800554e <HAL_TIM_ConfigClockSource+0xfa>
 80054d4:	2b50      	cmp	r3, #80	@ 0x50
 80054d6:	d873      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d058      	beq.n	800558e <HAL_TIM_ConfigClockSource+0x13a>
 80054dc:	2b40      	cmp	r3, #64	@ 0x40
 80054de:	d86f      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e0:	2b30      	cmp	r3, #48	@ 0x30
 80054e2:	d064      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x15a>
 80054e4:	2b30      	cmp	r3, #48	@ 0x30
 80054e6:	d86b      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054e8:	2b20      	cmp	r3, #32
 80054ea:	d060      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x15a>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d867      	bhi.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d05c      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x15a>
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d05a      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0x15a>
 80054f8:	e062      	b.n	80055c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800550a:	f000 f9b9 	bl	8005880 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800551c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	609a      	str	r2, [r3, #8]
      break;
 8005526:	e04f      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005538:	f000 f9a2 	bl	8005880 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689a      	ldr	r2, [r3, #8]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800554a:	609a      	str	r2, [r3, #8]
      break;
 800554c:	e03c      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f916 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2150      	movs	r1, #80	@ 0x50
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f96f 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 800556c:	e02c      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800557a:	461a      	mov	r2, r3
 800557c:	f000 f935 	bl	80057ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2160      	movs	r1, #96	@ 0x60
 8005586:	4618      	mov	r0, r3
 8005588:	f000 f95f 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 800558c:	e01c      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	461a      	mov	r2, r3
 800559c:	f000 f8f6 	bl	800578c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2140      	movs	r1, #64	@ 0x40
 80055a6:	4618      	mov	r0, r3
 80055a8:	f000 f94f 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055ac:	e00c      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4619      	mov	r1, r3
 80055b8:	4610      	mov	r0, r2
 80055ba:	f000 f946 	bl	800584a <TIM_ITRx_SetConfig>
      break;
 80055be:	e003      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	73fb      	strb	r3, [r7, #15]
      break;
 80055c4:	e000      	b.n	80055c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80055d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}

080055e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800560a:	b480      	push	{r7}
 800560c:	b083      	sub	sp, #12
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005612:	bf00      	nop
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800561e:	b480      	push	{r7}
 8005620:	b083      	sub	sp, #12
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005626:	bf00      	nop
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a46      	ldr	r2, [pc, #280]	@ (8005760 <TIM_Base_SetConfig+0x12c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005652:	d00f      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a43      	ldr	r2, [pc, #268]	@ (8005764 <TIM_Base_SetConfig+0x130>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d00b      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a42      	ldr	r2, [pc, #264]	@ (8005768 <TIM_Base_SetConfig+0x134>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d007      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4a41      	ldr	r2, [pc, #260]	@ (800576c <TIM_Base_SetConfig+0x138>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d003      	beq.n	8005674 <TIM_Base_SetConfig+0x40>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	4a40      	ldr	r2, [pc, #256]	@ (8005770 <TIM_Base_SetConfig+0x13c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800567a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4313      	orrs	r3, r2
 8005684:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a35      	ldr	r2, [pc, #212]	@ (8005760 <TIM_Base_SetConfig+0x12c>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d02b      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005694:	d027      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a32      	ldr	r2, [pc, #200]	@ (8005764 <TIM_Base_SetConfig+0x130>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d023      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a31      	ldr	r2, [pc, #196]	@ (8005768 <TIM_Base_SetConfig+0x134>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d01f      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a30      	ldr	r2, [pc, #192]	@ (800576c <TIM_Base_SetConfig+0x138>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d01b      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4a2f      	ldr	r2, [pc, #188]	@ (8005770 <TIM_Base_SetConfig+0x13c>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d017      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a2e      	ldr	r2, [pc, #184]	@ (8005774 <TIM_Base_SetConfig+0x140>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005778 <TIM_Base_SetConfig+0x144>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2c      	ldr	r2, [pc, #176]	@ (800577c <TIM_Base_SetConfig+0x148>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a2b      	ldr	r2, [pc, #172]	@ (8005780 <TIM_Base_SetConfig+0x14c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005784 <TIM_Base_SetConfig+0x150>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a29      	ldr	r2, [pc, #164]	@ (8005788 <TIM_Base_SetConfig+0x154>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d108      	bne.n	80056f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689a      	ldr	r2, [r3, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <TIM_Base_SetConfig+0x12c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d003      	beq.n	800572c <TIM_Base_SetConfig+0xf8>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a12      	ldr	r2, [pc, #72]	@ (8005770 <TIM_Base_SetConfig+0x13c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d103      	bne.n	8005734 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	691a      	ldr	r2, [r3, #16]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d105      	bne.n	8005752 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f023 0201 	bic.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]
  }
}
 8005752:	bf00      	nop
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000
 8005764:	40000400 	.word	0x40000400
 8005768:	40000800 	.word	0x40000800
 800576c:	40000c00 	.word	0x40000c00
 8005770:	40010400 	.word	0x40010400
 8005774:	40014000 	.word	0x40014000
 8005778:	40014400 	.word	0x40014400
 800577c:	40014800 	.word	0x40014800
 8005780:	40001800 	.word	0x40001800
 8005784:	40001c00 	.word	0x40001c00
 8005788:	40002000 	.word	0x40002000

0800578c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	f023 0201 	bic.w	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80057b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	011b      	lsls	r3, r3, #4
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	4313      	orrs	r3, r2
 80057c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f023 030a 	bic.w	r3, r3, #10
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	693a      	ldr	r2, [r7, #16]
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr

080057ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ea:	b480      	push	{r7}
 80057ec:	b087      	sub	sp, #28
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	60f8      	str	r0, [r7, #12]
 80057f2:	60b9      	str	r1, [r7, #8]
 80057f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0210 	bic.w	r2, r3, #16
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005814:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	031b      	lsls	r3, r3, #12
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005826:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005860:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	4313      	orrs	r3, r2
 8005868:	f043 0307 	orr.w	r3, r3, #7
 800586c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	3714      	adds	r7, #20
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
 800588c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800589a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	021a      	lsls	r2, r3, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	431a      	orrs	r2, r3
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	609a      	str	r2, [r3, #8]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d101      	bne.n	80058d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058d4:	2302      	movs	r3, #2
 80058d6:	e05a      	b.n	800598e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a21      	ldr	r2, [pc, #132]	@ (800599c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d022      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005924:	d01d      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1d      	ldr	r2, [pc, #116]	@ (80059a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d018      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1a      	ldr	r2, [pc, #104]	@ (80059a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00e      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a18      	ldr	r2, [pc, #96]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d009      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d004      	beq.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d10c      	bne.n	800597c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005968:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	4313      	orrs	r3, r2
 8005972:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3714      	adds	r7, #20
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	40010000 	.word	0x40010000
 80059a0:	40000400 	.word	0x40000400
 80059a4:	40000800 	.word	0x40000800
 80059a8:	40000c00 	.word	0x40000c00
 80059ac:	40010400 	.word	0x40010400
 80059b0:	40014000 	.word	0x40014000
 80059b4:	40001800 	.word	0x40001800

080059b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e042      	b.n	8005a78 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fb fd84 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2224      	movs	r2, #36	@ 0x24
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68da      	ldr	r2, [r3, #12]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f82b 	bl	8005a80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	691a      	ldr	r2, [r3, #16]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3708      	adds	r7, #8
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a84:	b0c0      	sub	sp, #256	@ 0x100
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9c:	68d9      	ldr	r1, [r3, #12]
 8005a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	ea40 0301 	orr.w	r3, r0, r1
 8005aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aae:	689a      	ldr	r2, [r3, #8]
 8005ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	431a      	orrs	r2, r3
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ad8:	f021 010c 	bic.w	r1, r1, #12
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afa:	6999      	ldr	r1, [r3, #24]
 8005afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	ea40 0301 	orr.w	r3, r0, r1
 8005b06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b8f      	ldr	r3, [pc, #572]	@ (8005d4c <UART_SetConfig+0x2cc>)
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d005      	beq.n	8005b20 <UART_SetConfig+0xa0>
 8005b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d50 <UART_SetConfig+0x2d0>)
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d104      	bne.n	8005b2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b20:	f7ff f826 	bl	8004b70 <HAL_RCC_GetPCLK2Freq>
 8005b24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b28:	e003      	b.n	8005b32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b2a:	f7ff f80d 	bl	8004b48 <HAL_RCC_GetPCLK1Freq>
 8005b2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b3c:	f040 810c 	bne.w	8005d58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b52:	4622      	mov	r2, r4
 8005b54:	462b      	mov	r3, r5
 8005b56:	1891      	adds	r1, r2, r2
 8005b58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b5a:	415b      	adcs	r3, r3
 8005b5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b62:	4621      	mov	r1, r4
 8005b64:	eb12 0801 	adds.w	r8, r2, r1
 8005b68:	4629      	mov	r1, r5
 8005b6a:	eb43 0901 	adc.w	r9, r3, r1
 8005b6e:	f04f 0200 	mov.w	r2, #0
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b82:	4690      	mov	r8, r2
 8005b84:	4699      	mov	r9, r3
 8005b86:	4623      	mov	r3, r4
 8005b88:	eb18 0303 	adds.w	r3, r8, r3
 8005b8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b90:	462b      	mov	r3, r5
 8005b92:	eb49 0303 	adc.w	r3, r9, r3
 8005b96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ba6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005baa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bae:	460b      	mov	r3, r1
 8005bb0:	18db      	adds	r3, r3, r3
 8005bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	eb42 0303 	adc.w	r3, r2, r3
 8005bba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bbc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bc0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bc4:	f7fa fb1c 	bl	8000200 <__aeabi_uldivmod>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	460b      	mov	r3, r1
 8005bcc:	4b61      	ldr	r3, [pc, #388]	@ (8005d54 <UART_SetConfig+0x2d4>)
 8005bce:	fba3 2302 	umull	r2, r3, r3, r2
 8005bd2:	095b      	lsrs	r3, r3, #5
 8005bd4:	011c      	lsls	r4, r3, #4
 8005bd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005be4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005be8:	4642      	mov	r2, r8
 8005bea:	464b      	mov	r3, r9
 8005bec:	1891      	adds	r1, r2, r2
 8005bee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005bf0:	415b      	adcs	r3, r3
 8005bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bf4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005bf8:	4641      	mov	r1, r8
 8005bfa:	eb12 0a01 	adds.w	sl, r2, r1
 8005bfe:	4649      	mov	r1, r9
 8005c00:	eb43 0b01 	adc.w	fp, r3, r1
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c18:	4692      	mov	sl, r2
 8005c1a:	469b      	mov	fp, r3
 8005c1c:	4643      	mov	r3, r8
 8005c1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c26:	464b      	mov	r3, r9
 8005c28:	eb4b 0303 	adc.w	r3, fp, r3
 8005c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c44:	460b      	mov	r3, r1
 8005c46:	18db      	adds	r3, r3, r3
 8005c48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	eb42 0303 	adc.w	r3, r2, r3
 8005c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c5a:	f7fa fad1 	bl	8000200 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4611      	mov	r1, r2
 8005c64:	4b3b      	ldr	r3, [pc, #236]	@ (8005d54 <UART_SetConfig+0x2d4>)
 8005c66:	fba3 2301 	umull	r2, r3, r3, r1
 8005c6a:	095b      	lsrs	r3, r3, #5
 8005c6c:	2264      	movs	r2, #100	@ 0x64
 8005c6e:	fb02 f303 	mul.w	r3, r2, r3
 8005c72:	1acb      	subs	r3, r1, r3
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c7a:	4b36      	ldr	r3, [pc, #216]	@ (8005d54 <UART_SetConfig+0x2d4>)
 8005c7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c88:	441c      	add	r4, r3
 8005c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005c98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005c9c:	4642      	mov	r2, r8
 8005c9e:	464b      	mov	r3, r9
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cac:	4641      	mov	r1, r8
 8005cae:	1851      	adds	r1, r2, r1
 8005cb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	414b      	adcs	r3, r1
 8005cb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cc4:	4659      	mov	r1, fp
 8005cc6:	00cb      	lsls	r3, r1, #3
 8005cc8:	4651      	mov	r1, sl
 8005cca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cce:	4651      	mov	r1, sl
 8005cd0:	00ca      	lsls	r2, r1, #3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	4642      	mov	r2, r8
 8005cda:	189b      	adds	r3, r3, r2
 8005cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ce0:	464b      	mov	r3, r9
 8005ce2:	460a      	mov	r2, r1
 8005ce4:	eb42 0303 	adc.w	r3, r2, r3
 8005ce8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005cf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005cfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d00:	460b      	mov	r3, r1
 8005d02:	18db      	adds	r3, r3, r3
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d06:	4613      	mov	r3, r2
 8005d08:	eb42 0303 	adc.w	r3, r2, r3
 8005d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d16:	f7fa fa73 	bl	8000200 <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d54 <UART_SetConfig+0x2d4>)
 8005d20:	fba3 1302 	umull	r1, r3, r3, r2
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	2164      	movs	r1, #100	@ 0x64
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	3332      	adds	r3, #50	@ 0x32
 8005d32:	4a08      	ldr	r2, [pc, #32]	@ (8005d54 <UART_SetConfig+0x2d4>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	f003 0207 	and.w	r2, r3, #7
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4422      	add	r2, r4
 8005d46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d48:	e106      	b.n	8005f58 <UART_SetConfig+0x4d8>
 8005d4a:	bf00      	nop
 8005d4c:	40011000 	.word	0x40011000
 8005d50:	40011400 	.word	0x40011400
 8005d54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d6a:	4642      	mov	r2, r8
 8005d6c:	464b      	mov	r3, r9
 8005d6e:	1891      	adds	r1, r2, r2
 8005d70:	6239      	str	r1, [r7, #32]
 8005d72:	415b      	adcs	r3, r3
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d7a:	4641      	mov	r1, r8
 8005d7c:	1854      	adds	r4, r2, r1
 8005d7e:	4649      	mov	r1, r9
 8005d80:	eb43 0501 	adc.w	r5, r3, r1
 8005d84:	f04f 0200 	mov.w	r2, #0
 8005d88:	f04f 0300 	mov.w	r3, #0
 8005d8c:	00eb      	lsls	r3, r5, #3
 8005d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d92:	00e2      	lsls	r2, r4, #3
 8005d94:	4614      	mov	r4, r2
 8005d96:	461d      	mov	r5, r3
 8005d98:	4643      	mov	r3, r8
 8005d9a:	18e3      	adds	r3, r4, r3
 8005d9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005da0:	464b      	mov	r3, r9
 8005da2:	eb45 0303 	adc.w	r3, r5, r3
 8005da6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005daa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005db6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dba:	f04f 0200 	mov.w	r2, #0
 8005dbe:	f04f 0300 	mov.w	r3, #0
 8005dc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dc6:	4629      	mov	r1, r5
 8005dc8:	008b      	lsls	r3, r1, #2
 8005dca:	4621      	mov	r1, r4
 8005dcc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	008a      	lsls	r2, r1, #2
 8005dd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005dd8:	f7fa fa12 	bl	8000200 <__aeabi_uldivmod>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	460b      	mov	r3, r1
 8005de0:	4b60      	ldr	r3, [pc, #384]	@ (8005f64 <UART_SetConfig+0x4e4>)
 8005de2:	fba3 2302 	umull	r2, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	011c      	lsls	r4, r3, #4
 8005dea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dee:	2200      	movs	r2, #0
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005df4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005df8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005dfc:	4642      	mov	r2, r8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	1891      	adds	r1, r2, r2
 8005e02:	61b9      	str	r1, [r7, #24]
 8005e04:	415b      	adcs	r3, r3
 8005e06:	61fb      	str	r3, [r7, #28]
 8005e08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e0c:	4641      	mov	r1, r8
 8005e0e:	1851      	adds	r1, r2, r1
 8005e10:	6139      	str	r1, [r7, #16]
 8005e12:	4649      	mov	r1, r9
 8005e14:	414b      	adcs	r3, r1
 8005e16:	617b      	str	r3, [r7, #20]
 8005e18:	f04f 0200 	mov.w	r2, #0
 8005e1c:	f04f 0300 	mov.w	r3, #0
 8005e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e24:	4659      	mov	r1, fp
 8005e26:	00cb      	lsls	r3, r1, #3
 8005e28:	4651      	mov	r1, sl
 8005e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e2e:	4651      	mov	r1, sl
 8005e30:	00ca      	lsls	r2, r1, #3
 8005e32:	4610      	mov	r0, r2
 8005e34:	4619      	mov	r1, r3
 8005e36:	4603      	mov	r3, r0
 8005e38:	4642      	mov	r2, r8
 8005e3a:	189b      	adds	r3, r3, r2
 8005e3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e40:	464b      	mov	r3, r9
 8005e42:	460a      	mov	r2, r1
 8005e44:	eb42 0303 	adc.w	r3, r2, r3
 8005e48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e64:	4649      	mov	r1, r9
 8005e66:	008b      	lsls	r3, r1, #2
 8005e68:	4641      	mov	r1, r8
 8005e6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e6e:	4641      	mov	r1, r8
 8005e70:	008a      	lsls	r2, r1, #2
 8005e72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e76:	f7fa f9c3 	bl	8000200 <__aeabi_uldivmod>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	460b      	mov	r3, r1
 8005e7e:	4611      	mov	r1, r2
 8005e80:	4b38      	ldr	r3, [pc, #224]	@ (8005f64 <UART_SetConfig+0x4e4>)
 8005e82:	fba3 2301 	umull	r2, r3, r3, r1
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	2264      	movs	r2, #100	@ 0x64
 8005e8a:	fb02 f303 	mul.w	r3, r2, r3
 8005e8e:	1acb      	subs	r3, r1, r3
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	3332      	adds	r3, #50	@ 0x32
 8005e94:	4a33      	ldr	r2, [pc, #204]	@ (8005f64 <UART_SetConfig+0x4e4>)
 8005e96:	fba2 2303 	umull	r2, r3, r2, r3
 8005e9a:	095b      	lsrs	r3, r3, #5
 8005e9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ea0:	441c      	add	r4, r3
 8005ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005eac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	464b      	mov	r3, r9
 8005eb4:	1891      	adds	r1, r2, r2
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	415b      	adcs	r3, r3
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ec0:	4641      	mov	r1, r8
 8005ec2:	1851      	adds	r1, r2, r1
 8005ec4:	6039      	str	r1, [r7, #0]
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	414b      	adcs	r3, r1
 8005eca:	607b      	str	r3, [r7, #4]
 8005ecc:	f04f 0200 	mov.w	r2, #0
 8005ed0:	f04f 0300 	mov.w	r3, #0
 8005ed4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ed8:	4659      	mov	r1, fp
 8005eda:	00cb      	lsls	r3, r1, #3
 8005edc:	4651      	mov	r1, sl
 8005ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee2:	4651      	mov	r1, sl
 8005ee4:	00ca      	lsls	r2, r1, #3
 8005ee6:	4610      	mov	r0, r2
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4603      	mov	r3, r0
 8005eec:	4642      	mov	r2, r8
 8005eee:	189b      	adds	r3, r3, r2
 8005ef0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	460a      	mov	r2, r1
 8005ef6:	eb42 0303 	adc.w	r3, r2, r3
 8005efa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f08:	f04f 0200 	mov.w	r2, #0
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f14:	4649      	mov	r1, r9
 8005f16:	008b      	lsls	r3, r1, #2
 8005f18:	4641      	mov	r1, r8
 8005f1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f1e:	4641      	mov	r1, r8
 8005f20:	008a      	lsls	r2, r1, #2
 8005f22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f26:	f7fa f96b 	bl	8000200 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <UART_SetConfig+0x4e4>)
 8005f30:	fba3 1302 	umull	r1, r3, r3, r2
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	2164      	movs	r1, #100	@ 0x64
 8005f38:	fb01 f303 	mul.w	r3, r1, r3
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	3332      	adds	r3, #50	@ 0x32
 8005f42:	4a08      	ldr	r2, [pc, #32]	@ (8005f64 <UART_SetConfig+0x4e4>)
 8005f44:	fba2 2303 	umull	r2, r3, r2, r3
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	f003 020f 	and.w	r2, r3, #15
 8005f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4422      	add	r2, r4
 8005f56:	609a      	str	r2, [r3, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f64:	51eb851f 	.word	0x51eb851f

08005f68 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d123      	bne.n	8005fc2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005f82:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	6851      	ldr	r1, [r2, #4]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	6892      	ldr	r2, [r2, #8]
 8005f8e:	4311      	orrs	r1, r2
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	68d2      	ldr	r2, [r2, #12]
 8005f94:	4311      	orrs	r1, r2
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	6912      	ldr	r2, [r2, #16]
 8005f9a:	4311      	orrs	r1, r2
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	6952      	ldr	r2, [r2, #20]
 8005fa0:	4311      	orrs	r1, r2
 8005fa2:	683a      	ldr	r2, [r7, #0]
 8005fa4:	6992      	ldr	r2, [r2, #24]
 8005fa6:	4311      	orrs	r1, r2
 8005fa8:	683a      	ldr	r2, [r7, #0]
 8005faa:	69d2      	ldr	r2, [r2, #28]
 8005fac:	4311      	orrs	r1, r2
 8005fae:	683a      	ldr	r2, [r7, #0]
 8005fb0:	6a12      	ldr	r2, [r2, #32]
 8005fb2:	4311      	orrs	r1, r2
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	431a      	orrs	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e028      	b.n	8006014 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	69d9      	ldr	r1, [r3, #28]
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	4319      	orrs	r1, r3
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	430b      	orrs	r3, r1
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005fe8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	6851      	ldr	r1, [r2, #4]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	6892      	ldr	r2, [r2, #8]
 8005ff4:	4311      	orrs	r1, r2
 8005ff6:	683a      	ldr	r2, [r7, #0]
 8005ff8:	68d2      	ldr	r2, [r2, #12]
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	6912      	ldr	r2, [r2, #16]
 8006000:	4311      	orrs	r1, r2
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	6952      	ldr	r2, [r2, #20]
 8006006:	4311      	orrs	r1, r2
 8006008:	683a      	ldr	r2, [r7, #0]
 800600a:	6992      	ldr	r2, [r2, #24]
 800600c:	430a      	orrs	r2, r1
 800600e:	431a      	orrs	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006022:	b480      	push	{r7}
 8006024:	b085      	sub	sp, #20
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d128      	bne.n	8006086 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	1e59      	subs	r1, r3, #1
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	3b01      	subs	r3, #1
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	4319      	orrs	r1, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	3b01      	subs	r3, #1
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	4319      	orrs	r1, r3
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	3b01      	subs	r3, #1
 800605c:	031b      	lsls	r3, r3, #12
 800605e:	4319      	orrs	r1, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	3b01      	subs	r3, #1
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	4319      	orrs	r1, r3
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	3b01      	subs	r3, #1
 8006070:	051b      	lsls	r3, r3, #20
 8006072:	4319      	orrs	r1, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	3b01      	subs	r3, #1
 800607a:	061b      	lsls	r3, r3, #24
 800607c:	430b      	orrs	r3, r1
 800607e:	431a      	orrs	r2, r3
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	609a      	str	r2, [r3, #8]
 8006084:	e02f      	b.n	80060e6 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800608e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	68d2      	ldr	r2, [r2, #12]
 8006096:	3a01      	subs	r2, #1
 8006098:	0311      	lsls	r1, r2, #12
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	6952      	ldr	r2, [r2, #20]
 800609e:	3a01      	subs	r2, #1
 80060a0:	0512      	lsls	r2, r2, #20
 80060a2:	430a      	orrs	r2, r1
 80060a4:	431a      	orrs	r2, r3
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	1e59      	subs	r1, r3, #1
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	3b01      	subs	r3, #1
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	4319      	orrs	r1, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	021b      	lsls	r3, r3, #8
 80060ca:	4319      	orrs	r1, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	4319      	orrs	r1, r3
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	3b01      	subs	r3, #1
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	430b      	orrs	r3, r1
 80060e0:	431a      	orrs	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80060f4:	b084      	sub	sp, #16
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b084      	sub	sp, #16
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	6078      	str	r0, [r7, #4]
 80060fe:	f107 001c 	add.w	r0, r7, #28
 8006102:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006106:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800610a:	2b01      	cmp	r3, #1
 800610c:	d123      	bne.n	8006156 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006112:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006136:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800613a:	2b01      	cmp	r3, #1
 800613c:	d105      	bne.n	800614a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f001 fae8 	bl	8007720 <USB_CoreReset>
 8006150:	4603      	mov	r3, r0
 8006152:	73fb      	strb	r3, [r7, #15]
 8006154:	e01b      	b.n	800618e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f001 fadc 	bl	8007720 <USB_CoreReset>
 8006168:	4603      	mov	r3, r0
 800616a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800616c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006170:	2b00      	cmp	r3, #0
 8006172:	d106      	bne.n	8006182 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006178:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006180:	e005      	b.n	800618e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006186:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800618e:	7fbb      	ldrb	r3, [r7, #30]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10b      	bne.n	80061ac <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f043 0206 	orr.w	r2, r3, #6
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f043 0220 	orr.w	r2, r3, #32
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061b8:	b004      	add	sp, #16
 80061ba:	4770      	bx	lr

080061bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	4613      	mov	r3, r2
 80061c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80061ca:	79fb      	ldrb	r3, [r7, #7]
 80061cc:	2b02      	cmp	r3, #2
 80061ce:	d165      	bne.n	800629c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	4a41      	ldr	r2, [pc, #260]	@ (80062d8 <USB_SetTurnaroundTime+0x11c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d906      	bls.n	80061e6 <USB_SetTurnaroundTime+0x2a>
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4a40      	ldr	r2, [pc, #256]	@ (80062dc <USB_SetTurnaroundTime+0x120>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d202      	bcs.n	80061e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80061e0:	230f      	movs	r3, #15
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	e062      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	4a3c      	ldr	r2, [pc, #240]	@ (80062dc <USB_SetTurnaroundTime+0x120>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d306      	bcc.n	80061fc <USB_SetTurnaroundTime+0x40>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4a3b      	ldr	r2, [pc, #236]	@ (80062e0 <USB_SetTurnaroundTime+0x124>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d202      	bcs.n	80061fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80061f6:	230e      	movs	r3, #14
 80061f8:	617b      	str	r3, [r7, #20]
 80061fa:	e057      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	4a38      	ldr	r2, [pc, #224]	@ (80062e0 <USB_SetTurnaroundTime+0x124>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d306      	bcc.n	8006212 <USB_SetTurnaroundTime+0x56>
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	4a37      	ldr	r2, [pc, #220]	@ (80062e4 <USB_SetTurnaroundTime+0x128>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d202      	bcs.n	8006212 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800620c:	230d      	movs	r3, #13
 800620e:	617b      	str	r3, [r7, #20]
 8006210:	e04c      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	4a33      	ldr	r2, [pc, #204]	@ (80062e4 <USB_SetTurnaroundTime+0x128>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d306      	bcc.n	8006228 <USB_SetTurnaroundTime+0x6c>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4a32      	ldr	r2, [pc, #200]	@ (80062e8 <USB_SetTurnaroundTime+0x12c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d802      	bhi.n	8006228 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006222:	230c      	movs	r3, #12
 8006224:	617b      	str	r3, [r7, #20]
 8006226:	e041      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	4a2f      	ldr	r2, [pc, #188]	@ (80062e8 <USB_SetTurnaroundTime+0x12c>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d906      	bls.n	800623e <USB_SetTurnaroundTime+0x82>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4a2e      	ldr	r2, [pc, #184]	@ (80062ec <USB_SetTurnaroundTime+0x130>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d802      	bhi.n	800623e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006238:	230b      	movs	r3, #11
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e036      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	4a2a      	ldr	r2, [pc, #168]	@ (80062ec <USB_SetTurnaroundTime+0x130>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d906      	bls.n	8006254 <USB_SetTurnaroundTime+0x98>
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	4a29      	ldr	r2, [pc, #164]	@ (80062f0 <USB_SetTurnaroundTime+0x134>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d802      	bhi.n	8006254 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800624e:	230a      	movs	r3, #10
 8006250:	617b      	str	r3, [r7, #20]
 8006252:	e02b      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	4a26      	ldr	r2, [pc, #152]	@ (80062f0 <USB_SetTurnaroundTime+0x134>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d906      	bls.n	800626a <USB_SetTurnaroundTime+0xae>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	4a25      	ldr	r2, [pc, #148]	@ (80062f4 <USB_SetTurnaroundTime+0x138>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d202      	bcs.n	800626a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006264:	2309      	movs	r3, #9
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	e020      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a21      	ldr	r2, [pc, #132]	@ (80062f4 <USB_SetTurnaroundTime+0x138>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d306      	bcc.n	8006280 <USB_SetTurnaroundTime+0xc4>
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	4a20      	ldr	r2, [pc, #128]	@ (80062f8 <USB_SetTurnaroundTime+0x13c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d802      	bhi.n	8006280 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800627a:	2308      	movs	r3, #8
 800627c:	617b      	str	r3, [r7, #20]
 800627e:	e015      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4a1d      	ldr	r2, [pc, #116]	@ (80062f8 <USB_SetTurnaroundTime+0x13c>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d906      	bls.n	8006296 <USB_SetTurnaroundTime+0xda>
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4a1c      	ldr	r2, [pc, #112]	@ (80062fc <USB_SetTurnaroundTime+0x140>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d202      	bcs.n	8006296 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006290:	2307      	movs	r3, #7
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e00a      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006296:	2306      	movs	r3, #6
 8006298:	617b      	str	r3, [r7, #20]
 800629a:	e007      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800629c:	79fb      	ldrb	r3, [r7, #7]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d102      	bne.n	80062a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80062a2:	2309      	movs	r3, #9
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	e001      	b.n	80062ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80062a8:	2309      	movs	r3, #9
 80062aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68da      	ldr	r2, [r3, #12]
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	029b      	lsls	r3, r3, #10
 80062c0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	371c      	adds	r7, #28
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	00d8acbf 	.word	0x00d8acbf
 80062dc:	00e4e1c0 	.word	0x00e4e1c0
 80062e0:	00f42400 	.word	0x00f42400
 80062e4:	01067380 	.word	0x01067380
 80062e8:	011a499f 	.word	0x011a499f
 80062ec:	01312cff 	.word	0x01312cff
 80062f0:	014ca43f 	.word	0x014ca43f
 80062f4:	016e3600 	.word	0x016e3600
 80062f8:	01a6ab1f 	.word	0x01a6ab1f
 80062fc:	01e84800 	.word	0x01e84800

08006300 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f043 0201 	orr.w	r2, r3, #1
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	f023 0201 	bic.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	370c      	adds	r7, #12
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr

08006344 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006360:	78fb      	ldrb	r3, [r7, #3]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d115      	bne.n	8006392 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006372:	200a      	movs	r0, #10
 8006374:	f7fb faf8 	bl	8001968 <HAL_Delay>
      ms += 10U;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	330a      	adds	r3, #10
 800637c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 f93f 	bl	8007602 <USB_GetMode>
 8006384:	4603      	mov	r3, r0
 8006386:	2b01      	cmp	r3, #1
 8006388:	d01e      	beq.n	80063c8 <USB_SetCurrentMode+0x84>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2bc7      	cmp	r3, #199	@ 0xc7
 800638e:	d9f0      	bls.n	8006372 <USB_SetCurrentMode+0x2e>
 8006390:	e01a      	b.n	80063c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d115      	bne.n	80063c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	68db      	ldr	r3, [r3, #12]
 800639c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80063a4:	200a      	movs	r0, #10
 80063a6:	f7fb fadf 	bl	8001968 <HAL_Delay>
      ms += 10U;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	330a      	adds	r3, #10
 80063ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f001 f926 	bl	8007602 <USB_GetMode>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d005      	beq.n	80063c8 <USB_SetCurrentMode+0x84>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2bc7      	cmp	r3, #199	@ 0xc7
 80063c0:	d9f0      	bls.n	80063a4 <USB_SetCurrentMode+0x60>
 80063c2:	e001      	b.n	80063c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e005      	b.n	80063d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2bc8      	cmp	r3, #200	@ 0xc8
 80063cc:	d101      	bne.n	80063d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	e000      	b.n	80063d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80063dc:	b084      	sub	sp, #16
 80063de:	b580      	push	{r7, lr}
 80063e0:	b086      	sub	sp, #24
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80063ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
 80063fa:	e009      	b.n	8006410 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3340      	adds	r3, #64	@ 0x40
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	2200      	movs	r2, #0
 8006408:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	3301      	adds	r3, #1
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b0e      	cmp	r3, #14
 8006414:	d9f2      	bls.n	80063fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006416:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800641a:	2b00      	cmp	r3, #0
 800641c:	d11c      	bne.n	8006458 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800642c:	f043 0302 	orr.w	r3, r3, #2
 8006430:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006436:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	639a      	str	r2, [r3, #56]	@ 0x38
 8006456:	e00b      	b.n	8006470 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006468:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006476:	461a      	mov	r2, r3
 8006478:	2300      	movs	r3, #0
 800647a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800647c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006480:	2b01      	cmp	r3, #1
 8006482:	d10d      	bne.n	80064a0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006484:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006488:	2b00      	cmp	r3, #0
 800648a:	d104      	bne.n	8006496 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800648c:	2100      	movs	r1, #0
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f968 	bl	8006764 <USB_SetDevSpeed>
 8006494:	e008      	b.n	80064a8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006496:	2101      	movs	r1, #1
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f963 	bl	8006764 <USB_SetDevSpeed>
 800649e:	e003      	b.n	80064a8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80064a0:	2103      	movs	r1, #3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f95e 	bl	8006764 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064a8:	2110      	movs	r1, #16
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f8fa 	bl	80066a4 <USB_FlushTxFifo>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f924 	bl	8006708 <USB_FlushRxFifo>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064d0:	461a      	mov	r2, r3
 80064d2:	2300      	movs	r3, #0
 80064d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064dc:	461a      	mov	r2, r3
 80064de:	2300      	movs	r3, #0
 80064e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064e8:	461a      	mov	r2, r3
 80064ea:	2300      	movs	r3, #0
 80064ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80064ee:	2300      	movs	r3, #0
 80064f0:	613b      	str	r3, [r7, #16]
 80064f2:	e043      	b.n	800657c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	015a      	lsls	r2, r3, #5
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4413      	add	r3, r2
 80064fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800650a:	d118      	bne.n	800653e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10a      	bne.n	8006528 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800651e:	461a      	mov	r2, r3
 8006520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006524:	6013      	str	r3, [r2, #0]
 8006526:	e013      	b.n	8006550 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006534:	461a      	mov	r2, r3
 8006536:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800653a:	6013      	str	r3, [r2, #0]
 800653c:	e008      	b.n	8006550 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800654a:	461a      	mov	r2, r3
 800654c:	2300      	movs	r3, #0
 800654e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	015a      	lsls	r2, r3, #5
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4413      	add	r3, r2
 8006558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800655c:	461a      	mov	r2, r3
 800655e:	2300      	movs	r3, #0
 8006560:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4413      	add	r3, r2
 800656a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656e:	461a      	mov	r2, r3
 8006570:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006574:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	3301      	adds	r3, #1
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006580:	461a      	mov	r2, r3
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	4293      	cmp	r3, r2
 8006586:	d3b5      	bcc.n	80064f4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	e043      	b.n	8006616 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065a4:	d118      	bne.n	80065d8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10a      	bne.n	80065c2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80065be:	6013      	str	r3, [r2, #0]
 80065c0:	e013      	b.n	80065ea <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	015a      	lsls	r2, r3, #5
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4413      	add	r3, r2
 80065ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065ce:	461a      	mov	r2, r3
 80065d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80065d4:	6013      	str	r3, [r2, #0]
 80065d6:	e008      	b.n	80065ea <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	015a      	lsls	r2, r3, #5
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	4413      	add	r3, r2
 80065e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065e4:	461a      	mov	r2, r3
 80065e6:	2300      	movs	r3, #0
 80065e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800660e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3301      	adds	r3, #1
 8006614:	613b      	str	r3, [r7, #16]
 8006616:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800661a:	461a      	mov	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4293      	cmp	r3, r2
 8006620:	d3b5      	bcc.n	800658e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006630:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006634:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006642:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006644:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006648:	2b00      	cmp	r3, #0
 800664a:	d105      	bne.n	8006658 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f043 0210 	orr.w	r2, r3, #16
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	4b10      	ldr	r3, [pc, #64]	@ (80066a0 <USB_DevInit+0x2c4>)
 800665e:	4313      	orrs	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006664:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	f043 0208 	orr.w	r2, r3, #8
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006678:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006688:	f043 0304 	orr.w	r3, r3, #4
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006690:	7dfb      	ldrb	r3, [r7, #23]
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800669c:	b004      	add	sp, #16
 800669e:	4770      	bx	lr
 80066a0:	803c3800 	.word	0x803c3800

080066a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3301      	adds	r3, #1
 80066b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066be:	d901      	bls.n	80066c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e01b      	b.n	80066fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	daf2      	bge.n	80066b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	019b      	lsls	r3, r3, #6
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3301      	adds	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80066e8:	d901      	bls.n	80066ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80066ea:	2303      	movs	r3, #3
 80066ec:	e006      	b.n	80066fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d0f0      	beq.n	80066dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3301      	adds	r3, #1
 8006718:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006720:	d901      	bls.n	8006726 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e018      	b.n	8006758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	daf2      	bge.n	8006714 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2210      	movs	r2, #16
 8006736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006744:	d901      	bls.n	800674a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e006      	b.n	8006758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	f003 0310 	and.w	r3, r3, #16
 8006752:	2b10      	cmp	r3, #16
 8006754:	d0f0      	beq.n	8006738 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006756:	2300      	movs	r3, #0
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	460b      	mov	r3, r1
 800676e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	78fb      	ldrb	r3, [r7, #3]
 800677e:	68f9      	ldr	r1, [r7, #12]
 8006780:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006784:	4313      	orrs	r3, r2
 8006786:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8006796:	b480      	push	{r7}
 8006798:	b087      	sub	sp, #28
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 0306 	and.w	r3, r3, #6
 80067ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d102      	bne.n	80067bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80067b6:	2300      	movs	r3, #0
 80067b8:	75fb      	strb	r3, [r7, #23]
 80067ba:	e00a      	b.n	80067d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d002      	beq.n	80067c8 <USB_GetDevSpeed+0x32>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b06      	cmp	r3, #6
 80067c6:	d102      	bne.n	80067ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80067c8:	2302      	movs	r3, #2
 80067ca:	75fb      	strb	r3, [r7, #23]
 80067cc:	e001      	b.n	80067d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80067ce:	230f      	movs	r3, #15
 80067d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80067d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b085      	sub	sp, #20
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
 80067e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d13a      	bne.n	8006872 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006802:	69da      	ldr	r2, [r3, #28]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	f003 030f 	and.w	r3, r3, #15
 800680c:	2101      	movs	r1, #1
 800680e:	fa01 f303 	lsl.w	r3, r1, r3
 8006812:	b29b      	uxth	r3, r3
 8006814:	68f9      	ldr	r1, [r7, #12]
 8006816:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800681a:	4313      	orrs	r3, r2
 800681c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d155      	bne.n	80068e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	791b      	ldrb	r3, [r3, #4]
 800684e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006850:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	059b      	lsls	r3, r3, #22
 8006856:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006858:	4313      	orrs	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	0151      	lsls	r1, r2, #5
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	440a      	add	r2, r1
 8006862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006866:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800686a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800686e:	6013      	str	r3, [r2, #0]
 8006870:	e036      	b.n	80068e0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006878:	69da      	ldr	r2, [r3, #28]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 030f 	and.w	r3, r3, #15
 8006882:	2101      	movs	r1, #1
 8006884:	fa01 f303 	lsl.w	r3, r1, r3
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	68f9      	ldr	r1, [r7, #12]
 800688c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006890:	4313      	orrs	r3, r2
 8006892:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d11a      	bne.n	80068e0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	015a      	lsls	r2, r3, #5
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	791b      	ldrb	r3, [r3, #4]
 80068c4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80068c6:	430b      	orrs	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	0151      	lsls	r1, r2, #5
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	440a      	add	r2, r1
 80068d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80068d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068de:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
	...

080068f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	785b      	ldrb	r3, [r3, #1]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d161      	bne.n	80069d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	015a      	lsls	r2, r3, #5
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	4413      	add	r3, r2
 8006914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800691e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006922:	d11f      	bne.n	8006964 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800693e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006942:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	015a      	lsls	r2, r3, #5
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	4413      	add	r3, r2
 800694c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	0151      	lsls	r1, r2, #5
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	440a      	add	r2, r1
 800695a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800695e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006962:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800696a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	2101      	movs	r1, #1
 8006976:	fa01 f303 	lsl.w	r3, r1, r3
 800697a:	b29b      	uxth	r3, r3
 800697c:	43db      	mvns	r3, r3
 800697e:	68f9      	ldr	r1, [r7, #12]
 8006980:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006984:	4013      	ands	r3, r2
 8006986:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698e:	69da      	ldr	r2, [r3, #28]
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	f003 030f 	and.w	r3, r3, #15
 8006998:	2101      	movs	r1, #1
 800699a:	fa01 f303 	lsl.w	r3, r1, r3
 800699e:	b29b      	uxth	r3, r3
 80069a0:	43db      	mvns	r3, r3
 80069a2:	68f9      	ldr	r1, [r7, #12]
 80069a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069a8:	4013      	ands	r3, r2
 80069aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	0159      	lsls	r1, r3, #5
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	440b      	add	r3, r1
 80069c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069c6:	4619      	mov	r1, r3
 80069c8:	4b35      	ldr	r3, [pc, #212]	@ (8006aa0 <USB_DeactivateEndpoint+0x1b0>)
 80069ca:	4013      	ands	r3, r2
 80069cc:	600b      	str	r3, [r1, #0]
 80069ce:	e060      	b.n	8006a92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069e6:	d11f      	bne.n	8006a28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 030f 	and.w	r3, r3, #15
 8006a38:	2101      	movs	r1, #1
 8006a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a3e:	041b      	lsls	r3, r3, #16
 8006a40:	43db      	mvns	r3, r3
 8006a42:	68f9      	ldr	r1, [r7, #12]
 8006a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a48:	4013      	ands	r3, r2
 8006a4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a52:	69da      	ldr	r2, [r3, #28]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	041b      	lsls	r3, r3, #16
 8006a64:	43db      	mvns	r3, r3
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	0159      	lsls	r1, r3, #5
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	440b      	add	r3, r1
 8006a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4b05      	ldr	r3, [pc, #20]	@ (8006aa4 <USB_DeactivateEndpoint+0x1b4>)
 8006a8e:	4013      	ands	r3, r2
 8006a90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3714      	adds	r7, #20
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	ec337800 	.word	0xec337800
 8006aa4:	eff37800 	.word	0xeff37800

08006aa8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b08a      	sub	sp, #40	@ 0x28
 8006aac:	af02      	add	r7, sp, #8
 8006aae:	60f8      	str	r0, [r7, #12]
 8006ab0:	60b9      	str	r1, [r7, #8]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	785b      	ldrb	r3, [r3, #1]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	f040 817f 	bne.w	8006dc8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d132      	bne.n	8006b38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	015a      	lsls	r2, r3, #5
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	4413      	add	r3, r2
 8006ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ade:	691b      	ldr	r3, [r3, #16]
 8006ae0:	69ba      	ldr	r2, [r7, #24]
 8006ae2:	0151      	lsls	r1, r2, #5
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	440a      	add	r2, r1
 8006ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aec:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006af0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006af4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	015a      	lsls	r2, r3, #5
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	4413      	add	r3, r2
 8006afe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	69fa      	ldr	r2, [r7, #28]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b30:	0cdb      	lsrs	r3, r3, #19
 8006b32:	04db      	lsls	r3, r3, #19
 8006b34:	6113      	str	r3, [r2, #16]
 8006b36:	e097      	b.n	8006c68 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	69fa      	ldr	r2, [r7, #28]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b52:	0cdb      	lsrs	r3, r3, #19
 8006b54:	04db      	lsls	r3, r3, #19
 8006b56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	0151      	lsls	r1, r2, #5
 8006b6a:	69fa      	ldr	r2, [r7, #28]
 8006b6c:	440a      	add	r2, r1
 8006b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b72:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006b76:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006b7a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d11a      	bne.n	8006bb8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	691a      	ldr	r2, [r3, #16]
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	689a      	ldr	r2, [r3, #8]
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	0151      	lsls	r1, r2, #5
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	440a      	add	r2, r1
 8006bac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006bb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006bb4:	6113      	str	r3, [r2, #16]
 8006bb6:	e044      	b.n	8006c42 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	1e5a      	subs	r2, r3, #1
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bcc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bda:	691a      	ldr	r2, [r3, #16]
 8006bdc:	8afb      	ldrh	r3, [r7, #22]
 8006bde:	04d9      	lsls	r1, r3, #19
 8006be0:	4ba4      	ldr	r3, [pc, #656]	@ (8006e74 <USB_EPStartXfer+0x3cc>)
 8006be2:	400b      	ands	r3, r1
 8006be4:	69b9      	ldr	r1, [r7, #24]
 8006be6:	0148      	lsls	r0, r1, #5
 8006be8:	69f9      	ldr	r1, [r7, #28]
 8006bea:	4401      	add	r1, r0
 8006bec:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	791b      	ldrb	r3, [r3, #4]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d122      	bne.n	8006c42 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	69ba      	ldr	r2, [r7, #24]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c16:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006c1a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	075b      	lsls	r3, r3, #29
 8006c2e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006c32:	69b9      	ldr	r1, [r7, #24]
 8006c34:	0148      	lsls	r0, r1, #5
 8006c36:	69f9      	ldr	r1, [r7, #28]
 8006c38:	4401      	add	r1, r0
 8006c3a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c4e:	691a      	ldr	r2, [r3, #16]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	691b      	ldr	r3, [r3, #16]
 8006c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c58:	69b9      	ldr	r1, [r7, #24]
 8006c5a:	0148      	lsls	r0, r1, #5
 8006c5c:	69f9      	ldr	r1, [r7, #28]
 8006c5e:	4401      	add	r1, r0
 8006c60:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006c64:	4313      	orrs	r3, r2
 8006c66:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d14b      	bne.n	8006d06 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	69db      	ldr	r3, [r3, #28]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d009      	beq.n	8006c8a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	015a      	lsls	r2, r3, #5
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c82:	461a      	mov	r2, r3
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d128      	bne.n	8006ce4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d110      	bne.n	8006cc4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	0151      	lsls	r1, r2, #5
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	440a      	add	r2, r1
 8006cb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cbc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	e00f      	b.n	8006ce4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69ba      	ldr	r2, [r7, #24]
 8006cd4:	0151      	lsls	r1, r2, #5
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	440a      	add	r2, r1
 8006cda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ce2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	015a      	lsls	r2, r3, #5
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	4413      	add	r3, r2
 8006cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	69ba      	ldr	r2, [r7, #24]
 8006cf4:	0151      	lsls	r1, r2, #5
 8006cf6:	69fa      	ldr	r2, [r7, #28]
 8006cf8:	440a      	add	r2, r1
 8006cfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cfe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	e166      	b.n	8006fd4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	015a      	lsls	r2, r3, #5
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	0151      	lsls	r1, r2, #5
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	440a      	add	r2, r1
 8006d1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d20:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d24:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	791b      	ldrb	r3, [r3, #4]
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d015      	beq.n	8006d5a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 814e 	beq.w	8006fd4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	2101      	movs	r1, #1
 8006d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d4e:	69f9      	ldr	r1, [r7, #28]
 8006d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006d54:	4313      	orrs	r3, r2
 8006d56:	634b      	str	r3, [r1, #52]	@ 0x34
 8006d58:	e13c      	b.n	8006fd4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d110      	bne.n	8006d8c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	015a      	lsls	r2, r3, #5
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	4413      	add	r3, r2
 8006d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	0151      	lsls	r1, r2, #5
 8006d7c:	69fa      	ldr	r2, [r7, #28]
 8006d7e:	440a      	add	r2, r1
 8006d80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d84:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	e00f      	b.n	8006dac <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	68d9      	ldr	r1, [r3, #12]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781a      	ldrb	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	691b      	ldr	r3, [r3, #16]
 8006db8:	b298      	uxth	r0, r3
 8006dba:	79fb      	ldrb	r3, [r7, #7]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f000 f9b9 	bl	8007138 <USB_WritePacket>
 8006dc6:	e105      	b.n	8006fd4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd4:	691b      	ldr	r3, [r3, #16]
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	69fa      	ldr	r2, [r7, #28]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006de2:	0cdb      	lsrs	r3, r3, #19
 8006de4:	04db      	lsls	r3, r3, #19
 8006de6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	69ba      	ldr	r2, [r7, #24]
 8006df8:	0151      	lsls	r1, r2, #5
 8006dfa:	69fa      	ldr	r2, [r7, #28]
 8006dfc:	440a      	add	r2, r1
 8006dfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e02:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006e06:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006e0a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d132      	bne.n	8006e78 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d003      	beq.n	8006e22 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	689a      	ldr	r2, [r3, #8]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	6a1b      	ldr	r3, [r3, #32]
 8006e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e40:	69b9      	ldr	r1, [r7, #24]
 8006e42:	0148      	lsls	r0, r1, #5
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	4401      	add	r1, r0
 8006e48:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	69fb      	ldr	r3, [r7, #28]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	69ba      	ldr	r2, [r7, #24]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e6a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006e6e:	6113      	str	r3, [r2, #16]
 8006e70:	e062      	b.n	8006f38 <USB_EPStartXfer+0x490>
 8006e72:	bf00      	nop
 8006e74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d123      	bne.n	8006ec8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	015a      	lsls	r2, r3, #5
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	4413      	add	r3, r2
 8006e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e96:	69b9      	ldr	r1, [r7, #24]
 8006e98:	0148      	lsls	r0, r1, #5
 8006e9a:	69f9      	ldr	r1, [r7, #28]
 8006e9c:	4401      	add	r1, r0
 8006e9e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	015a      	lsls	r2, r3, #5
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	4413      	add	r3, r2
 8006eae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	69ba      	ldr	r2, [r7, #24]
 8006eb6:	0151      	lsls	r1, r2, #5
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	440a      	add	r2, r1
 8006ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ec4:	6113      	str	r3, [r2, #16]
 8006ec6:	e037      	b.n	8006f38 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	691a      	ldr	r2, [r3, #16]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	689b      	ldr	r3, [r3, #8]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	1e5a      	subs	r2, r3, #1
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	689b      	ldr	r3, [r3, #8]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	8afa      	ldrh	r2, [r7, #22]
 8006ee4:	fb03 f202 	mul.w	r2, r3, r2
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef8:	691a      	ldr	r2, [r3, #16]
 8006efa:	8afb      	ldrh	r3, [r7, #22]
 8006efc:	04d9      	lsls	r1, r3, #19
 8006efe:	4b38      	ldr	r3, [pc, #224]	@ (8006fe0 <USB_EPStartXfer+0x538>)
 8006f00:	400b      	ands	r3, r1
 8006f02:	69b9      	ldr	r1, [r7, #24]
 8006f04:	0148      	lsls	r0, r1, #5
 8006f06:	69f9      	ldr	r1, [r7, #28]
 8006f08:	4401      	add	r1, r0
 8006f0a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	015a      	lsls	r2, r3, #5
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f1e:	691a      	ldr	r2, [r3, #16]
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	6a1b      	ldr	r3, [r3, #32]
 8006f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	0148      	lsls	r0, r1, #5
 8006f2c:	69f9      	ldr	r1, [r7, #28]
 8006f2e:	4401      	add	r1, r0
 8006f30:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006f34:	4313      	orrs	r3, r2
 8006f36:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10d      	bne.n	8006f5a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d009      	beq.n	8006f5a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	68d9      	ldr	r1, [r3, #12]
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	015a      	lsls	r2, r3, #5
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	4413      	add	r3, r2
 8006f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f56:	460a      	mov	r2, r1
 8006f58:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	791b      	ldrb	r3, [r3, #4]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d128      	bne.n	8006fb4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d110      	bne.n	8006f94 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	0151      	lsls	r1, r2, #5
 8006f84:	69fa      	ldr	r2, [r7, #28]
 8006f86:	440a      	add	r2, r1
 8006f88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f8c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f90:	6013      	str	r3, [r2, #0]
 8006f92:	e00f      	b.n	8006fb4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	015a      	lsls	r2, r3, #5
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	4413      	add	r3, r2
 8006f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69ba      	ldr	r2, [r7, #24]
 8006fa4:	0151      	lsls	r1, r2, #5
 8006fa6:	69fa      	ldr	r2, [r7, #28]
 8006fa8:	440a      	add	r2, r1
 8006faa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fb2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	69ba      	ldr	r2, [r7, #24]
 8006fc4:	0151      	lsls	r1, r2, #5
 8006fc6:	69fa      	ldr	r2, [r7, #28]
 8006fc8:	440a      	add	r2, r1
 8006fca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fce:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006fd2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3720      	adds	r7, #32
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	1ff80000 	.word	0x1ff80000

08006fe4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	785b      	ldrb	r3, [r3, #1]
 8006ffe:	2b01      	cmp	r3, #1
 8007000:	d14a      	bne.n	8007098 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007016:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800701a:	f040 8086 	bne.w	800712a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	683a      	ldr	r2, [r7, #0]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	0151      	lsls	r1, r2, #5
 8007034:	693a      	ldr	r2, [r7, #16]
 8007036:	440a      	add	r2, r1
 8007038:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800703c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007040:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	7812      	ldrb	r2, [r2, #0]
 8007056:	0151      	lsls	r1, r2, #5
 8007058:	693a      	ldr	r2, [r7, #16]
 800705a:	440a      	add	r2, r1
 800705c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007060:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007064:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007072:	4293      	cmp	r3, r2
 8007074:	d902      	bls.n	800707c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	75fb      	strb	r3, [r7, #23]
          break;
 800707a:	e056      	b.n	800712a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4413      	add	r3, r2
 8007086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007090:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007094:	d0e7      	beq.n	8007066 <USB_EPStopXfer+0x82>
 8007096:	e048      	b.n	800712a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b0:	d13b      	bne.n	800712a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	7812      	ldrb	r2, [r2, #0]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80070d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	7812      	ldrb	r2, [r2, #0]
 80070ea:	0151      	lsls	r1, r2, #5
 80070ec:	693a      	ldr	r2, [r7, #16]
 80070ee:	440a      	add	r2, r1
 80070f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3301      	adds	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007106:	4293      	cmp	r3, r2
 8007108:	d902      	bls.n	8007110 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	75fb      	strb	r3, [r7, #23]
          break;
 800710e:	e00c      	b.n	800712a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	015a      	lsls	r2, r3, #5
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4413      	add	r3, r2
 800711a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007124:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007128:	d0e7      	beq.n	80070fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800712a:	7dfb      	ldrb	r3, [r7, #23]
}
 800712c:	4618      	mov	r0, r3
 800712e:	371c      	adds	r7, #28
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007138:	b480      	push	{r7}
 800713a:	b089      	sub	sp, #36	@ 0x24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	4611      	mov	r1, r2
 8007144:	461a      	mov	r2, r3
 8007146:	460b      	mov	r3, r1
 8007148:	71fb      	strb	r3, [r7, #7]
 800714a:	4613      	mov	r3, r2
 800714c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800715a:	2b00      	cmp	r3, #0
 800715c:	d123      	bne.n	80071a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800715e:	88bb      	ldrh	r3, [r7, #4]
 8007160:	3303      	adds	r3, #3
 8007162:	089b      	lsrs	r3, r3, #2
 8007164:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007166:	2300      	movs	r3, #0
 8007168:	61bb      	str	r3, [r7, #24]
 800716a:	e018      	b.n	800719e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	031a      	lsls	r2, r3, #12
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	4413      	add	r3, r2
 8007174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007178:	461a      	mov	r2, r3
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	3301      	adds	r3, #1
 8007184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	3301      	adds	r3, #1
 800718a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	3301      	adds	r3, #1
 8007190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	3301      	adds	r3, #1
 8007196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	3301      	adds	r3, #1
 800719c:	61bb      	str	r3, [r7, #24]
 800719e:	69ba      	ldr	r2, [r7, #24]
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d3e2      	bcc.n	800716c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3724      	adds	r7, #36	@ 0x24
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr

080071b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b08b      	sub	sp, #44	@ 0x2c
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	4613      	mov	r3, r2
 80071c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	089b      	lsrs	r3, r3, #2
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80071d2:	88fb      	ldrh	r3, [r7, #6]
 80071d4:	f003 0303 	and.w	r3, r3, #3
 80071d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80071da:	2300      	movs	r3, #0
 80071dc:	623b      	str	r3, [r7, #32]
 80071de:	e014      	b.n	800720a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80071ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ee:	3301      	adds	r3, #1
 80071f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f4:	3301      	adds	r3, #1
 80071f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fa:	3301      	adds	r3, #1
 80071fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80071fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007200:	3301      	adds	r3, #1
 8007202:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007204:	6a3b      	ldr	r3, [r7, #32]
 8007206:	3301      	adds	r3, #1
 8007208:	623b      	str	r3, [r7, #32]
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	429a      	cmp	r2, r3
 8007210:	d3e6      	bcc.n	80071e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007212:	8bfb      	ldrh	r3, [r7, #30]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01e      	beq.n	8007256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007222:	461a      	mov	r2, r3
 8007224:	f107 0310 	add.w	r3, r7, #16
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	fa22 f303 	lsr.w	r3, r2, r3
 8007238:	b2da      	uxtb	r2, r3
 800723a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723c:	701a      	strb	r2, [r3, #0]
      i++;
 800723e:	6a3b      	ldr	r3, [r7, #32]
 8007240:	3301      	adds	r3, #1
 8007242:	623b      	str	r3, [r7, #32]
      pDest++;
 8007244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007246:	3301      	adds	r3, #1
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800724a:	8bfb      	ldrh	r3, [r7, #30]
 800724c:	3b01      	subs	r3, #1
 800724e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007250:	8bfb      	ldrh	r3, [r7, #30]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1ea      	bne.n	800722c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007258:	4618      	mov	r0, r3
 800725a:	372c      	adds	r7, #44	@ 0x2c
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	785b      	ldrb	r3, [r3, #1]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d12c      	bne.n	80072da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	db12      	blt.n	80072b8 <USB_EPSetStall+0x54>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00f      	beq.n	80072b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	015a      	lsls	r2, r3, #5
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	4413      	add	r3, r2
 80072a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	68ba      	ldr	r2, [r7, #8]
 80072a8:	0151      	lsls	r1, r2, #5
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	440a      	add	r2, r1
 80072ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	0151      	lsls	r1, r2, #5
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	440a      	add	r2, r1
 80072ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	e02b      	b.n	8007332 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	db12      	blt.n	8007312 <USB_EPSetStall+0xae>
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d00f      	beq.n	8007312 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	015a      	lsls	r2, r3, #5
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68ba      	ldr	r2, [r7, #8]
 8007302:	0151      	lsls	r1, r2, #5
 8007304:	68fa      	ldr	r2, [r7, #12]
 8007306:	440a      	add	r2, r1
 8007308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800730c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007310:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	0151      	lsls	r1, r2, #5
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	440a      	add	r2, r1
 8007328:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800732c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007330:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007332:	2300      	movs	r3, #0
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007340:	b480      	push	{r7}
 8007342:	b085      	sub	sp, #20
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	785b      	ldrb	r3, [r3, #1]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d128      	bne.n	80073ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68ba      	ldr	r2, [r7, #8]
 800736c:	0151      	lsls	r1, r2, #5
 800736e:	68fa      	ldr	r2, [r7, #12]
 8007370:	440a      	add	r2, r1
 8007372:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007376:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800737a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	791b      	ldrb	r3, [r3, #4]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d003      	beq.n	800738c <USB_EPClearStall+0x4c>
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	791b      	ldrb	r3, [r3, #4]
 8007388:	2b02      	cmp	r3, #2
 800738a:	d138      	bne.n	80073fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68ba      	ldr	r2, [r7, #8]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	e027      	b.n	80073fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	791b      	ldrb	r3, [r3, #4]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d003      	beq.n	80073de <USB_EPClearStall+0x9e>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	791b      	ldrb	r3, [r3, #4]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d10f      	bne.n	80073fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800742a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800742e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007440:	68f9      	ldr	r1, [r7, #12]
 8007442:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007446:	4313      	orrs	r3, r2
 8007448:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68fa      	ldr	r2, [r7, #12]
 800746e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007472:	f023 0303 	bic.w	r3, r3, #3
 8007476:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007486:	f023 0302 	bic.w	r3, r3, #2
 800748a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr

0800749a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800749a:	b480      	push	{r7}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80074b4:	f023 0303 	bic.w	r3, r3, #3
 80074b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	68fa      	ldr	r2, [r7, #12]
 80074c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074c8:	f043 0302 	orr.w	r3, r3, #2
 80074cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3714      	adds	r7, #20
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	695b      	ldr	r3, [r3, #20]
 80074e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	68fa      	ldr	r2, [r7, #12]
 80074f0:	4013      	ands	r3, r2
 80074f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074f4:	68fb      	ldr	r3, [r7, #12]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	68ba      	ldr	r2, [r7, #8]
 8007522:	4013      	ands	r3, r2
 8007524:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	0c1b      	lsrs	r3, r3, #16
}
 800752a:	4618      	mov	r0, r3
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	4013      	ands	r3, r2
 8007558:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	b29b      	uxth	r3, r3
}
 800755e:	4618      	mov	r0, r3
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800756a:	b480      	push	{r7}
 800756c:	b085      	sub	sp, #20
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	460b      	mov	r3, r1
 8007574:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	015a      	lsls	r2, r3, #5
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4413      	add	r3, r2
 8007582:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007590:	695b      	ldr	r3, [r3, #20]
 8007592:	68ba      	ldr	r2, [r7, #8]
 8007594:	4013      	ands	r3, r2
 8007596:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007598:	68bb      	ldr	r3, [r7, #8]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b087      	sub	sp, #28
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	460b      	mov	r3, r1
 80075b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075bc:	691b      	ldr	r3, [r3, #16]
 80075be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	f003 030f 	and.w	r3, r3, #15
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	fa22 f303 	lsr.w	r3, r2, r3
 80075d6:	01db      	lsls	r3, r3, #7
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	015a      	lsls	r2, r3, #5
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	4413      	add	r3, r2
 80075e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	693a      	ldr	r2, [r7, #16]
 80075f0:	4013      	ands	r3, r2
 80075f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80075f4:	68bb      	ldr	r3, [r7, #8]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007602:	b480      	push	{r7}
 8007604:	b083      	sub	sp, #12
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695b      	ldr	r3, [r3, #20]
 800760e:	f003 0301 	and.w	r3, r3, #1
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800761e:	b480      	push	{r7}
 8007620:	b085      	sub	sp, #20
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007638:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800763c:	f023 0307 	bic.w	r3, r3, #7
 8007640:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	68fa      	ldr	r2, [r7, #12]
 800764c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007654:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr

08007664 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007664:	b480      	push	{r7}
 8007666:	b087      	sub	sp, #28
 8007668:	af00      	add	r7, sp, #0
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	460b      	mov	r3, r1
 800766e:	607a      	str	r2, [r7, #4]
 8007670:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	333c      	adds	r3, #60	@ 0x3c
 800767a:	3304      	adds	r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4a26      	ldr	r2, [pc, #152]	@ (800771c <USB_EP0_OutStart+0xb8>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d90a      	bls.n	800769e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007698:	d101      	bne.n	800769e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	e037      	b.n	800770e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a4:	461a      	mov	r2, r3
 80076a6:	2300      	movs	r3, #0
 80076a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80076bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076cc:	f043 0318 	orr.w	r3, r3, #24
 80076d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d8:	691b      	ldr	r3, [r3, #16]
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80076e0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80076e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80076e6:	7afb      	ldrb	r3, [r7, #11]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d10f      	bne.n	800770c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076f2:	461a      	mov	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007706:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800770a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	4f54300a 	.word	0x4f54300a

08007720 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007728:	2300      	movs	r3, #0
 800772a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	3301      	adds	r3, #1
 8007730:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007738:	d901      	bls.n	800773e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e01b      	b.n	8007776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	daf2      	bge.n	800772c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007746:	2300      	movs	r3, #0
 8007748:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691b      	ldr	r3, [r3, #16]
 800774e:	f043 0201 	orr.w	r2, r3, #1
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007762:	d901      	bls.n	8007768 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007764:	2303      	movs	r3, #3
 8007766:	e006      	b.n	8007776 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b01      	cmp	r3, #1
 8007772:	d0f0      	beq.n	8007756 <USB_CoreReset+0x36>

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007790:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007794:	f006 f99e 	bl	800dad4 <USBD_static_malloc>
 8007798:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	32b0      	adds	r2, #176	@ 0xb0
 80077aa:	2100      	movs	r1, #0
 80077ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80077b0:	2302      	movs	r3, #2
 80077b2:	e0d4      	b.n	800795e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80077b4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80077b8:	2100      	movs	r1, #0
 80077ba:	68f8      	ldr	r0, [r7, #12]
 80077bc:	f006 f9ce 	bl	800db5c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	32b0      	adds	r2, #176	@ 0xb0
 80077ca:	68f9      	ldr	r1, [r7, #12]
 80077cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	32b0      	adds	r2, #176	@ 0xb0
 80077da:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	7c1b      	ldrb	r3, [r3, #16]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d138      	bne.n	800785e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80077ec:	4b5e      	ldr	r3, [pc, #376]	@ (8007968 <USBD_CDC_Init+0x1e4>)
 80077ee:	7819      	ldrb	r1, [r3, #0]
 80077f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80077f4:	2202      	movs	r2, #2
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f006 f849 	bl	800d88e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80077fc:	4b5a      	ldr	r3, [pc, #360]	@ (8007968 <USBD_CDC_Init+0x1e4>)
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	6879      	ldr	r1, [r7, #4]
 8007806:	4613      	mov	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	4413      	add	r3, r2
 800780c:	009b      	lsls	r3, r3, #2
 800780e:	440b      	add	r3, r1
 8007810:	3324      	adds	r3, #36	@ 0x24
 8007812:	2201      	movs	r2, #1
 8007814:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007816:	4b55      	ldr	r3, [pc, #340]	@ (800796c <USBD_CDC_Init+0x1e8>)
 8007818:	7819      	ldrb	r1, [r3, #0]
 800781a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800781e:	2202      	movs	r2, #2
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f006 f834 	bl	800d88e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007826:	4b51      	ldr	r3, [pc, #324]	@ (800796c <USBD_CDC_Init+0x1e8>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 020f 	and.w	r2, r3, #15
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	440b      	add	r3, r1
 800783a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800783e:	2201      	movs	r2, #1
 8007840:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007842:	4b4b      	ldr	r3, [pc, #300]	@ (8007970 <USBD_CDC_Init+0x1ec>)
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	f003 020f 	and.w	r2, r3, #15
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3326      	adds	r3, #38	@ 0x26
 8007858:	2210      	movs	r2, #16
 800785a:	801a      	strh	r2, [r3, #0]
 800785c:	e035      	b.n	80078ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800785e:	4b42      	ldr	r3, [pc, #264]	@ (8007968 <USBD_CDC_Init+0x1e4>)
 8007860:	7819      	ldrb	r1, [r3, #0]
 8007862:	2340      	movs	r3, #64	@ 0x40
 8007864:	2202      	movs	r2, #2
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f006 f811 	bl	800d88e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800786c:	4b3e      	ldr	r3, [pc, #248]	@ (8007968 <USBD_CDC_Init+0x1e4>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	6879      	ldr	r1, [r7, #4]
 8007876:	4613      	mov	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	440b      	add	r3, r1
 8007880:	3324      	adds	r3, #36	@ 0x24
 8007882:	2201      	movs	r2, #1
 8007884:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007886:	4b39      	ldr	r3, [pc, #228]	@ (800796c <USBD_CDC_Init+0x1e8>)
 8007888:	7819      	ldrb	r1, [r3, #0]
 800788a:	2340      	movs	r3, #64	@ 0x40
 800788c:	2202      	movs	r2, #2
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f005 fffd 	bl	800d88e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007894:	4b35      	ldr	r3, [pc, #212]	@ (800796c <USBD_CDC_Init+0x1e8>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f003 020f 	and.w	r2, r3, #15
 800789c:	6879      	ldr	r1, [r7, #4]
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	440b      	add	r3, r1
 80078a8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80078ac:	2201      	movs	r2, #1
 80078ae:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80078b0:	4b2f      	ldr	r3, [pc, #188]	@ (8007970 <USBD_CDC_Init+0x1ec>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	f003 020f 	and.w	r2, r3, #15
 80078b8:	6879      	ldr	r1, [r7, #4]
 80078ba:	4613      	mov	r3, r2
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	4413      	add	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	440b      	add	r3, r1
 80078c4:	3326      	adds	r3, #38	@ 0x26
 80078c6:	2210      	movs	r2, #16
 80078c8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80078ca:	4b29      	ldr	r3, [pc, #164]	@ (8007970 <USBD_CDC_Init+0x1ec>)
 80078cc:	7819      	ldrb	r1, [r3, #0]
 80078ce:	2308      	movs	r3, #8
 80078d0:	2203      	movs	r2, #3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f005 ffdb 	bl	800d88e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80078d8:	4b25      	ldr	r3, [pc, #148]	@ (8007970 <USBD_CDC_Init+0x1ec>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	f003 020f 	and.w	r2, r3, #15
 80078e0:	6879      	ldr	r1, [r7, #4]
 80078e2:	4613      	mov	r3, r2
 80078e4:	009b      	lsls	r3, r3, #2
 80078e6:	4413      	add	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	440b      	add	r3, r1
 80078ec:	3324      	adds	r3, #36	@ 0x24
 80078ee:	2201      	movs	r2, #1
 80078f0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	33b0      	adds	r3, #176	@ 0xb0
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2200      	movs	r2, #0
 800791a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007928:	2302      	movs	r3, #2
 800792a:	e018      	b.n	800795e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	7c1b      	ldrb	r3, [r3, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007934:	4b0d      	ldr	r3, [pc, #52]	@ (800796c <USBD_CDC_Init+0x1e8>)
 8007936:	7819      	ldrb	r1, [r3, #0]
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800793e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f006 f892 	bl	800da6c <USBD_LL_PrepareReceive>
 8007948:	e008      	b.n	800795c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800794a:	4b08      	ldr	r3, [pc, #32]	@ (800796c <USBD_CDC_Init+0x1e8>)
 800794c:	7819      	ldrb	r1, [r3, #0]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007954:	2340      	movs	r3, #64	@ 0x40
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f006 f888 	bl	800da6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000093 	.word	0x20000093
 800796c:	20000094 	.word	0x20000094
 8007970:	20000095 	.word	0x20000095

08007974 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	460b      	mov	r3, r1
 800797e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007980:	4b3a      	ldr	r3, [pc, #232]	@ (8007a6c <USBD_CDC_DeInit+0xf8>)
 8007982:	781b      	ldrb	r3, [r3, #0]
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f005 ffa7 	bl	800d8da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800798c:	4b37      	ldr	r3, [pc, #220]	@ (8007a6c <USBD_CDC_DeInit+0xf8>)
 800798e:	781b      	ldrb	r3, [r3, #0]
 8007990:	f003 020f 	and.w	r2, r3, #15
 8007994:	6879      	ldr	r1, [r7, #4]
 8007996:	4613      	mov	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	440b      	add	r3, r1
 80079a0:	3324      	adds	r3, #36	@ 0x24
 80079a2:	2200      	movs	r2, #0
 80079a4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80079a6:	4b32      	ldr	r3, [pc, #200]	@ (8007a70 <USBD_CDC_DeInit+0xfc>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	4619      	mov	r1, r3
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f005 ff94 	bl	800d8da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80079b2:	4b2f      	ldr	r3, [pc, #188]	@ (8007a70 <USBD_CDC_DeInit+0xfc>)
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 020f 	and.w	r2, r3, #15
 80079ba:	6879      	ldr	r1, [r7, #4]
 80079bc:	4613      	mov	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	4413      	add	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	440b      	add	r3, r1
 80079c6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80079ca:	2200      	movs	r2, #0
 80079cc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80079ce:	4b29      	ldr	r3, [pc, #164]	@ (8007a74 <USBD_CDC_DeInit+0x100>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	4619      	mov	r1, r3
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f005 ff80 	bl	800d8da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80079da:	4b26      	ldr	r3, [pc, #152]	@ (8007a74 <USBD_CDC_DeInit+0x100>)
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	f003 020f 	and.w	r2, r3, #15
 80079e2:	6879      	ldr	r1, [r7, #4]
 80079e4:	4613      	mov	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	440b      	add	r3, r1
 80079ee:	3324      	adds	r3, #36	@ 0x24
 80079f0:	2200      	movs	r2, #0
 80079f2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80079f4:	4b1f      	ldr	r3, [pc, #124]	@ (8007a74 <USBD_CDC_DeInit+0x100>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	f003 020f 	and.w	r2, r3, #15
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	3326      	adds	r3, #38	@ 0x26
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	32b0      	adds	r2, #176	@ 0xb0
 8007a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01f      	beq.n	8007a60 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	33b0      	adds	r3, #176	@ 0xb0
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4413      	add	r3, r2
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	32b0      	adds	r2, #176	@ 0xb0
 8007a3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f006 f854 	bl	800daf0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	32b0      	adds	r2, #176	@ 0xb0
 8007a52:	2100      	movs	r1, #0
 8007a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000093 	.word	0x20000093
 8007a70:	20000094 	.word	0x20000094
 8007a74:	20000095 	.word	0x20000095

08007a78 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	32b0      	adds	r2, #176	@ 0xb0
 8007a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a90:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007a96:	2300      	movs	r3, #0
 8007a98:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d101      	bne.n	8007aa8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007aa4:	2303      	movs	r3, #3
 8007aa6:	e0bf      	b.n	8007c28 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d050      	beq.n	8007b56 <USBD_CDC_Setup+0xde>
 8007ab4:	2b20      	cmp	r3, #32
 8007ab6:	f040 80af 	bne.w	8007c18 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	88db      	ldrh	r3, [r3, #6]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d03a      	beq.n	8007b38 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	b25b      	sxtb	r3, r3
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	da1b      	bge.n	8007b04 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	33b0      	adds	r3, #176	@ 0xb0
 8007ad6:	009b      	lsls	r3, r3, #2
 8007ad8:	4413      	add	r3, r2
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	683a      	ldr	r2, [r7, #0]
 8007ae0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007ae2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ae4:	683a      	ldr	r2, [r7, #0]
 8007ae6:	88d2      	ldrh	r2, [r2, #6]
 8007ae8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	88db      	ldrh	r3, [r3, #6]
 8007aee:	2b07      	cmp	r3, #7
 8007af0:	bf28      	it	cs
 8007af2:	2307      	movcs	r3, #7
 8007af4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	89fa      	ldrh	r2, [r7, #14]
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f001 fd93 	bl	8009628 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007b02:	e090      	b.n	8007c26 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	785a      	ldrb	r2, [r3, #1]
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	88db      	ldrh	r3, [r3, #6]
 8007b12:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b14:	d803      	bhi.n	8007b1e <USBD_CDC_Setup+0xa6>
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	88db      	ldrh	r3, [r3, #6]
 8007b1a:	b2da      	uxtb	r2, r3
 8007b1c:	e000      	b.n	8007b20 <USBD_CDC_Setup+0xa8>
 8007b1e:	2240      	movs	r2, #64	@ 0x40
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007b26:	6939      	ldr	r1, [r7, #16]
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f001 fda5 	bl	8009680 <USBD_CtlPrepareRx>
      break;
 8007b36:	e076      	b.n	8007c26 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	33b0      	adds	r3, #176	@ 0xb0
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	4413      	add	r3, r2
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	7850      	ldrb	r0, [r2, #1]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	6839      	ldr	r1, [r7, #0]
 8007b52:	4798      	blx	r3
      break;
 8007b54:	e067      	b.n	8007c26 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	785b      	ldrb	r3, [r3, #1]
 8007b5a:	2b0b      	cmp	r3, #11
 8007b5c:	d851      	bhi.n	8007c02 <USBD_CDC_Setup+0x18a>
 8007b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b64 <USBD_CDC_Setup+0xec>)
 8007b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b64:	08007b95 	.word	0x08007b95
 8007b68:	08007c11 	.word	0x08007c11
 8007b6c:	08007c03 	.word	0x08007c03
 8007b70:	08007c03 	.word	0x08007c03
 8007b74:	08007c03 	.word	0x08007c03
 8007b78:	08007c03 	.word	0x08007c03
 8007b7c:	08007c03 	.word	0x08007c03
 8007b80:	08007c03 	.word	0x08007c03
 8007b84:	08007c03 	.word	0x08007c03
 8007b88:	08007c03 	.word	0x08007c03
 8007b8c:	08007bbf 	.word	0x08007bbf
 8007b90:	08007be9 	.word	0x08007be9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d107      	bne.n	8007bb0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ba0:	f107 030a 	add.w	r3, r7, #10
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f001 fd3d 	bl	8009628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bae:	e032      	b.n	8007c16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bb0:	6839      	ldr	r1, [r7, #0]
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fcbb 	bl	800952e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	75fb      	strb	r3, [r7, #23]
          break;
 8007bbc:	e02b      	b.n	8007c16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b03      	cmp	r3, #3
 8007bc8:	d107      	bne.n	8007bda <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007bca:	f107 030d 	add.w	r3, r7, #13
 8007bce:	2201      	movs	r2, #1
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fd28 	bl	8009628 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007bd8:	e01d      	b.n	8007c16 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007bda:	6839      	ldr	r1, [r7, #0]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f001 fca6 	bl	800952e <USBD_CtlError>
            ret = USBD_FAIL;
 8007be2:	2303      	movs	r3, #3
 8007be4:	75fb      	strb	r3, [r7, #23]
          break;
 8007be6:	e016      	b.n	8007c16 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b03      	cmp	r3, #3
 8007bf2:	d00f      	beq.n	8007c14 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f001 fc99 	bl	800952e <USBD_CtlError>
            ret = USBD_FAIL;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007c00:	e008      	b.n	8007c14 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007c02:	6839      	ldr	r1, [r7, #0]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f001 fc92 	bl	800952e <USBD_CtlError>
          ret = USBD_FAIL;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	75fb      	strb	r3, [r7, #23]
          break;
 8007c0e:	e002      	b.n	8007c16 <USBD_CDC_Setup+0x19e>
          break;
 8007c10:	bf00      	nop
 8007c12:	e008      	b.n	8007c26 <USBD_CDC_Setup+0x1ae>
          break;
 8007c14:	bf00      	nop
      }
      break;
 8007c16:	e006      	b.n	8007c26 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 fc87 	bl	800952e <USBD_CtlError>
      ret = USBD_FAIL;
 8007c20:	2303      	movs	r3, #3
 8007c22:	75fb      	strb	r3, [r7, #23]
      break;
 8007c24:	bf00      	nop
  }

  return (uint8_t)ret;
 8007c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3718      	adds	r7, #24
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}

08007c30 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007c42:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	32b0      	adds	r2, #176	@ 0xb0
 8007c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d101      	bne.n	8007c5a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e065      	b.n	8007d26 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	32b0      	adds	r2, #176	@ 0xb0
 8007c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c68:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f003 020f 	and.w	r2, r3, #15
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4413      	add	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	3318      	adds	r3, #24
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d02f      	beq.n	8007ce4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007c84:	78fb      	ldrb	r3, [r7, #3]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	6879      	ldr	r1, [r7, #4]
 8007c8c:	4613      	mov	r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	4413      	add	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	440b      	add	r3, r1
 8007c96:	3318      	adds	r3, #24
 8007c98:	681a      	ldr	r2, [r3, #0]
 8007c9a:	78fb      	ldrb	r3, [r7, #3]
 8007c9c:	f003 010f 	and.w	r1, r3, #15
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	00db      	lsls	r3, r3, #3
 8007ca6:	440b      	add	r3, r1
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	4403      	add	r3, r0
 8007cac:	331c      	adds	r3, #28
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cb4:	fb01 f303 	mul.w	r3, r1, r3
 8007cb8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d112      	bne.n	8007ce4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007cbe:	78fb      	ldrb	r3, [r7, #3]
 8007cc0:	f003 020f 	and.w	r2, r3, #15
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4413      	add	r3, r2
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	440b      	add	r3, r1
 8007cd0:	3318      	adds	r3, #24
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007cd6:	78f9      	ldrb	r1, [r7, #3]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	2200      	movs	r2, #0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f005 fea4 	bl	800da2a <USBD_LL_Transmit>
 8007ce2:	e01f      	b.n	8007d24 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	33b0      	adds	r3, #176	@ 0xb0
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	4413      	add	r3, r2
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d010      	beq.n	8007d24 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	33b0      	adds	r3, #176	@ 0xb0
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	691b      	ldr	r3, [r3, #16]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007d20:	78fa      	ldrb	r2, [r7, #3]
 8007d22:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3710      	adds	r7, #16
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}

08007d2e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b084      	sub	sp, #16
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	460b      	mov	r3, r1
 8007d38:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	32b0      	adds	r2, #176	@ 0xb0
 8007d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d48:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	32b0      	adds	r2, #176	@ 0xb0
 8007d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d101      	bne.n	8007d60 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e01a      	b.n	8007d96 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007d60:	78fb      	ldrb	r3, [r7, #3]
 8007d62:	4619      	mov	r1, r3
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f005 fea2 	bl	800daae <USBD_LL_GetRxDataSize>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	33b0      	adds	r3, #176	@ 0xb0
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4413      	add	r3, r2
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007d8a:	68fa      	ldr	r2, [r7, #12]
 8007d8c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007d90:	4611      	mov	r1, r2
 8007d92:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	32b0      	adds	r2, #176	@ 0xb0
 8007db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007db4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d101      	bne.n	8007dc0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e024      	b.n	8007e0a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	33b0      	adds	r3, #176	@ 0xb0
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	4413      	add	r3, r2
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d019      	beq.n	8007e08 <USBD_CDC_EP0_RxReady+0x6a>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007dda:	2bff      	cmp	r3, #255	@ 0xff
 8007ddc:	d014      	beq.n	8007e08 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	33b0      	adds	r3, #176	@ 0xb0
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	4413      	add	r3, r2
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	68fa      	ldr	r2, [r7, #12]
 8007df2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007df6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007dfe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	22ff      	movs	r2, #255	@ 0xff
 8007e04:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007e08:	2300      	movs	r3, #0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3710      	adds	r7, #16
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e1c:	2182      	movs	r1, #130	@ 0x82
 8007e1e:	4818      	ldr	r0, [pc, #96]	@ (8007e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e20:	f000 fd4f 	bl	80088c2 <USBD_GetEpDesc>
 8007e24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e26:	2101      	movs	r1, #1
 8007e28:	4815      	ldr	r0, [pc, #84]	@ (8007e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e2a:	f000 fd4a 	bl	80088c2 <USBD_GetEpDesc>
 8007e2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007e30:	2181      	movs	r1, #129	@ 0x81
 8007e32:	4813      	ldr	r0, [pc, #76]	@ (8007e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007e34:	f000 fd45 	bl	80088c2 <USBD_GetEpDesc>
 8007e38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d002      	beq.n	8007e46 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	2210      	movs	r2, #16
 8007e44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007e46:	693b      	ldr	r3, [r7, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d006      	beq.n	8007e5a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e54:	711a      	strb	r2, [r3, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d006      	beq.n	8007e6e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e68:	711a      	strb	r2, [r3, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2243      	movs	r2, #67	@ 0x43
 8007e72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007e74:	4b02      	ldr	r3, [pc, #8]	@ (8007e80 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000050 	.word	0x20000050

08007e84 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b086      	sub	sp, #24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007e8c:	2182      	movs	r1, #130	@ 0x82
 8007e8e:	4818      	ldr	r0, [pc, #96]	@ (8007ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e90:	f000 fd17 	bl	80088c2 <USBD_GetEpDesc>
 8007e94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007e96:	2101      	movs	r1, #1
 8007e98:	4815      	ldr	r0, [pc, #84]	@ (8007ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007e9a:	f000 fd12 	bl	80088c2 <USBD_GetEpDesc>
 8007e9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ea0:	2181      	movs	r1, #129	@ 0x81
 8007ea2:	4813      	ldr	r0, [pc, #76]	@ (8007ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ea4:	f000 fd0d 	bl	80088c2 <USBD_GetEpDesc>
 8007ea8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	2210      	movs	r2, #16
 8007eb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d006      	beq.n	8007eca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	711a      	strb	r2, [r3, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f042 0202 	orr.w	r2, r2, #2
 8007ec8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d006      	beq.n	8007ede <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	711a      	strb	r2, [r3, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f042 0202 	orr.w	r2, r2, #2
 8007edc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2243      	movs	r2, #67	@ 0x43
 8007ee2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ee4:	4b02      	ldr	r3, [pc, #8]	@ (8007ef0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000050 	.word	0x20000050

08007ef4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007efc:	2182      	movs	r1, #130	@ 0x82
 8007efe:	4818      	ldr	r0, [pc, #96]	@ (8007f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f00:	f000 fcdf 	bl	80088c2 <USBD_GetEpDesc>
 8007f04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007f06:	2101      	movs	r1, #1
 8007f08:	4815      	ldr	r0, [pc, #84]	@ (8007f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f0a:	f000 fcda 	bl	80088c2 <USBD_GetEpDesc>
 8007f0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007f10:	2181      	movs	r1, #129	@ 0x81
 8007f12:	4813      	ldr	r0, [pc, #76]	@ (8007f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007f14:	f000 fcd5 	bl	80088c2 <USBD_GetEpDesc>
 8007f18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d002      	beq.n	8007f26 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	2210      	movs	r2, #16
 8007f24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d006      	beq.n	8007f3a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f34:	711a      	strb	r2, [r3, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d006      	beq.n	8007f4e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f48:	711a      	strb	r2, [r3, #4]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2243      	movs	r2, #67	@ 0x43
 8007f52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007f54:	4b02      	ldr	r3, [pc, #8]	@ (8007f60 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3718      	adds	r7, #24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	bd80      	pop	{r7, pc}
 8007f5e:	bf00      	nop
 8007f60:	20000050 	.word	0x20000050

08007f64 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	220a      	movs	r2, #10
 8007f70:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007f72:	4b03      	ldr	r3, [pc, #12]	@ (8007f80 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	2000000c 	.word	0x2000000c

08007f84 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d101      	bne.n	8007f98 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007f94:	2303      	movs	r3, #3
 8007f96:	e009      	b.n	8007fac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	33b0      	adds	r3, #176	@ 0xb0
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	4413      	add	r3, r2
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	32b0      	adds	r2, #176	@ 0xb0
 8007fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d101      	bne.n	8007fde <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	e008      	b.n	8007ff0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	68ba      	ldr	r2, [r7, #8]
 8007fe2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007fee:	2300      	movs	r3, #0
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	32b0      	adds	r2, #176	@ 0xb0
 8008010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008014:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d101      	bne.n	8008020 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	e004      	b.n	800802a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	683a      	ldr	r2, [r7, #0]
 8008024:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
	...

08008038 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	32b0      	adds	r2, #176	@ 0xb0
 800804a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008050:	2301      	movs	r3, #1
 8008052:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d101      	bne.n	800805e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800805a:	2303      	movs	r3, #3
 800805c:	e025      	b.n	80080aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008064:	2b00      	cmp	r3, #0
 8008066:	d11f      	bne.n	80080a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	2201      	movs	r2, #1
 800806c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008070:	4b10      	ldr	r3, [pc, #64]	@ (80080b4 <USBD_CDC_TransmitPacket+0x7c>)
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	f003 020f 	and.w	r2, r3, #15
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4613      	mov	r3, r2
 8008082:	009b      	lsls	r3, r3, #2
 8008084:	4413      	add	r3, r2
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	4403      	add	r3, r0
 800808a:	3318      	adds	r3, #24
 800808c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800808e:	4b09      	ldr	r3, [pc, #36]	@ (80080b4 <USBD_CDC_TransmitPacket+0x7c>)
 8008090:	7819      	ldrb	r1, [r3, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f005 fcc3 	bl	800da2a <USBD_LL_Transmit>

    ret = USBD_OK;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	20000093 	.word	0x20000093

080080b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	32b0      	adds	r2, #176	@ 0xb0
 80080ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32b0      	adds	r2, #176	@ 0xb0
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e018      	b.n	8008118 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7c1b      	ldrb	r3, [r3, #16]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d10a      	bne.n	8008104 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80080ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008120 <USBD_CDC_ReceivePacket+0x68>)
 80080f0:	7819      	ldrb	r1, [r3, #0]
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80080f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f005 fcb5 	bl	800da6c <USBD_LL_PrepareReceive>
 8008102:	e008      	b.n	8008116 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008104:	4b06      	ldr	r3, [pc, #24]	@ (8008120 <USBD_CDC_ReceivePacket+0x68>)
 8008106:	7819      	ldrb	r1, [r3, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800810e:	2340      	movs	r3, #64	@ 0x40
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f005 fcab 	bl	800da6c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	20000094 	.word	0x20000094

08008124 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b086      	sub	sp, #24
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	4613      	mov	r3, r2
 8008130:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008138:	2303      	movs	r3, #3
 800813a:	e01f      	b.n	800817c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d003      	beq.n	8008162 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	79fa      	ldrb	r2, [r7, #7]
 800816e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008170:	68f8      	ldr	r0, [r7, #12]
 8008172:	f005 fb1f 	bl	800d7b4 <USBD_LL_Init>
 8008176:	4603      	mov	r3, r0
 8008178:	75fb      	strb	r3, [r7, #23]

  return ret;
 800817a:	7dfb      	ldrb	r3, [r7, #23]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3718      	adds	r7, #24
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e025      	b.n	80081e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	32ae      	adds	r2, #174	@ 0xae
 80081ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d00f      	beq.n	80081d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	32ae      	adds	r2, #174	@ 0xae
 80081c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c8:	f107 020e 	add.w	r2, r7, #14
 80081cc:	4610      	mov	r0, r2
 80081ce:	4798      	blx	r3
 80081d0:	4602      	mov	r2, r0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3710      	adds	r7, #16
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f005 fb2d 	bl	800d858 <USBD_LL_Start>
 80081fe:	4603      	mov	r3, r0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008210:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008212:	4618      	mov	r0, r3
 8008214:	370c      	adds	r7, #12
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	460b      	mov	r3, r1
 8008228:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008234:	2b00      	cmp	r3, #0
 8008236:	d009      	beq.n	800824c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	78fa      	ldrb	r2, [r7, #3]
 8008242:	4611      	mov	r1, r2
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	4798      	blx	r3
 8008248:	4603      	mov	r3, r0
 800824a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b084      	sub	sp, #16
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
 800825e:	460b      	mov	r3, r1
 8008260:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	4611      	mov	r1, r2
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	4798      	blx	r3
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800827c:	2303      	movs	r3, #3
 800827e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008280:	7bfb      	ldrb	r3, [r7, #15]
}
 8008282:	4618      	mov	r0, r3
 8008284:	3710      	adds	r7, #16
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b084      	sub	sp, #16
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
 8008292:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800829a:	6839      	ldr	r1, [r7, #0]
 800829c:	4618      	mov	r0, r3
 800829e:	f001 f90c 	bl	80094ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80082b0:	461a      	mov	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80082be:	f003 031f 	and.w	r3, r3, #31
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d01a      	beq.n	80082fc <USBD_LL_SetupStage+0x72>
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d822      	bhi.n	8008310 <USBD_LL_SetupStage+0x86>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <USBD_LL_SetupStage+0x4a>
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d00a      	beq.n	80082e8 <USBD_LL_SetupStage+0x5e>
 80082d2:	e01d      	b.n	8008310 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb63 	bl	80089a8 <USBD_StdDevReq>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73fb      	strb	r3, [r7, #15]
      break;
 80082e6:	e020      	b.n	800832a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fbcb 	bl	8008a8c <USBD_StdItfReq>
 80082f6:	4603      	mov	r3, r0
 80082f8:	73fb      	strb	r3, [r7, #15]
      break;
 80082fa:	e016      	b.n	800832a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008302:	4619      	mov	r1, r3
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fc2d 	bl	8008b64 <USBD_StdEPReq>
 800830a:	4603      	mov	r3, r0
 800830c:	73fb      	strb	r3, [r7, #15]
      break;
 800830e:	e00c      	b.n	800832a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008316:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800831a:	b2db      	uxtb	r3, r3
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f005 fafa 	bl	800d918 <USBD_LL_StallEP>
 8008324:	4603      	mov	r3, r0
 8008326:	73fb      	strb	r3, [r7, #15]
      break;
 8008328:	bf00      	nop
  }

  return ret;
 800832a:	7bfb      	ldrb	r3, [r7, #15]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	460b      	mov	r3, r1
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008346:	7afb      	ldrb	r3, [r7, #11]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d16e      	bne.n	800842a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008352:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800835a:	2b03      	cmp	r3, #3
 800835c:	f040 8098 	bne.w	8008490 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	429a      	cmp	r2, r3
 800836a:	d913      	bls.n	8008394 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	689a      	ldr	r2, [r3, #8]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	1ad2      	subs	r2, r2, r3
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	4293      	cmp	r3, r2
 8008384:	bf28      	it	cs
 8008386:	4613      	movcs	r3, r2
 8008388:	461a      	mov	r2, r3
 800838a:	6879      	ldr	r1, [r7, #4]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f001 f994 	bl	80096ba <USBD_CtlContinueRx>
 8008392:	e07d      	b.n	8008490 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800839a:	f003 031f 	and.w	r3, r3, #31
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d014      	beq.n	80083cc <USBD_LL_DataOutStage+0x98>
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d81d      	bhi.n	80083e2 <USBD_LL_DataOutStage+0xae>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d002      	beq.n	80083b0 <USBD_LL_DataOutStage+0x7c>
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d003      	beq.n	80083b6 <USBD_LL_DataOutStage+0x82>
 80083ae:	e018      	b.n	80083e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	75bb      	strb	r3, [r7, #22]
            break;
 80083b4:	e018      	b.n	80083e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	4619      	mov	r1, r3
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f000 fa64 	bl	800888e <USBD_CoreFindIF>
 80083c6:	4603      	mov	r3, r0
 80083c8:	75bb      	strb	r3, [r7, #22]
            break;
 80083ca:	e00d      	b.n	80083e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	4619      	mov	r1, r3
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f000 fa66 	bl	80088a8 <USBD_CoreFindEP>
 80083dc:	4603      	mov	r3, r0
 80083de:	75bb      	strb	r3, [r7, #22]
            break;
 80083e0:	e002      	b.n	80083e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80083e2:	2300      	movs	r3, #0
 80083e4:	75bb      	strb	r3, [r7, #22]
            break;
 80083e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80083e8:	7dbb      	ldrb	r3, [r7, #22]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d119      	bne.n	8008422 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b03      	cmp	r3, #3
 80083f8:	d113      	bne.n	8008422 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80083fa:	7dba      	ldrb	r2, [r7, #22]
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	32ae      	adds	r2, #174	@ 0xae
 8008400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00b      	beq.n	8008422 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800840a:	7dba      	ldrb	r2, [r7, #22]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008412:	7dba      	ldrb	r2, [r7, #22]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	32ae      	adds	r2, #174	@ 0xae
 8008418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f001 f95a 	bl	80096dc <USBD_CtlSendStatus>
 8008428:	e032      	b.n	8008490 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800842a:	7afb      	ldrb	r3, [r7, #11]
 800842c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008430:	b2db      	uxtb	r3, r3
 8008432:	4619      	mov	r1, r3
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 fa37 	bl	80088a8 <USBD_CoreFindEP>
 800843a:	4603      	mov	r3, r0
 800843c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800843e:	7dbb      	ldrb	r3, [r7, #22]
 8008440:	2bff      	cmp	r3, #255	@ 0xff
 8008442:	d025      	beq.n	8008490 <USBD_LL_DataOutStage+0x15c>
 8008444:	7dbb      	ldrb	r3, [r7, #22]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d122      	bne.n	8008490 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008450:	b2db      	uxtb	r3, r3
 8008452:	2b03      	cmp	r3, #3
 8008454:	d117      	bne.n	8008486 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008456:	7dba      	ldrb	r2, [r7, #22]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	32ae      	adds	r2, #174	@ 0xae
 800845c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00f      	beq.n	8008486 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008466:	7dba      	ldrb	r2, [r7, #22]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800846e:	7dba      	ldrb	r2, [r7, #22]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	32ae      	adds	r2, #174	@ 0xae
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	699b      	ldr	r3, [r3, #24]
 800847a:	7afa      	ldrb	r2, [r7, #11]
 800847c:	4611      	mov	r1, r2
 800847e:	68f8      	ldr	r0, [r7, #12]
 8008480:	4798      	blx	r3
 8008482:	4603      	mov	r3, r0
 8008484:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d001      	beq.n	8008490 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800848c:	7dfb      	ldrb	r3, [r7, #23]
 800848e:	e000      	b.n	8008492 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3718      	adds	r7, #24
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b086      	sub	sp, #24
 800849e:	af00      	add	r7, sp, #0
 80084a0:	60f8      	str	r0, [r7, #12]
 80084a2:	460b      	mov	r3, r1
 80084a4:	607a      	str	r2, [r7, #4]
 80084a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80084a8:	7afb      	ldrb	r3, [r7, #11]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d16f      	bne.n	800858e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3314      	adds	r3, #20
 80084b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d15a      	bne.n	8008574 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	689a      	ldr	r2, [r3, #8]
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d914      	bls.n	80084f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	689a      	ldr	r2, [r3, #8]
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	461a      	mov	r2, r3
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	68f8      	ldr	r0, [r7, #12]
 80084e2:	f001 f8bc 	bl	800965e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80084e6:	2300      	movs	r3, #0
 80084e8:	2200      	movs	r2, #0
 80084ea:	2100      	movs	r1, #0
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f005 fabd 	bl	800da6c <USBD_LL_PrepareReceive>
 80084f2:	e03f      	b.n	8008574 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	68da      	ldr	r2, [r3, #12]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d11c      	bne.n	800853a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	685a      	ldr	r2, [r3, #4]
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008508:	429a      	cmp	r2, r3
 800850a:	d316      	bcc.n	800853a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	685a      	ldr	r2, [r3, #4]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008516:	429a      	cmp	r2, r3
 8008518:	d20f      	bcs.n	800853a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800851a:	2200      	movs	r2, #0
 800851c:	2100      	movs	r1, #0
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f001 f89d 	bl	800965e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800852c:	2300      	movs	r3, #0
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f005 fa9a 	bl	800da6c <USBD_LL_PrepareReceive>
 8008538:	e01c      	b.n	8008574 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008540:	b2db      	uxtb	r3, r3
 8008542:	2b03      	cmp	r3, #3
 8008544:	d10f      	bne.n	8008566 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800854c:	68db      	ldr	r3, [r3, #12]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d009      	beq.n	8008566 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008560:	68db      	ldr	r3, [r3, #12]
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008566:	2180      	movs	r1, #128	@ 0x80
 8008568:	68f8      	ldr	r0, [r7, #12]
 800856a:	f005 f9d5 	bl	800d918 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f001 f8c7 	bl	8009702 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d03a      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff fe42 	bl	8008208 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800858c:	e032      	b.n	80085f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800858e:	7afb      	ldrb	r3, [r7, #11]
 8008590:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008594:	b2db      	uxtb	r3, r3
 8008596:	4619      	mov	r1, r3
 8008598:	68f8      	ldr	r0, [r7, #12]
 800859a:	f000 f985 	bl	80088a8 <USBD_CoreFindEP>
 800859e:	4603      	mov	r3, r0
 80085a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	2bff      	cmp	r3, #255	@ 0xff
 80085a6:	d025      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
 80085a8:	7dfb      	ldrb	r3, [r7, #23]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d122      	bne.n	80085f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d11c      	bne.n	80085f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80085ba:	7dfa      	ldrb	r2, [r7, #23]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	32ae      	adds	r2, #174	@ 0xae
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d014      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80085ca:	7dfa      	ldrb	r2, [r7, #23]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80085d2:	7dfa      	ldrb	r2, [r7, #23]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	32ae      	adds	r2, #174	@ 0xae
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	7afa      	ldrb	r2, [r7, #11]
 80085e0:	4611      	mov	r1, r2
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	4798      	blx	r3
 80085e6:	4603      	mov	r3, r0
 80085e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80085ea:	7dbb      	ldrb	r3, [r7, #22]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80085f0:	7dbb      	ldrb	r3, [r7, #22]
 80085f2:	e000      	b.n	80085f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d014      	beq.n	8008664 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00e      	beq.n	8008664 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	687a      	ldr	r2, [r7, #4]
 8008650:	6852      	ldr	r2, [r2, #4]
 8008652:	b2d2      	uxtb	r2, r2
 8008654:	4611      	mov	r1, r2
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d001      	beq.n	8008664 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008660:	2303      	movs	r3, #3
 8008662:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008664:	2340      	movs	r3, #64	@ 0x40
 8008666:	2200      	movs	r2, #0
 8008668:	2100      	movs	r1, #0
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f005 f90f 	bl	800d88e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2240      	movs	r2, #64	@ 0x40
 800867c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008680:	2340      	movs	r3, #64	@ 0x40
 8008682:	2200      	movs	r2, #0
 8008684:	2180      	movs	r1, #128	@ 0x80
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f005 f901 	bl	800d88e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2240      	movs	r2, #64	@ 0x40
 8008696:	621a      	str	r2, [r3, #32]

  return ret;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d006      	beq.n	80086e4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086dc:	b2da      	uxtb	r2, r3
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2204      	movs	r2, #4
 80086e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	370c      	adds	r7, #12
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b04      	cmp	r3, #4
 800870c:	d106      	bne.n	800871c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008714:	b2da      	uxtb	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800871c:	2300      	movs	r3, #0
}
 800871e:	4618      	mov	r0, r3
 8008720:	370c      	adds	r7, #12
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr

0800872a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008738:	b2db      	uxtb	r3, r3
 800873a:	2b03      	cmp	r3, #3
 800873c:	d110      	bne.n	8008760 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00b      	beq.n	8008760 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800874e:	69db      	ldr	r3, [r3, #28]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800875a:	69db      	ldr	r3, [r3, #28]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	32ae      	adds	r2, #174	@ 0xae
 8008780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d101      	bne.n	800878c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008788:	2303      	movs	r3, #3
 800878a:	e01c      	b.n	80087c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b03      	cmp	r3, #3
 8008796:	d115      	bne.n	80087c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	32ae      	adds	r2, #174	@ 0xae
 80087a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087a6:	6a1b      	ldr	r3, [r3, #32]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00b      	beq.n	80087c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	32ae      	adds	r2, #174	@ 0xae
 80087b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ba:	6a1b      	ldr	r3, [r3, #32]
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	4611      	mov	r1, r2
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087c4:	2300      	movs	r3, #0
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3708      	adds	r7, #8
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}

080087ce <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087ce:	b580      	push	{r7, lr}
 80087d0:	b082      	sub	sp, #8
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
 80087d6:	460b      	mov	r3, r1
 80087d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	32ae      	adds	r2, #174	@ 0xae
 80087e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d101      	bne.n	80087f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80087ec:	2303      	movs	r3, #3
 80087ee:	e01c      	b.n	800882a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b03      	cmp	r3, #3
 80087fa:	d115      	bne.n	8008828 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	32ae      	adds	r2, #174	@ 0xae
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00b      	beq.n	8008828 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	32ae      	adds	r2, #174	@ 0xae
 800881a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800881e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008820:	78fa      	ldrb	r2, [r7, #3]
 8008822:	4611      	mov	r1, r2
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800883a:	2300      	movs	r3, #0
}
 800883c:	4618      	mov	r0, r3
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00e      	beq.n	8008884 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	6852      	ldr	r2, [r2, #4]
 8008872:	b2d2      	uxtb	r2, r2
 8008874:	4611      	mov	r1, r2
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	4798      	blx	r3
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d001      	beq.n	8008884 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008880:	2303      	movs	r3, #3
 8008882:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008884:	7bfb      	ldrb	r3, [r7, #15]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	460b      	mov	r3, r1
 8008898:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800889a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800889c:	4618      	mov	r0, r3
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80088b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr

080088c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b086      	sub	sp, #24
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80088d6:	2300      	movs	r3, #0
 80088d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	885b      	ldrh	r3, [r3, #2]
 80088de:	b29b      	uxth	r3, r3
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	7812      	ldrb	r2, [r2, #0]
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d91f      	bls.n	8008928 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80088ee:	e013      	b.n	8008918 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80088f0:	f107 030a 	add.w	r3, r7, #10
 80088f4:	4619      	mov	r1, r3
 80088f6:	6978      	ldr	r0, [r7, #20]
 80088f8:	f000 f81b 	bl	8008932 <USBD_GetNextDesc>
 80088fc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	785b      	ldrb	r3, [r3, #1]
 8008902:	2b05      	cmp	r3, #5
 8008904:	d108      	bne.n	8008918 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	789b      	ldrb	r3, [r3, #2]
 800890e:	78fa      	ldrb	r2, [r7, #3]
 8008910:	429a      	cmp	r2, r3
 8008912:	d008      	beq.n	8008926 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008914:	2300      	movs	r3, #0
 8008916:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	885b      	ldrh	r3, [r3, #2]
 800891c:	b29a      	uxth	r2, r3
 800891e:	897b      	ldrh	r3, [r7, #10]
 8008920:	429a      	cmp	r2, r3
 8008922:	d8e5      	bhi.n	80088f0 <USBD_GetEpDesc+0x2e>
 8008924:	e000      	b.n	8008928 <USBD_GetEpDesc+0x66>
          break;
 8008926:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008928:	693b      	ldr	r3, [r7, #16]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008932:	b480      	push	{r7}
 8008934:	b085      	sub	sp, #20
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	881b      	ldrh	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	7812      	ldrb	r2, [r2, #0]
 8008948:	4413      	add	r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	461a      	mov	r2, r3
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4413      	add	r3, r2
 800895a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800895c:	68fb      	ldr	r3, [r7, #12]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3714      	adds	r7, #20
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr

0800896a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800896a:	b480      	push	{r7}
 800896c:	b087      	sub	sp, #28
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	781b      	ldrb	r3, [r3, #0]
 800897a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	3301      	adds	r3, #1
 8008980:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008988:	8a3b      	ldrh	r3, [r7, #16]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	b21a      	sxth	r2, r3
 800898e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008992:	4313      	orrs	r3, r2
 8008994:	b21b      	sxth	r3, r3
 8008996:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008998:	89fb      	ldrh	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	371c      	adds	r7, #28
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr
	...

080089a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b084      	sub	sp, #16
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80089be:	2b40      	cmp	r3, #64	@ 0x40
 80089c0:	d005      	beq.n	80089ce <USBD_StdDevReq+0x26>
 80089c2:	2b40      	cmp	r3, #64	@ 0x40
 80089c4:	d857      	bhi.n	8008a76 <USBD_StdDevReq+0xce>
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00f      	beq.n	80089ea <USBD_StdDevReq+0x42>
 80089ca:	2b20      	cmp	r3, #32
 80089cc:	d153      	bne.n	8008a76 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	32ae      	adds	r2, #174	@ 0xae
 80089d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
 80089e4:	4603      	mov	r3, r0
 80089e6:	73fb      	strb	r3, [r7, #15]
      break;
 80089e8:	e04a      	b.n	8008a80 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	2b09      	cmp	r3, #9
 80089f0:	d83b      	bhi.n	8008a6a <USBD_StdDevReq+0xc2>
 80089f2:	a201      	add	r2, pc, #4	@ (adr r2, 80089f8 <USBD_StdDevReq+0x50>)
 80089f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f8:	08008a4d 	.word	0x08008a4d
 80089fc:	08008a61 	.word	0x08008a61
 8008a00:	08008a6b 	.word	0x08008a6b
 8008a04:	08008a57 	.word	0x08008a57
 8008a08:	08008a6b 	.word	0x08008a6b
 8008a0c:	08008a2b 	.word	0x08008a2b
 8008a10:	08008a21 	.word	0x08008a21
 8008a14:	08008a6b 	.word	0x08008a6b
 8008a18:	08008a43 	.word	0x08008a43
 8008a1c:	08008a35 	.word	0x08008a35
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fa3c 	bl	8008ea0 <USBD_GetDescriptor>
          break;
 8008a28:	e024      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fba1 	bl	8009174 <USBD_SetAddress>
          break;
 8008a32:	e01f      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 fbe0 	bl	80091fc <USBD_SetConfig>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	73fb      	strb	r3, [r7, #15]
          break;
 8008a40:	e018      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008a42:	6839      	ldr	r1, [r7, #0]
 8008a44:	6878      	ldr	r0, [r7, #4]
 8008a46:	f000 fc83 	bl	8009350 <USBD_GetConfig>
          break;
 8008a4a:	e013      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008a4c:	6839      	ldr	r1, [r7, #0]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 fcb4 	bl	80093bc <USBD_GetStatus>
          break;
 8008a54:	e00e      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008a56:	6839      	ldr	r1, [r7, #0]
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fce3 	bl	8009424 <USBD_SetFeature>
          break;
 8008a5e:	e009      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fd07 	bl	8009476 <USBD_ClrFeature>
          break;
 8008a68:	e004      	b.n	8008a74 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 fd5e 	bl	800952e <USBD_CtlError>
          break;
 8008a72:	bf00      	nop
      }
      break;
 8008a74:	e004      	b.n	8008a80 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 fd58 	bl	800952e <USBD_CtlError>
      break;
 8008a7e:	bf00      	nop
  }

  return ret;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop

08008a8c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b084      	sub	sp, #16
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a96:	2300      	movs	r3, #0
 8008a98:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008aa2:	2b40      	cmp	r3, #64	@ 0x40
 8008aa4:	d005      	beq.n	8008ab2 <USBD_StdItfReq+0x26>
 8008aa6:	2b40      	cmp	r3, #64	@ 0x40
 8008aa8:	d852      	bhi.n	8008b50 <USBD_StdItfReq+0xc4>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <USBD_StdItfReq+0x26>
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	d14e      	bne.n	8008b50 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	3b01      	subs	r3, #1
 8008abc:	2b02      	cmp	r3, #2
 8008abe:	d840      	bhi.n	8008b42 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	889b      	ldrh	r3, [r3, #4]
 8008ac4:	b2db      	uxtb	r3, r3
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d836      	bhi.n	8008b38 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	889b      	ldrh	r3, [r3, #4]
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	6878      	ldr	r0, [r7, #4]
 8008ad4:	f7ff fedb 	bl	800888e <USBD_CoreFindIF>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	2bff      	cmp	r3, #255	@ 0xff
 8008ae0:	d01d      	beq.n	8008b1e <USBD_StdItfReq+0x92>
 8008ae2:	7bbb      	ldrb	r3, [r7, #14]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11a      	bne.n	8008b1e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ae8:	7bba      	ldrb	r2, [r7, #14]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	32ae      	adds	r2, #174	@ 0xae
 8008aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00f      	beq.n	8008b18 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008af8:	7bba      	ldrb	r2, [r7, #14]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008b00:	7bba      	ldrb	r2, [r7, #14]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	32ae      	adds	r2, #174	@ 0xae
 8008b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	4798      	blx	r3
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b16:	e004      	b.n	8008b22 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008b1c:	e001      	b.n	8008b22 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008b1e:	2303      	movs	r3, #3
 8008b20:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d110      	bne.n	8008b4c <USBD_StdItfReq+0xc0>
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d10d      	bne.n	8008b4c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fdd3 	bl	80096dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b36:	e009      	b.n	8008b4c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fcf7 	bl	800952e <USBD_CtlError>
          break;
 8008b40:	e004      	b.n	8008b4c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fcf2 	bl	800952e <USBD_CtlError>
          break;
 8008b4a:	e000      	b.n	8008b4e <USBD_StdItfReq+0xc2>
          break;
 8008b4c:	bf00      	nop
      }
      break;
 8008b4e:	e004      	b.n	8008b5a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fceb 	bl	800952e <USBD_CtlError>
      break;
 8008b58:	bf00      	nop
  }

  return ret;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	889b      	ldrh	r3, [r3, #4]
 8008b76:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	781b      	ldrb	r3, [r3, #0]
 8008b7c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b80:	2b40      	cmp	r3, #64	@ 0x40
 8008b82:	d007      	beq.n	8008b94 <USBD_StdEPReq+0x30>
 8008b84:	2b40      	cmp	r3, #64	@ 0x40
 8008b86:	f200 817f 	bhi.w	8008e88 <USBD_StdEPReq+0x324>
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d02a      	beq.n	8008be4 <USBD_StdEPReq+0x80>
 8008b8e:	2b20      	cmp	r3, #32
 8008b90:	f040 817a 	bne.w	8008e88 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008b94:	7bbb      	ldrb	r3, [r7, #14]
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7ff fe85 	bl	80088a8 <USBD_CoreFindEP>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ba2:	7b7b      	ldrb	r3, [r7, #13]
 8008ba4:	2bff      	cmp	r3, #255	@ 0xff
 8008ba6:	f000 8174 	beq.w	8008e92 <USBD_StdEPReq+0x32e>
 8008baa:	7b7b      	ldrb	r3, [r7, #13]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	f040 8170 	bne.w	8008e92 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008bb2:	7b7a      	ldrb	r2, [r7, #13]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008bba:	7b7a      	ldrb	r2, [r7, #13]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	32ae      	adds	r2, #174	@ 0xae
 8008bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 8163 	beq.w	8008e92 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008bcc:	7b7a      	ldrb	r2, [r7, #13]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	32ae      	adds	r2, #174	@ 0xae
 8008bd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	4798      	blx	r3
 8008bde:	4603      	mov	r3, r0
 8008be0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008be2:	e156      	b.n	8008e92 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	785b      	ldrb	r3, [r3, #1]
 8008be8:	2b03      	cmp	r3, #3
 8008bea:	d008      	beq.n	8008bfe <USBD_StdEPReq+0x9a>
 8008bec:	2b03      	cmp	r3, #3
 8008bee:	f300 8145 	bgt.w	8008e7c <USBD_StdEPReq+0x318>
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f000 809b 	beq.w	8008d2e <USBD_StdEPReq+0x1ca>
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	d03c      	beq.n	8008c76 <USBD_StdEPReq+0x112>
 8008bfc:	e13e      	b.n	8008e7c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b02      	cmp	r3, #2
 8008c08:	d002      	beq.n	8008c10 <USBD_StdEPReq+0xac>
 8008c0a:	2b03      	cmp	r3, #3
 8008c0c:	d016      	beq.n	8008c3c <USBD_StdEPReq+0xd8>
 8008c0e:	e02c      	b.n	8008c6a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c10:	7bbb      	ldrb	r3, [r7, #14]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00d      	beq.n	8008c32 <USBD_StdEPReq+0xce>
 8008c16:	7bbb      	ldrb	r3, [r7, #14]
 8008c18:	2b80      	cmp	r3, #128	@ 0x80
 8008c1a:	d00a      	beq.n	8008c32 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	4619      	mov	r1, r3
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f004 fe79 	bl	800d918 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c26:	2180      	movs	r1, #128	@ 0x80
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f004 fe75 	bl	800d918 <USBD_LL_StallEP>
 8008c2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c30:	e020      	b.n	8008c74 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	6878      	ldr	r0, [r7, #4]
 8008c36:	f000 fc7a 	bl	800952e <USBD_CtlError>
              break;
 8008c3a:	e01b      	b.n	8008c74 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	885b      	ldrh	r3, [r3, #2]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d10e      	bne.n	8008c62 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d00b      	beq.n	8008c62 <USBD_StdEPReq+0xfe>
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b80      	cmp	r3, #128	@ 0x80
 8008c4e:	d008      	beq.n	8008c62 <USBD_StdEPReq+0xfe>
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	88db      	ldrh	r3, [r3, #6]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d104      	bne.n	8008c62 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f004 fe5b 	bl	800d918 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 fd3a 	bl	80096dc <USBD_CtlSendStatus>

              break;
 8008c68:	e004      	b.n	8008c74 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc5e 	bl	800952e <USBD_CtlError>
              break;
 8008c72:	bf00      	nop
          }
          break;
 8008c74:	e107      	b.n	8008e86 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	d002      	beq.n	8008c88 <USBD_StdEPReq+0x124>
 8008c82:	2b03      	cmp	r3, #3
 8008c84:	d016      	beq.n	8008cb4 <USBD_StdEPReq+0x150>
 8008c86:	e04b      	b.n	8008d20 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00d      	beq.n	8008caa <USBD_StdEPReq+0x146>
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b80      	cmp	r3, #128	@ 0x80
 8008c92:	d00a      	beq.n	8008caa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	4619      	mov	r1, r3
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f004 fe3d 	bl	800d918 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c9e:	2180      	movs	r1, #128	@ 0x80
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f004 fe39 	bl	800d918 <USBD_LL_StallEP>
 8008ca6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008ca8:	e040      	b.n	8008d2c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fc3e 	bl	800952e <USBD_CtlError>
              break;
 8008cb2:	e03b      	b.n	8008d2c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	885b      	ldrh	r3, [r3, #2]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d136      	bne.n	8008d2a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d004      	beq.n	8008cd0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cc6:	7bbb      	ldrb	r3, [r7, #14]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f004 fe43 	bl	800d956 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 fd03 	bl	80096dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	4619      	mov	r1, r3
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f7ff fde4 	bl	80088a8 <USBD_CoreFindEP>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ce4:	7b7b      	ldrb	r3, [r7, #13]
 8008ce6:	2bff      	cmp	r3, #255	@ 0xff
 8008ce8:	d01f      	beq.n	8008d2a <USBD_StdEPReq+0x1c6>
 8008cea:	7b7b      	ldrb	r3, [r7, #13]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d11c      	bne.n	8008d2a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008cf0:	7b7a      	ldrb	r2, [r7, #13]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008cf8:	7b7a      	ldrb	r2, [r7, #13]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	32ae      	adds	r2, #174	@ 0xae
 8008cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d010      	beq.n	8008d2a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008d08:	7b7a      	ldrb	r2, [r7, #13]
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	32ae      	adds	r2, #174	@ 0xae
 8008d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	6839      	ldr	r1, [r7, #0]
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008d1e:	e004      	b.n	8008d2a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fc03 	bl	800952e <USBD_CtlError>
              break;
 8008d28:	e000      	b.n	8008d2c <USBD_StdEPReq+0x1c8>
              break;
 8008d2a:	bf00      	nop
          }
          break;
 8008d2c:	e0ab      	b.n	8008e86 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d002      	beq.n	8008d40 <USBD_StdEPReq+0x1dc>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d032      	beq.n	8008da4 <USBD_StdEPReq+0x240>
 8008d3e:	e097      	b.n	8008e70 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d40:	7bbb      	ldrb	r3, [r7, #14]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d007      	beq.n	8008d56 <USBD_StdEPReq+0x1f2>
 8008d46:	7bbb      	ldrb	r3, [r7, #14]
 8008d48:	2b80      	cmp	r3, #128	@ 0x80
 8008d4a:	d004      	beq.n	8008d56 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fbed 	bl	800952e <USBD_CtlError>
                break;
 8008d54:	e091      	b.n	8008e7a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da0b      	bge.n	8008d76 <USBD_StdEPReq+0x212>
 8008d5e:	7bbb      	ldrb	r3, [r7, #14]
 8008d60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d64:	4613      	mov	r3, r2
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	4413      	add	r3, r2
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	3310      	adds	r3, #16
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	3304      	adds	r3, #4
 8008d74:	e00b      	b.n	8008d8e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d76:	7bbb      	ldrb	r3, [r7, #14]
 8008d78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4413      	add	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	4413      	add	r3, r2
 8008d8c:	3304      	adds	r3, #4
 8008d8e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	2200      	movs	r2, #0
 8008d94:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	2202      	movs	r2, #2
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc43 	bl	8009628 <USBD_CtlSendData>
              break;
 8008da2:	e06a      	b.n	8008e7a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008da4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da11      	bge.n	8008dd0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	f003 020f 	and.w	r2, r3, #15
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	009b      	lsls	r3, r3, #2
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	3324      	adds	r3, #36	@ 0x24
 8008dc0:	881b      	ldrh	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d117      	bne.n	8008df6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dc6:	6839      	ldr	r1, [r7, #0]
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f000 fbb0 	bl	800952e <USBD_CtlError>
                  break;
 8008dce:	e054      	b.n	8008e7a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	f003 020f 	and.w	r2, r3, #15
 8008dd6:	6879      	ldr	r1, [r7, #4]
 8008dd8:	4613      	mov	r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	440b      	add	r3, r1
 8008de2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d104      	bne.n	8008df6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 fb9d 	bl	800952e <USBD_CtlError>
                  break;
 8008df4:	e041      	b.n	8008e7a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	da0b      	bge.n	8008e16 <USBD_StdEPReq+0x2b2>
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e04:	4613      	mov	r3, r2
 8008e06:	009b      	lsls	r3, r3, #2
 8008e08:	4413      	add	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	3310      	adds	r3, #16
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	4413      	add	r3, r2
 8008e12:	3304      	adds	r3, #4
 8008e14:	e00b      	b.n	8008e2e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e16:	7bbb      	ldrb	r3, [r7, #14]
 8008e18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d002      	beq.n	8008e3c <USBD_StdEPReq+0x2d8>
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	2b80      	cmp	r3, #128	@ 0x80
 8008e3a:	d103      	bne.n	8008e44 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e00e      	b.n	8008e62 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	4619      	mov	r1, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f004 fda3 	bl	800d994 <USBD_LL_IsStallEP>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d003      	beq.n	8008e5c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2201      	movs	r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e002      	b.n	8008e62 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	2202      	movs	r2, #2
 8008e66:	4619      	mov	r1, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fbdd 	bl	8009628 <USBD_CtlSendData>
              break;
 8008e6e:	e004      	b.n	8008e7a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fb5b 	bl	800952e <USBD_CtlError>
              break;
 8008e78:	bf00      	nop
          }
          break;
 8008e7a:	e004      	b.n	8008e86 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fb55 	bl	800952e <USBD_CtlError>
          break;
 8008e84:	bf00      	nop
      }
      break;
 8008e86:	e005      	b.n	8008e94 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fb4f 	bl	800952e <USBD_CtlError>
      break;
 8008e90:	e000      	b.n	8008e94 <USBD_StdEPReq+0x330>
      break;
 8008e92:	bf00      	nop
  }

  return ret;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	f200 8128 	bhi.w	8009116 <USBD_GetDescriptor+0x276>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <USBD_GetDescriptor+0x2c>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008f01 	.word	0x08008f01
 8008ed4:	08008f41 	.word	0x08008f41
 8008ed8:	08009117 	.word	0x08009117
 8008edc:	08009117 	.word	0x08009117
 8008ee0:	080090b7 	.word	0x080090b7
 8008ee4:	080090e3 	.word	0x080090e3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7c12      	ldrb	r2, [r2, #16]
 8008ef4:	f107 0108 	add.w	r1, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
      break;
 8008efe:	e112      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7c1b      	ldrb	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10d      	bne.n	8008f24 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f10:	f107 0208 	add.w	r2, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f22:	e100      	b.n	8009126 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2c:	f107 0208 	add.w	r2, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	701a      	strb	r2, [r3, #0]
      break;
 8008f3e:	e0f2      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	f200 80ac 	bhi.w	80090a4 <USBD_GetDescriptor+0x204>
 8008f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <USBD_GetDescriptor+0xb4>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f6d 	.word	0x08008f6d
 8008f58:	08008fa1 	.word	0x08008fa1
 8008f5c:	08008fd5 	.word	0x08008fd5
 8008f60:	08009009 	.word	0x08009009
 8008f64:	0800903d 	.word	0x0800903d
 8008f68:	08009071 	.word	0x08009071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	7c12      	ldrb	r2, [r2, #16]
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f8e:	e091      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 facb 	bl	800952e <USBD_CtlError>
            err++;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f9e:	e089      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	7c12      	ldrb	r2, [r2, #16]
 8008fb8:	f107 0108 	add.w	r1, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc2:	e077      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fab1 	bl	800952e <USBD_CtlError>
            err++;
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd2:	e06f      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff6:	e05d      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa97 	bl	800952e <USBD_CtlError>
            err++;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	3301      	adds	r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
          break;
 8009006:	e055      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	7c12      	ldrb	r2, [r2, #16]
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
 8009028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902a:	e043      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa7d 	bl	800952e <USBD_CtlError>
            err++;
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	3301      	adds	r3, #1
 8009038:	72fb      	strb	r3, [r7, #11]
          break;
 800903a:	e03b      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905e:	e029      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa63 	bl	800952e <USBD_CtlError>
            err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
          break;
 800906e:	e021      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	7c12      	ldrb	r2, [r2, #16]
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	4610      	mov	r0, r2
 800908e:	4798      	blx	r3
 8009090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009092:	e00f      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa49 	bl	800952e <USBD_CtlError>
            err++;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	3301      	adds	r3, #1
 80090a0:	72fb      	strb	r3, [r7, #11]
          break;
 80090a2:	e007      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa41 	bl	800952e <USBD_CtlError>
          err++;
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	3301      	adds	r3, #1
 80090b0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80090b2:	bf00      	nop
      }
      break;
 80090b4:	e037      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7c1b      	ldrb	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c6:	f107 0208 	add.w	r2, r7, #8
 80090ca:	4610      	mov	r0, r2
 80090cc:	4798      	blx	r3
 80090ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090d0:	e029      	b.n	8009126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 fa2a 	bl	800952e <USBD_CtlError>
        err++;
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	3301      	adds	r3, #1
 80090de:	72fb      	strb	r3, [r7, #11]
      break;
 80090e0:	e021      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	7c1b      	ldrb	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f2:	f107 0208 	add.w	r2, r7, #8
 80090f6:	4610      	mov	r0, r2
 80090f8:	4798      	blx	r3
 80090fa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	2207      	movs	r2, #7
 8009102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009104:	e00f      	b.n	8009126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 fa10 	bl	800952e <USBD_CtlError>
        err++;
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	3301      	adds	r3, #1
 8009112:	72fb      	strb	r3, [r7, #11]
      break;
 8009114:	e007      	b.n	8009126 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa08 	bl	800952e <USBD_CtlError>
      err++;
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	3301      	adds	r3, #1
 8009122:	72fb      	strb	r3, [r7, #11]
      break;
 8009124:	bf00      	nop
  }

  if (err != 0U)
 8009126:	7afb      	ldrb	r3, [r7, #11]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d11e      	bne.n	800916a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	88db      	ldrh	r3, [r3, #6]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d016      	beq.n	8009162 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009134:	893b      	ldrh	r3, [r7, #8]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00e      	beq.n	8009158 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88da      	ldrh	r2, [r3, #6]
 800913e:	893b      	ldrh	r3, [r7, #8]
 8009140:	4293      	cmp	r3, r2
 8009142:	bf28      	it	cs
 8009144:	4613      	movcs	r3, r2
 8009146:	b29b      	uxth	r3, r3
 8009148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800914a:	893b      	ldrh	r3, [r7, #8]
 800914c:	461a      	mov	r2, r3
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fa69 	bl	8009628 <USBD_CtlSendData>
 8009156:	e009      	b.n	800916c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f9e7 	bl	800952e <USBD_CtlError>
 8009160:	e004      	b.n	800916c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 faba 	bl	80096dc <USBD_CtlSendStatus>
 8009168:	e000      	b.n	800916c <USBD_GetDescriptor+0x2cc>
    return;
 800916a:	bf00      	nop
  }
}
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop

08009174 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	889b      	ldrh	r3, [r3, #4]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d131      	bne.n	80091ea <USBD_SetAddress+0x76>
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	88db      	ldrh	r3, [r3, #6]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d12d      	bne.n	80091ea <USBD_SetAddress+0x76>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	885b      	ldrh	r3, [r3, #2]
 8009192:	2b7f      	cmp	r3, #127	@ 0x7f
 8009194:	d829      	bhi.n	80091ea <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	885b      	ldrh	r3, [r3, #2]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091a0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d104      	bne.n	80091b8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 f9bc 	bl	800952e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b6:	e01d      	b.n	80091f4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	7bfa      	ldrb	r2, [r7, #15]
 80091bc:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	4619      	mov	r1, r3
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f004 fc11 	bl	800d9ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa86 	bl	80096dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091d0:	7bfb      	ldrb	r3, [r7, #15]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d004      	beq.n	80091e0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2202      	movs	r2, #2
 80091da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091de:	e009      	b.n	80091f4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e8:	e004      	b.n	80091f4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f99e 	bl	800952e <USBD_CtlError>
  }
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009206:	2300      	movs	r3, #0
 8009208:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	b2da      	uxtb	r2, r3
 8009210:	4b4e      	ldr	r3, [pc, #312]	@ (800934c <USBD_SetConfig+0x150>)
 8009212:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009214:	4b4d      	ldr	r3, [pc, #308]	@ (800934c <USBD_SetConfig+0x150>)
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	2b01      	cmp	r3, #1
 800921a:	d905      	bls.n	8009228 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800921c:	6839      	ldr	r1, [r7, #0]
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f000 f985 	bl	800952e <USBD_CtlError>
    return USBD_FAIL;
 8009224:	2303      	movs	r3, #3
 8009226:	e08c      	b.n	8009342 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b02      	cmp	r3, #2
 8009232:	d002      	beq.n	800923a <USBD_SetConfig+0x3e>
 8009234:	2b03      	cmp	r3, #3
 8009236:	d029      	beq.n	800928c <USBD_SetConfig+0x90>
 8009238:	e075      	b.n	8009326 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800923a:	4b44      	ldr	r3, [pc, #272]	@ (800934c <USBD_SetConfig+0x150>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d020      	beq.n	8009284 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009242:	4b42      	ldr	r3, [pc, #264]	@ (800934c <USBD_SetConfig+0x150>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800924c:	4b3f      	ldr	r3, [pc, #252]	@ (800934c <USBD_SetConfig+0x150>)
 800924e:	781b      	ldrb	r3, [r3, #0]
 8009250:	4619      	mov	r1, r3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fe ffe3 	bl	800821e <USBD_SetClassConfig>
 8009258:	4603      	mov	r3, r0
 800925a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800925c:	7bfb      	ldrb	r3, [r7, #15]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d008      	beq.n	8009274 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009262:	6839      	ldr	r1, [r7, #0]
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f962 	bl	800952e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2202      	movs	r2, #2
 800926e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009272:	e065      	b.n	8009340 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fa31 	bl	80096dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2203      	movs	r2, #3
 800927e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009282:	e05d      	b.n	8009340 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fa29 	bl	80096dc <USBD_CtlSendStatus>
      break;
 800928a:	e059      	b.n	8009340 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800928c:	4b2f      	ldr	r3, [pc, #188]	@ (800934c <USBD_SetConfig+0x150>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d112      	bne.n	80092ba <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2202      	movs	r2, #2
 8009298:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800929c:	4b2b      	ldr	r3, [pc, #172]	@ (800934c <USBD_SetConfig+0x150>)
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	461a      	mov	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80092a6:	4b29      	ldr	r3, [pc, #164]	@ (800934c <USBD_SetConfig+0x150>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f7fe ffd2 	bl	8008256 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f000 fa12 	bl	80096dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092b8:	e042      	b.n	8009340 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80092ba:	4b24      	ldr	r3, [pc, #144]	@ (800934c <USBD_SetConfig+0x150>)
 80092bc:	781b      	ldrb	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	429a      	cmp	r2, r3
 80092c6:	d02a      	beq.n	800931e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7fe ffc0 	bl	8008256 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80092d6:	4b1d      	ldr	r3, [pc, #116]	@ (800934c <USBD_SetConfig+0x150>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	461a      	mov	r2, r3
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092e0:	4b1a      	ldr	r3, [pc, #104]	@ (800934c <USBD_SetConfig+0x150>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fe ff99 	bl	800821e <USBD_SetClassConfig>
 80092ec:	4603      	mov	r3, r0
 80092ee:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80092f0:	7bfb      	ldrb	r3, [r7, #15]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00f      	beq.n	8009316 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 f918 	bl	800952e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7fe ffa5 	bl	8008256 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2202      	movs	r2, #2
 8009310:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009314:	e014      	b.n	8009340 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f9e0 	bl	80096dc <USBD_CtlSendStatus>
      break;
 800931c:	e010      	b.n	8009340 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f000 f9dc 	bl	80096dc <USBD_CtlSendStatus>
      break;
 8009324:	e00c      	b.n	8009340 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f900 	bl	800952e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800932e:	4b07      	ldr	r3, [pc, #28]	@ (800934c <USBD_SetConfig+0x150>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	4619      	mov	r1, r3
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	f7fe ff8e 	bl	8008256 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800933a:	2303      	movs	r3, #3
 800933c:	73fb      	strb	r3, [r7, #15]
      break;
 800933e:	bf00      	nop
  }

  return ret;
 8009340:	7bfb      	ldrb	r3, [r7, #15]
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}
 800934a:	bf00      	nop
 800934c:	20000440 	.word	0x20000440

08009350 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	88db      	ldrh	r3, [r3, #6]
 800935e:	2b01      	cmp	r3, #1
 8009360:	d004      	beq.n	800936c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009362:	6839      	ldr	r1, [r7, #0]
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f8e2 	bl	800952e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800936a:	e023      	b.n	80093b4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009372:	b2db      	uxtb	r3, r3
 8009374:	2b02      	cmp	r3, #2
 8009376:	dc02      	bgt.n	800937e <USBD_GetConfig+0x2e>
 8009378:	2b00      	cmp	r3, #0
 800937a:	dc03      	bgt.n	8009384 <USBD_GetConfig+0x34>
 800937c:	e015      	b.n	80093aa <USBD_GetConfig+0x5a>
 800937e:	2b03      	cmp	r3, #3
 8009380:	d00b      	beq.n	800939a <USBD_GetConfig+0x4a>
 8009382:	e012      	b.n	80093aa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	3308      	adds	r3, #8
 800938e:	2201      	movs	r2, #1
 8009390:	4619      	mov	r1, r3
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 f948 	bl	8009628 <USBD_CtlSendData>
        break;
 8009398:	e00c      	b.n	80093b4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	3304      	adds	r3, #4
 800939e:	2201      	movs	r2, #1
 80093a0:	4619      	mov	r1, r3
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 f940 	bl	8009628 <USBD_CtlSendData>
        break;
 80093a8:	e004      	b.n	80093b4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f8be 	bl	800952e <USBD_CtlError>
        break;
 80093b2:	bf00      	nop
}
 80093b4:	bf00      	nop
 80093b6:	3708      	adds	r7, #8
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b082      	sub	sp, #8
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	3b01      	subs	r3, #1
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	d81e      	bhi.n	8009412 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	88db      	ldrh	r3, [r3, #6]
 80093d8:	2b02      	cmp	r3, #2
 80093da:	d004      	beq.n	80093e6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f8a5 	bl	800952e <USBD_CtlError>
        break;
 80093e4:	e01a      	b.n	800941c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	f043 0202 	orr.w	r2, r3, #2
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	330c      	adds	r3, #12
 8009406:	2202      	movs	r2, #2
 8009408:	4619      	mov	r1, r3
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 f90c 	bl	8009628 <USBD_CtlSendData>
      break;
 8009410:	e004      	b.n	800941c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009412:	6839      	ldr	r1, [r7, #0]
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f000 f88a 	bl	800952e <USBD_CtlError>
      break;
 800941a:	bf00      	nop
  }
}
 800941c:	bf00      	nop
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800942e:	683b      	ldr	r3, [r7, #0]
 8009430:	885b      	ldrh	r3, [r3, #2]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d107      	bne.n	8009446 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f94c 	bl	80096dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009444:	e013      	b.n	800946e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	885b      	ldrh	r3, [r3, #2]
 800944a:	2b02      	cmp	r3, #2
 800944c:	d10b      	bne.n	8009466 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	889b      	ldrh	r3, [r3, #4]
 8009452:	0a1b      	lsrs	r3, r3, #8
 8009454:	b29b      	uxth	r3, r3
 8009456:	b2da      	uxtb	r2, r3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f93c 	bl	80096dc <USBD_CtlSendStatus>
}
 8009464:	e003      	b.n	800946e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f860 	bl	800952e <USBD_CtlError>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009486:	b2db      	uxtb	r3, r3
 8009488:	3b01      	subs	r3, #1
 800948a:	2b02      	cmp	r3, #2
 800948c:	d80b      	bhi.n	80094a6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	885b      	ldrh	r3, [r3, #2]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d10c      	bne.n	80094b0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f91c 	bl	80096dc <USBD_CtlSendStatus>
      }
      break;
 80094a4:	e004      	b.n	80094b0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f840 	bl	800952e <USBD_CtlError>
      break;
 80094ae:	e000      	b.n	80094b2 <USBD_ClrFeature+0x3c>
      break;
 80094b0:	bf00      	nop
  }
}
 80094b2:	bf00      	nop
 80094b4:	3708      	adds	r7, #8
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}

080094ba <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ba:	b580      	push	{r7, lr}
 80094bc:	b084      	sub	sp, #16
 80094be:	af00      	add	r7, sp, #0
 80094c0:	6078      	str	r0, [r7, #4]
 80094c2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	781a      	ldrb	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3301      	adds	r3, #1
 80094d4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	781a      	ldrb	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	3301      	adds	r3, #1
 80094e2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f7ff fa40 	bl	800896a <SWAPBYTE>
 80094ea:	4603      	mov	r3, r0
 80094ec:	461a      	mov	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	3301      	adds	r3, #1
 80094f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	3301      	adds	r3, #1
 80094fc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	f7ff fa33 	bl	800896a <SWAPBYTE>
 8009504:	4603      	mov	r3, r0
 8009506:	461a      	mov	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	3301      	adds	r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3301      	adds	r3, #1
 8009516:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009518:	68f8      	ldr	r0, [r7, #12]
 800951a:	f7ff fa26 	bl	800896a <SWAPBYTE>
 800951e:	4603      	mov	r3, r0
 8009520:	461a      	mov	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	80da      	strh	r2, [r3, #6]
}
 8009526:	bf00      	nop
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b082      	sub	sp, #8
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009538:	2180      	movs	r1, #128	@ 0x80
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f004 f9ec 	bl	800d918 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f004 f9e8 	bl	800d918 <USBD_LL_StallEP>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d042      	beq.n	80095ec <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800956a:	6938      	ldr	r0, [r7, #16]
 800956c:	f000 f842 	bl	80095f4 <USBD_GetLen>
 8009570:	4603      	mov	r3, r0
 8009572:	3301      	adds	r3, #1
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800957a:	d808      	bhi.n	800958e <USBD_GetString+0x3e>
 800957c:	6938      	ldr	r0, [r7, #16]
 800957e:	f000 f839 	bl	80095f4 <USBD_GetLen>
 8009582:	4603      	mov	r3, r0
 8009584:	3301      	adds	r3, #1
 8009586:	b29b      	uxth	r3, r3
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	e001      	b.n	8009592 <USBD_GetString+0x42>
 800958e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	68ba      	ldr	r2, [r7, #8]
 800959a:	4413      	add	r3, r2
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	7812      	ldrb	r2, [r2, #0]
 80095a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80095a2:	7dfb      	ldrb	r3, [r7, #23]
 80095a4:	3301      	adds	r3, #1
 80095a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095a8:	7dfb      	ldrb	r3, [r7, #23]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	4413      	add	r3, r2
 80095ae:	2203      	movs	r2, #3
 80095b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80095b2:	7dfb      	ldrb	r3, [r7, #23]
 80095b4:	3301      	adds	r3, #1
 80095b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095b8:	e013      	b.n	80095e2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80095ba:	7dfb      	ldrb	r3, [r7, #23]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	4413      	add	r3, r2
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	7812      	ldrb	r2, [r2, #0]
 80095c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	3301      	adds	r3, #1
 80095ca:	613b      	str	r3, [r7, #16]
    idx++;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	3301      	adds	r3, #1
 80095d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095d2:	7dfb      	ldrb	r3, [r7, #23]
 80095d4:	68ba      	ldr	r2, [r7, #8]
 80095d6:	4413      	add	r3, r2
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
    idx++;
 80095dc:	7dfb      	ldrb	r3, [r7, #23]
 80095de:	3301      	adds	r3, #1
 80095e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1e7      	bne.n	80095ba <USBD_GetString+0x6a>
 80095ea:	e000      	b.n	80095ee <USBD_GetString+0x9e>
    return;
 80095ec:	bf00      	nop
  }
}
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009604:	e005      	b.n	8009612 <USBD_GetLen+0x1e>
  {
    len++;
 8009606:	7bfb      	ldrb	r3, [r7, #15]
 8009608:	3301      	adds	r3, #1
 800960a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	3301      	adds	r3, #1
 8009610:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	781b      	ldrb	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1f5      	bne.n	8009606 <USBD_GetLen+0x12>
  }

  return len;
 800961a:	7bfb      	ldrb	r3, [r7, #15]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3714      	adds	r7, #20
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	60f8      	str	r0, [r7, #12]
 8009630:	60b9      	str	r1, [r7, #8]
 8009632:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2202      	movs	r2, #2
 8009638:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	687a      	ldr	r2, [r7, #4]
 8009640:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	2100      	movs	r1, #0
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f004 f9eb 	bl	800da2a <USBD_LL_Transmit>

  return USBD_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3710      	adds	r7, #16
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}

0800965e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800965e:	b580      	push	{r7, lr}
 8009660:	b084      	sub	sp, #16
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
 8009666:	60b9      	str	r1, [r7, #8]
 8009668:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	68ba      	ldr	r2, [r7, #8]
 800966e:	2100      	movs	r1, #0
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f004 f9da 	bl	800da2a <USBD_LL_Transmit>

  return USBD_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	60f8      	str	r0, [r7, #12]
 8009688:	60b9      	str	r1, [r7, #8]
 800968a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2203      	movs	r2, #3
 8009690:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	68ba      	ldr	r2, [r7, #8]
 80096a8:	2100      	movs	r1, #0
 80096aa:	68f8      	ldr	r0, [r7, #12]
 80096ac:	f004 f9de 	bl	800da6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	60f8      	str	r0, [r7, #12]
 80096c2:	60b9      	str	r1, [r7, #8]
 80096c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	2100      	movs	r1, #0
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f004 f9cd 	bl	800da6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3710      	adds	r7, #16
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2204      	movs	r2, #4
 80096e8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096ec:	2300      	movs	r3, #0
 80096ee:	2200      	movs	r2, #0
 80096f0:	2100      	movs	r1, #0
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f004 f999 	bl	800da2a <USBD_LL_Transmit>

  return USBD_OK;
 80096f8:	2300      	movs	r3, #0
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2205      	movs	r2, #5
 800970e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009712:	2300      	movs	r3, #0
 8009714:	2200      	movs	r2, #0
 8009716:	2100      	movs	r1, #0
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f004 f9a7 	bl	800da6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <__NVIC_SetPriority>:
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009738:	2b00      	cmp	r3, #0
 800973a:	db0a      	blt.n	8009752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	b2da      	uxtb	r2, r3
 8009740:	490c      	ldr	r1, [pc, #48]	@ (8009774 <__NVIC_SetPriority+0x4c>)
 8009742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009746:	0112      	lsls	r2, r2, #4
 8009748:	b2d2      	uxtb	r2, r2
 800974a:	440b      	add	r3, r1
 800974c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009750:	e00a      	b.n	8009768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	b2da      	uxtb	r2, r3
 8009756:	4908      	ldr	r1, [pc, #32]	@ (8009778 <__NVIC_SetPriority+0x50>)
 8009758:	79fb      	ldrb	r3, [r7, #7]
 800975a:	f003 030f 	and.w	r3, r3, #15
 800975e:	3b04      	subs	r3, #4
 8009760:	0112      	lsls	r2, r2, #4
 8009762:	b2d2      	uxtb	r2, r2
 8009764:	440b      	add	r3, r1
 8009766:	761a      	strb	r2, [r3, #24]
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr
 8009774:	e000e100 	.word	0xe000e100
 8009778:	e000ed00 	.word	0xe000ed00

0800977c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800977c:	b580      	push	{r7, lr}
 800977e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <SysTick_Handler+0x1c>)
 8009782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009784:	f002 fa86 	bl	800bc94 <xTaskGetSchedulerState>
 8009788:	4603      	mov	r3, r0
 800978a:	2b01      	cmp	r3, #1
 800978c:	d001      	beq.n	8009792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800978e:	f003 fa3b 	bl	800cc08 <xPortSysTickHandler>
  }
}
 8009792:	bf00      	nop
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	e000e010 	.word	0xe000e010

0800979c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800979c:	b580      	push	{r7, lr}
 800979e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80097a0:	2100      	movs	r1, #0
 80097a2:	f06f 0004 	mvn.w	r0, #4
 80097a6:	f7ff ffbf 	bl	8009728 <__NVIC_SetPriority>
#endif
}
 80097aa:	bf00      	nop
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097b6:	f3ef 8305 	mrs	r3, IPSR
 80097ba:	603b      	str	r3, [r7, #0]
  return(result);
 80097bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80097c2:	f06f 0305 	mvn.w	r3, #5
 80097c6:	607b      	str	r3, [r7, #4]
 80097c8:	e00c      	b.n	80097e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80097ca:	4b0a      	ldr	r3, [pc, #40]	@ (80097f4 <osKernelInitialize+0x44>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d105      	bne.n	80097de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80097d2:	4b08      	ldr	r3, [pc, #32]	@ (80097f4 <osKernelInitialize+0x44>)
 80097d4:	2201      	movs	r2, #1
 80097d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80097d8:	2300      	movs	r3, #0
 80097da:	607b      	str	r3, [r7, #4]
 80097dc:	e002      	b.n	80097e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80097de:	f04f 33ff 	mov.w	r3, #4294967295
 80097e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80097e4:	687b      	ldr	r3, [r7, #4]
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000444 	.word	0x20000444

080097f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80097fe:	f3ef 8305 	mrs	r3, IPSR
 8009802:	603b      	str	r3, [r7, #0]
  return(result);
 8009804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <osKernelStart+0x1a>
    stat = osErrorISR;
 800980a:	f06f 0305 	mvn.w	r3, #5
 800980e:	607b      	str	r3, [r7, #4]
 8009810:	e010      	b.n	8009834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009812:	4b0b      	ldr	r3, [pc, #44]	@ (8009840 <osKernelStart+0x48>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d109      	bne.n	800982e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800981a:	f7ff ffbf 	bl	800979c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800981e:	4b08      	ldr	r3, [pc, #32]	@ (8009840 <osKernelStart+0x48>)
 8009820:	2202      	movs	r2, #2
 8009822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009824:	f001 fde8 	bl	800b3f8 <vTaskStartScheduler>
      stat = osOK;
 8009828:	2300      	movs	r3, #0
 800982a:	607b      	str	r3, [r7, #4]
 800982c:	e002      	b.n	8009834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800982e:	f04f 33ff 	mov.w	r3, #4294967295
 8009832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009834:	687b      	ldr	r3, [r7, #4]
}
 8009836:	4618      	mov	r0, r3
 8009838:	3708      	adds	r7, #8
 800983a:	46bd      	mov	sp, r7
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000444 	.word	0x20000444

08009844 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009844:	b580      	push	{r7, lr}
 8009846:	b08e      	sub	sp, #56	@ 0x38
 8009848:	af04      	add	r7, sp, #16
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009854:	f3ef 8305 	mrs	r3, IPSR
 8009858:	617b      	str	r3, [r7, #20]
  return(result);
 800985a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800985c:	2b00      	cmp	r3, #0
 800985e:	d17e      	bne.n	800995e <osThreadNew+0x11a>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d07b      	beq.n	800995e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009866:	2380      	movs	r3, #128	@ 0x80
 8009868:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800986a:	2318      	movs	r3, #24
 800986c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800986e:	2300      	movs	r3, #0
 8009870:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009872:	f04f 33ff 	mov.w	r3, #4294967295
 8009876:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d045      	beq.n	800990a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d002      	beq.n	800988c <osThreadNew+0x48>
        name = attr->name;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699b      	ldr	r3, [r3, #24]
 8009898:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800989a:	69fb      	ldr	r3, [r7, #28]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d008      	beq.n	80098b2 <osThreadNew+0x6e>
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	2b38      	cmp	r3, #56	@ 0x38
 80098a4:	d805      	bhi.n	80098b2 <osThreadNew+0x6e>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	f003 0301 	and.w	r3, r3, #1
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <osThreadNew+0x72>
        return (NULL);
 80098b2:	2300      	movs	r3, #0
 80098b4:	e054      	b.n	8009960 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	695b      	ldr	r3, [r3, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d003      	beq.n	80098c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	089b      	lsrs	r3, r3, #2
 80098c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00e      	beq.n	80098ec <osThreadNew+0xa8>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	2b5b      	cmp	r3, #91	@ 0x5b
 80098d4:	d90a      	bls.n	80098ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d006      	beq.n	80098ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	695b      	ldr	r3, [r3, #20]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <osThreadNew+0xa8>
        mem = 1;
 80098e6:	2301      	movs	r3, #1
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	e010      	b.n	800990e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	689b      	ldr	r3, [r3, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d10c      	bne.n	800990e <osThreadNew+0xca>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d108      	bne.n	800990e <osThreadNew+0xca>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	691b      	ldr	r3, [r3, #16]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d104      	bne.n	800990e <osThreadNew+0xca>
          mem = 0;
 8009904:	2300      	movs	r3, #0
 8009906:	61bb      	str	r3, [r7, #24]
 8009908:	e001      	b.n	800990e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800990e:	69bb      	ldr	r3, [r7, #24]
 8009910:	2b01      	cmp	r3, #1
 8009912:	d110      	bne.n	8009936 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800991c:	9202      	str	r2, [sp, #8]
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	6a3a      	ldr	r2, [r7, #32]
 8009928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800992a:	68f8      	ldr	r0, [r7, #12]
 800992c:	f001 fb88 	bl	800b040 <xTaskCreateStatic>
 8009930:	4603      	mov	r3, r0
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	e013      	b.n	800995e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d110      	bne.n	800995e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800993c:	6a3b      	ldr	r3, [r7, #32]
 800993e:	b29a      	uxth	r2, r3
 8009940:	f107 0310 	add.w	r3, r7, #16
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f001 fbd6 	bl	800b100 <xTaskCreate>
 8009954:	4603      	mov	r3, r0
 8009956:	2b01      	cmp	r3, #1
 8009958:	d001      	beq.n	800995e <osThreadNew+0x11a>
            hTask = NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800995e:	693b      	ldr	r3, [r7, #16]
}
 8009960:	4618      	mov	r0, r3
 8009962:	3728      	adds	r7, #40	@ 0x28
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009970:	f3ef 8305 	mrs	r3, IPSR
 8009974:	60bb      	str	r3, [r7, #8]
  return(result);
 8009976:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009978:	2b00      	cmp	r3, #0
 800997a:	d003      	beq.n	8009984 <osDelay+0x1c>
    stat = osErrorISR;
 800997c:	f06f 0305 	mvn.w	r3, #5
 8009980:	60fb      	str	r3, [r7, #12]
 8009982:	e007      	b.n	8009994 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009984:	2300      	movs	r3, #0
 8009986:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <osDelay+0x2c>
      vTaskDelay(ticks);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f001 fcfc 	bl	800b38c <vTaskDelay>
    }
  }

  return (stat);
 8009994:	68fb      	ldr	r3, [r7, #12]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f002 ff4e 	bl	800c848 <pvTimerGetTimerID>
 80099ac:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <TimerCallback+0x22>
    callb->func (callb->arg);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	6852      	ldr	r2, [r2, #4]
 80099bc:	4610      	mov	r0, r2
 80099be:	4798      	blx	r3
  }
}
 80099c0:	bf00      	nop
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08c      	sub	sp, #48	@ 0x30
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	460b      	mov	r3, r1
 80099d6:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80099d8:	2300      	movs	r3, #0
 80099da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099dc:	f3ef 8305 	mrs	r3, IPSR
 80099e0:	613b      	str	r3, [r7, #16]
  return(result);
 80099e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d163      	bne.n	8009ab0 <osTimerNew+0xe8>
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d060      	beq.n	8009ab0 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80099ee:	2008      	movs	r0, #8
 80099f0:	f003 f99c 	bl	800cd2c <pvPortMalloc>
 80099f4:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d059      	beq.n	8009ab0 <osTimerNew+0xe8>
      callb->func = func;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	68fa      	ldr	r2, [r7, #12]
 8009a00:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	687a      	ldr	r2, [r7, #4]
 8009a06:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8009a08:	7afb      	ldrb	r3, [r7, #11]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d102      	bne.n	8009a14 <osTimerNew+0x4c>
        reload = pdFALSE;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
 8009a12:	e001      	b.n	8009a18 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8009a14:	2301      	movs	r3, #1
 8009a16:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8009a18:	f04f 33ff 	mov.w	r3, #4294967295
 8009a1c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01c      	beq.n	8009a62 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <osTimerNew+0x6e>
          name = attr->name;
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	689b      	ldr	r3, [r3, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d006      	beq.n	8009a4c <osTimerNew+0x84>
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2b2b      	cmp	r3, #43	@ 0x2b
 8009a44:	d902      	bls.n	8009a4c <osTimerNew+0x84>
          mem = 1;
 8009a46:	2301      	movs	r3, #1
 8009a48:	61bb      	str	r3, [r7, #24]
 8009a4a:	e00c      	b.n	8009a66 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d108      	bne.n	8009a66 <osTimerNew+0x9e>
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d104      	bne.n	8009a66 <osTimerNew+0x9e>
            mem = 0;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	e001      	b.n	8009a66 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8009a62:	2300      	movs	r3, #0
 8009a64:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d10c      	bne.n	8009a86 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	9301      	str	r3, [sp, #4]
 8009a72:	4b12      	ldr	r3, [pc, #72]	@ (8009abc <osTimerNew+0xf4>)
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a7e:	f002 fb56 	bl	800c12e <xTimerCreateStatic>
 8009a82:	6238      	str	r0, [r7, #32]
 8009a84:	e00b      	b.n	8009a9e <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8009a86:	69bb      	ldr	r3, [r7, #24]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d108      	bne.n	8009a9e <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009abc <osTimerNew+0xf4>)
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	2101      	movs	r1, #1
 8009a96:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a98:	f002 fb28 	bl	800c0ec <xTimerCreate>
 8009a9c:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d105      	bne.n	8009ab0 <osTimerNew+0xe8>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d002      	beq.n	8009ab0 <osTimerNew+0xe8>
        vPortFree (callb);
 8009aaa:	6978      	ldr	r0, [r7, #20]
 8009aac:	f003 fa0c 	bl	800cec8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8009ab0:	6a3b      	ldr	r3, [r7, #32]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3728      	adds	r7, #40	@ 0x28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	0800999f 	.word	0x0800999f

08009ac0 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b088      	sub	sp, #32
 8009ac4:	af02      	add	r7, sp, #8
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ace:	f3ef 8305 	mrs	r3, IPSR
 8009ad2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d003      	beq.n	8009ae2 <osTimerStart+0x22>
    stat = osErrorISR;
 8009ada:	f06f 0305 	mvn.w	r3, #5
 8009ade:	617b      	str	r3, [r7, #20]
 8009ae0:	e017      	b.n	8009b12 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d103      	bne.n	8009af0 <osTimerStart+0x30>
    stat = osErrorParameter;
 8009ae8:	f06f 0303 	mvn.w	r3, #3
 8009aec:	617b      	str	r3, [r7, #20]
 8009aee:	e010      	b.n	8009b12 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8009af0:	2300      	movs	r3, #0
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	683a      	ldr	r2, [r7, #0]
 8009af8:	2104      	movs	r1, #4
 8009afa:	6938      	ldr	r0, [r7, #16]
 8009afc:	f002 fb94 	bl	800c228 <xTimerGenericCommand>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b01      	cmp	r3, #1
 8009b04:	d102      	bne.n	8009b0c <osTimerStart+0x4c>
      stat = osOK;
 8009b06:	2300      	movs	r3, #0
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	e002      	b.n	8009b12 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8009b0c:	f06f 0302 	mvn.w	r3, #2
 8009b10:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009b12:	697b      	ldr	r3, [r7, #20]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3718      	adds	r7, #24
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08a      	sub	sp, #40	@ 0x28
 8009b20:	af02      	add	r7, sp, #8
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2c:	f3ef 8305 	mrs	r3, IPSR
 8009b30:	613b      	str	r3, [r7, #16]
  return(result);
 8009b32:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d175      	bne.n	8009c24 <osSemaphoreNew+0x108>
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d072      	beq.n	8009c24 <osSemaphoreNew+0x108>
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d86e      	bhi.n	8009c24 <osSemaphoreNew+0x108>
    mem = -1;
 8009b46:	f04f 33ff 	mov.w	r3, #4294967295
 8009b4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d015      	beq.n	8009b7e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d006      	beq.n	8009b68 <osSemaphoreNew+0x4c>
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	2b4f      	cmp	r3, #79	@ 0x4f
 8009b60:	d902      	bls.n	8009b68 <osSemaphoreNew+0x4c>
        mem = 1;
 8009b62:	2301      	movs	r3, #1
 8009b64:	61bb      	str	r3, [r7, #24]
 8009b66:	e00c      	b.n	8009b82 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d108      	bne.n	8009b82 <osSemaphoreNew+0x66>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <osSemaphoreNew+0x66>
          mem = 0;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	61bb      	str	r3, [r7, #24]
 8009b7c:	e001      	b.n	8009b82 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b88:	d04c      	beq.n	8009c24 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	2b01      	cmp	r3, #1
 8009b8e:	d128      	bne.n	8009be2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009b90:	69bb      	ldr	r3, [r7, #24]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d10a      	bne.n	8009bac <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	2203      	movs	r2, #3
 8009b9c:	9200      	str	r2, [sp, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	2001      	movs	r0, #1
 8009ba4:	f000 fa4c 	bl	800a040 <xQueueGenericCreateStatic>
 8009ba8:	61f8      	str	r0, [r7, #28]
 8009baa:	e005      	b.n	8009bb8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8009bac:	2203      	movs	r2, #3
 8009bae:	2100      	movs	r1, #0
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	f000 fac2 	bl	800a13a <xQueueGenericCreate>
 8009bb6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d022      	beq.n	8009c04 <osSemaphoreNew+0xe8>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d01f      	beq.n	8009c04 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2100      	movs	r1, #0
 8009bca:	69f8      	ldr	r0, [r7, #28]
 8009bcc:	f000 fb82 	bl	800a2d4 <xQueueGenericSend>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d016      	beq.n	8009c04 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009bd6:	69f8      	ldr	r0, [r7, #28]
 8009bd8:	f001 f85e 	bl	800ac98 <vQueueDelete>
            hSemaphore = NULL;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	61fb      	str	r3, [r7, #28]
 8009be0:	e010      	b.n	8009c04 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009be2:	69bb      	ldr	r3, [r7, #24]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d108      	bne.n	8009bfa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	461a      	mov	r2, r3
 8009bee:	68b9      	ldr	r1, [r7, #8]
 8009bf0:	68f8      	ldr	r0, [r7, #12]
 8009bf2:	f000 fb00 	bl	800a1f6 <xQueueCreateCountingSemaphoreStatic>
 8009bf6:	61f8      	str	r0, [r7, #28]
 8009bf8:	e004      	b.n	8009c04 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009bfa:	68b9      	ldr	r1, [r7, #8]
 8009bfc:	68f8      	ldr	r0, [r7, #12]
 8009bfe:	f000 fb33 	bl	800a268 <xQueueCreateCountingSemaphore>
 8009c02:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00c      	beq.n	8009c24 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d003      	beq.n	8009c18 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	617b      	str	r3, [r7, #20]
 8009c16:	e001      	b.n	8009c1c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009c1c:	6979      	ldr	r1, [r7, #20]
 8009c1e:	69f8      	ldr	r0, [r7, #28]
 8009c20:	f001 f986 	bl	800af30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8009c24:	69fb      	ldr	r3, [r7, #28]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3720      	adds	r7, #32
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
	...

08009c30 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b086      	sub	sp, #24
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009c3e:	2300      	movs	r3, #0
 8009c40:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d103      	bne.n	8009c50 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009c48:	f06f 0303 	mvn.w	r3, #3
 8009c4c:	617b      	str	r3, [r7, #20]
 8009c4e:	e039      	b.n	8009cc4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c50:	f3ef 8305 	mrs	r3, IPSR
 8009c54:	60fb      	str	r3, [r7, #12]
  return(result);
 8009c56:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d022      	beq.n	8009ca2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d003      	beq.n	8009c6a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009c62:	f06f 0303 	mvn.w	r3, #3
 8009c66:	617b      	str	r3, [r7, #20]
 8009c68:	e02c      	b.n	8009cc4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009c6e:	f107 0308 	add.w	r3, r7, #8
 8009c72:	461a      	mov	r2, r3
 8009c74:	2100      	movs	r1, #0
 8009c76:	6938      	ldr	r0, [r7, #16]
 8009c78:	f000 ff4e 	bl	800ab18 <xQueueReceiveFromISR>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d003      	beq.n	8009c8a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009c82:	f06f 0302 	mvn.w	r3, #2
 8009c86:	617b      	str	r3, [r7, #20]
 8009c88:	e01c      	b.n	8009cc4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d019      	beq.n	8009cc4 <osSemaphoreAcquire+0x94>
 8009c90:	4b0f      	ldr	r3, [pc, #60]	@ (8009cd0 <osSemaphoreAcquire+0xa0>)
 8009c92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	f3bf 8f6f 	isb	sy
 8009ca0:	e010      	b.n	8009cc4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009ca2:	6839      	ldr	r1, [r7, #0]
 8009ca4:	6938      	ldr	r0, [r7, #16]
 8009ca6:	f000 fe27 	bl	800a8f8 <xQueueSemaphoreTake>
 8009caa:	4603      	mov	r3, r0
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d009      	beq.n	8009cc4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d003      	beq.n	8009cbe <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009cb6:	f06f 0301 	mvn.w	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	e002      	b.n	8009cc4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009cbe:	f06f 0302 	mvn.w	r3, #2
 8009cc2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009cc4:	697b      	ldr	r3, [r7, #20]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3718      	adds	r7, #24
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}
 8009cce:	bf00      	nop
 8009cd0:	e000ed04 	.word	0xe000ed04

08009cd4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009ce4:	693b      	ldr	r3, [r7, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d103      	bne.n	8009cf2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009cea:	f06f 0303 	mvn.w	r3, #3
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	e02c      	b.n	8009d4c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cf2:	f3ef 8305 	mrs	r3, IPSR
 8009cf6:	60fb      	str	r3, [r7, #12]
  return(result);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d01a      	beq.n	8009d34 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009d02:	f107 0308 	add.w	r3, r7, #8
 8009d06:	4619      	mov	r1, r3
 8009d08:	6938      	ldr	r0, [r7, #16]
 8009d0a:	f000 fc83 	bl	800a614 <xQueueGiveFromISR>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d003      	beq.n	8009d1c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009d14:	f06f 0302 	mvn.w	r3, #2
 8009d18:	617b      	str	r3, [r7, #20]
 8009d1a:	e017      	b.n	8009d4c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d014      	beq.n	8009d4c <osSemaphoreRelease+0x78>
 8009d22:	4b0d      	ldr	r3, [pc, #52]	@ (8009d58 <osSemaphoreRelease+0x84>)
 8009d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	e00b      	b.n	8009d4c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009d34:	2300      	movs	r3, #0
 8009d36:	2200      	movs	r2, #0
 8009d38:	2100      	movs	r1, #0
 8009d3a:	6938      	ldr	r0, [r7, #16]
 8009d3c:	f000 faca 	bl	800a2d4 <xQueueGenericSend>
 8009d40:	4603      	mov	r3, r0
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d002      	beq.n	8009d4c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009d46:	f06f 0302 	mvn.w	r3, #2
 8009d4a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d4c:	697b      	ldr	r3, [r7, #20]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3718      	adds	r7, #24
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	e000ed04 	.word	0xe000ed04

08009d5c <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b086      	sub	sp, #24
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d102      	bne.n	8009d74 <osSemaphoreGetCount+0x18>
    count = 0U;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	617b      	str	r3, [r7, #20]
 8009d72:	e00e      	b.n	8009d92 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d74:	f3ef 8305 	mrs	r3, IPSR
 8009d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d004      	beq.n	8009d8a <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 8009d80:	6938      	ldr	r0, [r7, #16]
 8009d82:	f000 ff6a 	bl	800ac5a <uxQueueMessagesWaitingFromISR>
 8009d86:	6178      	str	r0, [r7, #20]
 8009d88:	e003      	b.n	8009d92 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 8009d8a:	6938      	ldr	r0, [r7, #16]
 8009d8c:	f000 ff46 	bl	800ac1c <uxQueueMessagesWaiting>
 8009d90:	6178      	str	r0, [r7, #20]
  }

  return (count);
 8009d92:	697b      	ldr	r3, [r7, #20]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d9c:	b480      	push	{r7}
 8009d9e:	b085      	sub	sp, #20
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	4a07      	ldr	r2, [pc, #28]	@ (8009dc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8009dac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	4a06      	ldr	r2, [pc, #24]	@ (8009dcc <vApplicationGetIdleTaskMemory+0x30>)
 8009db2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2280      	movs	r2, #128	@ 0x80
 8009db8:	601a      	str	r2, [r3, #0]
}
 8009dba:	bf00      	nop
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc4:	4770      	bx	lr
 8009dc6:	bf00      	nop
 8009dc8:	20000448 	.word	0x20000448
 8009dcc:	200004a4 	.word	0x200004a4

08009dd0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	60b9      	str	r1, [r7, #8]
 8009dda:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	4a07      	ldr	r2, [pc, #28]	@ (8009dfc <vApplicationGetTimerTaskMemory+0x2c>)
 8009de0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	4a06      	ldr	r2, [pc, #24]	@ (8009e00 <vApplicationGetTimerTaskMemory+0x30>)
 8009de6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dee:	601a      	str	r2, [r3, #0]
}
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr
 8009dfc:	200006a4 	.word	0x200006a4
 8009e00:	20000700 	.word	0x20000700

08009e04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f103 0208 	add.w	r2, r3, #8
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	f04f 32ff 	mov.w	r2, #4294967295
 8009e1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	f103 0208 	add.w	r2, r3, #8
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f103 0208 	add.w	r2, r3, #8
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2200      	movs	r2, #0
 8009e36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e38:	bf00      	nop
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e52:	bf00      	nop
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b085      	sub	sp, #20
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	601a      	str	r2, [r3, #0]
}
 8009e9a:	bf00      	nop
 8009e9c:	3714      	adds	r7, #20
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b085      	sub	sp, #20
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ebc:	d103      	bne.n	8009ec6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	691b      	ldr	r3, [r3, #16]
 8009ec2:	60fb      	str	r3, [r7, #12]
 8009ec4:	e00c      	b.n	8009ee0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	3308      	adds	r3, #8
 8009eca:	60fb      	str	r3, [r7, #12]
 8009ecc:	e002      	b.n	8009ed4 <vListInsert+0x2e>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	60fb      	str	r3, [r7, #12]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	685b      	ldr	r3, [r3, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d2f6      	bcs.n	8009ece <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	685a      	ldr	r2, [r3, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	683a      	ldr	r2, [r7, #0]
 8009eee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	683a      	ldr	r2, [r7, #0]
 8009efa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	1c5a      	adds	r2, r3, #1
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
}
 8009f0c:	bf00      	nop
 8009f0e:	3714      	adds	r7, #20
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	687a      	ldr	r2, [r7, #4]
 8009f2c:	6892      	ldr	r2, [r2, #8]
 8009f2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	687a      	ldr	r2, [r7, #4]
 8009f36:	6852      	ldr	r2, [r2, #4]
 8009f38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d103      	bne.n	8009f4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	1e5a      	subs	r2, r3, #1
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
}
 8009f60:	4618      	mov	r0, r3
 8009f62:	3714      	adds	r7, #20
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b084      	sub	sp, #16
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	6078      	str	r0, [r7, #4]
 8009f74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10b      	bne.n	8009f98 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	e7fd      	b.n	8009f94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f98:	f002 fda6 	bl	800cae8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fa4:	68f9      	ldr	r1, [r7, #12]
 8009fa6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fa8:	fb01 f303 	mul.w	r3, r1, r3
 8009fac:	441a      	add	r2, r3
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fc8:	3b01      	subs	r3, #1
 8009fca:	68f9      	ldr	r1, [r7, #12]
 8009fcc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fce:	fb01 f303 	mul.w	r3, r1, r3
 8009fd2:	441a      	add	r2, r3
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	22ff      	movs	r2, #255	@ 0xff
 8009fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	22ff      	movs	r2, #255	@ 0xff
 8009fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d114      	bne.n	800a018 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d01a      	beq.n	800a02c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3310      	adds	r3, #16
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f001 fc8a 	bl	800b914 <xTaskRemoveFromEventList>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d012      	beq.n	800a02c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a006:	4b0d      	ldr	r3, [pc, #52]	@ (800a03c <xQueueGenericReset+0xd0>)
 800a008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a00c:	601a      	str	r2, [r3, #0]
 800a00e:	f3bf 8f4f 	dsb	sy
 800a012:	f3bf 8f6f 	isb	sy
 800a016:	e009      	b.n	800a02c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	3310      	adds	r3, #16
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7ff fef1 	bl	8009e04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	3324      	adds	r3, #36	@ 0x24
 800a026:	4618      	mov	r0, r3
 800a028:	f7ff feec 	bl	8009e04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a02c:	f002 fd8e 	bl	800cb4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a030:	2301      	movs	r3, #1
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	e000ed04 	.word	0xe000ed04

0800a040 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08e      	sub	sp, #56	@ 0x38
 800a044:	af02      	add	r7, sp, #8
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10b      	bne.n	800a06c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	e7fd      	b.n	800a068 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10b      	bne.n	800a08a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a084:	bf00      	nop
 800a086:	bf00      	nop
 800a088:	e7fd      	b.n	800a086 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <xQueueGenericCreateStatic+0x56>
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <xQueueGenericCreateStatic+0x5a>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueGenericCreateStatic+0x5c>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	623b      	str	r3, [r7, #32]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d102      	bne.n	800a0c4 <xQueueGenericCreateStatic+0x84>
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d101      	bne.n	800a0c8 <xQueueGenericCreateStatic+0x88>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	e000      	b.n	800a0ca <xQueueGenericCreateStatic+0x8a>
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10b      	bne.n	800a0e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	61fb      	str	r3, [r7, #28]
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	e7fd      	b.n	800a0e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0e6:	2350      	movs	r3, #80	@ 0x50
 800a0e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0ea:	697b      	ldr	r3, [r7, #20]
 800a0ec:	2b50      	cmp	r3, #80	@ 0x50
 800a0ee:	d00b      	beq.n	800a108 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a0f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0f4:	f383 8811 	msr	BASEPRI, r3
 800a0f8:	f3bf 8f6f 	isb	sy
 800a0fc:	f3bf 8f4f 	dsb	sy
 800a100:	61bb      	str	r3, [r7, #24]
}
 800a102:	bf00      	nop
 800a104:	bf00      	nop
 800a106:	e7fd      	b.n	800a104 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a108:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a10e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a110:	2b00      	cmp	r3, #0
 800a112:	d00d      	beq.n	800a130 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a116:	2201      	movs	r2, #1
 800a118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a11c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a122:	9300      	str	r3, [sp, #0]
 800a124:	4613      	mov	r3, r2
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	68b9      	ldr	r1, [r7, #8]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 f840 	bl	800a1b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a132:	4618      	mov	r0, r3
 800a134:	3730      	adds	r7, #48	@ 0x30
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b08a      	sub	sp, #40	@ 0x28
 800a13e:	af02      	add	r7, sp, #8
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	4613      	mov	r3, r2
 800a146:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d10b      	bne.n	800a166 <xQueueGenericCreate+0x2c>
	__asm volatile
 800a14e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a152:	f383 8811 	msr	BASEPRI, r3
 800a156:	f3bf 8f6f 	isb	sy
 800a15a:	f3bf 8f4f 	dsb	sy
 800a15e:	613b      	str	r3, [r7, #16]
}
 800a160:	bf00      	nop
 800a162:	bf00      	nop
 800a164:	e7fd      	b.n	800a162 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	68ba      	ldr	r2, [r7, #8]
 800a16a:	fb02 f303 	mul.w	r3, r2, r3
 800a16e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	3350      	adds	r3, #80	@ 0x50
 800a174:	4618      	mov	r0, r3
 800a176:	f002 fdd9 	bl	800cd2c <pvPortMalloc>
 800a17a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d011      	beq.n	800a1a6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	3350      	adds	r3, #80	@ 0x50
 800a18a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a18c:	69bb      	ldr	r3, [r7, #24]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a194:	79fa      	ldrb	r2, [r7, #7]
 800a196:	69bb      	ldr	r3, [r7, #24]
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	4613      	mov	r3, r2
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	68b9      	ldr	r1, [r7, #8]
 800a1a0:	68f8      	ldr	r0, [r7, #12]
 800a1a2:	f000 f805 	bl	800a1b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
	}
 800a1a8:	4618      	mov	r0, r3
 800a1aa:	3720      	adds	r7, #32
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd80      	pop	{r7, pc}

0800a1b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	60f8      	str	r0, [r7, #12]
 800a1b8:	60b9      	str	r1, [r7, #8]
 800a1ba:	607a      	str	r2, [r7, #4]
 800a1bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d103      	bne.n	800a1cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	601a      	str	r2, [r3, #0]
 800a1ca:	e002      	b.n	800a1d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1cc:	69bb      	ldr	r3, [r7, #24]
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1de:	2101      	movs	r1, #1
 800a1e0:	69b8      	ldr	r0, [r7, #24]
 800a1e2:	f7ff fec3 	bl	8009f6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	78fa      	ldrb	r2, [r7, #3]
 800a1ea:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1ee:	bf00      	nop
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b08a      	sub	sp, #40	@ 0x28
 800a1fa:	af02      	add	r7, sp, #8
 800a1fc:	60f8      	str	r0, [r7, #12]
 800a1fe:	60b9      	str	r1, [r7, #8]
 800a200:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10b      	bne.n	800a220 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	61bb      	str	r3, [r7, #24]
}
 800a21a:	bf00      	nop
 800a21c:	bf00      	nop
 800a21e:	e7fd      	b.n	800a21c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	429a      	cmp	r2, r3
 800a226:	d90b      	bls.n	800a240 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800a228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	617b      	str	r3, [r7, #20]
}
 800a23a:	bf00      	nop
 800a23c:	bf00      	nop
 800a23e:	e7fd      	b.n	800a23c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a240:	2302      	movs	r3, #2
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	2100      	movs	r1, #0
 800a24a:	68f8      	ldr	r0, [r7, #12]
 800a24c:	f7ff fef8 	bl	800a040 <xQueueGenericCreateStatic>
 800a250:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	2b00      	cmp	r3, #0
 800a256:	d002      	beq.n	800a25e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	68ba      	ldr	r2, [r7, #8]
 800a25c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a25e:	69fb      	ldr	r3, [r7, #28]
	}
 800a260:	4618      	mov	r0, r3
 800a262:	3720      	adds	r7, #32
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d10b      	bne.n	800a290 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800a278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27c:	f383 8811 	msr	BASEPRI, r3
 800a280:	f3bf 8f6f 	isb	sy
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	613b      	str	r3, [r7, #16]
}
 800a28a:	bf00      	nop
 800a28c:	bf00      	nop
 800a28e:	e7fd      	b.n	800a28c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a290:	683a      	ldr	r2, [r7, #0]
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	429a      	cmp	r2, r3
 800a296:	d90b      	bls.n	800a2b0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800a298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a29c:	f383 8811 	msr	BASEPRI, r3
 800a2a0:	f3bf 8f6f 	isb	sy
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	60fb      	str	r3, [r7, #12]
}
 800a2aa:	bf00      	nop
 800a2ac:	bf00      	nop
 800a2ae:	e7fd      	b.n	800a2ac <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	2100      	movs	r1, #0
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff ff40 	bl	800a13a <xQueueGenericCreate>
 800a2ba:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d002      	beq.n	800a2c8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	683a      	ldr	r2, [r7, #0]
 800a2c6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a2c8:	697b      	ldr	r3, [r7, #20]
	}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	3718      	adds	r7, #24
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd80      	pop	{r7, pc}
	...

0800a2d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08e      	sub	sp, #56	@ 0x38
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a2ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10b      	bne.n	800a308 <xQueueGenericSend+0x34>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a308:	68bb      	ldr	r3, [r7, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d103      	bne.n	800a316 <xQueueGenericSend+0x42>
 800a30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a312:	2b00      	cmp	r3, #0
 800a314:	d101      	bne.n	800a31a <xQueueGenericSend+0x46>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <xQueueGenericSend+0x48>
 800a31a:	2300      	movs	r3, #0
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d10b      	bne.n	800a338 <xQueueGenericSend+0x64>
	__asm volatile
 800a320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a324:	f383 8811 	msr	BASEPRI, r3
 800a328:	f3bf 8f6f 	isb	sy
 800a32c:	f3bf 8f4f 	dsb	sy
 800a330:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a332:	bf00      	nop
 800a334:	bf00      	nop
 800a336:	e7fd      	b.n	800a334 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d103      	bne.n	800a346 <xQueueGenericSend+0x72>
 800a33e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a340:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a342:	2b01      	cmp	r3, #1
 800a344:	d101      	bne.n	800a34a <xQueueGenericSend+0x76>
 800a346:	2301      	movs	r3, #1
 800a348:	e000      	b.n	800a34c <xQueueGenericSend+0x78>
 800a34a:	2300      	movs	r3, #0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d10b      	bne.n	800a368 <xQueueGenericSend+0x94>
	__asm volatile
 800a350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	623b      	str	r3, [r7, #32]
}
 800a362:	bf00      	nop
 800a364:	bf00      	nop
 800a366:	e7fd      	b.n	800a364 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a368:	f001 fc94 	bl	800bc94 <xTaskGetSchedulerState>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <xQueueGenericSend+0xa4>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d101      	bne.n	800a37c <xQueueGenericSend+0xa8>
 800a378:	2301      	movs	r3, #1
 800a37a:	e000      	b.n	800a37e <xQueueGenericSend+0xaa>
 800a37c:	2300      	movs	r3, #0
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d10b      	bne.n	800a39a <xQueueGenericSend+0xc6>
	__asm volatile
 800a382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a386:	f383 8811 	msr	BASEPRI, r3
 800a38a:	f3bf 8f6f 	isb	sy
 800a38e:	f3bf 8f4f 	dsb	sy
 800a392:	61fb      	str	r3, [r7, #28]
}
 800a394:	bf00      	nop
 800a396:	bf00      	nop
 800a398:	e7fd      	b.n	800a396 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a39a:	f002 fba5 	bl	800cae8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d302      	bcc.n	800a3b0 <xQueueGenericSend+0xdc>
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d129      	bne.n	800a404 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3b0:	683a      	ldr	r2, [r7, #0]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3b6:	f000 fcab 	bl	800ad10 <prvCopyDataToQueue>
 800a3ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d010      	beq.n	800a3e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	3324      	adds	r3, #36	@ 0x24
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f001 faa3 	bl	800b914 <xTaskRemoveFromEventList>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d013      	beq.n	800a3fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a3d4:	4b3f      	ldr	r3, [pc, #252]	@ (800a4d4 <xQueueGenericSend+0x200>)
 800a3d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	f3bf 8f6f 	isb	sy
 800a3e4:	e00a      	b.n	800a3fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d007      	beq.n	800a3fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a3ec:	4b39      	ldr	r3, [pc, #228]	@ (800a4d4 <xQueueGenericSend+0x200>)
 800a3ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	f3bf 8f4f 	dsb	sy
 800a3f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a3fc:	f002 fba6 	bl	800cb4c <vPortExitCritical>
				return pdPASS;
 800a400:	2301      	movs	r3, #1
 800a402:	e063      	b.n	800a4cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d103      	bne.n	800a412 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a40a:	f002 fb9f 	bl	800cb4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a40e:	2300      	movs	r3, #0
 800a410:	e05c      	b.n	800a4cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a418:	f107 0314 	add.w	r3, r7, #20
 800a41c:	4618      	mov	r0, r3
 800a41e:	f001 fadd 	bl	800b9dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a422:	2301      	movs	r3, #1
 800a424:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a426:	f002 fb91 	bl	800cb4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a42a:	f001 f84d 	bl	800b4c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a42e:	f002 fb5b 	bl	800cae8 <vPortEnterCritical>
 800a432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a434:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a438:	b25b      	sxtb	r3, r3
 800a43a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a43e:	d103      	bne.n	800a448 <xQueueGenericSend+0x174>
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	2200      	movs	r2, #0
 800a444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a44a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a44e:	b25b      	sxtb	r3, r3
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d103      	bne.n	800a45e <xQueueGenericSend+0x18a>
 800a456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a45e:	f002 fb75 	bl	800cb4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a462:	1d3a      	adds	r2, r7, #4
 800a464:	f107 0314 	add.w	r3, r7, #20
 800a468:	4611      	mov	r1, r2
 800a46a:	4618      	mov	r0, r3
 800a46c:	f001 facc 	bl	800ba08 <xTaskCheckForTimeOut>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d124      	bne.n	800a4c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a476:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a478:	f000 fd42 	bl	800af00 <prvIsQueueFull>
 800a47c:	4603      	mov	r3, r0
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d018      	beq.n	800a4b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a484:	3310      	adds	r3, #16
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	4611      	mov	r1, r2
 800a48a:	4618      	mov	r0, r3
 800a48c:	f001 f9f0 	bl	800b870 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a490:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a492:	f000 fccd 	bl	800ae30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a496:	f001 f825 	bl	800b4e4 <xTaskResumeAll>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f47f af7c 	bne.w	800a39a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4d4 <xQueueGenericSend+0x200>)
 800a4a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4a8:	601a      	str	r2, [r3, #0]
 800a4aa:	f3bf 8f4f 	dsb	sy
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	e772      	b.n	800a39a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a4b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4b6:	f000 fcbb 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ba:	f001 f813 	bl	800b4e4 <xTaskResumeAll>
 800a4be:	e76c      	b.n	800a39a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a4c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4c2:	f000 fcb5 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4c6:	f001 f80d 	bl	800b4e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a4ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3738      	adds	r7, #56	@ 0x38
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	bd80      	pop	{r7, pc}
 800a4d4:	e000ed04 	.word	0xe000ed04

0800a4d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b090      	sub	sp, #64	@ 0x40
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10b      	bne.n	800a508 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a502:	bf00      	nop
 800a504:	bf00      	nop
 800a506:	e7fd      	b.n	800a504 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <xQueueGenericSendFromISR+0x3e>
 800a50e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a512:	2b00      	cmp	r3, #0
 800a514:	d101      	bne.n	800a51a <xQueueGenericSendFromISR+0x42>
 800a516:	2301      	movs	r3, #1
 800a518:	e000      	b.n	800a51c <xQueueGenericSendFromISR+0x44>
 800a51a:	2300      	movs	r3, #0
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10b      	bne.n	800a538 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d103      	bne.n	800a546 <xQueueGenericSendFromISR+0x6e>
 800a53e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a542:	2b01      	cmp	r3, #1
 800a544:	d101      	bne.n	800a54a <xQueueGenericSendFromISR+0x72>
 800a546:	2301      	movs	r3, #1
 800a548:	e000      	b.n	800a54c <xQueueGenericSendFromISR+0x74>
 800a54a:	2300      	movs	r3, #0
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10b      	bne.n	800a568 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a554:	f383 8811 	msr	BASEPRI, r3
 800a558:	f3bf 8f6f 	isb	sy
 800a55c:	f3bf 8f4f 	dsb	sy
 800a560:	623b      	str	r3, [r7, #32]
}
 800a562:	bf00      	nop
 800a564:	bf00      	nop
 800a566:	e7fd      	b.n	800a564 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a568:	f002 fb9e 	bl	800cca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a56c:	f3ef 8211 	mrs	r2, BASEPRI
 800a570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a574:	f383 8811 	msr	BASEPRI, r3
 800a578:	f3bf 8f6f 	isb	sy
 800a57c:	f3bf 8f4f 	dsb	sy
 800a580:	61fa      	str	r2, [r7, #28]
 800a582:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a584:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a586:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a58c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a590:	429a      	cmp	r2, r3
 800a592:	d302      	bcc.n	800a59a <xQueueGenericSendFromISR+0xc2>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	2b02      	cmp	r3, #2
 800a598:	d12f      	bne.n	800a5fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a5a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a5b0:	f000 fbae 	bl	800ad10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a5b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d112      	bne.n	800a5e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d016      	beq.n	800a5f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c8:	3324      	adds	r3, #36	@ 0x24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 f9a2 	bl	800b914 <xTaskRemoveFromEventList>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00e      	beq.n	800a5f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	601a      	str	r2, [r3, #0]
 800a5e2:	e007      	b.n	800a5f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	b25a      	sxtb	r2, r3
 800a5ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a5f8:	e001      	b.n	800a5fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a5fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a600:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a608:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a60a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3740      	adds	r7, #64	@ 0x40
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b08e      	sub	sp, #56	@ 0x38
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a624:	2b00      	cmp	r3, #0
 800a626:	d10b      	bne.n	800a640 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62c:	f383 8811 	msr	BASEPRI, r3
 800a630:	f3bf 8f6f 	isb	sy
 800a634:	f3bf 8f4f 	dsb	sy
 800a638:	623b      	str	r3, [r7, #32]
}
 800a63a:	bf00      	nop
 800a63c:	bf00      	nop
 800a63e:	e7fd      	b.n	800a63c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a644:	2b00      	cmp	r3, #0
 800a646:	d00b      	beq.n	800a660 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	61fb      	str	r3, [r7, #28]
}
 800a65a:	bf00      	nop
 800a65c:	bf00      	nop
 800a65e:	e7fd      	b.n	800a65c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d103      	bne.n	800a670 <xQueueGiveFromISR+0x5c>
 800a668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d101      	bne.n	800a674 <xQueueGiveFromISR+0x60>
 800a670:	2301      	movs	r3, #1
 800a672:	e000      	b.n	800a676 <xQueueGiveFromISR+0x62>
 800a674:	2300      	movs	r3, #0
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10b      	bne.n	800a692 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a67e:	f383 8811 	msr	BASEPRI, r3
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	f3bf 8f4f 	dsb	sy
 800a68a:	61bb      	str	r3, [r7, #24]
}
 800a68c:	bf00      	nop
 800a68e:	bf00      	nop
 800a690:	e7fd      	b.n	800a68e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a692:	f002 fb09 	bl	800cca8 <vPortValidateInterruptPriority>
	__asm volatile
 800a696:	f3ef 8211 	mrs	r2, BASEPRI
 800a69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	617a      	str	r2, [r7, #20]
 800a6ac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a6ae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d22b      	bcs.n	800a71a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6dc:	d112      	bne.n	800a704 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d016      	beq.n	800a714 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e8:	3324      	adds	r3, #36	@ 0x24
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f001 f912 	bl	800b914 <xTaskRemoveFromEventList>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d00e      	beq.n	800a714 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d00b      	beq.n	800a714 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2201      	movs	r2, #1
 800a700:	601a      	str	r2, [r3, #0]
 800a702:	e007      	b.n	800a714 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a704:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a708:	3301      	adds	r3, #1
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	b25a      	sxtb	r2, r3
 800a70e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a714:	2301      	movs	r3, #1
 800a716:	637b      	str	r3, [r7, #52]	@ 0x34
 800a718:	e001      	b.n	800a71e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a71a:	2300      	movs	r3, #0
 800a71c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a71e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a720:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f383 8811 	msr	BASEPRI, r3
}
 800a728:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3738      	adds	r7, #56	@ 0x38
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b08c      	sub	sp, #48	@ 0x30
 800a738:	af00      	add	r7, sp, #0
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a740:	2300      	movs	r3, #0
 800a742:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10b      	bne.n	800a766 <xQueueReceive+0x32>
	__asm volatile
 800a74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a752:	f383 8811 	msr	BASEPRI, r3
 800a756:	f3bf 8f6f 	isb	sy
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	623b      	str	r3, [r7, #32]
}
 800a760:	bf00      	nop
 800a762:	bf00      	nop
 800a764:	e7fd      	b.n	800a762 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d103      	bne.n	800a774 <xQueueReceive+0x40>
 800a76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a76e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a770:	2b00      	cmp	r3, #0
 800a772:	d101      	bne.n	800a778 <xQueueReceive+0x44>
 800a774:	2301      	movs	r3, #1
 800a776:	e000      	b.n	800a77a <xQueueReceive+0x46>
 800a778:	2300      	movs	r3, #0
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10b      	bne.n	800a796 <xQueueReceive+0x62>
	__asm volatile
 800a77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a782:	f383 8811 	msr	BASEPRI, r3
 800a786:	f3bf 8f6f 	isb	sy
 800a78a:	f3bf 8f4f 	dsb	sy
 800a78e:	61fb      	str	r3, [r7, #28]
}
 800a790:	bf00      	nop
 800a792:	bf00      	nop
 800a794:	e7fd      	b.n	800a792 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a796:	f001 fa7d 	bl	800bc94 <xTaskGetSchedulerState>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <xQueueReceive+0x72>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <xQueueReceive+0x76>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e000      	b.n	800a7ac <xQueueReceive+0x78>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d10b      	bne.n	800a7c8 <xQueueReceive+0x94>
	__asm volatile
 800a7b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b4:	f383 8811 	msr	BASEPRI, r3
 800a7b8:	f3bf 8f6f 	isb	sy
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	61bb      	str	r3, [r7, #24]
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	e7fd      	b.n	800a7c4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7c8:	f002 f98e 	bl	800cae8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d01f      	beq.n	800a818 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7d8:	68b9      	ldr	r1, [r7, #8]
 800a7da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7dc:	f000 fb02 	bl	800ade4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e2:	1e5a      	subs	r2, r3, #1
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ea:	691b      	ldr	r3, [r3, #16]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00f      	beq.n	800a810 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f2:	3310      	adds	r3, #16
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f001 f88d 	bl	800b914 <xTaskRemoveFromEventList>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d007      	beq.n	800a810 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a800:	4b3c      	ldr	r3, [pc, #240]	@ (800a8f4 <xQueueReceive+0x1c0>)
 800a802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a806:	601a      	str	r2, [r3, #0]
 800a808:	f3bf 8f4f 	dsb	sy
 800a80c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a810:	f002 f99c 	bl	800cb4c <vPortExitCritical>
				return pdPASS;
 800a814:	2301      	movs	r3, #1
 800a816:	e069      	b.n	800a8ec <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d103      	bne.n	800a826 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a81e:	f002 f995 	bl	800cb4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a822:	2300      	movs	r3, #0
 800a824:	e062      	b.n	800a8ec <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a826:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d106      	bne.n	800a83a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a82c:	f107 0310 	add.w	r3, r7, #16
 800a830:	4618      	mov	r0, r3
 800a832:	f001 f8d3 	bl	800b9dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a836:	2301      	movs	r3, #1
 800a838:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a83a:	f002 f987 	bl	800cb4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a83e:	f000 fe43 	bl	800b4c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a842:	f002 f951 	bl	800cae8 <vPortEnterCritical>
 800a846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a848:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a84c:	b25b      	sxtb	r3, r3
 800a84e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a852:	d103      	bne.n	800a85c <xQueueReceive+0x128>
 800a854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a856:	2200      	movs	r2, #0
 800a858:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a85c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a862:	b25b      	sxtb	r3, r3
 800a864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a868:	d103      	bne.n	800a872 <xQueueReceive+0x13e>
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	2200      	movs	r2, #0
 800a86e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a872:	f002 f96b 	bl	800cb4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a876:	1d3a      	adds	r2, r7, #4
 800a878:	f107 0310 	add.w	r3, r7, #16
 800a87c:	4611      	mov	r1, r2
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 f8c2 	bl	800ba08 <xTaskCheckForTimeOut>
 800a884:	4603      	mov	r3, r0
 800a886:	2b00      	cmp	r3, #0
 800a888:	d123      	bne.n	800a8d2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a88a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a88c:	f000 fb22 	bl	800aed4 <prvIsQueueEmpty>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d017      	beq.n	800a8c6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a898:	3324      	adds	r3, #36	@ 0x24
 800a89a:	687a      	ldr	r2, [r7, #4]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f000 ffe6 	bl	800b870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8a6:	f000 fac3 	bl	800ae30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8aa:	f000 fe1b 	bl	800b4e4 <xTaskResumeAll>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d189      	bne.n	800a7c8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8b4:	4b0f      	ldr	r3, [pc, #60]	@ (800a8f4 <xQueueReceive+0x1c0>)
 800a8b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ba:	601a      	str	r2, [r3, #0]
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	f3bf 8f6f 	isb	sy
 800a8c4:	e780      	b.n	800a7c8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8c8:	f000 fab2 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8cc:	f000 fe0a 	bl	800b4e4 <xTaskResumeAll>
 800a8d0:	e77a      	b.n	800a7c8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8d4:	f000 faac 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8d8:	f000 fe04 	bl	800b4e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8de:	f000 faf9 	bl	800aed4 <prvIsQueueEmpty>
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f43f af6f 	beq.w	800a7c8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8ea:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3730      	adds	r7, #48	@ 0x30
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	e000ed04 	.word	0xe000ed04

0800a8f8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08e      	sub	sp, #56	@ 0x38
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
 800a900:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a902:	2300      	movs	r3, #0
 800a904:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a910:	2b00      	cmp	r3, #0
 800a912:	d10b      	bne.n	800a92c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a918:	f383 8811 	msr	BASEPRI, r3
 800a91c:	f3bf 8f6f 	isb	sy
 800a920:	f3bf 8f4f 	dsb	sy
 800a924:	623b      	str	r3, [r7, #32]
}
 800a926:	bf00      	nop
 800a928:	bf00      	nop
 800a92a:	e7fd      	b.n	800a928 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a92e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a930:	2b00      	cmp	r3, #0
 800a932:	d00b      	beq.n	800a94c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a938:	f383 8811 	msr	BASEPRI, r3
 800a93c:	f3bf 8f6f 	isb	sy
 800a940:	f3bf 8f4f 	dsb	sy
 800a944:	61fb      	str	r3, [r7, #28]
}
 800a946:	bf00      	nop
 800a948:	bf00      	nop
 800a94a:	e7fd      	b.n	800a948 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a94c:	f001 f9a2 	bl	800bc94 <xTaskGetSchedulerState>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d102      	bne.n	800a95c <xQueueSemaphoreTake+0x64>
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <xQueueSemaphoreTake+0x68>
 800a95c:	2301      	movs	r3, #1
 800a95e:	e000      	b.n	800a962 <xQueueSemaphoreTake+0x6a>
 800a960:	2300      	movs	r3, #0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	61bb      	str	r3, [r7, #24]
}
 800a978:	bf00      	nop
 800a97a:	bf00      	nop
 800a97c:	e7fd      	b.n	800a97a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a97e:	f002 f8b3 	bl	800cae8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a986:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d024      	beq.n	800a9d8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a98e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a990:	1e5a      	subs	r2, r3, #1
 800a992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a994:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d104      	bne.n	800a9a8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a99e:	f001 faf3 	bl	800bf88 <pvTaskIncrementMutexHeldCount>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9a6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9aa:	691b      	ldr	r3, [r3, #16]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00f      	beq.n	800a9d0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b2:	3310      	adds	r3, #16
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f000 ffad 	bl	800b914 <xTaskRemoveFromEventList>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d007      	beq.n	800a9d0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a9c0:	4b54      	ldr	r3, [pc, #336]	@ (800ab14 <xQueueSemaphoreTake+0x21c>)
 800a9c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9c6:	601a      	str	r2, [r3, #0]
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a9d0:	f002 f8bc 	bl	800cb4c <vPortExitCritical>
				return pdPASS;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e098      	b.n	800ab0a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d112      	bne.n	800aa04 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a9de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00b      	beq.n	800a9fc <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a9e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e8:	f383 8811 	msr	BASEPRI, r3
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f3bf 8f4f 	dsb	sy
 800a9f4:	617b      	str	r3, [r7, #20]
}
 800a9f6:	bf00      	nop
 800a9f8:	bf00      	nop
 800a9fa:	e7fd      	b.n	800a9f8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a9fc:	f002 f8a6 	bl	800cb4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa00:	2300      	movs	r3, #0
 800aa02:	e082      	b.n	800ab0a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d106      	bne.n	800aa18 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa0a:	f107 030c 	add.w	r3, r7, #12
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f000 ffe4 	bl	800b9dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa14:	2301      	movs	r3, #1
 800aa16:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa18:	f002 f898 	bl	800cb4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa1c:	f000 fd54 	bl	800b4c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa20:	f002 f862 	bl	800cae8 <vPortEnterCritical>
 800aa24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa2a:	b25b      	sxtb	r3, r3
 800aa2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa30:	d103      	bne.n	800aa3a <xQueueSemaphoreTake+0x142>
 800aa32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aa3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa40:	b25b      	sxtb	r3, r3
 800aa42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa46:	d103      	bne.n	800aa50 <xQueueSemaphoreTake+0x158>
 800aa48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aa50:	f002 f87c 	bl	800cb4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aa54:	463a      	mov	r2, r7
 800aa56:	f107 030c 	add.w	r3, r7, #12
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f000 ffd3 	bl	800ba08 <xTaskCheckForTimeOut>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d132      	bne.n	800aace <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa6a:	f000 fa33 	bl	800aed4 <prvIsQueueEmpty>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d026      	beq.n	800aac2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa7c:	f002 f834 	bl	800cae8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 f923 	bl	800bcd0 <xTaskPriorityInherit>
 800aa8a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa8c:	f002 f85e 	bl	800cb4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa92:	3324      	adds	r3, #36	@ 0x24
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	4611      	mov	r1, r2
 800aa98:	4618      	mov	r0, r3
 800aa9a:	f000 fee9 	bl	800b870 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaa0:	f000 f9c6 	bl	800ae30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aaa4:	f000 fd1e 	bl	800b4e4 <xTaskResumeAll>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f47f af67 	bne.w	800a97e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aab0:	4b18      	ldr	r3, [pc, #96]	@ (800ab14 <xQueueSemaphoreTake+0x21c>)
 800aab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aab6:	601a      	str	r2, [r3, #0]
 800aab8:	f3bf 8f4f 	dsb	sy
 800aabc:	f3bf 8f6f 	isb	sy
 800aac0:	e75d      	b.n	800a97e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aac4:	f000 f9b4 	bl	800ae30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aac8:	f000 fd0c 	bl	800b4e4 <xTaskResumeAll>
 800aacc:	e757      	b.n	800a97e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aace:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aad0:	f000 f9ae 	bl	800ae30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aad4:	f000 fd06 	bl	800b4e4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aad8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aada:	f000 f9fb 	bl	800aed4 <prvIsQueueEmpty>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	f43f af4c 	beq.w	800a97e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00d      	beq.n	800ab08 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aaec:	f001 fffc 	bl	800cae8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aaf0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aaf2:	f000 f8f5 	bl	800ace0 <prvGetDisinheritPriorityAfterTimeout>
 800aaf6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aaf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aafa:	689b      	ldr	r3, [r3, #8]
 800aafc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 f9be 	bl	800be80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ab04:	f002 f822 	bl	800cb4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3738      	adds	r7, #56	@ 0x38
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	e000ed04 	.word	0xe000ed04

0800ab18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08e      	sub	sp, #56	@ 0x38
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800ab28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10b      	bne.n	800ab46 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	623b      	str	r3, [r7, #32]
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	e7fd      	b.n	800ab42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d103      	bne.n	800ab54 <xQueueReceiveFromISR+0x3c>
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <xQueueReceiveFromISR+0x40>
 800ab54:	2301      	movs	r3, #1
 800ab56:	e000      	b.n	800ab5a <xQueueReceiveFromISR+0x42>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d10b      	bne.n	800ab76 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	61fb      	str	r3, [r7, #28]
}
 800ab70:	bf00      	nop
 800ab72:	bf00      	nop
 800ab74:	e7fd      	b.n	800ab72 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ab76:	f002 f897 	bl	800cca8 <vPortValidateInterruptPriority>
	__asm volatile
 800ab7a:	f3ef 8211 	mrs	r2, BASEPRI
 800ab7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab82:	f383 8811 	msr	BASEPRI, r3
 800ab86:	f3bf 8f6f 	isb	sy
 800ab8a:	f3bf 8f4f 	dsb	sy
 800ab8e:	61ba      	str	r2, [r7, #24]
 800ab90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ab92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ab94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d02f      	beq.n	800ac02 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aba8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abb0:	f000 f918 	bl	800ade4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abb6:	1e5a      	subs	r2, r3, #1
 800abb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800abbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc4:	d112      	bne.n	800abec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc8:	691b      	ldr	r3, [r3, #16]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d016      	beq.n	800abfc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd0:	3310      	adds	r3, #16
 800abd2:	4618      	mov	r0, r3
 800abd4:	f000 fe9e 	bl	800b914 <xTaskRemoveFromEventList>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00e      	beq.n	800abfc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d00b      	beq.n	800abfc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	e007      	b.n	800abfc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800abec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abf0:	3301      	adds	r3, #1
 800abf2:	b2db      	uxtb	r3, r3
 800abf4:	b25a      	sxtb	r2, r3
 800abf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800abfc:	2301      	movs	r3, #1
 800abfe:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac00:	e001      	b.n	800ac06 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac08:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	f383 8811 	msr	BASEPRI, r3
}
 800ac10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ac12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3738      	adds	r7, #56	@ 0x38
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10b      	bne.n	800ac42 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	60bb      	str	r3, [r7, #8]
}
 800ac3c:	bf00      	nop
 800ac3e:	bf00      	nop
 800ac40:	e7fd      	b.n	800ac3e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ac42:	f001 ff51 	bl	800cae8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ac4c:	f001 ff7e 	bl	800cb4c <vPortExitCritical>

	return uxReturn;
 800ac50:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800ac5a:	b480      	push	{r7}
 800ac5c:	b087      	sub	sp, #28
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d10b      	bne.n	800ac84 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800ac6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac70:	f383 8811 	msr	BASEPRI, r3
 800ac74:	f3bf 8f6f 	isb	sy
 800ac78:	f3bf 8f4f 	dsb	sy
 800ac7c:	60fb      	str	r3, [r7, #12]
}
 800ac7e:	bf00      	nop
 800ac80:	bf00      	nop
 800ac82:	e7fd      	b.n	800ac80 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac88:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800ac8a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	371c      	adds	r7, #28
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d10b      	bne.n	800acc2 <vQueueDelete+0x2a>
	__asm volatile
 800acaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acae:	f383 8811 	msr	BASEPRI, r3
 800acb2:	f3bf 8f6f 	isb	sy
 800acb6:	f3bf 8f4f 	dsb	sy
 800acba:	60bb      	str	r3, [r7, #8]
}
 800acbc:	bf00      	nop
 800acbe:	bf00      	nop
 800acc0:	e7fd      	b.n	800acbe <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f000 f95e 	bl	800af84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d102      	bne.n	800acd8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	f002 f8f8 	bl	800cec8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	e001      	b.n	800ad02 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800acfe:	2300      	movs	r3, #0
 800ad00:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ad02:	68fb      	ldr	r3, [r7, #12]
	}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3714      	adds	r7, #20
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr

0800ad10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	60f8      	str	r0, [r7, #12]
 800ad18:	60b9      	str	r1, [r7, #8]
 800ad1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d10d      	bne.n	800ad4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d14d      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f001 f830 	bl	800bda0 <xTaskPriorityDisinherit>
 800ad40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	609a      	str	r2, [r3, #8]
 800ad48:	e043      	b.n	800add2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d119      	bne.n	800ad84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	6858      	ldr	r0, [r3, #4]
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68b9      	ldr	r1, [r7, #8]
 800ad5c:	f002 ff2a 	bl	800dbb4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	685a      	ldr	r2, [r3, #4]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad68:	441a      	add	r2, r3
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	685a      	ldr	r2, [r3, #4]
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d32b      	bcc.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	605a      	str	r2, [r3, #4]
 800ad82:	e026      	b.n	800add2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	68d8      	ldr	r0, [r3, #12]
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	68b9      	ldr	r1, [r7, #8]
 800ad90:	f002 ff10 	bl	800dbb4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	68da      	ldr	r2, [r3, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	68da      	ldr	r2, [r3, #12]
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	429a      	cmp	r2, r3
 800adae:	d207      	bcs.n	800adc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	689a      	ldr	r2, [r3, #8]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adb8:	425b      	negs	r3, r3
 800adba:	441a      	add	r2, r3
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d105      	bne.n	800add2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	1c5a      	adds	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800adda:	697b      	ldr	r3, [r7, #20]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d018      	beq.n	800ae28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	68da      	ldr	r2, [r3, #12]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfe:	441a      	add	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	68da      	ldr	r2, [r3, #12]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d303      	bcc.n	800ae18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	68d9      	ldr	r1, [r3, #12]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae20:	461a      	mov	r2, r3
 800ae22:	6838      	ldr	r0, [r7, #0]
 800ae24:	f002 fec6 	bl	800dbb4 <memcpy>
	}
}
 800ae28:	bf00      	nop
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae38:	f001 fe56 	bl	800cae8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae44:	e011      	b.n	800ae6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d012      	beq.n	800ae74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	3324      	adds	r3, #36	@ 0x24
 800ae52:	4618      	mov	r0, r3
 800ae54:	f000 fd5e 	bl	800b914 <xTaskRemoveFromEventList>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d001      	beq.n	800ae62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae5e:	f000 fe37 	bl	800bad0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae62:	7bfb      	ldrb	r3, [r7, #15]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	dce9      	bgt.n	800ae46 <prvUnlockQueue+0x16>
 800ae72:	e000      	b.n	800ae76 <prvUnlockQueue+0x46>
					break;
 800ae74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	22ff      	movs	r2, #255	@ 0xff
 800ae7a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae7e:	f001 fe65 	bl	800cb4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae82:	f001 fe31 	bl	800cae8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae8e:	e011      	b.n	800aeb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d012      	beq.n	800aebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	3310      	adds	r3, #16
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 fd39 	bl	800b914 <xTaskRemoveFromEventList>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d001      	beq.n	800aeac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aea8:	f000 fe12 	bl	800bad0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	3b01      	subs	r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aeb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dce9      	bgt.n	800ae90 <prvUnlockQueue+0x60>
 800aebc:	e000      	b.n	800aec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	22ff      	movs	r2, #255	@ 0xff
 800aec4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aec8:	f001 fe40 	bl	800cb4c <vPortExitCritical>
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aedc:	f001 fe04 	bl	800cae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d102      	bne.n	800aeee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aee8:	2301      	movs	r3, #1
 800aeea:	60fb      	str	r3, [r7, #12]
 800aeec:	e001      	b.n	800aef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aef2:	f001 fe2b 	bl	800cb4c <vPortExitCritical>

	return xReturn;
 800aef6:	68fb      	ldr	r3, [r7, #12]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af08:	f001 fdee 	bl	800cae8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af14:	429a      	cmp	r2, r3
 800af16:	d102      	bne.n	800af1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af18:	2301      	movs	r3, #1
 800af1a:	60fb      	str	r3, [r7, #12]
 800af1c:	e001      	b.n	800af22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af22:	f001 fe13 	bl	800cb4c <vPortExitCritical>

	return xReturn;
 800af26:	68fb      	ldr	r3, [r7, #12]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3710      	adds	r7, #16
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af30:	b480      	push	{r7}
 800af32:	b085      	sub	sp, #20
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e014      	b.n	800af6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af40:	4a0f      	ldr	r2, [pc, #60]	@ (800af80 <vQueueAddToRegistry+0x50>)
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d10b      	bne.n	800af64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af4c:	490c      	ldr	r1, [pc, #48]	@ (800af80 <vQueueAddToRegistry+0x50>)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	683a      	ldr	r2, [r7, #0]
 800af52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af56:	4a0a      	ldr	r2, [pc, #40]	@ (800af80 <vQueueAddToRegistry+0x50>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	00db      	lsls	r3, r3, #3
 800af5c:	4413      	add	r3, r2
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af62:	e006      	b.n	800af72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	3301      	adds	r3, #1
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2b07      	cmp	r3, #7
 800af6e:	d9e7      	bls.n	800af40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	3714      	adds	r7, #20
 800af76:	46bd      	mov	sp, r7
 800af78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7c:	4770      	bx	lr
 800af7e:	bf00      	nop
 800af80:	20000b00 	.word	0x20000b00

0800af84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af8c:	2300      	movs	r3, #0
 800af8e:	60fb      	str	r3, [r7, #12]
 800af90:	e016      	b.n	800afc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800af92:	4a10      	ldr	r2, [pc, #64]	@ (800afd4 <vQueueUnregisterQueue+0x50>)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	00db      	lsls	r3, r3, #3
 800af98:	4413      	add	r3, r2
 800af9a:	685b      	ldr	r3, [r3, #4]
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d10b      	bne.n	800afba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800afa2:	4a0c      	ldr	r2, [pc, #48]	@ (800afd4 <vQueueUnregisterQueue+0x50>)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2100      	movs	r1, #0
 800afa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800afac:	4a09      	ldr	r2, [pc, #36]	@ (800afd4 <vQueueUnregisterQueue+0x50>)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	00db      	lsls	r3, r3, #3
 800afb2:	4413      	add	r3, r2
 800afb4:	2200      	movs	r2, #0
 800afb6:	605a      	str	r2, [r3, #4]
				break;
 800afb8:	e006      	b.n	800afc8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	3301      	adds	r3, #1
 800afbe:	60fb      	str	r3, [r7, #12]
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2b07      	cmp	r3, #7
 800afc4:	d9e5      	bls.n	800af92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800afc6:	bf00      	nop
 800afc8:	bf00      	nop
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	20000b00 	.word	0x20000b00

0800afd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b086      	sub	sp, #24
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800afe8:	f001 fd7e 	bl	800cae8 <vPortEnterCritical>
 800afec:	697b      	ldr	r3, [r7, #20]
 800afee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aff2:	b25b      	sxtb	r3, r3
 800aff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aff8:	d103      	bne.n	800b002 <vQueueWaitForMessageRestricted+0x2a>
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b008:	b25b      	sxtb	r3, r3
 800b00a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b00e:	d103      	bne.n	800b018 <vQueueWaitForMessageRestricted+0x40>
 800b010:	697b      	ldr	r3, [r7, #20]
 800b012:	2200      	movs	r2, #0
 800b014:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b018:	f001 fd98 	bl	800cb4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b020:	2b00      	cmp	r3, #0
 800b022:	d106      	bne.n	800b032 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	3324      	adds	r3, #36	@ 0x24
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	4618      	mov	r0, r3
 800b02e:	f000 fc45 	bl	800b8bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b032:	6978      	ldr	r0, [r7, #20]
 800b034:	f7ff fefc 	bl	800ae30 <prvUnlockQueue>
	}
 800b038:	bf00      	nop
 800b03a:	3718      	adds	r7, #24
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}

0800b040 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b040:	b580      	push	{r7, lr}
 800b042:	b08e      	sub	sp, #56	@ 0x38
 800b044:	af04      	add	r7, sp, #16
 800b046:	60f8      	str	r0, [r7, #12]
 800b048:	60b9      	str	r1, [r7, #8]
 800b04a:	607a      	str	r2, [r7, #4]
 800b04c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b04e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b050:	2b00      	cmp	r3, #0
 800b052:	d10b      	bne.n	800b06c <xTaskCreateStatic+0x2c>
	__asm volatile
 800b054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b058:	f383 8811 	msr	BASEPRI, r3
 800b05c:	f3bf 8f6f 	isb	sy
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	623b      	str	r3, [r7, #32]
}
 800b066:	bf00      	nop
 800b068:	bf00      	nop
 800b06a:	e7fd      	b.n	800b068 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b06c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d10b      	bne.n	800b08a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	61fb      	str	r3, [r7, #28]
}
 800b084:	bf00      	nop
 800b086:	bf00      	nop
 800b088:	e7fd      	b.n	800b086 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b08a:	235c      	movs	r3, #92	@ 0x5c
 800b08c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	2b5c      	cmp	r3, #92	@ 0x5c
 800b092:	d00b      	beq.n	800b0ac <xTaskCreateStatic+0x6c>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	61bb      	str	r3, [r7, #24]
}
 800b0a6:	bf00      	nop
 800b0a8:	bf00      	nop
 800b0aa:	e7fd      	b.n	800b0a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b0ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b0ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d01e      	beq.n	800b0f2 <xTaskCreateStatic+0xb2>
 800b0b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d01b      	beq.n	800b0f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b0ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b0c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b0c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	9303      	str	r3, [sp, #12]
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d2:	9302      	str	r3, [sp, #8]
 800b0d4:	f107 0314 	add.w	r3, r7, #20
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0dc:	9300      	str	r3, [sp, #0]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	68f8      	ldr	r0, [r7, #12]
 800b0e6:	f000 f850 	bl	800b18a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0ec:	f000 f8de 	bl	800b2ac <prvAddNewTaskToReadyList>
 800b0f0:	e001      	b.n	800b0f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b0f6:	697b      	ldr	r3, [r7, #20]
	}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3728      	adds	r7, #40	@ 0x28
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b100:	b580      	push	{r7, lr}
 800b102:	b08c      	sub	sp, #48	@ 0x30
 800b104:	af04      	add	r7, sp, #16
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	603b      	str	r3, [r7, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b110:	88fb      	ldrh	r3, [r7, #6]
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	4618      	mov	r0, r3
 800b116:	f001 fe09 	bl	800cd2c <pvPortMalloc>
 800b11a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b11c:	697b      	ldr	r3, [r7, #20]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d00e      	beq.n	800b140 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b122:	205c      	movs	r0, #92	@ 0x5c
 800b124:	f001 fe02 	bl	800cd2c <pvPortMalloc>
 800b128:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d003      	beq.n	800b138 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b130:	69fb      	ldr	r3, [r7, #28]
 800b132:	697a      	ldr	r2, [r7, #20]
 800b134:	631a      	str	r2, [r3, #48]	@ 0x30
 800b136:	e005      	b.n	800b144 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b138:	6978      	ldr	r0, [r7, #20]
 800b13a:	f001 fec5 	bl	800cec8 <vPortFree>
 800b13e:	e001      	b.n	800b144 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d017      	beq.n	800b17a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2200      	movs	r2, #0
 800b14e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b152:	88fa      	ldrh	r2, [r7, #6]
 800b154:	2300      	movs	r3, #0
 800b156:	9303      	str	r3, [sp, #12]
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	9302      	str	r3, [sp, #8]
 800b15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b15e:	9301      	str	r3, [sp, #4]
 800b160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b162:	9300      	str	r3, [sp, #0]
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	68b9      	ldr	r1, [r7, #8]
 800b168:	68f8      	ldr	r0, [r7, #12]
 800b16a:	f000 f80e 	bl	800b18a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b16e:	69f8      	ldr	r0, [r7, #28]
 800b170:	f000 f89c 	bl	800b2ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b174:	2301      	movs	r3, #1
 800b176:	61bb      	str	r3, [r7, #24]
 800b178:	e002      	b.n	800b180 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b17a:	f04f 33ff 	mov.w	r3, #4294967295
 800b17e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b180:	69bb      	ldr	r3, [r7, #24]
	}
 800b182:	4618      	mov	r0, r3
 800b184:	3720      	adds	r7, #32
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}

0800b18a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b088      	sub	sp, #32
 800b18e:	af00      	add	r7, sp, #0
 800b190:	60f8      	str	r0, [r7, #12]
 800b192:	60b9      	str	r1, [r7, #8]
 800b194:	607a      	str	r2, [r7, #4]
 800b196:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	009b      	lsls	r3, r3, #2
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	21a5      	movs	r1, #165	@ 0xa5
 800b1a4:	f002 fcda 	bl	800db5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b1a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	009b      	lsls	r3, r3, #2
 800b1b6:	4413      	add	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f023 0307 	bic.w	r3, r3, #7
 800b1c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b1c2:	69bb      	ldr	r3, [r7, #24]
 800b1c4:	f003 0307 	and.w	r3, r3, #7
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d00b      	beq.n	800b1e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b1cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1d0:	f383 8811 	msr	BASEPRI, r3
 800b1d4:	f3bf 8f6f 	isb	sy
 800b1d8:	f3bf 8f4f 	dsb	sy
 800b1dc:	617b      	str	r3, [r7, #20]
}
 800b1de:	bf00      	nop
 800b1e0:	bf00      	nop
 800b1e2:	e7fd      	b.n	800b1e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b1e4:	68bb      	ldr	r3, [r7, #8]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d01f      	beq.n	800b22a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	61fb      	str	r3, [r7, #28]
 800b1ee:	e012      	b.n	800b216 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	7819      	ldrb	r1, [r3, #0]
 800b1f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	3334      	adds	r3, #52	@ 0x34
 800b200:	460a      	mov	r2, r1
 800b202:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b204:	68ba      	ldr	r2, [r7, #8]
 800b206:	69fb      	ldr	r3, [r7, #28]
 800b208:	4413      	add	r3, r2
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d006      	beq.n	800b21e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b210:	69fb      	ldr	r3, [r7, #28]
 800b212:	3301      	adds	r3, #1
 800b214:	61fb      	str	r3, [r7, #28]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	2b0f      	cmp	r3, #15
 800b21a:	d9e9      	bls.n	800b1f0 <prvInitialiseNewTask+0x66>
 800b21c:	e000      	b.n	800b220 <prvInitialiseNewTask+0x96>
			{
				break;
 800b21e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b228:	e003      	b.n	800b232 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b22a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b234:	2b37      	cmp	r3, #55	@ 0x37
 800b236:	d901      	bls.n	800b23c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b238:	2337      	movs	r3, #55	@ 0x37
 800b23a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b23c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b23e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b240:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b246:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24a:	2200      	movs	r2, #0
 800b24c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b24e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b250:	3304      	adds	r3, #4
 800b252:	4618      	mov	r0, r3
 800b254:	f7fe fdf6 	bl	8009e44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b25a:	3318      	adds	r3, #24
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fe fdf1 	bl	8009e44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b266:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b26e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b270:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b274:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b276:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b27a:	2200      	movs	r2, #0
 800b27c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b280:	2200      	movs	r2, #0
 800b282:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	68f9      	ldr	r1, [r7, #12]
 800b28a:	69b8      	ldr	r0, [r7, #24]
 800b28c:	f001 fafe 	bl	800c88c <pxPortInitialiseStack>
 800b290:	4602      	mov	r2, r0
 800b292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b294:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b29e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2a2:	bf00      	nop
 800b2a4:	3720      	adds	r7, #32
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
	...

0800b2ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b2b4:	f001 fc18 	bl	800cae8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b2b8:	4b2d      	ldr	r3, [pc, #180]	@ (800b370 <prvAddNewTaskToReadyList+0xc4>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	4a2c      	ldr	r2, [pc, #176]	@ (800b370 <prvAddNewTaskToReadyList+0xc4>)
 800b2c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b2c2:	4b2c      	ldr	r3, [pc, #176]	@ (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d109      	bne.n	800b2de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b2ca:	4a2a      	ldr	r2, [pc, #168]	@ (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b2d0:	4b27      	ldr	r3, [pc, #156]	@ (800b370 <prvAddNewTaskToReadyList+0xc4>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d110      	bne.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b2d8:	f000 fc1e 	bl	800bb18 <prvInitialiseTaskLists>
 800b2dc:	e00d      	b.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b2de:	4b26      	ldr	r3, [pc, #152]	@ (800b378 <prvAddNewTaskToReadyList+0xcc>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d109      	bne.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b2e6:	4b23      	ldr	r3, [pc, #140]	@ (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	d802      	bhi.n	800b2fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b2f4:	4a1f      	ldr	r2, [pc, #124]	@ (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b2fa:	4b20      	ldr	r3, [pc, #128]	@ (800b37c <prvAddNewTaskToReadyList+0xd0>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	3301      	adds	r3, #1
 800b300:	4a1e      	ldr	r2, [pc, #120]	@ (800b37c <prvAddNewTaskToReadyList+0xd0>)
 800b302:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b304:	4b1d      	ldr	r3, [pc, #116]	@ (800b37c <prvAddNewTaskToReadyList+0xd0>)
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b310:	4b1b      	ldr	r3, [pc, #108]	@ (800b380 <prvAddNewTaskToReadyList+0xd4>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	429a      	cmp	r2, r3
 800b316:	d903      	bls.n	800b320 <prvAddNewTaskToReadyList+0x74>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b31c:	4a18      	ldr	r2, [pc, #96]	@ (800b380 <prvAddNewTaskToReadyList+0xd4>)
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b324:	4613      	mov	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4a15      	ldr	r2, [pc, #84]	@ (800b384 <prvAddNewTaskToReadyList+0xd8>)
 800b32e:	441a      	add	r2, r3
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3304      	adds	r3, #4
 800b334:	4619      	mov	r1, r3
 800b336:	4610      	mov	r0, r2
 800b338:	f7fe fd91 	bl	8009e5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b33c:	f001 fc06 	bl	800cb4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b340:	4b0d      	ldr	r3, [pc, #52]	@ (800b378 <prvAddNewTaskToReadyList+0xcc>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d00e      	beq.n	800b366 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b348:	4b0a      	ldr	r3, [pc, #40]	@ (800b374 <prvAddNewTaskToReadyList+0xc8>)
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b352:	429a      	cmp	r2, r3
 800b354:	d207      	bcs.n	800b366 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b356:	4b0c      	ldr	r3, [pc, #48]	@ (800b388 <prvAddNewTaskToReadyList+0xdc>)
 800b358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b366:	bf00      	nop
 800b368:	3708      	adds	r7, #8
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20001014 	.word	0x20001014
 800b374:	20000b40 	.word	0x20000b40
 800b378:	20001020 	.word	0x20001020
 800b37c:	20001030 	.word	0x20001030
 800b380:	2000101c 	.word	0x2000101c
 800b384:	20000b44 	.word	0x20000b44
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b084      	sub	sp, #16
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b394:	2300      	movs	r3, #0
 800b396:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d018      	beq.n	800b3d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b39e:	4b14      	ldr	r3, [pc, #80]	@ (800b3f0 <vTaskDelay+0x64>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00b      	beq.n	800b3be <vTaskDelay+0x32>
	__asm volatile
 800b3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	60bb      	str	r3, [r7, #8]
}
 800b3b8:	bf00      	nop
 800b3ba:	bf00      	nop
 800b3bc:	e7fd      	b.n	800b3ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b3be:	f000 f883 	bl	800b4c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fdf3 	bl	800bfb0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b3ca:	f000 f88b 	bl	800b4e4 <xTaskResumeAll>
 800b3ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d107      	bne.n	800b3e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b3d6:	4b07      	ldr	r3, [pc, #28]	@ (800b3f4 <vTaskDelay+0x68>)
 800b3d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b3dc:	601a      	str	r2, [r3, #0]
 800b3de:	f3bf 8f4f 	dsb	sy
 800b3e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b3e6:	bf00      	nop
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
 800b3ee:	bf00      	nop
 800b3f0:	2000103c 	.word	0x2000103c
 800b3f4:	e000ed04 	.word	0xe000ed04

0800b3f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b08a      	sub	sp, #40	@ 0x28
 800b3fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b402:	2300      	movs	r3, #0
 800b404:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b406:	463a      	mov	r2, r7
 800b408:	1d39      	adds	r1, r7, #4
 800b40a:	f107 0308 	add.w	r3, r7, #8
 800b40e:	4618      	mov	r0, r3
 800b410:	f7fe fcc4 	bl	8009d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b414:	6839      	ldr	r1, [r7, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68ba      	ldr	r2, [r7, #8]
 800b41a:	9202      	str	r2, [sp, #8]
 800b41c:	9301      	str	r3, [sp, #4]
 800b41e:	2300      	movs	r3, #0
 800b420:	9300      	str	r3, [sp, #0]
 800b422:	2300      	movs	r3, #0
 800b424:	460a      	mov	r2, r1
 800b426:	4922      	ldr	r1, [pc, #136]	@ (800b4b0 <vTaskStartScheduler+0xb8>)
 800b428:	4822      	ldr	r0, [pc, #136]	@ (800b4b4 <vTaskStartScheduler+0xbc>)
 800b42a:	f7ff fe09 	bl	800b040 <xTaskCreateStatic>
 800b42e:	4603      	mov	r3, r0
 800b430:	4a21      	ldr	r2, [pc, #132]	@ (800b4b8 <vTaskStartScheduler+0xc0>)
 800b432:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b434:	4b20      	ldr	r3, [pc, #128]	@ (800b4b8 <vTaskStartScheduler+0xc0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d002      	beq.n	800b442 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b43c:	2301      	movs	r3, #1
 800b43e:	617b      	str	r3, [r7, #20]
 800b440:	e001      	b.n	800b446 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b442:	2300      	movs	r3, #0
 800b444:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b01      	cmp	r3, #1
 800b44a:	d102      	bne.n	800b452 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b44c:	f000 fe04 	bl	800c058 <xTimerCreateTimerTask>
 800b450:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b01      	cmp	r3, #1
 800b456:	d116      	bne.n	800b486 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b45c:	f383 8811 	msr	BASEPRI, r3
 800b460:	f3bf 8f6f 	isb	sy
 800b464:	f3bf 8f4f 	dsb	sy
 800b468:	613b      	str	r3, [r7, #16]
}
 800b46a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b46c:	4b13      	ldr	r3, [pc, #76]	@ (800b4bc <vTaskStartScheduler+0xc4>)
 800b46e:	f04f 32ff 	mov.w	r2, #4294967295
 800b472:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b474:	4b12      	ldr	r3, [pc, #72]	@ (800b4c0 <vTaskStartScheduler+0xc8>)
 800b476:	2201      	movs	r2, #1
 800b478:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b47a:	4b12      	ldr	r3, [pc, #72]	@ (800b4c4 <vTaskStartScheduler+0xcc>)
 800b47c:	2200      	movs	r2, #0
 800b47e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b480:	f001 fa8e 	bl	800c9a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b484:	e00f      	b.n	800b4a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b48c:	d10b      	bne.n	800b4a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800b48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b492:	f383 8811 	msr	BASEPRI, r3
 800b496:	f3bf 8f6f 	isb	sy
 800b49a:	f3bf 8f4f 	dsb	sy
 800b49e:	60fb      	str	r3, [r7, #12]
}
 800b4a0:	bf00      	nop
 800b4a2:	bf00      	nop
 800b4a4:	e7fd      	b.n	800b4a2 <vTaskStartScheduler+0xaa>
}
 800b4a6:	bf00      	nop
 800b4a8:	3718      	adds	r7, #24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	0800de28 	.word	0x0800de28
 800b4b4:	0800bae9 	.word	0x0800bae9
 800b4b8:	20001038 	.word	0x20001038
 800b4bc:	20001034 	.word	0x20001034
 800b4c0:	20001020 	.word	0x20001020
 800b4c4:	20001018 	.word	0x20001018

0800b4c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b4cc:	4b04      	ldr	r3, [pc, #16]	@ (800b4e0 <vTaskSuspendAll+0x18>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	4a03      	ldr	r2, [pc, #12]	@ (800b4e0 <vTaskSuspendAll+0x18>)
 800b4d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b4d6:	bf00      	nop
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	2000103c 	.word	0x2000103c

0800b4e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b084      	sub	sp, #16
 800b4e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b4f2:	4b42      	ldr	r3, [pc, #264]	@ (800b5fc <xTaskResumeAll+0x118>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d10b      	bne.n	800b512 <xTaskResumeAll+0x2e>
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	603b      	str	r3, [r7, #0]
}
 800b50c:	bf00      	nop
 800b50e:	bf00      	nop
 800b510:	e7fd      	b.n	800b50e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b512:	f001 fae9 	bl	800cae8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b516:	4b39      	ldr	r3, [pc, #228]	@ (800b5fc <xTaskResumeAll+0x118>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	3b01      	subs	r3, #1
 800b51c:	4a37      	ldr	r2, [pc, #220]	@ (800b5fc <xTaskResumeAll+0x118>)
 800b51e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b520:	4b36      	ldr	r3, [pc, #216]	@ (800b5fc <xTaskResumeAll+0x118>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d162      	bne.n	800b5ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b528:	4b35      	ldr	r3, [pc, #212]	@ (800b600 <xTaskResumeAll+0x11c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d05e      	beq.n	800b5ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b530:	e02f      	b.n	800b592 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b532:	4b34      	ldr	r3, [pc, #208]	@ (800b604 <xTaskResumeAll+0x120>)
 800b534:	68db      	ldr	r3, [r3, #12]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	3318      	adds	r3, #24
 800b53e:	4618      	mov	r0, r3
 800b540:	f7fe fcea 	bl	8009f18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	3304      	adds	r3, #4
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe fce5 	bl	8009f18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b552:	4b2d      	ldr	r3, [pc, #180]	@ (800b608 <xTaskResumeAll+0x124>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d903      	bls.n	800b562 <xTaskResumeAll+0x7e>
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b55e:	4a2a      	ldr	r2, [pc, #168]	@ (800b608 <xTaskResumeAll+0x124>)
 800b560:	6013      	str	r3, [r2, #0]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b566:	4613      	mov	r3, r2
 800b568:	009b      	lsls	r3, r3, #2
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	4a27      	ldr	r2, [pc, #156]	@ (800b60c <xTaskResumeAll+0x128>)
 800b570:	441a      	add	r2, r3
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	3304      	adds	r3, #4
 800b576:	4619      	mov	r1, r3
 800b578:	4610      	mov	r0, r2
 800b57a:	f7fe fc70 	bl	8009e5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b582:	4b23      	ldr	r3, [pc, #140]	@ (800b610 <xTaskResumeAll+0x12c>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b588:	429a      	cmp	r2, r3
 800b58a:	d302      	bcc.n	800b592 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b58c:	4b21      	ldr	r3, [pc, #132]	@ (800b614 <xTaskResumeAll+0x130>)
 800b58e:	2201      	movs	r2, #1
 800b590:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b592:	4b1c      	ldr	r3, [pc, #112]	@ (800b604 <xTaskResumeAll+0x120>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1cb      	bne.n	800b532 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d001      	beq.n	800b5a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b5a0:	f000 fb58 	bl	800bc54 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b5a4:	4b1c      	ldr	r3, [pc, #112]	@ (800b618 <xTaskResumeAll+0x134>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d010      	beq.n	800b5d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b5b0:	f000 f846 	bl	800b640 <xTaskIncrementTick>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b5ba:	4b16      	ldr	r3, [pc, #88]	@ (800b614 <xTaskResumeAll+0x130>)
 800b5bc:	2201      	movs	r2, #1
 800b5be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	3b01      	subs	r3, #1
 800b5c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d1f1      	bne.n	800b5b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b5cc:	4b12      	ldr	r3, [pc, #72]	@ (800b618 <xTaskResumeAll+0x134>)
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b5d2:	4b10      	ldr	r3, [pc, #64]	@ (800b614 <xTaskResumeAll+0x130>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b5de:	4b0f      	ldr	r3, [pc, #60]	@ (800b61c <xTaskResumeAll+0x138>)
 800b5e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b5ee:	f001 faad 	bl	800cb4c <vPortExitCritical>

	return xAlreadyYielded;
 800b5f2:	68bb      	ldr	r3, [r7, #8]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3710      	adds	r7, #16
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	bd80      	pop	{r7, pc}
 800b5fc:	2000103c 	.word	0x2000103c
 800b600:	20001014 	.word	0x20001014
 800b604:	20000fd4 	.word	0x20000fd4
 800b608:	2000101c 	.word	0x2000101c
 800b60c:	20000b44 	.word	0x20000b44
 800b610:	20000b40 	.word	0x20000b40
 800b614:	20001028 	.word	0x20001028
 800b618:	20001024 	.word	0x20001024
 800b61c:	e000ed04 	.word	0xe000ed04

0800b620 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b620:	b480      	push	{r7}
 800b622:	b083      	sub	sp, #12
 800b624:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b626:	4b05      	ldr	r3, [pc, #20]	@ (800b63c <xTaskGetTickCount+0x1c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b62c:	687b      	ldr	r3, [r7, #4]
}
 800b62e:	4618      	mov	r0, r3
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr
 800b63a:	bf00      	nop
 800b63c:	20001018 	.word	0x20001018

0800b640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b086      	sub	sp, #24
 800b644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b646:	2300      	movs	r3, #0
 800b648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b64a:	4b4f      	ldr	r3, [pc, #316]	@ (800b788 <xTaskIncrementTick+0x148>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f040 8090 	bne.w	800b774 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b654:	4b4d      	ldr	r3, [pc, #308]	@ (800b78c <xTaskIncrementTick+0x14c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3301      	adds	r3, #1
 800b65a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b65c:	4a4b      	ldr	r2, [pc, #300]	@ (800b78c <xTaskIncrementTick+0x14c>)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d121      	bne.n	800b6ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b668:	4b49      	ldr	r3, [pc, #292]	@ (800b790 <xTaskIncrementTick+0x150>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d00b      	beq.n	800b68a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b676:	f383 8811 	msr	BASEPRI, r3
 800b67a:	f3bf 8f6f 	isb	sy
 800b67e:	f3bf 8f4f 	dsb	sy
 800b682:	603b      	str	r3, [r7, #0]
}
 800b684:	bf00      	nop
 800b686:	bf00      	nop
 800b688:	e7fd      	b.n	800b686 <xTaskIncrementTick+0x46>
 800b68a:	4b41      	ldr	r3, [pc, #260]	@ (800b790 <xTaskIncrementTick+0x150>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	60fb      	str	r3, [r7, #12]
 800b690:	4b40      	ldr	r3, [pc, #256]	@ (800b794 <xTaskIncrementTick+0x154>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4a3e      	ldr	r2, [pc, #248]	@ (800b790 <xTaskIncrementTick+0x150>)
 800b696:	6013      	str	r3, [r2, #0]
 800b698:	4a3e      	ldr	r2, [pc, #248]	@ (800b794 <xTaskIncrementTick+0x154>)
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	6013      	str	r3, [r2, #0]
 800b69e:	4b3e      	ldr	r3, [pc, #248]	@ (800b798 <xTaskIncrementTick+0x158>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	4a3c      	ldr	r2, [pc, #240]	@ (800b798 <xTaskIncrementTick+0x158>)
 800b6a6:	6013      	str	r3, [r2, #0]
 800b6a8:	f000 fad4 	bl	800bc54 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b6ac:	4b3b      	ldr	r3, [pc, #236]	@ (800b79c <xTaskIncrementTick+0x15c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	693a      	ldr	r2, [r7, #16]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d349      	bcc.n	800b74a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6b6:	4b36      	ldr	r3, [pc, #216]	@ (800b790 <xTaskIncrementTick+0x150>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d104      	bne.n	800b6ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c0:	4b36      	ldr	r3, [pc, #216]	@ (800b79c <xTaskIncrementTick+0x15c>)
 800b6c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c6:	601a      	str	r2, [r3, #0]
					break;
 800b6c8:	e03f      	b.n	800b74a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6ca:	4b31      	ldr	r3, [pc, #196]	@ (800b790 <xTaskIncrementTick+0x150>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	68db      	ldr	r3, [r3, #12]
 800b6d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d203      	bcs.n	800b6ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b6e2:	4a2e      	ldr	r2, [pc, #184]	@ (800b79c <xTaskIncrementTick+0x15c>)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b6e8:	e02f      	b.n	800b74a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	3304      	adds	r3, #4
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fc12 	bl	8009f18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d004      	beq.n	800b706 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	3318      	adds	r3, #24
 800b700:	4618      	mov	r0, r3
 800b702:	f7fe fc09 	bl	8009f18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b70a:	4b25      	ldr	r3, [pc, #148]	@ (800b7a0 <xTaskIncrementTick+0x160>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d903      	bls.n	800b71a <xTaskIncrementTick+0xda>
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b716:	4a22      	ldr	r2, [pc, #136]	@ (800b7a0 <xTaskIncrementTick+0x160>)
 800b718:	6013      	str	r3, [r2, #0]
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b71e:	4613      	mov	r3, r2
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	4413      	add	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	4a1f      	ldr	r2, [pc, #124]	@ (800b7a4 <xTaskIncrementTick+0x164>)
 800b728:	441a      	add	r2, r3
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4619      	mov	r1, r3
 800b730:	4610      	mov	r0, r2
 800b732:	f7fe fb94 	bl	8009e5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73a:	4b1b      	ldr	r3, [pc, #108]	@ (800b7a8 <xTaskIncrementTick+0x168>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b740:	429a      	cmp	r2, r3
 800b742:	d3b8      	bcc.n	800b6b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b744:	2301      	movs	r3, #1
 800b746:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b748:	e7b5      	b.n	800b6b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b74a:	4b17      	ldr	r3, [pc, #92]	@ (800b7a8 <xTaskIncrementTick+0x168>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b750:	4914      	ldr	r1, [pc, #80]	@ (800b7a4 <xTaskIncrementTick+0x164>)
 800b752:	4613      	mov	r3, r2
 800b754:	009b      	lsls	r3, r3, #2
 800b756:	4413      	add	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	440b      	add	r3, r1
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d901      	bls.n	800b766 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b762:	2301      	movs	r3, #1
 800b764:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b766:	4b11      	ldr	r3, [pc, #68]	@ (800b7ac <xTaskIncrementTick+0x16c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d007      	beq.n	800b77e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b76e:	2301      	movs	r3, #1
 800b770:	617b      	str	r3, [r7, #20]
 800b772:	e004      	b.n	800b77e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b774:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b0 <xTaskIncrementTick+0x170>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3301      	adds	r3, #1
 800b77a:	4a0d      	ldr	r2, [pc, #52]	@ (800b7b0 <xTaskIncrementTick+0x170>)
 800b77c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b77e:	697b      	ldr	r3, [r7, #20]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	2000103c 	.word	0x2000103c
 800b78c:	20001018 	.word	0x20001018
 800b790:	20000fcc 	.word	0x20000fcc
 800b794:	20000fd0 	.word	0x20000fd0
 800b798:	2000102c 	.word	0x2000102c
 800b79c:	20001034 	.word	0x20001034
 800b7a0:	2000101c 	.word	0x2000101c
 800b7a4:	20000b44 	.word	0x20000b44
 800b7a8:	20000b40 	.word	0x20000b40
 800b7ac:	20001028 	.word	0x20001028
 800b7b0:	20001024 	.word	0x20001024

0800b7b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b7b4:	b480      	push	{r7}
 800b7b6:	b085      	sub	sp, #20
 800b7b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b7ba:	4b28      	ldr	r3, [pc, #160]	@ (800b85c <vTaskSwitchContext+0xa8>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b7c2:	4b27      	ldr	r3, [pc, #156]	@ (800b860 <vTaskSwitchContext+0xac>)
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b7c8:	e042      	b.n	800b850 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b7ca:	4b25      	ldr	r3, [pc, #148]	@ (800b860 <vTaskSwitchContext+0xac>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7d0:	4b24      	ldr	r3, [pc, #144]	@ (800b864 <vTaskSwitchContext+0xb0>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	60fb      	str	r3, [r7, #12]
 800b7d6:	e011      	b.n	800b7fc <vTaskSwitchContext+0x48>
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d10b      	bne.n	800b7f6 <vTaskSwitchContext+0x42>
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	607b      	str	r3, [r7, #4]
}
 800b7f0:	bf00      	nop
 800b7f2:	bf00      	nop
 800b7f4:	e7fd      	b.n	800b7f2 <vTaskSwitchContext+0x3e>
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	60fb      	str	r3, [r7, #12]
 800b7fc:	491a      	ldr	r1, [pc, #104]	@ (800b868 <vTaskSwitchContext+0xb4>)
 800b7fe:	68fa      	ldr	r2, [r7, #12]
 800b800:	4613      	mov	r3, r2
 800b802:	009b      	lsls	r3, r3, #2
 800b804:	4413      	add	r3, r2
 800b806:	009b      	lsls	r3, r3, #2
 800b808:	440b      	add	r3, r1
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d0e3      	beq.n	800b7d8 <vTaskSwitchContext+0x24>
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	4613      	mov	r3, r2
 800b814:	009b      	lsls	r3, r3, #2
 800b816:	4413      	add	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	4a13      	ldr	r2, [pc, #76]	@ (800b868 <vTaskSwitchContext+0xb4>)
 800b81c:	4413      	add	r3, r2
 800b81e:	60bb      	str	r3, [r7, #8]
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	685a      	ldr	r2, [r3, #4]
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	605a      	str	r2, [r3, #4]
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	685a      	ldr	r2, [r3, #4]
 800b82e:	68bb      	ldr	r3, [r7, #8]
 800b830:	3308      	adds	r3, #8
 800b832:	429a      	cmp	r2, r3
 800b834:	d104      	bne.n	800b840 <vTaskSwitchContext+0x8c>
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	685a      	ldr	r2, [r3, #4]
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	605a      	str	r2, [r3, #4]
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	4a09      	ldr	r2, [pc, #36]	@ (800b86c <vTaskSwitchContext+0xb8>)
 800b848:	6013      	str	r3, [r2, #0]
 800b84a:	4a06      	ldr	r2, [pc, #24]	@ (800b864 <vTaskSwitchContext+0xb0>)
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6013      	str	r3, [r2, #0]
}
 800b850:	bf00      	nop
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr
 800b85c:	2000103c 	.word	0x2000103c
 800b860:	20001028 	.word	0x20001028
 800b864:	2000101c 	.word	0x2000101c
 800b868:	20000b44 	.word	0x20000b44
 800b86c:	20000b40 	.word	0x20000b40

0800b870 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
 800b878:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10b      	bne.n	800b898 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b884:	f383 8811 	msr	BASEPRI, r3
 800b888:	f3bf 8f6f 	isb	sy
 800b88c:	f3bf 8f4f 	dsb	sy
 800b890:	60fb      	str	r3, [r7, #12]
}
 800b892:	bf00      	nop
 800b894:	bf00      	nop
 800b896:	e7fd      	b.n	800b894 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b898:	4b07      	ldr	r3, [pc, #28]	@ (800b8b8 <vTaskPlaceOnEventList+0x48>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3318      	adds	r3, #24
 800b89e:	4619      	mov	r1, r3
 800b8a0:	6878      	ldr	r0, [r7, #4]
 800b8a2:	f7fe fb00 	bl	8009ea6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b8a6:	2101      	movs	r1, #1
 800b8a8:	6838      	ldr	r0, [r7, #0]
 800b8aa:	f000 fb81 	bl	800bfb0 <prvAddCurrentTaskToDelayedList>
}
 800b8ae:	bf00      	nop
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20000b40 	.word	0x20000b40

0800b8bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d10b      	bne.n	800b8e6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	617b      	str	r3, [r7, #20]
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop
 800b8e4:	e7fd      	b.n	800b8e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b8e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b910 <vTaskPlaceOnEventListRestricted+0x54>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	3318      	adds	r3, #24
 800b8ec:	4619      	mov	r1, r3
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7fe fab5 	bl	8009e5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b8fe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	68b8      	ldr	r0, [r7, #8]
 800b904:	f000 fb54 	bl	800bfb0 <prvAddCurrentTaskToDelayedList>
	}
 800b908:	bf00      	nop
 800b90a:	3718      	adds	r7, #24
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	20000b40 	.word	0x20000b40

0800b914 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	68db      	ldr	r3, [r3, #12]
 800b922:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10b      	bne.n	800b942 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b92a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b92e:	f383 8811 	msr	BASEPRI, r3
 800b932:	f3bf 8f6f 	isb	sy
 800b936:	f3bf 8f4f 	dsb	sy
 800b93a:	60fb      	str	r3, [r7, #12]
}
 800b93c:	bf00      	nop
 800b93e:	bf00      	nop
 800b940:	e7fd      	b.n	800b93e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	3318      	adds	r3, #24
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe fae6 	bl	8009f18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b94c:	4b1d      	ldr	r3, [pc, #116]	@ (800b9c4 <xTaskRemoveFromEventList+0xb0>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d11d      	bne.n	800b990 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	3304      	adds	r3, #4
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fadd 	bl	8009f18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b95e:	693b      	ldr	r3, [r7, #16]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	4b19      	ldr	r3, [pc, #100]	@ (800b9c8 <xTaskRemoveFromEventList+0xb4>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d903      	bls.n	800b972 <xTaskRemoveFromEventList+0x5e>
 800b96a:	693b      	ldr	r3, [r7, #16]
 800b96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96e:	4a16      	ldr	r2, [pc, #88]	@ (800b9c8 <xTaskRemoveFromEventList+0xb4>)
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4a13      	ldr	r2, [pc, #76]	@ (800b9cc <xTaskRemoveFromEventList+0xb8>)
 800b980:	441a      	add	r2, r3
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	3304      	adds	r3, #4
 800b986:	4619      	mov	r1, r3
 800b988:	4610      	mov	r0, r2
 800b98a:	f7fe fa68 	bl	8009e5e <vListInsertEnd>
 800b98e:	e005      	b.n	800b99c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	3318      	adds	r3, #24
 800b994:	4619      	mov	r1, r3
 800b996:	480e      	ldr	r0, [pc, #56]	@ (800b9d0 <xTaskRemoveFromEventList+0xbc>)
 800b998:	f7fe fa61 	bl	8009e5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a0:	4b0c      	ldr	r3, [pc, #48]	@ (800b9d4 <xTaskRemoveFromEventList+0xc0>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	d905      	bls.n	800b9b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b9ae:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d8 <xTaskRemoveFromEventList+0xc4>)
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	601a      	str	r2, [r3, #0]
 800b9b4:	e001      	b.n	800b9ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b9ba:	697b      	ldr	r3, [r7, #20]
}
 800b9bc:	4618      	mov	r0, r3
 800b9be:	3718      	adds	r7, #24
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}
 800b9c4:	2000103c 	.word	0x2000103c
 800b9c8:	2000101c 	.word	0x2000101c
 800b9cc:	20000b44 	.word	0x20000b44
 800b9d0:	20000fd4 	.word	0x20000fd4
 800b9d4:	20000b40 	.word	0x20000b40
 800b9d8:	20001028 	.word	0x20001028

0800b9dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b083      	sub	sp, #12
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9e4:	4b06      	ldr	r3, [pc, #24]	@ (800ba00 <vTaskInternalSetTimeOutState+0x24>)
 800b9e6:	681a      	ldr	r2, [r3, #0]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9ec:	4b05      	ldr	r3, [pc, #20]	@ (800ba04 <vTaskInternalSetTimeOutState+0x28>)
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	605a      	str	r2, [r3, #4]
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr
 800ba00:	2000102c 	.word	0x2000102c
 800ba04:	20001018 	.word	0x20001018

0800ba08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b088      	sub	sp, #32
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
 800ba10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10b      	bne.n	800ba30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ba18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1c:	f383 8811 	msr	BASEPRI, r3
 800ba20:	f3bf 8f6f 	isb	sy
 800ba24:	f3bf 8f4f 	dsb	sy
 800ba28:	613b      	str	r3, [r7, #16]
}
 800ba2a:	bf00      	nop
 800ba2c:	bf00      	nop
 800ba2e:	e7fd      	b.n	800ba2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba30:	683b      	ldr	r3, [r7, #0]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	60fb      	str	r3, [r7, #12]
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	e7fd      	b.n	800ba4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba4e:	f001 f84b 	bl	800cae8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba52:	4b1d      	ldr	r3, [pc, #116]	@ (800bac8 <xTaskCheckForTimeOut+0xc0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6a:	d102      	bne.n	800ba72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	61fb      	str	r3, [r7, #28]
 800ba70:	e023      	b.n	800baba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681a      	ldr	r2, [r3, #0]
 800ba76:	4b15      	ldr	r3, [pc, #84]	@ (800bacc <xTaskCheckForTimeOut+0xc4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d007      	beq.n	800ba8e <xTaskCheckForTimeOut+0x86>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	69ba      	ldr	r2, [r7, #24]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d302      	bcc.n	800ba8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba88:	2301      	movs	r3, #1
 800ba8a:	61fb      	str	r3, [r7, #28]
 800ba8c:	e015      	b.n	800baba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d20b      	bcs.n	800bab0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	1ad2      	subs	r2, r2, r3
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f7ff ff99 	bl	800b9dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800baaa:	2300      	movs	r3, #0
 800baac:	61fb      	str	r3, [r7, #28]
 800baae:	e004      	b.n	800baba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	2200      	movs	r2, #0
 800bab4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bab6:	2301      	movs	r3, #1
 800bab8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800baba:	f001 f847 	bl	800cb4c <vPortExitCritical>

	return xReturn;
 800babe:	69fb      	ldr	r3, [r7, #28]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3720      	adds	r7, #32
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	20001018 	.word	0x20001018
 800bacc:	2000102c 	.word	0x2000102c

0800bad0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bad0:	b480      	push	{r7}
 800bad2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bad4:	4b03      	ldr	r3, [pc, #12]	@ (800bae4 <vTaskMissedYield+0x14>)
 800bad6:	2201      	movs	r2, #1
 800bad8:	601a      	str	r2, [r3, #0]
}
 800bada:	bf00      	nop
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	20001028 	.word	0x20001028

0800bae8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800baf0:	f000 f852 	bl	800bb98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800baf4:	4b06      	ldr	r3, [pc, #24]	@ (800bb10 <prvIdleTask+0x28>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d9f9      	bls.n	800baf0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bafc:	4b05      	ldr	r3, [pc, #20]	@ (800bb14 <prvIdleTask+0x2c>)
 800bafe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb02:	601a      	str	r2, [r3, #0]
 800bb04:	f3bf 8f4f 	dsb	sy
 800bb08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bb0c:	e7f0      	b.n	800baf0 <prvIdleTask+0x8>
 800bb0e:	bf00      	nop
 800bb10:	20000b44 	.word	0x20000b44
 800bb14:	e000ed04 	.word	0xe000ed04

0800bb18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b082      	sub	sp, #8
 800bb1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb1e:	2300      	movs	r3, #0
 800bb20:	607b      	str	r3, [r7, #4]
 800bb22:	e00c      	b.n	800bb3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	4613      	mov	r3, r2
 800bb28:	009b      	lsls	r3, r3, #2
 800bb2a:	4413      	add	r3, r2
 800bb2c:	009b      	lsls	r3, r3, #2
 800bb2e:	4a12      	ldr	r2, [pc, #72]	@ (800bb78 <prvInitialiseTaskLists+0x60>)
 800bb30:	4413      	add	r3, r2
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7fe f966 	bl	8009e04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	607b      	str	r3, [r7, #4]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2b37      	cmp	r3, #55	@ 0x37
 800bb42:	d9ef      	bls.n	800bb24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb44:	480d      	ldr	r0, [pc, #52]	@ (800bb7c <prvInitialiseTaskLists+0x64>)
 800bb46:	f7fe f95d 	bl	8009e04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb4a:	480d      	ldr	r0, [pc, #52]	@ (800bb80 <prvInitialiseTaskLists+0x68>)
 800bb4c:	f7fe f95a 	bl	8009e04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb50:	480c      	ldr	r0, [pc, #48]	@ (800bb84 <prvInitialiseTaskLists+0x6c>)
 800bb52:	f7fe f957 	bl	8009e04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb56:	480c      	ldr	r0, [pc, #48]	@ (800bb88 <prvInitialiseTaskLists+0x70>)
 800bb58:	f7fe f954 	bl	8009e04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb5c:	480b      	ldr	r0, [pc, #44]	@ (800bb8c <prvInitialiseTaskLists+0x74>)
 800bb5e:	f7fe f951 	bl	8009e04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb62:	4b0b      	ldr	r3, [pc, #44]	@ (800bb90 <prvInitialiseTaskLists+0x78>)
 800bb64:	4a05      	ldr	r2, [pc, #20]	@ (800bb7c <prvInitialiseTaskLists+0x64>)
 800bb66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb68:	4b0a      	ldr	r3, [pc, #40]	@ (800bb94 <prvInitialiseTaskLists+0x7c>)
 800bb6a:	4a05      	ldr	r2, [pc, #20]	@ (800bb80 <prvInitialiseTaskLists+0x68>)
 800bb6c:	601a      	str	r2, [r3, #0]
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20000b44 	.word	0x20000b44
 800bb7c:	20000fa4 	.word	0x20000fa4
 800bb80:	20000fb8 	.word	0x20000fb8
 800bb84:	20000fd4 	.word	0x20000fd4
 800bb88:	20000fe8 	.word	0x20000fe8
 800bb8c:	20001000 	.word	0x20001000
 800bb90:	20000fcc 	.word	0x20000fcc
 800bb94:	20000fd0 	.word	0x20000fd0

0800bb98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b082      	sub	sp, #8
 800bb9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb9e:	e019      	b.n	800bbd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bba0:	f000 ffa2 	bl	800cae8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bba4:	4b10      	ldr	r3, [pc, #64]	@ (800bbe8 <prvCheckTasksWaitingTermination+0x50>)
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe f9b1 	bl	8009f18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbec <prvCheckTasksWaitingTermination+0x54>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	4a0b      	ldr	r2, [pc, #44]	@ (800bbec <prvCheckTasksWaitingTermination+0x54>)
 800bbbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bbc0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbf0 <prvCheckTasksWaitingTermination+0x58>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	4a0a      	ldr	r2, [pc, #40]	@ (800bbf0 <prvCheckTasksWaitingTermination+0x58>)
 800bbc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbca:	f000 ffbf 	bl	800cb4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 f810 	bl	800bbf4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbd4:	4b06      	ldr	r3, [pc, #24]	@ (800bbf0 <prvCheckTasksWaitingTermination+0x58>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e1      	bne.n	800bba0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbdc:	bf00      	nop
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20000fe8 	.word	0x20000fe8
 800bbec:	20001014 	.word	0x20001014
 800bbf0:	20000ffc 	.word	0x20000ffc

0800bbf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d108      	bne.n	800bc18 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f001 f95c 	bl	800cec8 <vPortFree>
				vPortFree( pxTCB );
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f001 f959 	bl	800cec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bc16:	e019      	b.n	800bc4c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d103      	bne.n	800bc2a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 f950 	bl	800cec8 <vPortFree>
	}
 800bc28:	e010      	b.n	800bc4c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc30:	2b02      	cmp	r3, #2
 800bc32:	d00b      	beq.n	800bc4c <prvDeleteTCB+0x58>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc38:	f383 8811 	msr	BASEPRI, r3
 800bc3c:	f3bf 8f6f 	isb	sy
 800bc40:	f3bf 8f4f 	dsb	sy
 800bc44:	60fb      	str	r3, [r7, #12]
}
 800bc46:	bf00      	nop
 800bc48:	bf00      	nop
 800bc4a:	e7fd      	b.n	800bc48 <prvDeleteTCB+0x54>
	}
 800bc4c:	bf00      	nop
 800bc4e:	3710      	adds	r7, #16
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc5a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc8c <prvResetNextTaskUnblockTime+0x38>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d104      	bne.n	800bc6e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc64:	4b0a      	ldr	r3, [pc, #40]	@ (800bc90 <prvResetNextTaskUnblockTime+0x3c>)
 800bc66:	f04f 32ff 	mov.w	r2, #4294967295
 800bc6a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc6c:	e008      	b.n	800bc80 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc6e:	4b07      	ldr	r3, [pc, #28]	@ (800bc8c <prvResetNextTaskUnblockTime+0x38>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	68db      	ldr	r3, [r3, #12]
 800bc76:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	4a04      	ldr	r2, [pc, #16]	@ (800bc90 <prvResetNextTaskUnblockTime+0x3c>)
 800bc7e:	6013      	str	r3, [r2, #0]
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr
 800bc8c:	20000fcc 	.word	0x20000fcc
 800bc90:	20001034 	.word	0x20001034

0800bc94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc94:	b480      	push	{r7}
 800bc96:	b083      	sub	sp, #12
 800bc98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc9a:	4b0b      	ldr	r3, [pc, #44]	@ (800bcc8 <xTaskGetSchedulerState+0x34>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d102      	bne.n	800bca8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bca2:	2301      	movs	r3, #1
 800bca4:	607b      	str	r3, [r7, #4]
 800bca6:	e008      	b.n	800bcba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bca8:	4b08      	ldr	r3, [pc, #32]	@ (800bccc <xTaskGetSchedulerState+0x38>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d102      	bne.n	800bcb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bcb0:	2302      	movs	r3, #2
 800bcb2:	607b      	str	r3, [r7, #4]
 800bcb4:	e001      	b.n	800bcba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bcba:	687b      	ldr	r3, [r7, #4]
	}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr
 800bcc8:	20001020 	.word	0x20001020
 800bccc:	2000103c 	.word	0x2000103c

0800bcd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d051      	beq.n	800bd8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcea:	4b2a      	ldr	r3, [pc, #168]	@ (800bd94 <xTaskPriorityInherit+0xc4>)
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcf0:	429a      	cmp	r2, r3
 800bcf2:	d241      	bcs.n	800bd78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	699b      	ldr	r3, [r3, #24]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	db06      	blt.n	800bd0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bcfc:	4b25      	ldr	r3, [pc, #148]	@ (800bd94 <xTaskPriorityInherit+0xc4>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd02:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	6959      	ldr	r1, [r3, #20]
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd12:	4613      	mov	r3, r2
 800bd14:	009b      	lsls	r3, r3, #2
 800bd16:	4413      	add	r3, r2
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4a1f      	ldr	r2, [pc, #124]	@ (800bd98 <xTaskPriorityInherit+0xc8>)
 800bd1c:	4413      	add	r3, r2
 800bd1e:	4299      	cmp	r1, r3
 800bd20:	d122      	bne.n	800bd68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	3304      	adds	r3, #4
 800bd26:	4618      	mov	r0, r3
 800bd28:	f7fe f8f6 	bl	8009f18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd2c:	4b19      	ldr	r3, [pc, #100]	@ (800bd94 <xTaskPriorityInherit+0xc4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd32:	68bb      	ldr	r3, [r7, #8]
 800bd34:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd3a:	4b18      	ldr	r3, [pc, #96]	@ (800bd9c <xTaskPriorityInherit+0xcc>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	429a      	cmp	r2, r3
 800bd40:	d903      	bls.n	800bd4a <xTaskPriorityInherit+0x7a>
 800bd42:	68bb      	ldr	r3, [r7, #8]
 800bd44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd46:	4a15      	ldr	r2, [pc, #84]	@ (800bd9c <xTaskPriorityInherit+0xcc>)
 800bd48:	6013      	str	r3, [r2, #0]
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd4e:	4613      	mov	r3, r2
 800bd50:	009b      	lsls	r3, r3, #2
 800bd52:	4413      	add	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4a10      	ldr	r2, [pc, #64]	@ (800bd98 <xTaskPriorityInherit+0xc8>)
 800bd58:	441a      	add	r2, r3
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	4619      	mov	r1, r3
 800bd60:	4610      	mov	r0, r2
 800bd62:	f7fe f87c 	bl	8009e5e <vListInsertEnd>
 800bd66:	e004      	b.n	800bd72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd68:	4b0a      	ldr	r3, [pc, #40]	@ (800bd94 <xTaskPriorityInherit+0xc4>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd72:	2301      	movs	r3, #1
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	e008      	b.n	800bd8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd7c:	4b05      	ldr	r3, [pc, #20]	@ (800bd94 <xTaskPriorityInherit+0xc4>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d201      	bcs.n	800bd8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd86:	2301      	movs	r3, #1
 800bd88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd8a:	68fb      	ldr	r3, [r7, #12]
	}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}
 800bd94:	20000b40 	.word	0x20000b40
 800bd98:	20000b44 	.word	0x20000b44
 800bd9c:	2000101c 	.word	0x2000101c

0800bda0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b086      	sub	sp, #24
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bdac:	2300      	movs	r3, #0
 800bdae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d058      	beq.n	800be68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bdb6:	4b2f      	ldr	r3, [pc, #188]	@ (800be74 <xTaskPriorityDisinherit+0xd4>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	693a      	ldr	r2, [r7, #16]
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d00b      	beq.n	800bdd8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60fb      	str	r3, [r7, #12]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d10b      	bne.n	800bdf8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bde0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bde4:	f383 8811 	msr	BASEPRI, r3
 800bde8:	f3bf 8f6f 	isb	sy
 800bdec:	f3bf 8f4f 	dsb	sy
 800bdf0:	60bb      	str	r3, [r7, #8]
}
 800bdf2:	bf00      	nop
 800bdf4:	bf00      	nop
 800bdf6:	e7fd      	b.n	800bdf4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdfc:	1e5a      	subs	r2, r3, #1
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be06:	693b      	ldr	r3, [r7, #16]
 800be08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be0a:	429a      	cmp	r2, r3
 800be0c:	d02c      	beq.n	800be68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be12:	2b00      	cmp	r3, #0
 800be14:	d128      	bne.n	800be68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	3304      	adds	r3, #4
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7fe f87c 	bl	8009f18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800be24:	693b      	ldr	r3, [r7, #16]
 800be26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be38:	4b0f      	ldr	r3, [pc, #60]	@ (800be78 <xTaskPriorityDisinherit+0xd8>)
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d903      	bls.n	800be48 <xTaskPriorityDisinherit+0xa8>
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be44:	4a0c      	ldr	r2, [pc, #48]	@ (800be78 <xTaskPriorityDisinherit+0xd8>)
 800be46:	6013      	str	r3, [r2, #0]
 800be48:	693b      	ldr	r3, [r7, #16]
 800be4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4a09      	ldr	r2, [pc, #36]	@ (800be7c <xTaskPriorityDisinherit+0xdc>)
 800be56:	441a      	add	r2, r3
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	3304      	adds	r3, #4
 800be5c:	4619      	mov	r1, r3
 800be5e:	4610      	mov	r0, r2
 800be60:	f7fd fffd 	bl	8009e5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be64:	2301      	movs	r3, #1
 800be66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be68:	697b      	ldr	r3, [r7, #20]
	}
 800be6a:	4618      	mov	r0, r3
 800be6c:	3718      	adds	r7, #24
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20000b40 	.word	0x20000b40
 800be78:	2000101c 	.word	0x2000101c
 800be7c:	20000b44 	.word	0x20000b44

0800be80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be8e:	2301      	movs	r3, #1
 800be90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d06c      	beq.n	800bf72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be98:	69bb      	ldr	r3, [r7, #24]
 800be9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d10b      	bne.n	800beb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	60fb      	str	r3, [r7, #12]
}
 800beb2:	bf00      	nop
 800beb4:	bf00      	nop
 800beb6:	e7fd      	b.n	800beb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bebc:	683a      	ldr	r2, [r7, #0]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d902      	bls.n	800bec8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	61fb      	str	r3, [r7, #28]
 800bec6:	e002      	b.n	800bece <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bec8:	69bb      	ldr	r3, [r7, #24]
 800beca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800becc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bed2:	69fa      	ldr	r2, [r7, #28]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d04c      	beq.n	800bf72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bed8:	69bb      	ldr	r3, [r7, #24]
 800beda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bedc:	697a      	ldr	r2, [r7, #20]
 800bede:	429a      	cmp	r2, r3
 800bee0:	d147      	bne.n	800bf72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bee2:	4b26      	ldr	r3, [pc, #152]	@ (800bf7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	69ba      	ldr	r2, [r7, #24]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d10b      	bne.n	800bf04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800beec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef0:	f383 8811 	msr	BASEPRI, r3
 800bef4:	f3bf 8f6f 	isb	sy
 800bef8:	f3bf 8f4f 	dsb	sy
 800befc:	60bb      	str	r3, [r7, #8]
}
 800befe:	bf00      	nop
 800bf00:	bf00      	nop
 800bf02:	e7fd      	b.n	800bf00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bf04:	69bb      	ldr	r3, [r7, #24]
 800bf06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bf0a:	69bb      	ldr	r3, [r7, #24]
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bf10:	69bb      	ldr	r3, [r7, #24]
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	db04      	blt.n	800bf22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bf1e:	69bb      	ldr	r3, [r7, #24]
 800bf20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	6959      	ldr	r1, [r3, #20]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	4613      	mov	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4413      	add	r3, r2
 800bf2e:	009b      	lsls	r3, r3, #2
 800bf30:	4a13      	ldr	r2, [pc, #76]	@ (800bf80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf32:	4413      	add	r3, r2
 800bf34:	4299      	cmp	r1, r3
 800bf36:	d11c      	bne.n	800bf72 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	3304      	adds	r3, #4
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7fd ffeb 	bl	8009f18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf46:	4b0f      	ldr	r3, [pc, #60]	@ (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d903      	bls.n	800bf56 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf52:	4a0c      	ldr	r2, [pc, #48]	@ (800bf84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	4413      	add	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4a07      	ldr	r2, [pc, #28]	@ (800bf80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bf64:	441a      	add	r2, r3
 800bf66:	69bb      	ldr	r3, [r7, #24]
 800bf68:	3304      	adds	r3, #4
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4610      	mov	r0, r2
 800bf6e:	f7fd ff76 	bl	8009e5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf72:	bf00      	nop
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20000b40 	.word	0x20000b40
 800bf80:	20000b44 	.word	0x20000b44
 800bf84:	2000101c 	.word	0x2000101c

0800bf88 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf88:	b480      	push	{r7}
 800bf8a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf8c:	4b07      	ldr	r3, [pc, #28]	@ (800bfac <pvTaskIncrementMutexHeldCount+0x24>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d004      	beq.n	800bf9e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf94:	4b05      	ldr	r3, [pc, #20]	@ (800bfac <pvTaskIncrementMutexHeldCount+0x24>)
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bf9a:	3201      	adds	r2, #1
 800bf9c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bf9e:	4b03      	ldr	r3, [pc, #12]	@ (800bfac <pvTaskIncrementMutexHeldCount+0x24>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
	}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr
 800bfac:	20000b40 	.word	0x20000b40

0800bfb0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bfba:	4b21      	ldr	r3, [pc, #132]	@ (800c040 <prvAddCurrentTaskToDelayedList+0x90>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfc0:	4b20      	ldr	r3, [pc, #128]	@ (800c044 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3304      	adds	r3, #4
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7fd ffa6 	bl	8009f18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfd2:	d10a      	bne.n	800bfea <prvAddCurrentTaskToDelayedList+0x3a>
 800bfd4:	683b      	ldr	r3, [r7, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d007      	beq.n	800bfea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfda:	4b1a      	ldr	r3, [pc, #104]	@ (800c044 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3304      	adds	r3, #4
 800bfe0:	4619      	mov	r1, r3
 800bfe2:	4819      	ldr	r0, [pc, #100]	@ (800c048 <prvAddCurrentTaskToDelayedList+0x98>)
 800bfe4:	f7fd ff3b 	bl	8009e5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfe8:	e026      	b.n	800c038 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	4413      	add	r3, r2
 800bff0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bff2:	4b14      	ldr	r3, [pc, #80]	@ (800c044 <prvAddCurrentTaskToDelayedList+0x94>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d209      	bcs.n	800c016 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c002:	4b12      	ldr	r3, [pc, #72]	@ (800c04c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	4b0f      	ldr	r3, [pc, #60]	@ (800c044 <prvAddCurrentTaskToDelayedList+0x94>)
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	3304      	adds	r3, #4
 800c00c:	4619      	mov	r1, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	f7fd ff49 	bl	8009ea6 <vListInsert>
}
 800c014:	e010      	b.n	800c038 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c016:	4b0e      	ldr	r3, [pc, #56]	@ (800c050 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	4b0a      	ldr	r3, [pc, #40]	@ (800c044 <prvAddCurrentTaskToDelayedList+0x94>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	3304      	adds	r3, #4
 800c020:	4619      	mov	r1, r3
 800c022:	4610      	mov	r0, r2
 800c024:	f7fd ff3f 	bl	8009ea6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c028:	4b0a      	ldr	r3, [pc, #40]	@ (800c054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68ba      	ldr	r2, [r7, #8]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d202      	bcs.n	800c038 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c032:	4a08      	ldr	r2, [pc, #32]	@ (800c054 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	6013      	str	r3, [r2, #0]
}
 800c038:	bf00      	nop
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	20001018 	.word	0x20001018
 800c044:	20000b40 	.word	0x20000b40
 800c048:	20001000 	.word	0x20001000
 800c04c:	20000fd0 	.word	0x20000fd0
 800c050:	20000fcc 	.word	0x20000fcc
 800c054:	20001034 	.word	0x20001034

0800c058 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b08a      	sub	sp, #40	@ 0x28
 800c05c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c05e:	2300      	movs	r3, #0
 800c060:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c062:	f000 fbb1 	bl	800c7c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c066:	4b1d      	ldr	r3, [pc, #116]	@ (800c0dc <xTimerCreateTimerTask+0x84>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d021      	beq.n	800c0b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c06e:	2300      	movs	r3, #0
 800c070:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c072:	2300      	movs	r3, #0
 800c074:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c076:	1d3a      	adds	r2, r7, #4
 800c078:	f107 0108 	add.w	r1, r7, #8
 800c07c:	f107 030c 	add.w	r3, r7, #12
 800c080:	4618      	mov	r0, r3
 800c082:	f7fd fea5 	bl	8009dd0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c086:	6879      	ldr	r1, [r7, #4]
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	68fa      	ldr	r2, [r7, #12]
 800c08c:	9202      	str	r2, [sp, #8]
 800c08e:	9301      	str	r3, [sp, #4]
 800c090:	2302      	movs	r3, #2
 800c092:	9300      	str	r3, [sp, #0]
 800c094:	2300      	movs	r3, #0
 800c096:	460a      	mov	r2, r1
 800c098:	4911      	ldr	r1, [pc, #68]	@ (800c0e0 <xTimerCreateTimerTask+0x88>)
 800c09a:	4812      	ldr	r0, [pc, #72]	@ (800c0e4 <xTimerCreateTimerTask+0x8c>)
 800c09c:	f7fe ffd0 	bl	800b040 <xTaskCreateStatic>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4a11      	ldr	r2, [pc, #68]	@ (800c0e8 <xTimerCreateTimerTask+0x90>)
 800c0a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c0a6:	4b10      	ldr	r3, [pc, #64]	@ (800c0e8 <xTimerCreateTimerTask+0x90>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d001      	beq.n	800c0b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c0ae:	2301      	movs	r3, #1
 800c0b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d10b      	bne.n	800c0d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0bc:	f383 8811 	msr	BASEPRI, r3
 800c0c0:	f3bf 8f6f 	isb	sy
 800c0c4:	f3bf 8f4f 	dsb	sy
 800c0c8:	613b      	str	r3, [r7, #16]
}
 800c0ca:	bf00      	nop
 800c0cc:	bf00      	nop
 800c0ce:	e7fd      	b.n	800c0cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c0d0:	697b      	ldr	r3, [r7, #20]
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	3718      	adds	r7, #24
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}
 800c0da:	bf00      	nop
 800c0dc:	20001070 	.word	0x20001070
 800c0e0:	0800de30 	.word	0x0800de30
 800c0e4:	0800c361 	.word	0x0800c361
 800c0e8:	20001074 	.word	0x20001074

0800c0ec <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b088      	sub	sp, #32
 800c0f0:	af02      	add	r7, sp, #8
 800c0f2:	60f8      	str	r0, [r7, #12]
 800c0f4:	60b9      	str	r1, [r7, #8]
 800c0f6:	607a      	str	r2, [r7, #4]
 800c0f8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800c0fa:	202c      	movs	r0, #44	@ 0x2c
 800c0fc:	f000 fe16 	bl	800cd2c <pvPortMalloc>
 800c100:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d00d      	beq.n	800c124 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2200      	movs	r2, #0
 800c10c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c110:	697b      	ldr	r3, [r7, #20]
 800c112:	9301      	str	r3, [sp, #4]
 800c114:	6a3b      	ldr	r3, [r7, #32]
 800c116:	9300      	str	r3, [sp, #0]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	687a      	ldr	r2, [r7, #4]
 800c11c:	68b9      	ldr	r1, [r7, #8]
 800c11e:	68f8      	ldr	r0, [r7, #12]
 800c120:	f000 f845 	bl	800c1ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c124:	697b      	ldr	r3, [r7, #20]
	}
 800c126:	4618      	mov	r0, r3
 800c128:	3718      	adds	r7, #24
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b08a      	sub	sp, #40	@ 0x28
 800c132:	af02      	add	r7, sp, #8
 800c134:	60f8      	str	r0, [r7, #12]
 800c136:	60b9      	str	r1, [r7, #8]
 800c138:	607a      	str	r2, [r7, #4]
 800c13a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800c13c:	232c      	movs	r3, #44	@ 0x2c
 800c13e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	2b2c      	cmp	r3, #44	@ 0x2c
 800c144:	d00b      	beq.n	800c15e <xTimerCreateStatic+0x30>
	__asm volatile
 800c146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14a:	f383 8811 	msr	BASEPRI, r3
 800c14e:	f3bf 8f6f 	isb	sy
 800c152:	f3bf 8f4f 	dsb	sy
 800c156:	61bb      	str	r3, [r7, #24]
}
 800c158:	bf00      	nop
 800c15a:	bf00      	nop
 800c15c:	e7fd      	b.n	800c15a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c15e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800c160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c162:	2b00      	cmp	r3, #0
 800c164:	d10b      	bne.n	800c17e <xTimerCreateStatic+0x50>
	__asm volatile
 800c166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c16a:	f383 8811 	msr	BASEPRI, r3
 800c16e:	f3bf 8f6f 	isb	sy
 800c172:	f3bf 8f4f 	dsb	sy
 800c176:	617b      	str	r3, [r7, #20]
}
 800c178:	bf00      	nop
 800c17a:	bf00      	nop
 800c17c:	e7fd      	b.n	800c17a <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800c17e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c180:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800c182:	69fb      	ldr	r3, [r7, #28]
 800c184:	2b00      	cmp	r3, #0
 800c186:	d00d      	beq.n	800c1a4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800c188:	69fb      	ldr	r3, [r7, #28]
 800c18a:	2202      	movs	r2, #2
 800c18c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	9301      	str	r3, [sp, #4]
 800c194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	68b9      	ldr	r1, [r7, #8]
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f000 f805 	bl	800c1ae <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800c1a4:	69fb      	ldr	r3, [r7, #28]
	}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3720      	adds	r7, #32
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b086      	sub	sp, #24
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	607a      	str	r2, [r7, #4]
 800c1ba:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d10b      	bne.n	800c1da <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800c1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	617b      	str	r3, [r7, #20]
}
 800c1d4:	bf00      	nop
 800c1d6:	bf00      	nop
 800c1d8:	e7fd      	b.n	800c1d6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800c1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d01e      	beq.n	800c21e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800c1e0:	f000 faf2 	bl	800c7c8 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e6:	68fa      	ldr	r2, [r7, #12]
 800c1e8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800c1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f8:	6a3a      	ldr	r2, [r7, #32]
 800c1fa:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800c1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1fe:	3304      	adds	r3, #4
 800c200:	4618      	mov	r0, r3
 800c202:	f7fd fe1f 	bl	8009e44 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d008      	beq.n	800c21e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c212:	f043 0304 	orr.w	r3, r3, #4
 800c216:	b2da      	uxtb	r2, r3
 800c218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c21a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800c21e:	bf00      	nop
 800c220:	3718      	adds	r7, #24
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
	...

0800c228 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	@ 0x28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c236:	2300      	movs	r3, #0
 800c238:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <xTimerGenericCommand+0x30>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	623b      	str	r3, [r7, #32]
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c258:	4b19      	ldr	r3, [pc, #100]	@ (800c2c0 <xTimerGenericCommand+0x98>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d02a      	beq.n	800c2b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b05      	cmp	r3, #5
 800c270:	dc18      	bgt.n	800c2a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c272:	f7ff fd0f 	bl	800bc94 <xTaskGetSchedulerState>
 800c276:	4603      	mov	r3, r0
 800c278:	2b02      	cmp	r3, #2
 800c27a:	d109      	bne.n	800c290 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c27c:	4b10      	ldr	r3, [pc, #64]	@ (800c2c0 <xTimerGenericCommand+0x98>)
 800c27e:	6818      	ldr	r0, [r3, #0]
 800c280:	f107 0110 	add.w	r1, r7, #16
 800c284:	2300      	movs	r3, #0
 800c286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c288:	f7fe f824 	bl	800a2d4 <xQueueGenericSend>
 800c28c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c28e:	e012      	b.n	800c2b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c290:	4b0b      	ldr	r3, [pc, #44]	@ (800c2c0 <xTimerGenericCommand+0x98>)
 800c292:	6818      	ldr	r0, [r3, #0]
 800c294:	f107 0110 	add.w	r1, r7, #16
 800c298:	2300      	movs	r3, #0
 800c29a:	2200      	movs	r2, #0
 800c29c:	f7fe f81a 	bl	800a2d4 <xQueueGenericSend>
 800c2a0:	6278      	str	r0, [r7, #36]	@ 0x24
 800c2a2:	e008      	b.n	800c2b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c2a4:	4b06      	ldr	r3, [pc, #24]	@ (800c2c0 <xTimerGenericCommand+0x98>)
 800c2a6:	6818      	ldr	r0, [r3, #0]
 800c2a8:	f107 0110 	add.w	r1, r7, #16
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	f7fe f912 	bl	800a4d8 <xQueueGenericSendFromISR>
 800c2b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3728      	adds	r7, #40	@ 0x28
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	20001070 	.word	0x20001070

0800c2c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b088      	sub	sp, #32
 800c2c8:	af02      	add	r7, sp, #8
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2ce:	4b23      	ldr	r3, [pc, #140]	@ (800c35c <prvProcessExpiredTimer+0x98>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	68db      	ldr	r3, [r3, #12]
 800c2d4:	68db      	ldr	r3, [r3, #12]
 800c2d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2d8:	697b      	ldr	r3, [r7, #20]
 800c2da:	3304      	adds	r3, #4
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7fd fe1b 	bl	8009f18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2e2:	697b      	ldr	r3, [r7, #20]
 800c2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2e8:	f003 0304 	and.w	r3, r3, #4
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d023      	beq.n	800c338 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	699a      	ldr	r2, [r3, #24]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	18d1      	adds	r1, r2, r3
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	683a      	ldr	r2, [r7, #0]
 800c2fc:	6978      	ldr	r0, [r7, #20]
 800c2fe:	f000 f8d5 	bl	800c4ac <prvInsertTimerInActiveList>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	d020      	beq.n	800c34a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c308:	2300      	movs	r3, #0
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	2300      	movs	r3, #0
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	2100      	movs	r1, #0
 800c312:	6978      	ldr	r0, [r7, #20]
 800c314:	f7ff ff88 	bl	800c228 <xTimerGenericCommand>
 800c318:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d114      	bne.n	800c34a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	60fb      	str	r3, [r7, #12]
}
 800c332:	bf00      	nop
 800c334:	bf00      	nop
 800c336:	e7fd      	b.n	800c334 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c33e:	f023 0301 	bic.w	r3, r3, #1
 800c342:	b2da      	uxtb	r2, r3
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	6a1b      	ldr	r3, [r3, #32]
 800c34e:	6978      	ldr	r0, [r7, #20]
 800c350:	4798      	blx	r3
}
 800c352:	bf00      	nop
 800c354:	3718      	adds	r7, #24
 800c356:	46bd      	mov	sp, r7
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20001068 	.word	0x20001068

0800c360 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c368:	f107 0308 	add.w	r3, r7, #8
 800c36c:	4618      	mov	r0, r3
 800c36e:	f000 f859 	bl	800c424 <prvGetNextExpireTime>
 800c372:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	4619      	mov	r1, r3
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f000 f805 	bl	800c388 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c37e:	f000 f8d7 	bl	800c530 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c382:	bf00      	nop
 800c384:	e7f0      	b.n	800c368 <prvTimerTask+0x8>
	...

0800c388 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c388:	b580      	push	{r7, lr}
 800c38a:	b084      	sub	sp, #16
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
 800c390:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c392:	f7ff f899 	bl	800b4c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c396:	f107 0308 	add.w	r3, r7, #8
 800c39a:	4618      	mov	r0, r3
 800c39c:	f000 f866 	bl	800c46c <prvSampleTimeNow>
 800c3a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d130      	bne.n	800c40a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10a      	bne.n	800c3c4 <prvProcessTimerOrBlockTask+0x3c>
 800c3ae:	687a      	ldr	r2, [r7, #4]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d806      	bhi.n	800c3c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c3b6:	f7ff f895 	bl	800b4e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c3ba:	68f9      	ldr	r1, [r7, #12]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f7ff ff81 	bl	800c2c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c3c2:	e024      	b.n	800c40e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d008      	beq.n	800c3dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c3ca:	4b13      	ldr	r3, [pc, #76]	@ (800c418 <prvProcessTimerOrBlockTask+0x90>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d101      	bne.n	800c3d8 <prvProcessTimerOrBlockTask+0x50>
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	e000      	b.n	800c3da <prvProcessTimerOrBlockTask+0x52>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c3dc:	4b0f      	ldr	r3, [pc, #60]	@ (800c41c <prvProcessTimerOrBlockTask+0x94>)
 800c3de:	6818      	ldr	r0, [r3, #0]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	f7fe fdf5 	bl	800afd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c3ee:	f7ff f879 	bl	800b4e4 <xTaskResumeAll>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d10a      	bne.n	800c40e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3f8:	4b09      	ldr	r3, [pc, #36]	@ (800c420 <prvProcessTimerOrBlockTask+0x98>)
 800c3fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3fe:	601a      	str	r2, [r3, #0]
 800c400:	f3bf 8f4f 	dsb	sy
 800c404:	f3bf 8f6f 	isb	sy
}
 800c408:	e001      	b.n	800c40e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c40a:	f7ff f86b 	bl	800b4e4 <xTaskResumeAll>
}
 800c40e:	bf00      	nop
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop
 800c418:	2000106c 	.word	0x2000106c
 800c41c:	20001070 	.word	0x20001070
 800c420:	e000ed04 	.word	0xe000ed04

0800c424 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c42c:	4b0e      	ldr	r3, [pc, #56]	@ (800c468 <prvGetNextExpireTime+0x44>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d101      	bne.n	800c43a <prvGetNextExpireTime+0x16>
 800c436:	2201      	movs	r2, #1
 800c438:	e000      	b.n	800c43c <prvGetNextExpireTime+0x18>
 800c43a:	2200      	movs	r2, #0
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d105      	bne.n	800c454 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c448:	4b07      	ldr	r3, [pc, #28]	@ (800c468 <prvGetNextExpireTime+0x44>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	68db      	ldr	r3, [r3, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	e001      	b.n	800c458 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c454:	2300      	movs	r3, #0
 800c456:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c458:	68fb      	ldr	r3, [r7, #12]
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	3714      	adds	r7, #20
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop
 800c468:	20001068 	.word	0x20001068

0800c46c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c474:	f7ff f8d4 	bl	800b620 <xTaskGetTickCount>
 800c478:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c47a:	4b0b      	ldr	r3, [pc, #44]	@ (800c4a8 <prvSampleTimeNow+0x3c>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	429a      	cmp	r2, r3
 800c482:	d205      	bcs.n	800c490 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c484:	f000 f93a 	bl	800c6fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2201      	movs	r2, #1
 800c48c:	601a      	str	r2, [r3, #0]
 800c48e:	e002      	b.n	800c496 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c496:	4a04      	ldr	r2, [pc, #16]	@ (800c4a8 <prvSampleTimeNow+0x3c>)
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c49c:	68fb      	ldr	r3, [r7, #12]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20001078 	.word	0x20001078

0800c4ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	68ba      	ldr	r2, [r7, #8]
 800c4c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	68fa      	ldr	r2, [r7, #12]
 800c4c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c4ca:	68ba      	ldr	r2, [r7, #8]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d812      	bhi.n	800c4f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4d2:	687a      	ldr	r2, [r7, #4]
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	1ad2      	subs	r2, r2, r3
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	699b      	ldr	r3, [r3, #24]
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d302      	bcc.n	800c4e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	617b      	str	r3, [r7, #20]
 800c4e4:	e01b      	b.n	800c51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c4e6:	4b10      	ldr	r3, [pc, #64]	@ (800c528 <prvInsertTimerInActiveList+0x7c>)
 800c4e8:	681a      	ldr	r2, [r3, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	f7fd fcd8 	bl	8009ea6 <vListInsert>
 800c4f6:	e012      	b.n	800c51e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	d206      	bcs.n	800c50e <prvInsertTimerInActiveList+0x62>
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	429a      	cmp	r2, r3
 800c506:	d302      	bcc.n	800c50e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c508:	2301      	movs	r3, #1
 800c50a:	617b      	str	r3, [r7, #20]
 800c50c:	e007      	b.n	800c51e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c50e:	4b07      	ldr	r3, [pc, #28]	@ (800c52c <prvInsertTimerInActiveList+0x80>)
 800c510:	681a      	ldr	r2, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3304      	adds	r3, #4
 800c516:	4619      	mov	r1, r3
 800c518:	4610      	mov	r0, r2
 800c51a:	f7fd fcc4 	bl	8009ea6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c51e:	697b      	ldr	r3, [r7, #20]
}
 800c520:	4618      	mov	r0, r3
 800c522:	3718      	adds	r7, #24
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}
 800c528:	2000106c 	.word	0x2000106c
 800c52c:	20001068 	.word	0x20001068

0800c530 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08e      	sub	sp, #56	@ 0x38
 800c534:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c536:	e0ce      	b.n	800c6d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	da19      	bge.n	800c572 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c53e:	1d3b      	adds	r3, r7, #4
 800c540:	3304      	adds	r3, #4
 800c542:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c546:	2b00      	cmp	r3, #0
 800c548:	d10b      	bne.n	800c562 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c54a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c54e:	f383 8811 	msr	BASEPRI, r3
 800c552:	f3bf 8f6f 	isb	sy
 800c556:	f3bf 8f4f 	dsb	sy
 800c55a:	61fb      	str	r3, [r7, #28]
}
 800c55c:	bf00      	nop
 800c55e:	bf00      	nop
 800c560:	e7fd      	b.n	800c55e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c568:	6850      	ldr	r0, [r2, #4]
 800c56a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c56c:	6892      	ldr	r2, [r2, #8]
 800c56e:	4611      	mov	r1, r2
 800c570:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	2b00      	cmp	r3, #0
 800c576:	f2c0 80ae 	blt.w	800c6d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	695b      	ldr	r3, [r3, #20]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c588:	3304      	adds	r3, #4
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7fd fcc4 	bl	8009f18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c590:	463b      	mov	r3, r7
 800c592:	4618      	mov	r0, r3
 800c594:	f7ff ff6a 	bl	800c46c <prvSampleTimeNow>
 800c598:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2b09      	cmp	r3, #9
 800c59e:	f200 8097 	bhi.w	800c6d0 <prvProcessReceivedCommands+0x1a0>
 800c5a2:	a201      	add	r2, pc, #4	@ (adr r2, 800c5a8 <prvProcessReceivedCommands+0x78>)
 800c5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5a8:	0800c5d1 	.word	0x0800c5d1
 800c5ac:	0800c5d1 	.word	0x0800c5d1
 800c5b0:	0800c5d1 	.word	0x0800c5d1
 800c5b4:	0800c647 	.word	0x0800c647
 800c5b8:	0800c65b 	.word	0x0800c65b
 800c5bc:	0800c6a7 	.word	0x0800c6a7
 800c5c0:	0800c5d1 	.word	0x0800c5d1
 800c5c4:	0800c5d1 	.word	0x0800c5d1
 800c5c8:	0800c647 	.word	0x0800c647
 800c5cc:	0800c65b 	.word	0x0800c65b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5d6:	f043 0301 	orr.w	r3, r3, #1
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c5e2:	68ba      	ldr	r2, [r7, #8]
 800c5e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e6:	699b      	ldr	r3, [r3, #24]
 800c5e8:	18d1      	adds	r1, r2, r3
 800c5ea:	68bb      	ldr	r3, [r7, #8]
 800c5ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5f0:	f7ff ff5c 	bl	800c4ac <prvInsertTimerInActiveList>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d06c      	beq.n	800c6d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5fc:	6a1b      	ldr	r3, [r3, #32]
 800c5fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c600:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d061      	beq.n	800c6d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c610:	68ba      	ldr	r2, [r7, #8]
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	441a      	add	r2, r3
 800c618:	2300      	movs	r3, #0
 800c61a:	9300      	str	r3, [sp, #0]
 800c61c:	2300      	movs	r3, #0
 800c61e:	2100      	movs	r1, #0
 800c620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c622:	f7ff fe01 	bl	800c228 <xTimerGenericCommand>
 800c626:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c628:	6a3b      	ldr	r3, [r7, #32]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d152      	bne.n	800c6d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	61bb      	str	r3, [r7, #24]
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c648:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c64c:	f023 0301 	bic.w	r3, r3, #1
 800c650:	b2da      	uxtb	r2, r3
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c658:	e03d      	b.n	800c6d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c65a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c65c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c660:	f043 0301 	orr.w	r3, r3, #1
 800c664:	b2da      	uxtb	r2, r3
 800c666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c668:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c66c:	68ba      	ldr	r2, [r7, #8]
 800c66e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c670:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	2b00      	cmp	r3, #0
 800c678:	d10b      	bne.n	800c692 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c67a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c67e:	f383 8811 	msr	BASEPRI, r3
 800c682:	f3bf 8f6f 	isb	sy
 800c686:	f3bf 8f4f 	dsb	sy
 800c68a:	617b      	str	r3, [r7, #20]
}
 800c68c:	bf00      	nop
 800c68e:	bf00      	nop
 800c690:	e7fd      	b.n	800c68e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c694:	699a      	ldr	r2, [r3, #24]
 800c696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c698:	18d1      	adds	r1, r2, r3
 800c69a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c69c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c69e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6a0:	f7ff ff04 	bl	800c4ac <prvInsertTimerInActiveList>
					break;
 800c6a4:	e017      	b.n	800c6d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c6a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6ac:	f003 0302 	and.w	r3, r3, #2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d103      	bne.n	800c6bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c6b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6b6:	f000 fc07 	bl	800cec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6ba:	e00c      	b.n	800c6d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6c2:	f023 0301 	bic.w	r3, r3, #1
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c6ce:	e002      	b.n	800c6d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c6d0:	bf00      	nop
 800c6d2:	e000      	b.n	800c6d6 <prvProcessReceivedCommands+0x1a6>
					break;
 800c6d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6d6:	4b08      	ldr	r3, [pc, #32]	@ (800c6f8 <prvProcessReceivedCommands+0x1c8>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	1d39      	adds	r1, r7, #4
 800c6dc:	2200      	movs	r2, #0
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f7fe f828 	bl	800a734 <xQueueReceive>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	f47f af26 	bne.w	800c538 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c6ec:	bf00      	nop
 800c6ee:	bf00      	nop
 800c6f0:	3730      	adds	r7, #48	@ 0x30
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}
 800c6f6:	bf00      	nop
 800c6f8:	20001070 	.word	0x20001070

0800c6fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b088      	sub	sp, #32
 800c700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c702:	e049      	b.n	800c798 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c704:	4b2e      	ldr	r3, [pc, #184]	@ (800c7c0 <prvSwitchTimerLists+0xc4>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c70e:	4b2c      	ldr	r3, [pc, #176]	@ (800c7c0 <prvSwitchTimerLists+0xc4>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	68db      	ldr	r3, [r3, #12]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	3304      	adds	r3, #4
 800c71c:	4618      	mov	r0, r3
 800c71e:	f7fd fbfb 	bl	8009f18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6a1b      	ldr	r3, [r3, #32]
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d02f      	beq.n	800c798 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	699b      	ldr	r3, [r3, #24]
 800c73c:	693a      	ldr	r2, [r7, #16]
 800c73e:	4413      	add	r3, r2
 800c740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c742:	68ba      	ldr	r2, [r7, #8]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	429a      	cmp	r2, r3
 800c748:	d90e      	bls.n	800c768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	68ba      	ldr	r2, [r7, #8]
 800c74e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	68fa      	ldr	r2, [r7, #12]
 800c754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c756:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c0 <prvSwitchTimerLists+0xc4>)
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3304      	adds	r3, #4
 800c75e:	4619      	mov	r1, r3
 800c760:	4610      	mov	r0, r2
 800c762:	f7fd fba0 	bl	8009ea6 <vListInsert>
 800c766:	e017      	b.n	800c798 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c768:	2300      	movs	r3, #0
 800c76a:	9300      	str	r3, [sp, #0]
 800c76c:	2300      	movs	r3, #0
 800c76e:	693a      	ldr	r2, [r7, #16]
 800c770:	2100      	movs	r1, #0
 800c772:	68f8      	ldr	r0, [r7, #12]
 800c774:	f7ff fd58 	bl	800c228 <xTimerGenericCommand>
 800c778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10b      	bne.n	800c798 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c784:	f383 8811 	msr	BASEPRI, r3
 800c788:	f3bf 8f6f 	isb	sy
 800c78c:	f3bf 8f4f 	dsb	sy
 800c790:	603b      	str	r3, [r7, #0]
}
 800c792:	bf00      	nop
 800c794:	bf00      	nop
 800c796:	e7fd      	b.n	800c794 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c798:	4b09      	ldr	r3, [pc, #36]	@ (800c7c0 <prvSwitchTimerLists+0xc4>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d1b0      	bne.n	800c704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c7a2:	4b07      	ldr	r3, [pc, #28]	@ (800c7c0 <prvSwitchTimerLists+0xc4>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c7a8:	4b06      	ldr	r3, [pc, #24]	@ (800c7c4 <prvSwitchTimerLists+0xc8>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a04      	ldr	r2, [pc, #16]	@ (800c7c0 <prvSwitchTimerLists+0xc4>)
 800c7ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c7b0:	4a04      	ldr	r2, [pc, #16]	@ (800c7c4 <prvSwitchTimerLists+0xc8>)
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	6013      	str	r3, [r2, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	3718      	adds	r7, #24
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
 800c7be:	bf00      	nop
 800c7c0:	20001068 	.word	0x20001068
 800c7c4:	2000106c 	.word	0x2000106c

0800c7c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c7ce:	f000 f98b 	bl	800cae8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7d2:	4b15      	ldr	r3, [pc, #84]	@ (800c828 <prvCheckForValidListAndQueue+0x60>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d120      	bne.n	800c81c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7da:	4814      	ldr	r0, [pc, #80]	@ (800c82c <prvCheckForValidListAndQueue+0x64>)
 800c7dc:	f7fd fb12 	bl	8009e04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7e0:	4813      	ldr	r0, [pc, #76]	@ (800c830 <prvCheckForValidListAndQueue+0x68>)
 800c7e2:	f7fd fb0f 	bl	8009e04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7e6:	4b13      	ldr	r3, [pc, #76]	@ (800c834 <prvCheckForValidListAndQueue+0x6c>)
 800c7e8:	4a10      	ldr	r2, [pc, #64]	@ (800c82c <prvCheckForValidListAndQueue+0x64>)
 800c7ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7ec:	4b12      	ldr	r3, [pc, #72]	@ (800c838 <prvCheckForValidListAndQueue+0x70>)
 800c7ee:	4a10      	ldr	r2, [pc, #64]	@ (800c830 <prvCheckForValidListAndQueue+0x68>)
 800c7f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	9300      	str	r3, [sp, #0]
 800c7f6:	4b11      	ldr	r3, [pc, #68]	@ (800c83c <prvCheckForValidListAndQueue+0x74>)
 800c7f8:	4a11      	ldr	r2, [pc, #68]	@ (800c840 <prvCheckForValidListAndQueue+0x78>)
 800c7fa:	2110      	movs	r1, #16
 800c7fc:	200a      	movs	r0, #10
 800c7fe:	f7fd fc1f 	bl	800a040 <xQueueGenericCreateStatic>
 800c802:	4603      	mov	r3, r0
 800c804:	4a08      	ldr	r2, [pc, #32]	@ (800c828 <prvCheckForValidListAndQueue+0x60>)
 800c806:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c808:	4b07      	ldr	r3, [pc, #28]	@ (800c828 <prvCheckForValidListAndQueue+0x60>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d005      	beq.n	800c81c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c810:	4b05      	ldr	r3, [pc, #20]	@ (800c828 <prvCheckForValidListAndQueue+0x60>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	490b      	ldr	r1, [pc, #44]	@ (800c844 <prvCheckForValidListAndQueue+0x7c>)
 800c816:	4618      	mov	r0, r3
 800c818:	f7fe fb8a 	bl	800af30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c81c:	f000 f996 	bl	800cb4c <vPortExitCritical>
}
 800c820:	bf00      	nop
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	20001070 	.word	0x20001070
 800c82c:	20001040 	.word	0x20001040
 800c830:	20001054 	.word	0x20001054
 800c834:	20001068 	.word	0x20001068
 800c838:	2000106c 	.word	0x2000106c
 800c83c:	2000111c 	.word	0x2000111c
 800c840:	2000107c 	.word	0x2000107c
 800c844:	0800de38 	.word	0x0800de38

0800c848 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b086      	sub	sp, #24
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d10b      	bne.n	800c872 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	60fb      	str	r3, [r7, #12]
}
 800c86c:	bf00      	nop
 800c86e:	bf00      	nop
 800c870:	e7fd      	b.n	800c86e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800c872:	f000 f939 	bl	800cae8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	69db      	ldr	r3, [r3, #28]
 800c87a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800c87c:	f000 f966 	bl	800cb4c <vPortExitCritical>

	return pvReturn;
 800c880:	693b      	ldr	r3, [r7, #16]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3718      	adds	r7, #24
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}
	...

0800c88c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c88c:	b480      	push	{r7}
 800c88e:	b085      	sub	sp, #20
 800c890:	af00      	add	r7, sp, #0
 800c892:	60f8      	str	r0, [r7, #12]
 800c894:	60b9      	str	r1, [r7, #8]
 800c896:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	3b04      	subs	r3, #4
 800c89c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c8a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	3b04      	subs	r3, #4
 800c8aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	f023 0201 	bic.w	r2, r3, #1
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3b04      	subs	r3, #4
 800c8ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c8bc:	4a0c      	ldr	r2, [pc, #48]	@ (800c8f0 <pxPortInitialiseStack+0x64>)
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	3b14      	subs	r3, #20
 800c8c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3b04      	subs	r3, #4
 800c8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f06f 0202 	mvn.w	r2, #2
 800c8da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	3b20      	subs	r3, #32
 800c8e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	3714      	adds	r7, #20
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr
 800c8f0:	0800c8f5 	.word	0x0800c8f5

0800c8f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b085      	sub	sp, #20
 800c8f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c8fe:	4b13      	ldr	r3, [pc, #76]	@ (800c94c <prvTaskExitError+0x58>)
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c906:	d00b      	beq.n	800c920 <prvTaskExitError+0x2c>
	__asm volatile
 800c908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c90c:	f383 8811 	msr	BASEPRI, r3
 800c910:	f3bf 8f6f 	isb	sy
 800c914:	f3bf 8f4f 	dsb	sy
 800c918:	60fb      	str	r3, [r7, #12]
}
 800c91a:	bf00      	nop
 800c91c:	bf00      	nop
 800c91e:	e7fd      	b.n	800c91c <prvTaskExitError+0x28>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	60bb      	str	r3, [r7, #8]
}
 800c932:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c934:	bf00      	nop
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d0fc      	beq.n	800c936 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c93c:	bf00      	nop
 800c93e:	bf00      	nop
 800c940:	3714      	adds	r7, #20
 800c942:	46bd      	mov	sp, r7
 800c944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c948:	4770      	bx	lr
 800c94a:	bf00      	nop
 800c94c:	20000098 	.word	0x20000098

0800c950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c950:	4b07      	ldr	r3, [pc, #28]	@ (800c970 <pxCurrentTCBConst2>)
 800c952:	6819      	ldr	r1, [r3, #0]
 800c954:	6808      	ldr	r0, [r1, #0]
 800c956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95a:	f380 8809 	msr	PSP, r0
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f04f 0000 	mov.w	r0, #0
 800c966:	f380 8811 	msr	BASEPRI, r0
 800c96a:	4770      	bx	lr
 800c96c:	f3af 8000 	nop.w

0800c970 <pxCurrentTCBConst2>:
 800c970:	20000b40 	.word	0x20000b40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c974:	bf00      	nop
 800c976:	bf00      	nop

0800c978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c978:	4808      	ldr	r0, [pc, #32]	@ (800c99c <prvPortStartFirstTask+0x24>)
 800c97a:	6800      	ldr	r0, [r0, #0]
 800c97c:	6800      	ldr	r0, [r0, #0]
 800c97e:	f380 8808 	msr	MSP, r0
 800c982:	f04f 0000 	mov.w	r0, #0
 800c986:	f380 8814 	msr	CONTROL, r0
 800c98a:	b662      	cpsie	i
 800c98c:	b661      	cpsie	f
 800c98e:	f3bf 8f4f 	dsb	sy
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	df00      	svc	0
 800c998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c99a:	bf00      	nop
 800c99c:	e000ed08 	.word	0xe000ed08

0800c9a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b086      	sub	sp, #24
 800c9a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c9a6:	4b47      	ldr	r3, [pc, #284]	@ (800cac4 <xPortStartScheduler+0x124>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	4a47      	ldr	r2, [pc, #284]	@ (800cac8 <xPortStartScheduler+0x128>)
 800c9ac:	4293      	cmp	r3, r2
 800c9ae:	d10b      	bne.n	800c9c8 <xPortStartScheduler+0x28>
	__asm volatile
 800c9b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9b4:	f383 8811 	msr	BASEPRI, r3
 800c9b8:	f3bf 8f6f 	isb	sy
 800c9bc:	f3bf 8f4f 	dsb	sy
 800c9c0:	613b      	str	r3, [r7, #16]
}
 800c9c2:	bf00      	nop
 800c9c4:	bf00      	nop
 800c9c6:	e7fd      	b.n	800c9c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c9c8:	4b3e      	ldr	r3, [pc, #248]	@ (800cac4 <xPortStartScheduler+0x124>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	4a3f      	ldr	r2, [pc, #252]	@ (800cacc <xPortStartScheduler+0x12c>)
 800c9ce:	4293      	cmp	r3, r2
 800c9d0:	d10b      	bne.n	800c9ea <xPortStartScheduler+0x4a>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	60fb      	str	r3, [r7, #12]
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	e7fd      	b.n	800c9e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c9ea:	4b39      	ldr	r3, [pc, #228]	@ (800cad0 <xPortStartScheduler+0x130>)
 800c9ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	781b      	ldrb	r3, [r3, #0]
 800c9f2:	b2db      	uxtb	r3, r3
 800c9f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	22ff      	movs	r2, #255	@ 0xff
 800c9fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	781b      	ldrb	r3, [r3, #0]
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ca04:	78fb      	ldrb	r3, [r7, #3]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ca0c:	b2da      	uxtb	r2, r3
 800ca0e:	4b31      	ldr	r3, [pc, #196]	@ (800cad4 <xPortStartScheduler+0x134>)
 800ca10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ca12:	4b31      	ldr	r3, [pc, #196]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca14:	2207      	movs	r2, #7
 800ca16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca18:	e009      	b.n	800ca2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800ca1a:	4b2f      	ldr	r3, [pc, #188]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	3b01      	subs	r3, #1
 800ca20:	4a2d      	ldr	r2, [pc, #180]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ca24:	78fb      	ldrb	r3, [r7, #3]
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	005b      	lsls	r3, r3, #1
 800ca2a:	b2db      	uxtb	r3, r3
 800ca2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ca2e:	78fb      	ldrb	r3, [r7, #3]
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca36:	2b80      	cmp	r3, #128	@ 0x80
 800ca38:	d0ef      	beq.n	800ca1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ca3a:	4b27      	ldr	r3, [pc, #156]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f1c3 0307 	rsb	r3, r3, #7
 800ca42:	2b04      	cmp	r3, #4
 800ca44:	d00b      	beq.n	800ca5e <xPortStartScheduler+0xbe>
	__asm volatile
 800ca46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca4a:	f383 8811 	msr	BASEPRI, r3
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	f3bf 8f4f 	dsb	sy
 800ca56:	60bb      	str	r3, [r7, #8]
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	e7fd      	b.n	800ca5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ca5e:	4b1e      	ldr	r3, [pc, #120]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	021b      	lsls	r3, r3, #8
 800ca64:	4a1c      	ldr	r2, [pc, #112]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ca68:	4b1b      	ldr	r3, [pc, #108]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ca70:	4a19      	ldr	r2, [pc, #100]	@ (800cad8 <xPortStartScheduler+0x138>)
 800ca72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ca7c:	4b17      	ldr	r3, [pc, #92]	@ (800cadc <xPortStartScheduler+0x13c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a16      	ldr	r2, [pc, #88]	@ (800cadc <xPortStartScheduler+0x13c>)
 800ca82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ca86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca88:	4b14      	ldr	r3, [pc, #80]	@ (800cadc <xPortStartScheduler+0x13c>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	4a13      	ldr	r2, [pc, #76]	@ (800cadc <xPortStartScheduler+0x13c>)
 800ca8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ca92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca94:	f000 f8da 	bl	800cc4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca98:	4b11      	ldr	r3, [pc, #68]	@ (800cae0 <xPortStartScheduler+0x140>)
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca9e:	f000 f8f9 	bl	800cc94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800caa2:	4b10      	ldr	r3, [pc, #64]	@ (800cae4 <xPortStartScheduler+0x144>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	4a0f      	ldr	r2, [pc, #60]	@ (800cae4 <xPortStartScheduler+0x144>)
 800caa8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800caac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800caae:	f7ff ff63 	bl	800c978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cab2:	f7fe fe7f 	bl	800b7b4 <vTaskSwitchContext>
	prvTaskExitError();
 800cab6:	f7ff ff1d 	bl	800c8f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3718      	adds	r7, #24
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	e000ed00 	.word	0xe000ed00
 800cac8:	410fc271 	.word	0x410fc271
 800cacc:	410fc270 	.word	0x410fc270
 800cad0:	e000e400 	.word	0xe000e400
 800cad4:	2000116c 	.word	0x2000116c
 800cad8:	20001170 	.word	0x20001170
 800cadc:	e000ed20 	.word	0xe000ed20
 800cae0:	20000098 	.word	0x20000098
 800cae4:	e000ef34 	.word	0xe000ef34

0800cae8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	607b      	str	r3, [r7, #4]
}
 800cb00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cb02:	4b10      	ldr	r3, [pc, #64]	@ (800cb44 <vPortEnterCritical+0x5c>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	3301      	adds	r3, #1
 800cb08:	4a0e      	ldr	r2, [pc, #56]	@ (800cb44 <vPortEnterCritical+0x5c>)
 800cb0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cb0c:	4b0d      	ldr	r3, [pc, #52]	@ (800cb44 <vPortEnterCritical+0x5c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d110      	bne.n	800cb36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cb14:	4b0c      	ldr	r3, [pc, #48]	@ (800cb48 <vPortEnterCritical+0x60>)
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d00b      	beq.n	800cb36 <vPortEnterCritical+0x4e>
	__asm volatile
 800cb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb22:	f383 8811 	msr	BASEPRI, r3
 800cb26:	f3bf 8f6f 	isb	sy
 800cb2a:	f3bf 8f4f 	dsb	sy
 800cb2e:	603b      	str	r3, [r7, #0]
}
 800cb30:	bf00      	nop
 800cb32:	bf00      	nop
 800cb34:	e7fd      	b.n	800cb32 <vPortEnterCritical+0x4a>
	}
}
 800cb36:	bf00      	nop
 800cb38:	370c      	adds	r7, #12
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	20000098 	.word	0x20000098
 800cb48:	e000ed04 	.word	0xe000ed04

0800cb4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b083      	sub	sp, #12
 800cb50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cb52:	4b12      	ldr	r3, [pc, #72]	@ (800cb9c <vPortExitCritical+0x50>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10b      	bne.n	800cb72 <vPortExitCritical+0x26>
	__asm volatile
 800cb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5e:	f383 8811 	msr	BASEPRI, r3
 800cb62:	f3bf 8f6f 	isb	sy
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	607b      	str	r3, [r7, #4]
}
 800cb6c:	bf00      	nop
 800cb6e:	bf00      	nop
 800cb70:	e7fd      	b.n	800cb6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cb72:	4b0a      	ldr	r3, [pc, #40]	@ (800cb9c <vPortExitCritical+0x50>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	3b01      	subs	r3, #1
 800cb78:	4a08      	ldr	r2, [pc, #32]	@ (800cb9c <vPortExitCritical+0x50>)
 800cb7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cb7c:	4b07      	ldr	r3, [pc, #28]	@ (800cb9c <vPortExitCritical+0x50>)
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d105      	bne.n	800cb90 <vPortExitCritical+0x44>
 800cb84:	2300      	movs	r3, #0
 800cb86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	f383 8811 	msr	BASEPRI, r3
}
 800cb8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb90:	bf00      	nop
 800cb92:	370c      	adds	r7, #12
 800cb94:	46bd      	mov	sp, r7
 800cb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9a:	4770      	bx	lr
 800cb9c:	20000098 	.word	0x20000098

0800cba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cba0:	f3ef 8009 	mrs	r0, PSP
 800cba4:	f3bf 8f6f 	isb	sy
 800cba8:	4b15      	ldr	r3, [pc, #84]	@ (800cc00 <pxCurrentTCBConst>)
 800cbaa:	681a      	ldr	r2, [r3, #0]
 800cbac:	f01e 0f10 	tst.w	lr, #16
 800cbb0:	bf08      	it	eq
 800cbb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cbb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	6010      	str	r0, [r2, #0]
 800cbbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cbc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cbc4:	f380 8811 	msr	BASEPRI, r0
 800cbc8:	f3bf 8f4f 	dsb	sy
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f7fe fdf0 	bl	800b7b4 <vTaskSwitchContext>
 800cbd4:	f04f 0000 	mov.w	r0, #0
 800cbd8:	f380 8811 	msr	BASEPRI, r0
 800cbdc:	bc09      	pop	{r0, r3}
 800cbde:	6819      	ldr	r1, [r3, #0]
 800cbe0:	6808      	ldr	r0, [r1, #0]
 800cbe2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbe6:	f01e 0f10 	tst.w	lr, #16
 800cbea:	bf08      	it	eq
 800cbec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cbf0:	f380 8809 	msr	PSP, r0
 800cbf4:	f3bf 8f6f 	isb	sy
 800cbf8:	4770      	bx	lr
 800cbfa:	bf00      	nop
 800cbfc:	f3af 8000 	nop.w

0800cc00 <pxCurrentTCBConst>:
 800cc00:	20000b40 	.word	0x20000b40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cc04:	bf00      	nop
 800cc06:	bf00      	nop

0800cc08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b082      	sub	sp, #8
 800cc0c:	af00      	add	r7, sp, #0
	__asm volatile
 800cc0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc12:	f383 8811 	msr	BASEPRI, r3
 800cc16:	f3bf 8f6f 	isb	sy
 800cc1a:	f3bf 8f4f 	dsb	sy
 800cc1e:	607b      	str	r3, [r7, #4]
}
 800cc20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cc22:	f7fe fd0d 	bl	800b640 <xTaskIncrementTick>
 800cc26:	4603      	mov	r3, r0
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d003      	beq.n	800cc34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cc2c:	4b06      	ldr	r3, [pc, #24]	@ (800cc48 <xPortSysTickHandler+0x40>)
 800cc2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc32:	601a      	str	r2, [r3, #0]
 800cc34:	2300      	movs	r3, #0
 800cc36:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	f383 8811 	msr	BASEPRI, r3
}
 800cc3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cc40:	bf00      	nop
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	e000ed04 	.word	0xe000ed04

0800cc4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cc50:	4b0b      	ldr	r3, [pc, #44]	@ (800cc80 <vPortSetupTimerInterrupt+0x34>)
 800cc52:	2200      	movs	r2, #0
 800cc54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cc56:	4b0b      	ldr	r3, [pc, #44]	@ (800cc84 <vPortSetupTimerInterrupt+0x38>)
 800cc58:	2200      	movs	r2, #0
 800cc5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cc5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cc88 <vPortSetupTimerInterrupt+0x3c>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	4a0a      	ldr	r2, [pc, #40]	@ (800cc8c <vPortSetupTimerInterrupt+0x40>)
 800cc62:	fba2 2303 	umull	r2, r3, r2, r3
 800cc66:	099b      	lsrs	r3, r3, #6
 800cc68:	4a09      	ldr	r2, [pc, #36]	@ (800cc90 <vPortSetupTimerInterrupt+0x44>)
 800cc6a:	3b01      	subs	r3, #1
 800cc6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cc6e:	4b04      	ldr	r3, [pc, #16]	@ (800cc80 <vPortSetupTimerInterrupt+0x34>)
 800cc70:	2207      	movs	r2, #7
 800cc72:	601a      	str	r2, [r3, #0]
}
 800cc74:	bf00      	nop
 800cc76:	46bd      	mov	sp, r7
 800cc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7c:	4770      	bx	lr
 800cc7e:	bf00      	nop
 800cc80:	e000e010 	.word	0xe000e010
 800cc84:	e000e018 	.word	0xe000e018
 800cc88:	20000000 	.word	0x20000000
 800cc8c:	10624dd3 	.word	0x10624dd3
 800cc90:	e000e014 	.word	0xe000e014

0800cc94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cca4 <vPortEnableVFP+0x10>
 800cc98:	6801      	ldr	r1, [r0, #0]
 800cc9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cc9e:	6001      	str	r1, [r0, #0]
 800cca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cca2:	bf00      	nop
 800cca4:	e000ed88 	.word	0xe000ed88

0800cca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ccae:	f3ef 8305 	mrs	r3, IPSR
 800ccb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b0f      	cmp	r3, #15
 800ccb8:	d915      	bls.n	800cce6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ccba:	4a18      	ldr	r2, [pc, #96]	@ (800cd1c <vPortValidateInterruptPriority+0x74>)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ccc4:	4b16      	ldr	r3, [pc, #88]	@ (800cd20 <vPortValidateInterruptPriority+0x78>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	7afa      	ldrb	r2, [r7, #11]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d20b      	bcs.n	800cce6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800ccce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccd2:	f383 8811 	msr	BASEPRI, r3
 800ccd6:	f3bf 8f6f 	isb	sy
 800ccda:	f3bf 8f4f 	dsb	sy
 800ccde:	607b      	str	r3, [r7, #4]
}
 800cce0:	bf00      	nop
 800cce2:	bf00      	nop
 800cce4:	e7fd      	b.n	800cce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cce6:	4b0f      	ldr	r3, [pc, #60]	@ (800cd24 <vPortValidateInterruptPriority+0x7c>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800ccee:	4b0e      	ldr	r3, [pc, #56]	@ (800cd28 <vPortValidateInterruptPriority+0x80>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d90b      	bls.n	800cd0e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	603b      	str	r3, [r7, #0]
}
 800cd08:	bf00      	nop
 800cd0a:	bf00      	nop
 800cd0c:	e7fd      	b.n	800cd0a <vPortValidateInterruptPriority+0x62>
	}
 800cd0e:	bf00      	nop
 800cd10:	3714      	adds	r7, #20
 800cd12:	46bd      	mov	sp, r7
 800cd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd18:	4770      	bx	lr
 800cd1a:	bf00      	nop
 800cd1c:	e000e3f0 	.word	0xe000e3f0
 800cd20:	2000116c 	.word	0x2000116c
 800cd24:	e000ed0c 	.word	0xe000ed0c
 800cd28:	20001170 	.word	0x20001170

0800cd2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08a      	sub	sp, #40	@ 0x28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cd34:	2300      	movs	r3, #0
 800cd36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cd38:	f7fe fbc6 	bl	800b4c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cd3c:	4b5c      	ldr	r3, [pc, #368]	@ (800ceb0 <pvPortMalloc+0x184>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d101      	bne.n	800cd48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cd44:	f000 f924 	bl	800cf90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cd48:	4b5a      	ldr	r3, [pc, #360]	@ (800ceb4 <pvPortMalloc+0x188>)
 800cd4a:	681a      	ldr	r2, [r3, #0]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	4013      	ands	r3, r2
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f040 8095 	bne.w	800ce80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d01e      	beq.n	800cd9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cd5c:	2208      	movs	r2, #8
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	4413      	add	r3, r2
 800cd62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f003 0307 	and.w	r3, r3, #7
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d015      	beq.n	800cd9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f023 0307 	bic.w	r3, r3, #7
 800cd74:	3308      	adds	r3, #8
 800cd76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f003 0307 	and.w	r3, r3, #7
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d00b      	beq.n	800cd9a <pvPortMalloc+0x6e>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	617b      	str	r3, [r7, #20]
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	e7fd      	b.n	800cd96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d06f      	beq.n	800ce80 <pvPortMalloc+0x154>
 800cda0:	4b45      	ldr	r3, [pc, #276]	@ (800ceb8 <pvPortMalloc+0x18c>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d86a      	bhi.n	800ce80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cdaa:	4b44      	ldr	r3, [pc, #272]	@ (800cebc <pvPortMalloc+0x190>)
 800cdac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cdae:	4b43      	ldr	r3, [pc, #268]	@ (800cebc <pvPortMalloc+0x190>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdb4:	e004      	b.n	800cdc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	687a      	ldr	r2, [r7, #4]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d903      	bls.n	800cdd2 <pvPortMalloc+0xa6>
 800cdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1f1      	bne.n	800cdb6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cdd2:	4b37      	ldr	r3, [pc, #220]	@ (800ceb0 <pvPortMalloc+0x184>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d051      	beq.n	800ce80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cddc:	6a3b      	ldr	r3, [r7, #32]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2208      	movs	r2, #8
 800cde2:	4413      	add	r3, r2
 800cde4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	685a      	ldr	r2, [r3, #4]
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	1ad2      	subs	r2, r2, r3
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d920      	bls.n	800ce40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cdfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	4413      	add	r3, r2
 800ce04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce06:	69bb      	ldr	r3, [r7, #24]
 800ce08:	f003 0307 	and.w	r3, r3, #7
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <pvPortMalloc+0xfc>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce14:	f383 8811 	msr	BASEPRI, r3
 800ce18:	f3bf 8f6f 	isb	sy
 800ce1c:	f3bf 8f4f 	dsb	sy
 800ce20:	613b      	str	r3, [r7, #16]
}
 800ce22:	bf00      	nop
 800ce24:	bf00      	nop
 800ce26:	e7fd      	b.n	800ce24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ce28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce2a:	685a      	ldr	r2, [r3, #4]
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	1ad2      	subs	r2, r2, r3
 800ce30:	69bb      	ldr	r3, [r7, #24]
 800ce32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ce34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce36:	687a      	ldr	r2, [r7, #4]
 800ce38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ce3a:	69b8      	ldr	r0, [r7, #24]
 800ce3c:	f000 f90a 	bl	800d054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ce40:	4b1d      	ldr	r3, [pc, #116]	@ (800ceb8 <pvPortMalloc+0x18c>)
 800ce42:	681a      	ldr	r2, [r3, #0]
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	4a1b      	ldr	r2, [pc, #108]	@ (800ceb8 <pvPortMalloc+0x18c>)
 800ce4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ce4e:	4b1a      	ldr	r3, [pc, #104]	@ (800ceb8 <pvPortMalloc+0x18c>)
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	4b1b      	ldr	r3, [pc, #108]	@ (800cec0 <pvPortMalloc+0x194>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	d203      	bcs.n	800ce62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ce5a:	4b17      	ldr	r3, [pc, #92]	@ (800ceb8 <pvPortMalloc+0x18c>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	4a18      	ldr	r2, [pc, #96]	@ (800cec0 <pvPortMalloc+0x194>)
 800ce60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ce62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce64:	685a      	ldr	r2, [r3, #4]
 800ce66:	4b13      	ldr	r3, [pc, #76]	@ (800ceb4 <pvPortMalloc+0x188>)
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce72:	2200      	movs	r2, #0
 800ce74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ce76:	4b13      	ldr	r3, [pc, #76]	@ (800cec4 <pvPortMalloc+0x198>)
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	4a11      	ldr	r2, [pc, #68]	@ (800cec4 <pvPortMalloc+0x198>)
 800ce7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ce80:	f7fe fb30 	bl	800b4e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ce84:	69fb      	ldr	r3, [r7, #28]
 800ce86:	f003 0307 	and.w	r3, r3, #7
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d00b      	beq.n	800cea6 <pvPortMalloc+0x17a>
	__asm volatile
 800ce8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce92:	f383 8811 	msr	BASEPRI, r3
 800ce96:	f3bf 8f6f 	isb	sy
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	60fb      	str	r3, [r7, #12]
}
 800cea0:	bf00      	nop
 800cea2:	bf00      	nop
 800cea4:	e7fd      	b.n	800cea2 <pvPortMalloc+0x176>
	return pvReturn;
 800cea6:	69fb      	ldr	r3, [r7, #28]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3728      	adds	r7, #40	@ 0x28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	20004d7c 	.word	0x20004d7c
 800ceb4:	20004d90 	.word	0x20004d90
 800ceb8:	20004d80 	.word	0x20004d80
 800cebc:	20004d74 	.word	0x20004d74
 800cec0:	20004d84 	.word	0x20004d84
 800cec4:	20004d88 	.word	0x20004d88

0800cec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b086      	sub	sp, #24
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d04f      	beq.n	800cf7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ceda:	2308      	movs	r3, #8
 800cedc:	425b      	negs	r3, r3
 800cede:	697a      	ldr	r2, [r7, #20]
 800cee0:	4413      	add	r3, r2
 800cee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cee4:	697b      	ldr	r3, [r7, #20]
 800cee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cee8:	693b      	ldr	r3, [r7, #16]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	4b25      	ldr	r3, [pc, #148]	@ (800cf84 <vPortFree+0xbc>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	4013      	ands	r3, r2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d10b      	bne.n	800cf0e <vPortFree+0x46>
	__asm volatile
 800cef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	60fb      	str	r3, [r7, #12]
}
 800cf08:	bf00      	nop
 800cf0a:	bf00      	nop
 800cf0c:	e7fd      	b.n	800cf0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cf0e:	693b      	ldr	r3, [r7, #16]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d00b      	beq.n	800cf2e <vPortFree+0x66>
	__asm volatile
 800cf16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1a:	f383 8811 	msr	BASEPRI, r3
 800cf1e:	f3bf 8f6f 	isb	sy
 800cf22:	f3bf 8f4f 	dsb	sy
 800cf26:	60bb      	str	r3, [r7, #8]
}
 800cf28:	bf00      	nop
 800cf2a:	bf00      	nop
 800cf2c:	e7fd      	b.n	800cf2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cf2e:	693b      	ldr	r3, [r7, #16]
 800cf30:	685a      	ldr	r2, [r3, #4]
 800cf32:	4b14      	ldr	r3, [pc, #80]	@ (800cf84 <vPortFree+0xbc>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4013      	ands	r3, r2
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d01e      	beq.n	800cf7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d11a      	bne.n	800cf7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	685a      	ldr	r2, [r3, #4]
 800cf48:	4b0e      	ldr	r3, [pc, #56]	@ (800cf84 <vPortFree+0xbc>)
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	43db      	mvns	r3, r3
 800cf4e:	401a      	ands	r2, r3
 800cf50:	693b      	ldr	r3, [r7, #16]
 800cf52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cf54:	f7fe fab8 	bl	800b4c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	4b0a      	ldr	r3, [pc, #40]	@ (800cf88 <vPortFree+0xc0>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4413      	add	r3, r2
 800cf62:	4a09      	ldr	r2, [pc, #36]	@ (800cf88 <vPortFree+0xc0>)
 800cf64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cf66:	6938      	ldr	r0, [r7, #16]
 800cf68:	f000 f874 	bl	800d054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cf6c:	4b07      	ldr	r3, [pc, #28]	@ (800cf8c <vPortFree+0xc4>)
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	3301      	adds	r3, #1
 800cf72:	4a06      	ldr	r2, [pc, #24]	@ (800cf8c <vPortFree+0xc4>)
 800cf74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cf76:	f7fe fab5 	bl	800b4e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cf7a:	bf00      	nop
 800cf7c:	3718      	adds	r7, #24
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}
 800cf82:	bf00      	nop
 800cf84:	20004d90 	.word	0x20004d90
 800cf88:	20004d80 	.word	0x20004d80
 800cf8c:	20004d8c 	.word	0x20004d8c

0800cf90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf90:	b480      	push	{r7}
 800cf92:	b085      	sub	sp, #20
 800cf94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cf9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf9c:	4b27      	ldr	r3, [pc, #156]	@ (800d03c <prvHeapInit+0xac>)
 800cf9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	f003 0307 	and.w	r3, r3, #7
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00c      	beq.n	800cfc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	3307      	adds	r3, #7
 800cfae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	f023 0307 	bic.w	r3, r3, #7
 800cfb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cfb8:	68ba      	ldr	r2, [r7, #8]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	1ad3      	subs	r3, r2, r3
 800cfbe:	4a1f      	ldr	r2, [pc, #124]	@ (800d03c <prvHeapInit+0xac>)
 800cfc0:	4413      	add	r3, r2
 800cfc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cfc8:	4a1d      	ldr	r2, [pc, #116]	@ (800d040 <prvHeapInit+0xb0>)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cfce:	4b1c      	ldr	r3, [pc, #112]	@ (800d040 <prvHeapInit+0xb0>)
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	4413      	add	r3, r2
 800cfda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cfdc:	2208      	movs	r2, #8
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	1a9b      	subs	r3, r3, r2
 800cfe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f023 0307 	bic.w	r3, r3, #7
 800cfea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	4a15      	ldr	r2, [pc, #84]	@ (800d044 <prvHeapInit+0xb4>)
 800cff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cff2:	4b14      	ldr	r3, [pc, #80]	@ (800d044 <prvHeapInit+0xb4>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2200      	movs	r2, #0
 800cff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cffa:	4b12      	ldr	r3, [pc, #72]	@ (800d044 <prvHeapInit+0xb4>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	2200      	movs	r2, #0
 800d000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	1ad2      	subs	r2, r2, r3
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d010:	4b0c      	ldr	r3, [pc, #48]	@ (800d044 <prvHeapInit+0xb4>)
 800d012:	681a      	ldr	r2, [r3, #0]
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	4a0a      	ldr	r2, [pc, #40]	@ (800d048 <prvHeapInit+0xb8>)
 800d01e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	4a09      	ldr	r2, [pc, #36]	@ (800d04c <prvHeapInit+0xbc>)
 800d026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d028:	4b09      	ldr	r3, [pc, #36]	@ (800d050 <prvHeapInit+0xc0>)
 800d02a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d02e:	601a      	str	r2, [r3, #0]
}
 800d030:	bf00      	nop
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr
 800d03c:	20001174 	.word	0x20001174
 800d040:	20004d74 	.word	0x20004d74
 800d044:	20004d7c 	.word	0x20004d7c
 800d048:	20004d84 	.word	0x20004d84
 800d04c:	20004d80 	.word	0x20004d80
 800d050:	20004d90 	.word	0x20004d90

0800d054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d05c:	4b28      	ldr	r3, [pc, #160]	@ (800d100 <prvInsertBlockIntoFreeList+0xac>)
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e002      	b.n	800d068 <prvInsertBlockIntoFreeList+0x14>
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	60fb      	str	r3, [r7, #12]
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	687a      	ldr	r2, [r7, #4]
 800d06e:	429a      	cmp	r2, r3
 800d070:	d8f7      	bhi.n	800d062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	685b      	ldr	r3, [r3, #4]
 800d07a:	68ba      	ldr	r2, [r7, #8]
 800d07c:	4413      	add	r3, r2
 800d07e:	687a      	ldr	r2, [r7, #4]
 800d080:	429a      	cmp	r2, r3
 800d082:	d108      	bne.n	800d096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	685a      	ldr	r2, [r3, #4]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	685b      	ldr	r3, [r3, #4]
 800d08c:	441a      	add	r2, r3
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	685b      	ldr	r3, [r3, #4]
 800d09e:	68ba      	ldr	r2, [r7, #8]
 800d0a0:	441a      	add	r2, r3
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d118      	bne.n	800d0dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681a      	ldr	r2, [r3, #0]
 800d0ae:	4b15      	ldr	r3, [pc, #84]	@ (800d104 <prvInsertBlockIntoFreeList+0xb0>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d00d      	beq.n	800d0d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685a      	ldr	r2, [r3, #4]
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	685b      	ldr	r3, [r3, #4]
 800d0c0:	441a      	add	r2, r3
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	601a      	str	r2, [r3, #0]
 800d0d0:	e008      	b.n	800d0e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d0d2:	4b0c      	ldr	r3, [pc, #48]	@ (800d104 <prvInsertBlockIntoFreeList+0xb0>)
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	601a      	str	r2, [r3, #0]
 800d0da:	e003      	b.n	800d0e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d0e4:	68fa      	ldr	r2, [r7, #12]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	d002      	beq.n	800d0f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	687a      	ldr	r2, [r7, #4]
 800d0f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0f2:	bf00      	nop
 800d0f4:	3714      	adds	r7, #20
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr
 800d0fe:	bf00      	nop
 800d100:	20004d74 	.word	0x20004d74
 800d104:	20004d7c 	.word	0x20004d7c

0800d108 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d10c:	2201      	movs	r2, #1
 800d10e:	4912      	ldr	r1, [pc, #72]	@ (800d158 <MX_USB_DEVICE_Init+0x50>)
 800d110:	4812      	ldr	r0, [pc, #72]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d112:	f7fb f807 	bl	8008124 <USBD_Init>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d11c:	f7f3 ff44 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d120:	490f      	ldr	r1, [pc, #60]	@ (800d160 <MX_USB_DEVICE_Init+0x58>)
 800d122:	480e      	ldr	r0, [pc, #56]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d124:	f7fb f82e 	bl	8008184 <USBD_RegisterClass>
 800d128:	4603      	mov	r3, r0
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d001      	beq.n	800d132 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d12e:	f7f3 ff3b 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d132:	490c      	ldr	r1, [pc, #48]	@ (800d164 <MX_USB_DEVICE_Init+0x5c>)
 800d134:	4809      	ldr	r0, [pc, #36]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d136:	f7fa ff25 	bl	8007f84 <USBD_CDC_RegisterInterface>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d140:	f7f3 ff32 	bl	8000fa8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d144:	4805      	ldr	r0, [pc, #20]	@ (800d15c <MX_USB_DEVICE_Init+0x54>)
 800d146:	f7fb f853 	bl	80081f0 <USBD_Start>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d150:	f7f3 ff2a 	bl	8000fa8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d154:	bf00      	nop
 800d156:	bd80      	pop	{r7, pc}
 800d158:	200000b0 	.word	0x200000b0
 800d15c:	20004d94 	.word	0x20004d94
 800d160:	20000018 	.word	0x20000018
 800d164:	2000009c 	.word	0x2000009c

0800d168 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d16c:	2200      	movs	r2, #0
 800d16e:	4905      	ldr	r1, [pc, #20]	@ (800d184 <CDC_Init_HS+0x1c>)
 800d170:	4805      	ldr	r0, [pc, #20]	@ (800d188 <CDC_Init_HS+0x20>)
 800d172:	f7fa ff21 	bl	8007fb8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d176:	4905      	ldr	r1, [pc, #20]	@ (800d18c <CDC_Init_HS+0x24>)
 800d178:	4803      	ldr	r0, [pc, #12]	@ (800d188 <CDC_Init_HS+0x20>)
 800d17a:	f7fa ff3f 	bl	8007ffc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d17e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d180:	4618      	mov	r0, r3
 800d182:	bd80      	pop	{r7, pc}
 800d184:	20005870 	.word	0x20005870
 800d188:	20004d94 	.word	0x20004d94
 800d18c:	20005070 	.word	0x20005070

0800d190 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d190:	b480      	push	{r7}
 800d192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d194:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d196:	4618      	mov	r0, r3
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	6039      	str	r1, [r7, #0]
 800d1aa:	71fb      	strb	r3, [r7, #7]
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d1b0:	79fb      	ldrb	r3, [r7, #7]
 800d1b2:	2b23      	cmp	r3, #35	@ 0x23
 800d1b4:	d84a      	bhi.n	800d24c <CDC_Control_HS+0xac>
 800d1b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d1bc <CDC_Control_HS+0x1c>)
 800d1b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1bc:	0800d24d 	.word	0x0800d24d
 800d1c0:	0800d24d 	.word	0x0800d24d
 800d1c4:	0800d24d 	.word	0x0800d24d
 800d1c8:	0800d24d 	.word	0x0800d24d
 800d1cc:	0800d24d 	.word	0x0800d24d
 800d1d0:	0800d24d 	.word	0x0800d24d
 800d1d4:	0800d24d 	.word	0x0800d24d
 800d1d8:	0800d24d 	.word	0x0800d24d
 800d1dc:	0800d24d 	.word	0x0800d24d
 800d1e0:	0800d24d 	.word	0x0800d24d
 800d1e4:	0800d24d 	.word	0x0800d24d
 800d1e8:	0800d24d 	.word	0x0800d24d
 800d1ec:	0800d24d 	.word	0x0800d24d
 800d1f0:	0800d24d 	.word	0x0800d24d
 800d1f4:	0800d24d 	.word	0x0800d24d
 800d1f8:	0800d24d 	.word	0x0800d24d
 800d1fc:	0800d24d 	.word	0x0800d24d
 800d200:	0800d24d 	.word	0x0800d24d
 800d204:	0800d24d 	.word	0x0800d24d
 800d208:	0800d24d 	.word	0x0800d24d
 800d20c:	0800d24d 	.word	0x0800d24d
 800d210:	0800d24d 	.word	0x0800d24d
 800d214:	0800d24d 	.word	0x0800d24d
 800d218:	0800d24d 	.word	0x0800d24d
 800d21c:	0800d24d 	.word	0x0800d24d
 800d220:	0800d24d 	.word	0x0800d24d
 800d224:	0800d24d 	.word	0x0800d24d
 800d228:	0800d24d 	.word	0x0800d24d
 800d22c:	0800d24d 	.word	0x0800d24d
 800d230:	0800d24d 	.word	0x0800d24d
 800d234:	0800d24d 	.word	0x0800d24d
 800d238:	0800d24d 	.word	0x0800d24d
 800d23c:	0800d24d 	.word	0x0800d24d
 800d240:	0800d24d 	.word	0x0800d24d
 800d244:	0800d24d 	.word	0x0800d24d
 800d248:	0800d24d 	.word	0x0800d24d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d24c:	bf00      	nop
  }

  return (USBD_OK);
 800d24e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d250:	4618      	mov	r0, r3
 800d252:	370c      	adds	r7, #12
 800d254:	46bd      	mov	sp, r7
 800d256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25a:	4770      	bx	lr

0800d25c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d266:	6879      	ldr	r1, [r7, #4]
 800d268:	4805      	ldr	r0, [pc, #20]	@ (800d280 <CDC_Receive_HS+0x24>)
 800d26a:	f7fa fec7 	bl	8007ffc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d26e:	4804      	ldr	r0, [pc, #16]	@ (800d280 <CDC_Receive_HS+0x24>)
 800d270:	f7fa ff22 	bl	80080b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d274:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d276:	4618      	mov	r0, r3
 800d278:	3708      	adds	r7, #8
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	20004d94 	.word	0x20004d94

0800d284 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d284:	b580      	push	{r7, lr}
 800d286:	b084      	sub	sp, #16
 800d288:	af00      	add	r7, sp, #0
 800d28a:	6078      	str	r0, [r7, #4]
 800d28c:	460b      	mov	r3, r1
 800d28e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d290:	2300      	movs	r3, #0
 800d292:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d294:	4b0d      	ldr	r3, [pc, #52]	@ (800d2cc <CDC_Transmit_HS+0x48>)
 800d296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800d29a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d001      	beq.n	800d2aa <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e00b      	b.n	800d2c2 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d2aa:	887b      	ldrh	r3, [r7, #2]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	6879      	ldr	r1, [r7, #4]
 800d2b0:	4806      	ldr	r0, [pc, #24]	@ (800d2cc <CDC_Transmit_HS+0x48>)
 800d2b2:	f7fa fe81 	bl	8007fb8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d2b6:	4805      	ldr	r0, [pc, #20]	@ (800d2cc <CDC_Transmit_HS+0x48>)
 800d2b8:	f7fa febe 	bl	8008038 <USBD_CDC_TransmitPacket>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d2c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	3710      	adds	r7, #16
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}
 800d2ca:	bf00      	nop
 800d2cc:	20004d94 	.word	0x20004d94

0800d2d0 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	b087      	sub	sp, #28
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	60f8      	str	r0, [r7, #12]
 800d2d8:	60b9      	str	r1, [r7, #8]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d2e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	371c      	adds	r7, #28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr
	...

0800d2f4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	4603      	mov	r3, r0
 800d2fc:	6039      	str	r1, [r7, #0]
 800d2fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d300:	683b      	ldr	r3, [r7, #0]
 800d302:	2212      	movs	r2, #18
 800d304:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d306:	4b03      	ldr	r3, [pc, #12]	@ (800d314 <USBD_HS_DeviceDescriptor+0x20>)
}
 800d308:	4618      	mov	r0, r3
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr
 800d314:	200000cc 	.word	0x200000cc

0800d318 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	6039      	str	r1, [r7, #0]
 800d322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2204      	movs	r2, #4
 800d328:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d32a:	4b03      	ldr	r3, [pc, #12]	@ (800d338 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	370c      	adds	r7, #12
 800d330:	46bd      	mov	sp, r7
 800d332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d336:	4770      	bx	lr
 800d338:	200000e0 	.word	0x200000e0

0800d33c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b082      	sub	sp, #8
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	6039      	str	r1, [r7, #0]
 800d346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d105      	bne.n	800d35a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d34e:	683a      	ldr	r2, [r7, #0]
 800d350:	4907      	ldr	r1, [pc, #28]	@ (800d370 <USBD_HS_ProductStrDescriptor+0x34>)
 800d352:	4808      	ldr	r0, [pc, #32]	@ (800d374 <USBD_HS_ProductStrDescriptor+0x38>)
 800d354:	f7fc f8fc 	bl	8009550 <USBD_GetString>
 800d358:	e004      	b.n	800d364 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d35a:	683a      	ldr	r2, [r7, #0]
 800d35c:	4904      	ldr	r1, [pc, #16]	@ (800d370 <USBD_HS_ProductStrDescriptor+0x34>)
 800d35e:	4805      	ldr	r0, [pc, #20]	@ (800d374 <USBD_HS_ProductStrDescriptor+0x38>)
 800d360:	f7fc f8f6 	bl	8009550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d364:	4b02      	ldr	r3, [pc, #8]	@ (800d370 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d366:	4618      	mov	r0, r3
 800d368:	3708      	adds	r7, #8
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	20006070 	.word	0x20006070
 800d374:	0800de40 	.word	0x0800de40

0800d378 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	4603      	mov	r3, r0
 800d380:	6039      	str	r1, [r7, #0]
 800d382:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d384:	683a      	ldr	r2, [r7, #0]
 800d386:	4904      	ldr	r1, [pc, #16]	@ (800d398 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d388:	4804      	ldr	r0, [pc, #16]	@ (800d39c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d38a:	f7fc f8e1 	bl	8009550 <USBD_GetString>
  return USBD_StrDesc;
 800d38e:	4b02      	ldr	r3, [pc, #8]	@ (800d398 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20006070 	.word	0x20006070
 800d39c:	0800de58 	.word	0x0800de58

0800d3a0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	6039      	str	r1, [r7, #0]
 800d3aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	221a      	movs	r2, #26
 800d3b0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d3b2:	f000 f843 	bl	800d43c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d3b6:	4b02      	ldr	r3, [pc, #8]	@ (800d3c0 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3708      	adds	r7, #8
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	bd80      	pop	{r7, pc}
 800d3c0:	200000e4 	.word	0x200000e4

0800d3c4 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b082      	sub	sp, #8
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	6039      	str	r1, [r7, #0]
 800d3ce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d105      	bne.n	800d3e2 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d3d6:	683a      	ldr	r2, [r7, #0]
 800d3d8:	4907      	ldr	r1, [pc, #28]	@ (800d3f8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d3da:	4808      	ldr	r0, [pc, #32]	@ (800d3fc <USBD_HS_ConfigStrDescriptor+0x38>)
 800d3dc:	f7fc f8b8 	bl	8009550 <USBD_GetString>
 800d3e0:	e004      	b.n	800d3ec <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d3e2:	683a      	ldr	r2, [r7, #0]
 800d3e4:	4904      	ldr	r1, [pc, #16]	@ (800d3f8 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d3e6:	4805      	ldr	r0, [pc, #20]	@ (800d3fc <USBD_HS_ConfigStrDescriptor+0x38>)
 800d3e8:	f7fc f8b2 	bl	8009550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d3ec:	4b02      	ldr	r3, [pc, #8]	@ (800d3f8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	20006070 	.word	0x20006070
 800d3fc:	0800de6c 	.word	0x0800de6c

0800d400 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b082      	sub	sp, #8
 800d404:	af00      	add	r7, sp, #0
 800d406:	4603      	mov	r3, r0
 800d408:	6039      	str	r1, [r7, #0]
 800d40a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d40c:	79fb      	ldrb	r3, [r7, #7]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d105      	bne.n	800d41e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d412:	683a      	ldr	r2, [r7, #0]
 800d414:	4907      	ldr	r1, [pc, #28]	@ (800d434 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d416:	4808      	ldr	r0, [pc, #32]	@ (800d438 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d418:	f7fc f89a 	bl	8009550 <USBD_GetString>
 800d41c:	e004      	b.n	800d428 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	4904      	ldr	r1, [pc, #16]	@ (800d434 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d422:	4805      	ldr	r0, [pc, #20]	@ (800d438 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d424:	f7fc f894 	bl	8009550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d428:	4b02      	ldr	r3, [pc, #8]	@ (800d434 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	3708      	adds	r7, #8
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	20006070 	.word	0x20006070
 800d438:	0800de78 	.word	0x0800de78

0800d43c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d442:	4b0f      	ldr	r3, [pc, #60]	@ (800d480 <Get_SerialNum+0x44>)
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d448:	4b0e      	ldr	r3, [pc, #56]	@ (800d484 <Get_SerialNum+0x48>)
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d44e:	4b0e      	ldr	r3, [pc, #56]	@ (800d488 <Get_SerialNum+0x4c>)
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d454:	68fa      	ldr	r2, [r7, #12]
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4413      	add	r3, r2
 800d45a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d009      	beq.n	800d476 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d462:	2208      	movs	r2, #8
 800d464:	4909      	ldr	r1, [pc, #36]	@ (800d48c <Get_SerialNum+0x50>)
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f000 f814 	bl	800d494 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d46c:	2204      	movs	r2, #4
 800d46e:	4908      	ldr	r1, [pc, #32]	@ (800d490 <Get_SerialNum+0x54>)
 800d470:	68b8      	ldr	r0, [r7, #8]
 800d472:	f000 f80f 	bl	800d494 <IntToUnicode>
  }
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	1fff7a10 	.word	0x1fff7a10
 800d484:	1fff7a14 	.word	0x1fff7a14
 800d488:	1fff7a18 	.word	0x1fff7a18
 800d48c:	200000e6 	.word	0x200000e6
 800d490:	200000f6 	.word	0x200000f6

0800d494 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d494:	b480      	push	{r7}
 800d496:	b087      	sub	sp, #28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	75fb      	strb	r3, [r7, #23]
 800d4aa:	e027      	b.n	800d4fc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	0f1b      	lsrs	r3, r3, #28
 800d4b0:	2b09      	cmp	r3, #9
 800d4b2:	d80b      	bhi.n	800d4cc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	0f1b      	lsrs	r3, r3, #28
 800d4b8:	b2da      	uxtb	r2, r3
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	005b      	lsls	r3, r3, #1
 800d4be:	4619      	mov	r1, r3
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	440b      	add	r3, r1
 800d4c4:	3230      	adds	r2, #48	@ 0x30
 800d4c6:	b2d2      	uxtb	r2, r2
 800d4c8:	701a      	strb	r2, [r3, #0]
 800d4ca:	e00a      	b.n	800d4e2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	0f1b      	lsrs	r3, r3, #28
 800d4d0:	b2da      	uxtb	r2, r3
 800d4d2:	7dfb      	ldrb	r3, [r7, #23]
 800d4d4:	005b      	lsls	r3, r3, #1
 800d4d6:	4619      	mov	r1, r3
 800d4d8:	68bb      	ldr	r3, [r7, #8]
 800d4da:	440b      	add	r3, r1
 800d4dc:	3237      	adds	r2, #55	@ 0x37
 800d4de:	b2d2      	uxtb	r2, r2
 800d4e0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	011b      	lsls	r3, r3, #4
 800d4e6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	68ba      	ldr	r2, [r7, #8]
 800d4f0:	4413      	add	r3, r2
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d4f6:	7dfb      	ldrb	r3, [r7, #23]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	75fb      	strb	r3, [r7, #23]
 800d4fc:	7dfa      	ldrb	r2, [r7, #23]
 800d4fe:	79fb      	ldrb	r3, [r7, #7]
 800d500:	429a      	cmp	r2, r3
 800d502:	d3d3      	bcc.n	800d4ac <IntToUnicode+0x18>
  }
}
 800d504:	bf00      	nop
 800d506:	bf00      	nop
 800d508:	371c      	adds	r7, #28
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr
	...

0800d514 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b08a      	sub	sp, #40	@ 0x28
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d51c:	f107 0314 	add.w	r3, r7, #20
 800d520:	2200      	movs	r2, #0
 800d522:	601a      	str	r2, [r3, #0]
 800d524:	605a      	str	r2, [r3, #4]
 800d526:	609a      	str	r2, [r3, #8]
 800d528:	60da      	str	r2, [r3, #12]
 800d52a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	4a24      	ldr	r2, [pc, #144]	@ (800d5c4 <HAL_PCD_MspInit+0xb0>)
 800d532:	4293      	cmp	r3, r2
 800d534:	d141      	bne.n	800d5ba <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d536:	2300      	movs	r3, #0
 800d538:	613b      	str	r3, [r7, #16]
 800d53a:	4b23      	ldr	r3, [pc, #140]	@ (800d5c8 <HAL_PCD_MspInit+0xb4>)
 800d53c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d53e:	4a22      	ldr	r2, [pc, #136]	@ (800d5c8 <HAL_PCD_MspInit+0xb4>)
 800d540:	f043 0302 	orr.w	r3, r3, #2
 800d544:	6313      	str	r3, [r2, #48]	@ 0x30
 800d546:	4b20      	ldr	r3, [pc, #128]	@ (800d5c8 <HAL_PCD_MspInit+0xb4>)
 800d548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d54a:	f003 0302 	and.w	r3, r3, #2
 800d54e:	613b      	str	r3, [r7, #16]
 800d550:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d552:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800d556:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d558:	2302      	movs	r3, #2
 800d55a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d55c:	2300      	movs	r3, #0
 800d55e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d560:	2300      	movs	r3, #0
 800d562:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d564:	230c      	movs	r3, #12
 800d566:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d568:	f107 0314 	add.w	r3, r7, #20
 800d56c:	4619      	mov	r1, r3
 800d56e:	4817      	ldr	r0, [pc, #92]	@ (800d5cc <HAL_PCD_MspInit+0xb8>)
 800d570:	f7f4 fd08 	bl	8001f84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d574:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d57a:	2300      	movs	r3, #0
 800d57c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d57e:	2300      	movs	r3, #0
 800d580:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d582:	f107 0314 	add.w	r3, r7, #20
 800d586:	4619      	mov	r1, r3
 800d588:	4810      	ldr	r0, [pc, #64]	@ (800d5cc <HAL_PCD_MspInit+0xb8>)
 800d58a:	f7f4 fcfb 	bl	8001f84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d58e:	2300      	movs	r3, #0
 800d590:	60fb      	str	r3, [r7, #12]
 800d592:	4b0d      	ldr	r3, [pc, #52]	@ (800d5c8 <HAL_PCD_MspInit+0xb4>)
 800d594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d596:	4a0c      	ldr	r2, [pc, #48]	@ (800d5c8 <HAL_PCD_MspInit+0xb4>)
 800d598:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d59c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d59e:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c8 <HAL_PCD_MspInit+0xb4>)
 800d5a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d5a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	2105      	movs	r1, #5
 800d5ae:	204d      	movs	r0, #77	@ 0x4d
 800d5b0:	f7f4 fab6 	bl	8001b20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d5b4:	204d      	movs	r0, #77	@ 0x4d
 800d5b6:	f7f4 facf 	bl	8001b58 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d5ba:	bf00      	nop
 800d5bc:	3728      	adds	r7, #40	@ 0x28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}
 800d5c2:	bf00      	nop
 800d5c4:	40040000 	.word	0x40040000
 800d5c8:	40023800 	.word	0x40023800
 800d5cc:	40020400 	.word	0x40020400

0800d5d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	4610      	mov	r0, r2
 800d5e8:	f7fa fe4f 	bl	800828a <USBD_LL_SetupStage>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d606:	78fa      	ldrb	r2, [r7, #3]
 800d608:	6879      	ldr	r1, [r7, #4]
 800d60a:	4613      	mov	r3, r2
 800d60c:	00db      	lsls	r3, r3, #3
 800d60e:	4413      	add	r3, r2
 800d610:	009b      	lsls	r3, r3, #2
 800d612:	440b      	add	r3, r1
 800d614:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d618:	681a      	ldr	r2, [r3, #0]
 800d61a:	78fb      	ldrb	r3, [r7, #3]
 800d61c:	4619      	mov	r1, r3
 800d61e:	f7fa fe89 	bl	8008334 <USBD_LL_DataOutStage>
}
 800d622:	bf00      	nop
 800d624:	3708      	adds	r7, #8
 800d626:	46bd      	mov	sp, r7
 800d628:	bd80      	pop	{r7, pc}

0800d62a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d62a:	b580      	push	{r7, lr}
 800d62c:	b082      	sub	sp, #8
 800d62e:	af00      	add	r7, sp, #0
 800d630:	6078      	str	r0, [r7, #4]
 800d632:	460b      	mov	r3, r1
 800d634:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	6879      	ldr	r1, [r7, #4]
 800d640:	4613      	mov	r3, r2
 800d642:	00db      	lsls	r3, r3, #3
 800d644:	4413      	add	r3, r2
 800d646:	009b      	lsls	r3, r3, #2
 800d648:	440b      	add	r3, r1
 800d64a:	3320      	adds	r3, #32
 800d64c:	681a      	ldr	r2, [r3, #0]
 800d64e:	78fb      	ldrb	r3, [r7, #3]
 800d650:	4619      	mov	r1, r3
 800d652:	f7fa ff22 	bl	800849a <USBD_LL_DataInStage>
}
 800d656:	bf00      	nop
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b082      	sub	sp, #8
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7fb f85c 	bl	800872a <USBD_LL_SOF>
}
 800d672:	bf00      	nop
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}

0800d67a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d67a:	b580      	push	{r7, lr}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d682:	2301      	movs	r3, #1
 800d684:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	79db      	ldrb	r3, [r3, #7]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d102      	bne.n	800d694 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d68e:	2300      	movs	r3, #0
 800d690:	73fb      	strb	r3, [r7, #15]
 800d692:	e008      	b.n	800d6a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	79db      	ldrb	r3, [r3, #7]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d102      	bne.n	800d6a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d69c:	2301      	movs	r3, #1
 800d69e:	73fb      	strb	r3, [r7, #15]
 800d6a0:	e001      	b.n	800d6a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d6a2:	f7f3 fc81 	bl	8000fa8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6ac:	7bfa      	ldrb	r2, [r7, #15]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f7fa fff6 	bl	80086a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7fa ff9e 	bl	80085fe <USBD_LL_Reset>
}
 800d6c2:	bf00      	nop
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b082      	sub	sp, #8
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7fa fff1 	bl	80086c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	687a      	ldr	r2, [r7, #4]
 800d6ec:	6812      	ldr	r2, [r2, #0]
 800d6ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d6f2:	f043 0301 	orr.w	r3, r3, #1
 800d6f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	7adb      	ldrb	r3, [r3, #11]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d005      	beq.n	800d70c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d700:	4b04      	ldr	r3, [pc, #16]	@ (800d714 <HAL_PCD_SuspendCallback+0x48>)
 800d702:	691b      	ldr	r3, [r3, #16]
 800d704:	4a03      	ldr	r2, [pc, #12]	@ (800d714 <HAL_PCD_SuspendCallback+0x48>)
 800d706:	f043 0306 	orr.w	r3, r3, #6
 800d70a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d70c:	bf00      	nop
 800d70e:	3708      	adds	r7, #8
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	e000ed00 	.word	0xe000ed00

0800d718 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b082      	sub	sp, #8
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d726:	4618      	mov	r0, r3
 800d728:	f7fa ffe7 	bl	80086fa <USBD_LL_Resume>
}
 800d72c:	bf00      	nop
 800d72e:	3708      	adds	r7, #8
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b082      	sub	sp, #8
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d746:	78fa      	ldrb	r2, [r7, #3]
 800d748:	4611      	mov	r1, r2
 800d74a:	4618      	mov	r0, r3
 800d74c:	f7fb f83f 	bl	80087ce <USBD_LL_IsoOUTIncomplete>
}
 800d750:	bf00      	nop
 800d752:	3708      	adds	r7, #8
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b082      	sub	sp, #8
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	460b      	mov	r3, r1
 800d762:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d76a:	78fa      	ldrb	r2, [r7, #3]
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7fa fffb 	bl	800876a <USBD_LL_IsoINIncomplete>
}
 800d774:	bf00      	nop
 800d776:	3708      	adds	r7, #8
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}

0800d77c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b082      	sub	sp, #8
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7fb f851 	bl	8008832 <USBD_LL_DevConnected>
}
 800d790:	bf00      	nop
 800d792:	3708      	adds	r7, #8
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}

0800d798 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b082      	sub	sp, #8
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7fb f84e 	bl	8008848 <USBD_LL_DevDisconnected>
}
 800d7ac:	bf00      	nop
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	781b      	ldrb	r3, [r3, #0]
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d140      	bne.n	800d846 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800d7c4:	4a22      	ldr	r2, [pc, #136]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	4a20      	ldr	r2, [pc, #128]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d7d4:	4b1e      	ldr	r3, [pc, #120]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7d6:	4a1f      	ldr	r2, [pc, #124]	@ (800d854 <USBD_LL_Init+0xa0>)
 800d7d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800d7da:	4b1d      	ldr	r3, [pc, #116]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7dc:	2206      	movs	r2, #6
 800d7de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800d7e0:	4b1b      	ldr	r3, [pc, #108]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7e2:	2202      	movs	r2, #2
 800d7e4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d7e6:	4b1a      	ldr	r3, [pc, #104]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d7ec:	4b18      	ldr	r3, [pc, #96]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d7f2:	4b17      	ldr	r3, [pc, #92]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d7f8:	4b15      	ldr	r3, [pc, #84]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800d7fe:	4b14      	ldr	r3, [pc, #80]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d800:	2200      	movs	r2, #0
 800d802:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 800d804:	4b12      	ldr	r3, [pc, #72]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d806:	2201      	movs	r2, #1
 800d808:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800d80a:	4b11      	ldr	r3, [pc, #68]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d80c:	2200      	movs	r2, #0
 800d80e:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d810:	4b0f      	ldr	r3, [pc, #60]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d812:	2200      	movs	r2, #0
 800d814:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800d816:	480e      	ldr	r0, [pc, #56]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d818:	f7f5 fad3 	bl	8002dc2 <HAL_PCD_Init>
 800d81c:	4603      	mov	r3, r0
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d001      	beq.n	800d826 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d822:	f7f3 fbc1 	bl	8000fa8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800d826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800d82a:	4809      	ldr	r0, [pc, #36]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d82c:	f7f6 fcff 	bl	800422e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800d830:	2280      	movs	r2, #128	@ 0x80
 800d832:	2100      	movs	r1, #0
 800d834:	4806      	ldr	r0, [pc, #24]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d836:	f7f6 fcb3 	bl	80041a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800d83a:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 800d83e:	2101      	movs	r1, #1
 800d840:	4803      	ldr	r0, [pc, #12]	@ (800d850 <USBD_LL_Init+0x9c>)
 800d842:	f7f6 fcad 	bl	80041a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d846:	2300      	movs	r3, #0
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}
 800d850:	20006270 	.word	0x20006270
 800d854:	40040000 	.word	0x40040000

0800d858 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b084      	sub	sp, #16
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d860:	2300      	movs	r3, #0
 800d862:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d864:	2300      	movs	r3, #0
 800d866:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d86e:	4618      	mov	r0, r3
 800d870:	f7f5 fbb6 	bl	8002fe0 <HAL_PCD_Start>
 800d874:	4603      	mov	r3, r0
 800d876:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d878:	7bfb      	ldrb	r3, [r7, #15]
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f942 	bl	800db04 <USBD_Get_USB_Status>
 800d880:	4603      	mov	r3, r0
 800d882:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d884:	7bbb      	ldrb	r3, [r7, #14]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b084      	sub	sp, #16
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	4608      	mov	r0, r1
 800d898:	4611      	mov	r1, r2
 800d89a:	461a      	mov	r2, r3
 800d89c:	4603      	mov	r3, r0
 800d89e:	70fb      	strb	r3, [r7, #3]
 800d8a0:	460b      	mov	r3, r1
 800d8a2:	70bb      	strb	r3, [r7, #2]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d8b6:	78bb      	ldrb	r3, [r7, #2]
 800d8b8:	883a      	ldrh	r2, [r7, #0]
 800d8ba:	78f9      	ldrb	r1, [r7, #3]
 800d8bc:	f7f6 f88a 	bl	80039d4 <HAL_PCD_EP_Open>
 800d8c0:	4603      	mov	r3, r0
 800d8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 f91c 	bl	800db04 <USBD_Get_USB_Status>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3710      	adds	r7, #16
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}

0800d8da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d8da:	b580      	push	{r7, lr}
 800d8dc:	b084      	sub	sp, #16
 800d8de:	af00      	add	r7, sp, #0
 800d8e0:	6078      	str	r0, [r7, #4]
 800d8e2:	460b      	mov	r3, r1
 800d8e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d8f4:	78fa      	ldrb	r2, [r7, #3]
 800d8f6:	4611      	mov	r1, r2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7f6 f8d5 	bl	8003aa8 <HAL_PCD_EP_Close>
 800d8fe:	4603      	mov	r3, r0
 800d900:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d902:	7bfb      	ldrb	r3, [r7, #15]
 800d904:	4618      	mov	r0, r3
 800d906:	f000 f8fd 	bl	800db04 <USBD_Get_USB_Status>
 800d90a:	4603      	mov	r3, r0
 800d90c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d90e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d910:	4618      	mov	r0, r3
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}

0800d918 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b084      	sub	sp, #16
 800d91c:	af00      	add	r7, sp, #0
 800d91e:	6078      	str	r0, [r7, #4]
 800d920:	460b      	mov	r3, r1
 800d922:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d928:	2300      	movs	r3, #0
 800d92a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d932:	78fa      	ldrb	r2, [r7, #3]
 800d934:	4611      	mov	r1, r2
 800d936:	4618      	mov	r0, r3
 800d938:	f7f6 f98d 	bl	8003c56 <HAL_PCD_EP_SetStall>
 800d93c:	4603      	mov	r3, r0
 800d93e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d940:	7bfb      	ldrb	r3, [r7, #15]
 800d942:	4618      	mov	r0, r3
 800d944:	f000 f8de 	bl	800db04 <USBD_Get_USB_Status>
 800d948:	4603      	mov	r3, r0
 800d94a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d94c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d94e:	4618      	mov	r0, r3
 800d950:	3710      	adds	r7, #16
 800d952:	46bd      	mov	sp, r7
 800d954:	bd80      	pop	{r7, pc}

0800d956 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d956:	b580      	push	{r7, lr}
 800d958:	b084      	sub	sp, #16
 800d95a:	af00      	add	r7, sp, #0
 800d95c:	6078      	str	r0, [r7, #4]
 800d95e:	460b      	mov	r3, r1
 800d960:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d962:	2300      	movs	r3, #0
 800d964:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d966:	2300      	movs	r3, #0
 800d968:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d970:	78fa      	ldrb	r2, [r7, #3]
 800d972:	4611      	mov	r1, r2
 800d974:	4618      	mov	r0, r3
 800d976:	f7f6 f9d1 	bl	8003d1c <HAL_PCD_EP_ClrStall>
 800d97a:	4603      	mov	r3, r0
 800d97c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d97e:	7bfb      	ldrb	r3, [r7, #15]
 800d980:	4618      	mov	r0, r3
 800d982:	f000 f8bf 	bl	800db04 <USBD_Get_USB_Status>
 800d986:	4603      	mov	r3, r0
 800d988:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d98a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	3710      	adds	r7, #16
 800d990:	46bd      	mov	sp, r7
 800d992:	bd80      	pop	{r7, pc}

0800d994 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	460b      	mov	r3, r1
 800d99e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d9a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d9a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	da0b      	bge.n	800d9c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9b6:	68f9      	ldr	r1, [r7, #12]
 800d9b8:	4613      	mov	r3, r2
 800d9ba:	00db      	lsls	r3, r3, #3
 800d9bc:	4413      	add	r3, r2
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	440b      	add	r3, r1
 800d9c2:	3316      	adds	r3, #22
 800d9c4:	781b      	ldrb	r3, [r3, #0]
 800d9c6:	e00b      	b.n	800d9e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d9c8:	78fb      	ldrb	r3, [r7, #3]
 800d9ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d9ce:	68f9      	ldr	r1, [r7, #12]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	00db      	lsls	r3, r3, #3
 800d9d4:	4413      	add	r3, r2
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	440b      	add	r3, r1
 800d9da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d9de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3714      	adds	r7, #20
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b084      	sub	sp, #16
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800da06:	78fa      	ldrb	r2, [r7, #3]
 800da08:	4611      	mov	r1, r2
 800da0a:	4618      	mov	r0, r3
 800da0c:	f7f5 ffbe 	bl	800398c <HAL_PCD_SetAddress>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	4618      	mov	r0, r3
 800da18:	f000 f874 	bl	800db04 <USBD_Get_USB_Status>
 800da1c:	4603      	mov	r3, r0
 800da1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800da20:	7bbb      	ldrb	r3, [r7, #14]
}
 800da22:	4618      	mov	r0, r3
 800da24:	3710      	adds	r7, #16
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}

0800da2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b086      	sub	sp, #24
 800da2e:	af00      	add	r7, sp, #0
 800da30:	60f8      	str	r0, [r7, #12]
 800da32:	607a      	str	r2, [r7, #4]
 800da34:	603b      	str	r3, [r7, #0]
 800da36:	460b      	mov	r3, r1
 800da38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da3e:	2300      	movs	r3, #0
 800da40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da48:	7af9      	ldrb	r1, [r7, #11]
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	f7f6 f8c8 	bl	8003be2 <HAL_PCD_EP_Transmit>
 800da52:	4603      	mov	r3, r0
 800da54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da56:	7dfb      	ldrb	r3, [r7, #23]
 800da58:	4618      	mov	r0, r3
 800da5a:	f000 f853 	bl	800db04 <USBD_Get_USB_Status>
 800da5e:	4603      	mov	r3, r0
 800da60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800da62:	7dbb      	ldrb	r3, [r7, #22]
}
 800da64:	4618      	mov	r0, r3
 800da66:	3718      	adds	r7, #24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}

0800da6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b086      	sub	sp, #24
 800da70:	af00      	add	r7, sp, #0
 800da72:	60f8      	str	r0, [r7, #12]
 800da74:	607a      	str	r2, [r7, #4]
 800da76:	603b      	str	r3, [r7, #0]
 800da78:	460b      	mov	r3, r1
 800da7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800da7c:	2300      	movs	r3, #0
 800da7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800da80:	2300      	movs	r3, #0
 800da82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800da8a:	7af9      	ldrb	r1, [r7, #11]
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	f7f6 f854 	bl	8003b3c <HAL_PCD_EP_Receive>
 800da94:	4603      	mov	r3, r0
 800da96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800da98:	7dfb      	ldrb	r3, [r7, #23]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f000 f832 	bl	800db04 <USBD_Get_USB_Status>
 800daa0:	4603      	mov	r3, r0
 800daa2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800daa4:	7dbb      	ldrb	r3, [r7, #22]
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3718      	adds	r7, #24
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	6078      	str	r0, [r7, #4]
 800dab6:	460b      	mov	r3, r1
 800dab8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800dac0:	78fa      	ldrb	r2, [r7, #3]
 800dac2:	4611      	mov	r1, r2
 800dac4:	4618      	mov	r0, r3
 800dac6:	f7f6 f874 	bl	8003bb2 <HAL_PCD_EP_GetRxCount>
 800daca:	4603      	mov	r3, r0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	3708      	adds	r7, #8
 800dad0:	46bd      	mov	sp, r7
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b083      	sub	sp, #12
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dadc:	4b03      	ldr	r3, [pc, #12]	@ (800daec <USBD_static_malloc+0x18>)
}
 800dade:	4618      	mov	r0, r3
 800dae0:	370c      	adds	r7, #12
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	20006754 	.word	0x20006754

0800daf0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]

}
 800daf8:	bf00      	nop
 800dafa:	370c      	adds	r7, #12
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr

0800db04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	4603      	mov	r3, r0
 800db0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db0e:	2300      	movs	r3, #0
 800db10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800db12:	79fb      	ldrb	r3, [r7, #7]
 800db14:	2b03      	cmp	r3, #3
 800db16:	d817      	bhi.n	800db48 <USBD_Get_USB_Status+0x44>
 800db18:	a201      	add	r2, pc, #4	@ (adr r2, 800db20 <USBD_Get_USB_Status+0x1c>)
 800db1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1e:	bf00      	nop
 800db20:	0800db31 	.word	0x0800db31
 800db24:	0800db37 	.word	0x0800db37
 800db28:	0800db3d 	.word	0x0800db3d
 800db2c:	0800db43 	.word	0x0800db43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800db30:	2300      	movs	r3, #0
 800db32:	73fb      	strb	r3, [r7, #15]
    break;
 800db34:	e00b      	b.n	800db4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800db36:	2303      	movs	r3, #3
 800db38:	73fb      	strb	r3, [r7, #15]
    break;
 800db3a:	e008      	b.n	800db4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800db3c:	2301      	movs	r3, #1
 800db3e:	73fb      	strb	r3, [r7, #15]
    break;
 800db40:	e005      	b.n	800db4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800db42:	2303      	movs	r3, #3
 800db44:	73fb      	strb	r3, [r7, #15]
    break;
 800db46:	e002      	b.n	800db4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800db48:	2303      	movs	r3, #3
 800db4a:	73fb      	strb	r3, [r7, #15]
    break;
 800db4c:	bf00      	nop
  }
  return usb_status;
 800db4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db50:	4618      	mov	r0, r3
 800db52:	3714      	adds	r7, #20
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <memset>:
 800db5c:	4402      	add	r2, r0
 800db5e:	4603      	mov	r3, r0
 800db60:	4293      	cmp	r3, r2
 800db62:	d100      	bne.n	800db66 <memset+0xa>
 800db64:	4770      	bx	lr
 800db66:	f803 1b01 	strb.w	r1, [r3], #1
 800db6a:	e7f9      	b.n	800db60 <memset+0x4>

0800db6c <__libc_init_array>:
 800db6c:	b570      	push	{r4, r5, r6, lr}
 800db6e:	4d0d      	ldr	r5, [pc, #52]	@ (800dba4 <__libc_init_array+0x38>)
 800db70:	4c0d      	ldr	r4, [pc, #52]	@ (800dba8 <__libc_init_array+0x3c>)
 800db72:	1b64      	subs	r4, r4, r5
 800db74:	10a4      	asrs	r4, r4, #2
 800db76:	2600      	movs	r6, #0
 800db78:	42a6      	cmp	r6, r4
 800db7a:	d109      	bne.n	800db90 <__libc_init_array+0x24>
 800db7c:	4d0b      	ldr	r5, [pc, #44]	@ (800dbac <__libc_init_array+0x40>)
 800db7e:	4c0c      	ldr	r4, [pc, #48]	@ (800dbb0 <__libc_init_array+0x44>)
 800db80:	f000 f826 	bl	800dbd0 <_init>
 800db84:	1b64      	subs	r4, r4, r5
 800db86:	10a4      	asrs	r4, r4, #2
 800db88:	2600      	movs	r6, #0
 800db8a:	42a6      	cmp	r6, r4
 800db8c:	d105      	bne.n	800db9a <__libc_init_array+0x2e>
 800db8e:	bd70      	pop	{r4, r5, r6, pc}
 800db90:	f855 3b04 	ldr.w	r3, [r5], #4
 800db94:	4798      	blx	r3
 800db96:	3601      	adds	r6, #1
 800db98:	e7ee      	b.n	800db78 <__libc_init_array+0xc>
 800db9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800db9e:	4798      	blx	r3
 800dba0:	3601      	adds	r6, #1
 800dba2:	e7f2      	b.n	800db8a <__libc_init_array+0x1e>
 800dba4:	0800df68 	.word	0x0800df68
 800dba8:	0800df68 	.word	0x0800df68
 800dbac:	0800df68 	.word	0x0800df68
 800dbb0:	0800df6c 	.word	0x0800df6c

0800dbb4 <memcpy>:
 800dbb4:	440a      	add	r2, r1
 800dbb6:	4291      	cmp	r1, r2
 800dbb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dbbc:	d100      	bne.n	800dbc0 <memcpy+0xc>
 800dbbe:	4770      	bx	lr
 800dbc0:	b510      	push	{r4, lr}
 800dbc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbca:	4291      	cmp	r1, r2
 800dbcc:	d1f9      	bne.n	800dbc2 <memcpy+0xe>
 800dbce:	bd10      	pop	{r4, pc}

0800dbd0 <_init>:
 800dbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbd2:	bf00      	nop
 800dbd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd6:	bc08      	pop	{r3}
 800dbd8:	469e      	mov	lr, r3
 800dbda:	4770      	bx	lr

0800dbdc <_fini>:
 800dbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbde:	bf00      	nop
 800dbe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbe2:	bc08      	pop	{r3}
 800dbe4:	469e      	mov	lr, r3
 800dbe6:	4770      	bx	lr
